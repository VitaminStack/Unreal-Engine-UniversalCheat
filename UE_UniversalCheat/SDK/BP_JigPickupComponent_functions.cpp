#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JigPickupComponent

#include "Basic.hpp"

#include "BP_JigPickupComponent_classes.hpp"
#include "BP_JigPickupComponent_parameters.hpp"


namespace SDK
{

// Function BP_JigPickupComponent.BP_JigPickupComponent_C.CanInteract?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanBePicked__0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::CanInteract_(bool* CanBePicked__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "CanInteract?");

	Params::BP_JigPickupComponent_C_CanInteract_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanBePicked__0 != nullptr)
		*CanBePicked__0 = Parms.CanBePicked__0;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.CheckDistanceFromActor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::CheckDistanceFromActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "CheckDistanceFromActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.CheckMismatch
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::CheckMismatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "CheckMismatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ExecuteUbergraph_BP_JigPickupComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::ExecuteUbergraph_BP_JigPickupComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ExecuteUbergraph_BP_JigPickupComponent");

	Params::BP_JigPickupComponent_C_ExecuteUbergraph_BP_JigPickupComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindAttachmentActorByContainerIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AMainLocalAttachment_C*       Attachment                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindAttachmentActorByContainerIndex(int32 Index_0, class ABP_AMainLocalAttachment_C** Attachment, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindAttachmentActorByContainerIndex");

	Params::BP_JigPickupComponent_C_FindAttachmentActorByContainerIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = Parms.Attachment;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindAttachmentActorByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_AMainLocalAttachment_C*       Attachment                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindAttachmentActorByType(const struct FGameplayTag& Type, class ABP_AMainLocalAttachment_C** Attachment, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindAttachmentActorByType");

	Params::BP_JigPickupComponent_C_FindAttachmentActorByType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = Parms.Attachment;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindAttachmentActorByTypeArr
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_AMainLocalAttachment_C*>Attachment                                             (Parm, OutParm)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindAttachmentActorByTypeArr(const struct FGameplayTag& Type, TArray<class ABP_AMainLocalAttachment_C*>* Attachment, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindAttachmentActorByTypeArr");

	Params::BP_JigPickupComponent_C_FindAttachmentActorByTypeArr Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = std::move(Parms.Attachment);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindAttachmentByDataAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJigsawItem_DataAsset_C*          DA                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_RepAttachmentInfo             Output                                                 (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindAttachmentByDataAsset(class UJigsawItem_DataAsset_C* DA, struct FS_RepAttachmentInfo* Output, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindAttachmentByDataAsset");

	Params::BP_JigPickupComponent_C_FindAttachmentByDataAsset Parms{};

	Parms.DA = DA;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindAttachmentDataByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FS_RepAttachmentInfo             Output                                                 (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindAttachmentDataByType(const struct FGameplayTag& Type, struct FS_RepAttachmentInfo* Output, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindAttachmentDataByType");

	Params::BP_JigPickupComponent_C_FindAttachmentDataByType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.FindLocalAttachmentByUID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AMainLocalAttachment_C*       Attachment                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::FindLocalAttachmentByUID(const struct FGuid& UID, class ABP_AMainLocalAttachment_C** Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "FindLocalAttachmentByUID");

	Params::BP_JigPickupComponent_C_FindLocalAttachmentByUID Parms{};

	Parms.UID = std::move(UID);

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = Parms.Attachment;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.GetAttachSocketByInContainerIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UJigsawItem_DataAsset_C*          Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   InContainerIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Socket                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::GetAttachSocketByInContainerIndex(class UJigsawItem_DataAsset_C* Info, int32 InContainerIndex, class FName* Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "GetAttachSocketByInContainerIndex");

	Params::BP_JigPickupComponent_C_GetAttachSocketByInContainerIndex Parms{};

	Parms.Info = Info;
	Parms.InContainerIndex = InContainerIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Socket != nullptr)
		*Socket = Parms.Socket;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.GetCapacity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RepCapacity_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::GetCapacity(int32* RepCapacity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "GetCapacity");

	Params::BP_JigPickupComponent_C_GetCapacity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RepCapacity_0 != nullptr)
		*RepCapacity_0 = Parms.RepCapacity_0;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.GetCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::GetCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "GetCount");

	Params::BP_JigPickupComponent_C_GetCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.GetCustomData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Keys                                                   (Parm, OutParm)
// TArray<class FString>                   Values                                                 (Parm, OutParm)

void UBP_JigPickupComponent_C::GetCustomData(TArray<class FString>* Keys, TArray<class FString>* Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "GetCustomData");

	Params::BP_JigPickupComponent_C_GetCustomData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Keys != nullptr)
		*Keys = std::move(Parms.Keys);

	if (Values != nullptr)
		*Values = std::move(Parms.Values);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.GetPickupName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Result                                                 (Parm, OutParm)

void UBP_JigPickupComponent_C::GetPickupName(class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "GetPickupName");

	Params::BP_JigPickupComponent_C_GetPickupName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.LogAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::LogAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "LogAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ModifyDurability
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MinusDurability                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::ModifyDurability(double MinusDurability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ModifyDurability");

	Params::BP_JigPickupComponent_C_ModifyDurability Parms{};

	Parms.MinusDurability = MinusDurability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.OnAttachmentInstalled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            MainUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_RepAttachmentInfo>     Attachments                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_JigPickupComponent_C::OnAttachmentInstalled(const struct FGuid& MainUID, TArray<struct FS_RepAttachmentInfo>& Attachments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "OnAttachmentInstalled");

	Params::BP_JigPickupComponent_C_OnAttachmentInstalled Parms{};

	Parms.MainUID = std::move(MainUID);
	Parms.Attachments = std::move(Attachments);

	UObject::ProcessEvent(Func, &Parms);

	Attachments = std::move(Parms.Attachments);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.OnExecuteInteract
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::OnExecuteInteract(class AActor* Actor, const struct FGameplayTag& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "OnExecuteInteract");

	Params::BP_JigPickupComponent_C_OnExecuteInteract Parms{};

	Parms.Actor = Actor;
	Parms.Option = std::move(Option);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.OnRep_CanBePicked?
// (BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::OnRep_CanBePicked_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "OnRep_CanBePicked?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.OnRep_EnablePhysics?
// (BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::OnRep_EnablePhysics_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "OnRep_EnablePhysics?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.OnRep_RepAttachments
// (BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::OnRep_RepAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "OnRep_RepAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ProcessAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::ProcessAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ProcessAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ProcessStartingItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JigMultiplayer_C*             MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::ProcessStartingItems(class UBP_JigMultiplayer_C* MPComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ProcessStartingItems");

	Params::BP_JigPickupComponent_C_ProcessStartingItems Parms{};

	Parms.MPComp = MPComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_JigPickupComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ReceiveEndPlay");

	Params::BP_JigPickupComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SERVER_UpdateAttachmentState
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGuid>                    UID                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTag                     NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SERVER_UpdateAttachmentState(const TArray<struct FGuid>& UID, const struct FGameplayTag& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SERVER_UpdateAttachmentState");

	Params::BP_JigPickupComponent_C_SERVER_UpdateAttachmentState Parms{};

	Parms.UID = std::move(UID);
	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SetAttachmentsCustomDepth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SetAttachmentsCustomDepth(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SetAttachmentsCustomDepth");

	Params::BP_JigPickupComponent_C_SetAttachmentsCustomDepth Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SetAttachmentState
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGuid>                    UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTag                     NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    PreExecuteClientSide_                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SetAttachmentState(TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool PreExecuteClientSide_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SetAttachmentState");

	Params::BP_JigPickupComponent_C_SetAttachmentState Parms{};

	Parms.UID = std::move(UID);
	Parms.NewState = std::move(NewState);
	Parms.PreExecuteClientSide_ = PreExecuteClientSide_;

	UObject::ProcessEvent(Func, &Parms);

	UID = std::move(Parms.UID);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SetCanInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanInteract                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnablePhysics                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SetCanInteract");

	Params::BP_JigPickupComponent_C_SetCanInteract Parms{};

	Parms.CanInteract = CanInteract;
	Parms.EnablePhysics = EnablePhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SetCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OverrideCount_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SetCount(int32 OverrideCount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SetCount");

	Params::BP_JigPickupComponent_C_SetCount Parms{};

	Parms.OverrideCount_0 = OverrideCount_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.SetInteractDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::SetInteractDistance(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "SetInteractDistance");

	Params::BP_JigPickupComponent_C_SetInteractDistance Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.UpdateAttachmentFromMP
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JigMultiplayer_C*             MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::UpdateAttachmentFromMP(class UBP_JigMultiplayer_C* MPComp, const struct FGuid& ItemUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "UpdateAttachmentFromMP");

	Params::BP_JigPickupComponent_C_UpdateAttachmentFromMP Parms{};

	Parms.MPComp = MPComp;
	Parms.ItemUID = std::move(ItemUID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.UpdateAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::UpdateAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "UpdateAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.UpdateAttachmentStateByUID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGuid>                    UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTag                     NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JigPickupComponent_C::UpdateAttachmentStateByUID(TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "UpdateAttachmentStateByUID");

	Params::BP_JigPickupComponent_C_UpdateAttachmentStateByUID Parms{};

	Parms.UID = std::move(UID);
	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);

	UID = std::move(Parms.UID);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_JigPickupComponent.BP_JigPickupComponent_C.ValidateAttachedActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_JigPickupComponent_C::ValidateAttachedActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JigPickupComponent_C", "ValidateAttachedActor");

	UObject::ProcessEvent(Func, nullptr);
}

}


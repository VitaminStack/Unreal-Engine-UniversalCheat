#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Player

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_Player.BPI_Player_C.CreateNotificationUI
// 0x0038 (0x0038 - 0x0000)
struct BPI_Player_C_CreateNotificationUI final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             Image;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UI_Delay;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_CreateNotificationUI) == 0x000008, "Wrong alignment on BPI_Player_C_CreateNotificationUI");
static_assert(sizeof(BPI_Player_C_CreateNotificationUI) == 0x000038, "Wrong size on BPI_Player_C_CreateNotificationUI");
static_assert(offsetof(BPI_Player_C_CreateNotificationUI, Text) == 0x000000, "Member 'BPI_Player_C_CreateNotificationUI::Text' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_CreateNotificationUI, Image) == 0x000018, "Member 'BPI_Player_C_CreateNotificationUI::Image' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_CreateNotificationUI, Color) == 0x000020, "Member 'BPI_Player_C_CreateNotificationUI::Color' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_CreateNotificationUI, UI_Delay) == 0x000030, "Member 'BPI_Player_C_CreateNotificationUI::UI_Delay' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.GetInGameUI
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_GetInGameUI final
{
public:
	class UBP_Ingame_C*                           UI;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_GetInGameUI) == 0x000008, "Wrong alignment on BPI_Player_C_GetInGameUI");
static_assert(sizeof(BPI_Player_C_GetInGameUI) == 0x000008, "Wrong size on BPI_Player_C_GetInGameUI");
static_assert(offsetof(BPI_Player_C_GetInGameUI, UI) == 0x000000, "Member 'BPI_Player_C_GetInGameUI::UI' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.GetPlayerRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_GetPlayerRef final
{
public:
	class ABP_PlayerCharacter_C*                  Player;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_GetPlayerRef) == 0x000008, "Wrong alignment on BPI_Player_C_GetPlayerRef");
static_assert(sizeof(BPI_Player_C_GetPlayerRef) == 0x000008, "Wrong size on BPI_Player_C_GetPlayerRef");
static_assert(offsetof(BPI_Player_C_GetPlayerRef, Player) == 0x000000, "Member 'BPI_Player_C_GetPlayerRef::Player' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.IsBurning?
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_C_IsBurning_ final
{
public:
	bool                                          Burning_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_IsBurning_) == 0x000001, "Wrong alignment on BPI_Player_C_IsBurning_");
static_assert(sizeof(BPI_Player_C_IsBurning_) == 0x000001, "Wrong size on BPI_Player_C_IsBurning_");
static_assert(offsetof(BPI_Player_C_IsBurning_, Burning_) == 0x000000, "Member 'BPI_Player_C_IsBurning_::Burning_' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.IsGPSEquipped?
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_C_IsGPSEquipped_ final
{
public:
	bool                                          GPS_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_IsGPSEquipped_) == 0x000001, "Wrong alignment on BPI_Player_C_IsGPSEquipped_");
static_assert(sizeof(BPI_Player_C_IsGPSEquipped_) == 0x000001, "Wrong size on BPI_Player_C_IsGPSEquipped_");
static_assert(offsetof(BPI_Player_C_IsGPSEquipped_, GPS_) == 0x000000, "Member 'BPI_Player_C_IsGPSEquipped_::GPS_' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.IsPlayerInVehicle?
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_C_IsPlayerInVehicle_ final
{
public:
	bool                                          InVehicle;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_IsPlayerInVehicle_) == 0x000001, "Wrong alignment on BPI_Player_C_IsPlayerInVehicle_");
static_assert(sizeof(BPI_Player_C_IsPlayerInVehicle_) == 0x000001, "Wrong size on BPI_Player_C_IsPlayerInVehicle_");
static_assert(offsetof(BPI_Player_C_IsPlayerInVehicle_, InVehicle) == 0x000000, "Member 'BPI_Player_C_IsPlayerInVehicle_::InVehicle' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct BPI_Player_C_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Play_Rate;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_PlayMontage) == 0x000008, "Wrong alignment on BPI_Player_C_PlayMontage");
static_assert(sizeof(BPI_Player_C_PlayMontage) == 0x000010, "Wrong size on BPI_Player_C_PlayMontage");
static_assert(offsetof(BPI_Player_C_PlayMontage, Montage) == 0x000000, "Member 'BPI_Player_C_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_PlayMontage, Play_Rate) == 0x000008, "Member 'BPI_Player_C_PlayMontage::Play_Rate' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendHealthToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendHealthToClient final
{
public:
	double                                        NewHealth;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendHealthToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendHealthToClient");
static_assert(sizeof(BPI_Player_C_SendHealthToClient) == 0x000008, "Wrong size on BPI_Player_C_SendHealthToClient");
static_assert(offsetof(BPI_Player_C_SendHealthToClient, NewHealth) == 0x000000, "Member 'BPI_Player_C_SendHealthToClient::NewHealth' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendHungerToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendHungerToClient final
{
public:
	double                                        NewHunger;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendHungerToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendHungerToClient");
static_assert(sizeof(BPI_Player_C_SendHungerToClient) == 0x000008, "Wrong size on BPI_Player_C_SendHungerToClient");
static_assert(offsetof(BPI_Player_C_SendHungerToClient, NewHunger) == 0x000000, "Member 'BPI_Player_C_SendHungerToClient::NewHunger' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendOxygenToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendOxygenToClient final
{
public:
	double                                        NewOxygen;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendOxygenToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendOxygenToClient");
static_assert(sizeof(BPI_Player_C_SendOxygenToClient) == 0x000008, "Wrong size on BPI_Player_C_SendOxygenToClient");
static_assert(offsetof(BPI_Player_C_SendOxygenToClient, NewOxygen) == 0x000000, "Member 'BPI_Player_C_SendOxygenToClient::NewOxygen' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendRadiationToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendRadiationToClient final
{
public:
	double                                        NewRadiation;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendRadiationToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendRadiationToClient");
static_assert(sizeof(BPI_Player_C_SendRadiationToClient) == 0x000008, "Wrong size on BPI_Player_C_SendRadiationToClient");
static_assert(offsetof(BPI_Player_C_SendRadiationToClient, NewRadiation) == 0x000000, "Member 'BPI_Player_C_SendRadiationToClient::NewRadiation' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendStaminaToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendStaminaToClient final
{
public:
	double                                        NewStamina;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendStaminaToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendStaminaToClient");
static_assert(sizeof(BPI_Player_C_SendStaminaToClient) == 0x000008, "Wrong size on BPI_Player_C_SendStaminaToClient");
static_assert(offsetof(BPI_Player_C_SendStaminaToClient, NewStamina) == 0x000000, "Member 'BPI_Player_C_SendStaminaToClient::NewStamina' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SendThirstToClient
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_SendThirstToClient final
{
public:
	double                                        NewThirst;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SendThirstToClient) == 0x000008, "Wrong alignment on BPI_Player_C_SendThirstToClient");
static_assert(sizeof(BPI_Player_C_SendThirstToClient) == 0x000008, "Wrong size on BPI_Player_C_SendThirstToClient");
static_assert(offsetof(BPI_Player_C_SendThirstToClient, NewThirst) == 0x000000, "Member 'BPI_Player_C_SendThirstToClient::NewThirst' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SetBurning
// 0x0010 (0x0010 - 0x0000)
struct BPI_Player_C_SetBurning final
{
public:
	bool                                          Burning;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damage;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SetBurning) == 0x000008, "Wrong alignment on BPI_Player_C_SetBurning");
static_assert(sizeof(BPI_Player_C_SetBurning) == 0x000010, "Wrong size on BPI_Player_C_SetBurning");
static_assert(offsetof(BPI_Player_C_SetBurning, Burning) == 0x000000, "Member 'BPI_Player_C_SetBurning::Burning' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_SetBurning, Damage) == 0x000008, "Member 'BPI_Player_C_SetBurning::Damage' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.SetTraceToWorld
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_C_SetTraceToWorld final
{
public:
	bool                                          Set_;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_SetTraceToWorld) == 0x000001, "Wrong alignment on BPI_Player_C_SetTraceToWorld");
static_assert(sizeof(BPI_Player_C_SetTraceToWorld) == 0x000001, "Wrong size on BPI_Player_C_SetTraceToWorld");
static_assert(offsetof(BPI_Player_C_SetTraceToWorld, Set_) == 0x000000, "Member 'BPI_Player_C_SetTraceToWorld::Set_' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.StopMontage
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_StopMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_StopMontage) == 0x000008, "Wrong alignment on BPI_Player_C_StopMontage");
static_assert(sizeof(BPI_Player_C_StopMontage) == 0x000008, "Wrong size on BPI_Player_C_StopMontage");
static_assert(offsetof(BPI_Player_C_StopMontage, Montage) == 0x000000, "Member 'BPI_Player_C_StopMontage::Montage' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.UpdatePlayerSpeed
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_C_UpdatePlayerSpeed final
{
public:
	double                                        NewSpeed;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_UpdatePlayerSpeed) == 0x000008, "Wrong alignment on BPI_Player_C_UpdatePlayerSpeed");
static_assert(sizeof(BPI_Player_C_UpdatePlayerSpeed) == 0x000008, "Wrong size on BPI_Player_C_UpdatePlayerSpeed");
static_assert(offsetof(BPI_Player_C_UpdatePlayerSpeed, NewSpeed) == 0x000000, "Member 'BPI_Player_C_UpdatePlayerSpeed::NewSpeed' has a wrong offset!");

// Function BPI_Player.BPI_Player_C.VehicleInteraction
// 0x0010 (0x0010 - 0x0000)
struct BPI_Player_C_VehicleInteraction final
{
public:
	bool                                          Enter_;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_VehicleMaster_C*              VehicleRef;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_C_VehicleInteraction) == 0x000008, "Wrong alignment on BPI_Player_C_VehicleInteraction");
static_assert(sizeof(BPI_Player_C_VehicleInteraction) == 0x000010, "Wrong size on BPI_Player_C_VehicleInteraction");
static_assert(offsetof(BPI_Player_C_VehicleInteraction, Enter_) == 0x000000, "Member 'BPI_Player_C_VehicleInteraction::Enter_' has a wrong offset!");
static_assert(offsetof(BPI_Player_C_VehicleInteraction, VehicleRef) == 0x000008, "Member 'BPI_Player_C_VehicleInteraction::VehicleRef' has a wrong offset!");

}


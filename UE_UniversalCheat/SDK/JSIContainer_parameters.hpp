#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSIContainer

#include "Basic.hpp"

#include "DefaultItemInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function JSIContainer.JSIContainer_C.AddItemFromJigRef
// 0x01E0 (0x01E0 - 0x0000)
struct JSIContainer_C_AddItemFromJigRef final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateItem_;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            AddedItemRef;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FromEquipTo;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        FromC;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    HostedSlots;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FVector2D                              ItemVec;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToIndex;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedByThis_Supported_;             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipItemFromJigRef_Added;                // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_EquipItemFromJigRef_EquippedItemRef;      // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_2;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetImageFromInfo_Image;                   // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select_Default;                             // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateImage_Updated;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ResizeSlot_Size;                          // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_153[0x1];                                      // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x015C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes;                  // 0x0180(0x0010)(ReferenceParm)
	bool                                          CallFunc_ClearItemFromArr_Removed;                 // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_Result;                  // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_RotatedVector_;          // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddItemFromJigRef) == 0x000008, "Wrong alignment on JSIContainer_C_AddItemFromJigRef");
static_assert(sizeof(JSIContainer_C_AddItemFromJigRef) == 0x0001E0, "Wrong size on JSIContainer_C_AddItemFromJigRef");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, ItemRef) == 0x000000, "Member 'JSIContainer_C_AddItemFromJigRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, ToSlot) == 0x000008, "Member 'JSIContainer_C_AddItemFromJigRef::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, RotateItem_) == 0x00000C, "Member 'JSIContainer_C_AddItemFromJigRef::RotateItem_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, TryRotated_) == 0x00000D, "Member 'JSIContainer_C_AddItemFromJigRef::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Added) == 0x00000E, "Member 'JSIContainer_C_AddItemFromJigRef::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, AddedItemRef) == 0x000010, "Member 'JSIContainer_C_AddItemFromJigRef::AddedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, FromEquipTo) == 0x000018, "Member 'JSIContainer_C_AddItemFromJigRef::FromEquipTo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, FromC) == 0x000020, "Member 'JSIContainer_C_AddItemFromJigRef::FromC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, HostedSlots) == 0x000028, "Member 'JSIContainer_C_AddItemFromJigRef::HostedSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, ItemVec) == 0x000038, "Member 'JSIContainer_C_AddItemFromJigRef::ItemVec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Rotate_) == 0x000048, "Member 'JSIContainer_C_AddItemFromJigRef::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, ToIndex) == 0x00004C, "Member 'JSIContainer_C_AddItemFromJigRef::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetSlotDim_SlotDimension) == 0x000058, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_BreakVector2D_X) == 0x000068, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_BreakVector2D_Y) == 0x000070, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetJigDA_JigDataAsset) == 0x000078, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_MakeVector2D_ReturnValue) == 0x000080, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetType_Type) == 0x000090, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsSupportedByThis_Supported_) == 0x000099, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsSupportedByThis_Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_EquipItemFromJigRef_Added) == 0x00009A, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_EquipItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_EquipItemFromJigRef_EquippedItemRef) == 0x0000A0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_EquipItemFromJigRef_EquippedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsEquipTo__ReturnValue) == 0x0000A9, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_int_Array_Index_Variable) == 0x0000AC, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable) == 0x0000B0, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable_1) == 0x0000BC, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue_2) == 0x0000BD, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue_3) == 0x0000BE, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsEquipTo__ReturnValue_1) == 0x0000BF, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue_4) == 0x0000C0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000C1, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsEquipTo__ReturnValue_2) == 0x0000C2, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsEquipTo__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C3, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetEmptySlot_SlotIndex) == 0x0000C4, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetEmptySlot_Found_) == 0x0000C8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_BreakVector2D_X_1) == 0x0000D0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_BreakVector2D_Y_1) == 0x0000D8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000E0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetEmptySlot_SlotIndex_1) == 0x0000F4, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetEmptySlot_Found__1) == 0x0000F8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Not_PreBool_ReturnValue) == 0x0000F9, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable_2) == 0x0000FA, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetImageFromInfo_Image) == 0x000100, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetImageFromInfo_Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_isRotated__ReturnValue) == 0x000108, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_IsValid_ReturnValue_5) == 0x000109, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, K2Node_Select_Default) == 0x000110, "Member 'JSIContainer_C_AddItemFromJigRef::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetSlotDim_SlotDimension_1) == 0x000118, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_UpdateImage_Updated) == 0x000128, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_UpdateImage_Updated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_CalculateSize_ReturnValue) == 0x000130, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_ResizeSlot_Size) == 0x000140, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_ResizeSlot_Size' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable_3) == 0x000150, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable_4) == 0x000151, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, K2Node_Select_Default_1) == 0x000152, "Member 'JSIContainer_C_AddItemFromJigRef::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000154, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetColumnRowBySlotIndex_Row) == 0x000158, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Padding) == 0x00015C, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x00016C, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Row) == 0x000170, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Array_Add_ReturnValue) == 0x000174, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_AddChildToOverlay_ReturnValue) == 0x000178, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_GetHostingSlots_Indexes) == 0x000180, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_GetHostingSlots_Indexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_ClearItemFromArr_Removed) == 0x000190, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_ClearItemFromArr_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Array_Get_Item) == 0x000194, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Array_Length_ReturnValue) == 0x000198, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Array_Get_Item_1) == 0x0001A0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001A8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Array_Add_ReturnValue_1) == 0x0001AC, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_FlipSlotDim_Flipped) == 0x0001B0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_CanAddItemToSlot_Result) == 0x0001C0, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_CanAddItemToSlot_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_CanAddItemToSlot_RotatedVector_) == 0x0001C1, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_CanAddItemToSlot_RotatedVector_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001C2, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, K2Node_Select_Default_2) == 0x0001C3, "Member 'JSIContainer_C_AddItemFromJigRef::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, Temp_bool_Variable_5) == 0x0001C4, "Member 'JSIContainer_C_AddItemFromJigRef::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, K2Node_Select_Default_3) == 0x0001C8, "Member 'JSIContainer_C_AddItemFromJigRef::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_BooleanAND_ReturnValue) == 0x0001D8, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddItemFromJigRef, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001D9, "Member 'JSIContainer_C_AddItemFromJigRef::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddMultipleInventoryItems
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_AddMultipleInventoryItems final
{
public:
	TArray<class UJigsawItem_DataAsset_C*>        ItemIDs;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UJigsawItem_DataAsset_C*>        NoTAdded;                                          // 0x0010(0x0010)(Parm, OutParm)
	TArray<class UJigsawItem_DataAsset_C*>        IDNotAdded;                                        // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewInventoryItem_ItemInfo;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Stacked_;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddMultipleInventoryItems) == 0x000008, "Wrong alignment on JSIContainer_C_AddMultipleInventoryItems");
static_assert(sizeof(JSIContainer_C_AddMultipleInventoryItems) == 0x000070, "Wrong size on JSIContainer_C_AddMultipleInventoryItems");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, ItemIDs) == 0x000000, "Member 'JSIContainer_C_AddMultipleInventoryItems::ItemIDs' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, NoTAdded) == 0x000010, "Member 'JSIContainer_C_AddMultipleInventoryItems::NoTAdded' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, IDNotAdded) == 0x000020, "Member 'JSIContainer_C_AddMultipleInventoryItems::IDNotAdded' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, Temp_int_Array_Index_Variable) == 0x000034, "Member 'JSIContainer_C_AddMultipleInventoryItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'JSIContainer_C_AddMultipleInventoryItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_Added) == 0x000048, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_SlotIndex) == 0x00004C, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_ItemInfo) == 0x000050, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x000058, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_Stacked_) == 0x000060, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_Stacked_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewInventoryItem
// 0x0130 (0x0130 - 0x0000)
struct JSIContainer_C_AddNewInventoryItem final
{
public:
	class UJigsawItem_DataAsset_C*                ItemDA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryToStack_;                                       // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerEquippedEvent_;                             // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                ItemInfo;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Stacked_;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewCount;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            AddedItemRef;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondAttempt;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VectorToUse;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InenticalVec;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipItem_Equipped;                       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_EquipItem_SlotItemRef;                    // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxCapacity_MaxCap;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindBestStackingItem_BestStackingItem;    // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindBestStackingItem_FreeSpace;           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindBestStackingItem_CanStackAll;         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetImageFromInfo_Image;                   // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedByThis_Supported_;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckWeightLimit_Result;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped_1;                    // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added;                         // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewItem_AddedToSlot;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewItem_Info;                          // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef;                   // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCapacity_Cap;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue_1;   // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewInventoryItem) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewInventoryItem");
static_assert(sizeof(JSIContainer_C_AddNewInventoryItem) == 0x000130, "Wrong size on JSIContainer_C_AddNewInventoryItem");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ItemDA) == 0x000000, "Member 'JSIContainer_C_AddNewInventoryItem::ItemDA' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Count) == 0x000008, "Member 'JSIContainer_C_AddNewInventoryItem::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ToSlot) == 0x00000C, "Member 'JSIContainer_C_AddNewInventoryItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Rotated_) == 0x000010, "Member 'JSIContainer_C_AddNewInventoryItem::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TryRotated_) == 0x000011, "Member 'JSIContainer_C_AddNewInventoryItem::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TryToStack_) == 0x000012, "Member 'JSIContainer_C_AddNewInventoryItem::TryToStack_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TriggerEquippedEvent_) == 0x000013, "Member 'JSIContainer_C_AddNewInventoryItem::TriggerEquippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Added) == 0x000014, "Member 'JSIContainer_C_AddNewInventoryItem::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, SlotIndex) == 0x000018, "Member 'JSIContainer_C_AddNewInventoryItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ItemInfo) == 0x000020, "Member 'JSIContainer_C_AddNewInventoryItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, SlotItemRef) == 0x000028, "Member 'JSIContainer_C_AddNewInventoryItem::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Stacked_) == 0x000030, "Member 'JSIContainer_C_AddNewInventoryItem::Stacked_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, NewCount) == 0x000034, "Member 'JSIContainer_C_AddNewInventoryItem::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, AddedItemRef) == 0x000038, "Member 'JSIContainer_C_AddNewInventoryItem::AddedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, SecondAttempt) == 0x000040, "Member 'JSIContainer_C_AddNewInventoryItem::SecondAttempt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, VectorToUse) == 0x000048, "Member 'JSIContainer_C_AddNewInventoryItem::VectorToUse' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, InenticalVec) == 0x000058, "Member 'JSIContainer_C_AddNewInventoryItem::InenticalVec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EquipItem_Equipped) == 0x000059, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EquipItem_Equipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EquipItem_SlotItemRef) == 0x000060, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EquipItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetMaxCapacity_MaxCap) == 0x000068, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetMaxCapacity_MaxCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_FindBestStackingItem_BestStackingItem) == 0x000070, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_FindBestStackingItem_BestStackingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_FindBestStackingItem_FreeSpace) == 0x000078, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_FindBestStackingItem_FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_FindBestStackingItem_CanStackAll) == 0x00007C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_FindBestStackingItem_CanStackAll' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_IsValid_ReturnValue) == 0x00007D, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue) == 0x00007E, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetCount_Count) == 0x000080, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_UpdateCount_Count) == 0x000088, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetImageFromInfo_Image) == 0x000090, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetImageFromInfo_Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_FlipSlotDim_Flipped) == 0x000098, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_SelectInt_ReturnValue) == 0x0000AC, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_IsSupportedByThis_Supported_) == 0x0000B8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_IsSupportedByThis_Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_CheckWeightLimit_Result) == 0x0000B9, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_CheckWeightLimit_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_1) == 0x0000BA, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_X) == 0x0000C0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_Y) == 0x0000C8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable) == 0x0000D1, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_FlipSlotDim_Flipped_1) == 0x0000D8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_FlipSlotDim_Flipped_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue) == 0x0000E8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Added) == 0x0000E9, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_AddedToSlot) == 0x0000EC, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Info) == 0x0000F0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_SlotItemRef) == 0x0000F8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_Select_Default) == 0x000100, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x000110, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetCapacity_Cap) == 0x000114, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000118, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_CheckIfCapacityContainer_ReturnValue_1) == 0x00011C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_CheckIfCapacityContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00011D, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_2) == 0x00011E, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_3) == 0x00011F, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_4) == 0x000120, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x000121, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_2) == 0x000122, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_5) == 0x000123, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanOR_ReturnValue) == 0x000124, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_3) == 0x000125, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_6) == 0x000126, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_7) == 0x000127, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_IsEquipTo__ReturnValue) == 0x000128, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_8) == 0x000129, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanOR_ReturnValue_1) == 0x00012A, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_9) == 0x00012B, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewInventoryItem_CustomVector
// 0x00A8 (0x00A8 - 0x0000)
struct JSIContainer_C_AddNewInventoryItem_CustomVector final
{
public:
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                ItemInfo;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetImageFromInfo_Image;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedByThis_Supported_;             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added;                         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewItem_AddedToSlot;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewItem_Info;                          // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef;                   // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewInventoryItem_CustomVector) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewInventoryItem_CustomVector");
static_assert(sizeof(JSIContainer_C_AddNewInventoryItem_CustomVector) == 0x0000A8, "Wrong size on JSIContainer_C_AddNewInventoryItem_CustomVector");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ItemId) == 0x000000, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Count) == 0x000008, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ToSlot) == 0x00000C, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Added) == 0x000010, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, SlotIndex) == 0x000014, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ItemInfo) == 0x000018, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, SlotItemRef) == 0x000020, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_BreakVector2D_X) == 0x000028, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_GetImageFromInfo_Image) == 0x000048, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_GetImageFromInfo_Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Temp_bool_Variable) == 0x000050, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_IsSupportedByThis_Supported_) == 0x000051, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_IsSupportedByThis_Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, K2Node_Select_Default) == 0x000058, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_CalculateSizeCustom_ReturnValue) == 0x000068, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_IsEquipTo__ReturnValue) == 0x000078, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_Array_Get_Item) == 0x000080, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_SelectInt_ReturnValue) == 0x00008C, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_Added) == 0x000090, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_AddedToSlot) == 0x000094, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_Info) == 0x000098, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_SlotItemRef) == 0x0000A0, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_SlotItemRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewItem
// 0x01C0 (0x01C0 - 0x0000)
struct JSIContainer_C_AddNewItem final
{
public:
	int32                                         ToSlot;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Image;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotVector;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Rarity;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                ItemInfo;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SetVector;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddedToSlot;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          isDesiredSlot_;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddToSlot;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlotInvalid_;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowIndex;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                NewSlotPadding;                                    // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            NewItem;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    ArrayOfItemFound;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef;                  // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewItem) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewItem");
static_assert(sizeof(JSIContainer_C_AddNewItem) == 0x0001C0, "Wrong size on JSIContainer_C_AddNewItem");
static_assert(offsetof(JSIContainer_C_AddNewItem, ToSlot) == 0x000000, "Member 'JSIContainer_C_AddNewItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Image) == 0x000008, "Member 'JSIContainer_C_AddNewItem::Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotVector) == 0x000010, "Member 'JSIContainer_C_AddNewItem::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Rarity) == 0x000020, "Member 'JSIContainer_C_AddNewItem::Rarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ItemInfo) == 0x000028, "Member 'JSIContainer_C_AddNewItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SetVector) == 0x000030, "Member 'JSIContainer_C_AddNewItem::SetVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Count) == 0x000034, "Member 'JSIContainer_C_AddNewItem::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Added) == 0x000038, "Member 'JSIContainer_C_AddNewItem::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, AddedToSlot) == 0x00003C, "Member 'JSIContainer_C_AddNewItem::AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Info) == 0x000040, "Member 'JSIContainer_C_AddNewItem::Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotItemRef) == 0x000048, "Member 'JSIContainer_C_AddNewItem::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, isDesiredSlot_) == 0x000050, "Member 'JSIContainer_C_AddNewItem::isDesiredSlot_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, AddToSlot) == 0x000054, "Member 'JSIContainer_C_AddNewItem::AddToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotInvalid_) == 0x000058, "Member 'JSIContainer_C_AddNewItem::SlotInvalid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, RowIndex) == 0x00005C, "Member 'JSIContainer_C_AddNewItem::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ColumnIndex) == 0x000060, "Member 'JSIContainer_C_AddNewItem::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, NewSlotPadding) == 0x000064, "Member 'JSIContainer_C_AddNewItem::NewSlotPadding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, NewItem) == 0x000078, "Member 'JSIContainer_C_AddNewItem::NewItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ArrayOfItemFound) == 0x000080, "Member 'JSIContainer_C_AddNewItem::ArrayOfItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ItemFound) == 0x000090, "Member 'JSIContainer_C_AddNewItem::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'JSIContainer_C_AddNewItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'JSIContainer_C_AddNewItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_bool_Variable) == 0x0000A4, "Member 'JSIContainer_C_AddNewItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue) == 0x0000A5, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A6, "Member 'JSIContainer_C_AddNewItem::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Variable) == 0x0000A8, "Member 'JSIContainer_C_AddNewItem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_AddNewItem::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Create_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_bool_Variable_1) == 0x0000C0, "Member 'JSIContainer_C_AddNewItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C1, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X) == 0x0000C8, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y) == 0x0000D0, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue) == 0x0000E0, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E4, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_1) == 0x0000EC, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_CalculateSize_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_AddNewItem::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Add_ReturnValue) == 0x000100, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue_2) == 0x000104, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue) == 0x000105, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_1) == 0x000106, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetEmptySlot_SlotIndex) == 0x000108, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetEmptySlot_Found_) == 0x00010C, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Less_IntInt_ReturnValue) == 0x00010D, "Member 'JSIContainer_C_AddNewItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_3) == 0x000110, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Padding) == 0x000114, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x000124, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Row) == 0x000128, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_IsEmptySlot_isEmpty) == 0x00012C, "Member 'JSIContainer_C_AddNewItem::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_IsValid_ReturnValue) == 0x00012D, "Member 'JSIContainer_C_AddNewItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Variable_1) == 0x000130, "Member 'JSIContainer_C_AddNewItem::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_4) == 0x000134, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000140, "Member 'JSIContainer_C_AddNewItem::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FindSlotByIndex_SlotRef) == 0x000148, "Member 'JSIContainer_C_AddNewItem::CallFunc_FindSlotByIndex_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Length_ReturnValue) == 0x000150, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000154, "Member 'JSIContainer_C_AddNewItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_5) == 0x000158, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_AddChildToOverlay_ReturnValue) == 0x000160, "Member 'JSIContainer_C_AddNewItem::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_6) == 0x000168, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00016C, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_2) == 0x00016D, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Add_ReturnValue_1) == 0x000170, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X_1) == 0x000178, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y_1) == 0x000180, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_2) == 0x000188, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X_2) == 0x000190, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y_2) == 0x000198, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001A0, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_3) == 0x0001A4, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0001A8, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001AC, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_3) == 0x0001B0, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0001B1, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_4) == 0x0001B2, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Length_ReturnValue_1) == 0x0001B4, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0001B8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0001BC, "Member 'JSIContainer_C_AddNewItem::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddSortHighlightedTypes
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_AddSortHighlightedTypes final
{
public:
	struct FGameplayTagContainer                  Types;                                             // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSIContainer_C_AddSortHighlightedTypes) == 0x000008, "Wrong alignment on JSIContainer_C_AddSortHighlightedTypes");
static_assert(sizeof(JSIContainer_C_AddSortHighlightedTypes) == 0x000020, "Wrong size on JSIContainer_C_AddSortHighlightedTypes");
static_assert(offsetof(JSIContainer_C_AddSortHighlightedTypes, Types) == 0x000000, "Member 'JSIContainer_C_AddSortHighlightedTypes::Types' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AdjustFromXY
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_AdjustFromXY final
{
public:
	struct FVector2D                              ItemVe;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AdjustFromXY) == 0x000008, "Wrong alignment on JSIContainer_C_AdjustFromXY");
static_assert(sizeof(JSIContainer_C_AdjustFromXY) == 0x000050, "Wrong size on JSIContainer_C_AdjustFromXY");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, ItemVe) == 0x000000, "Member 'JSIContainer_C_AdjustFromXY::ItemVe' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_BreakVector2D_X) == 0x000010, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_FTrunc_ReturnValue) == 0x000030, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_FTrunc_ReturnValue_1) == 0x000034, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000040, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AdjustFromXY, CallFunc_Less_IntInt_ReturnValue_1) == 0x00004E, "Member 'JSIContainer_C_AdjustFromXY::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateSize
// 0x00C0 (0x00C0 - 0x0000)
struct JSIContainer_C_CalculateSize final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateSize) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateSize");
static_assert(sizeof(JSIContainer_C_CalculateSize) == 0x0000C0, "Wrong size on JSIContainer_C_CalculateSize");
static_assert(offsetof(JSIContainer_C_CalculateSize, SlotVector) == 0x000000, "Member 'JSIContainer_C_CalculateSize::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, ReturnValue) == 0x000010, "Member 'JSIContainer_C_CalculateSize::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_X) == 0x000020, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CalculateSize::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'JSIContainer_C_CalculateSize::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_X_1) == 0x000058, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_Y_1) == 0x000060, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000070, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000078, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000080, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000088, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_MakeVector2D_ReturnValue) == 0x000090, "Member 'JSIContainer_C_CalculateSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000A0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000A8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000B0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000B8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateSizeCustom
// 0x00D0 (0x00D0 - 0x0000)
struct JSIContainer_C_CalculateSizeCustom final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CSlotSize;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateSizeCustom) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateSizeCustom");
static_assert(sizeof(JSIContainer_C_CalculateSizeCustom) == 0x0000D0, "Wrong size on JSIContainer_C_CalculateSizeCustom");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, SlotVector) == 0x000000, "Member 'JSIContainer_C_CalculateSizeCustom::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CSlotSize) == 0x000010, "Member 'JSIContainer_C_CalculateSizeCustom::CSlotSize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, ReturnValue) == 0x000020, "Member 'JSIContainer_C_CalculateSizeCustom::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_X) == 0x000030, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_X_1) == 0x000040, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_Y_1) == 0x000048, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000078, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000090, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000098, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_MakeVector2D_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000B8, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000C0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000C8, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateWeight
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_CalculateWeight final
{
public:
	double                                        Weight;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalWeight;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateWeight) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateWeight");
static_assert(sizeof(JSIContainer_C_CalculateWeight) == 0x000050, "Wrong size on JSIContainer_C_CalculateWeight");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Weight) == 0x000000, "Member 'JSIContainer_C_CalculateWeight::Weight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, TotalWeight) == 0x000008, "Member 'JSIContainer_C_CalculateWeight::TotalWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_CalculateWeight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_CalculateWeight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_GetWeight_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CalculateWeight::CallFunc_GetWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_GetCount_Count) == 0x00003C, "Member 'JSIContainer_C_CalculateWeight::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Call_ContainerOnContainer
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_Call_ContainerOnContainer final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ToSlotRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DragRotated_;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Call_ContainerOnContainer) == 0x000008, "Wrong alignment on JSIContainer_C_Call_ContainerOnContainer");
static_assert(sizeof(JSIContainer_C_Call_ContainerOnContainer) == 0x000028, "Wrong size on JSIContainer_C_Call_ContainerOnContainer");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, FromContainer) == 0x000000, "Member 'JSIContainer_C_Call_ContainerOnContainer::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, ToContainer) == 0x000008, "Member 'JSIContainer_C_Call_ContainerOnContainer::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, SlotRef) == 0x000010, "Member 'JSIContainer_C_Call_ContainerOnContainer::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, ToSlotRef) == 0x000018, "Member 'JSIContainer_C_Call_ContainerOnContainer::ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, ToSlot) == 0x000020, "Member 'JSIContainer_C_Call_ContainerOnContainer::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, DragRotated_) == 0x000024, "Member 'JSIContainer_C_Call_ContainerOnContainer::DragRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_ContainerOnContainer, TryRotated_) == 0x000025, "Member 'JSIContainer_C_Call_ContainerOnContainer::TryRotated_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanAddItemToSlot
// 0x00C8 (0x00C8 - 0x0000)
struct JSIContainer_C_CanAddItemToSlot final
{
public:
	int32                                         ToSlot;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotatedVector_;                                    // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllGood_;                                          // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes;                  // 0x0030(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes_1;                // 0x0068(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanAddItemToSlot) == 0x000008, "Wrong alignment on JSIContainer_C_CanAddItemToSlot");
static_assert(sizeof(JSIContainer_C_CanAddItemToSlot) == 0x0000C8, "Wrong size on JSIContainer_C_CanAddItemToSlot");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, ToSlot) == 0x000000, "Member 'JSIContainer_C_CanAddItemToSlot::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, ItemVector) == 0x000008, "Member 'JSIContainer_C_CanAddItemToSlot::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, TryRotated_) == 0x000018, "Member 'JSIContainer_C_CanAddItemToSlot::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Result) == 0x000019, "Member 'JSIContainer_C_CanAddItemToSlot::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, RotatedVector_) == 0x00001A, "Member 'JSIContainer_C_CanAddItemToSlot::RotatedVector_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, AllGood_) == 0x00001B, "Member 'JSIContainer_C_CanAddItemToSlot::AllGood_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_BreakVector2D_X) == 0x000020, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_GetHostingSlots_Indexes) == 0x000030, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_GetHostingSlots_Indexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_MakeVector2D_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_GetHostingSlots_Indexes_1) == 0x000068, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_GetHostingSlots_Indexes_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'JSIContainer_C_CanAddItemToSlot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Length_ReturnValue_2) == 0x00007C, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Temp_bool_True_if_break_was_hit_Variable) == 0x000088, "Member 'JSIContainer_C_CanAddItemToSlot::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'JSIContainer_C_CanAddItemToSlot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Get_Item) == 0x000090, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000094, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_BooleanAND_ReturnValue_1) == 0x000095, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Temp_int_Array_Index_Variable_1) == 0x000098, "Member 'JSIContainer_C_CanAddItemToSlot::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Get_Item_1) == 0x00009C, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, Temp_int_Loop_Counter_Variable_1) == 0x0000A8, "Member 'JSIContainer_C_CanAddItemToSlot::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_IsEmptySlot_isEmpty) == 0x0000AC, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AD, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B0, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_Array_Get_Item_3) == 0x0000B8, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot, CallFunc_IsEmptySlot_isEmpty_1) == 0x0000C0, "Member 'JSIContainer_C_CanAddItemToSlot::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanAddItemToSlot_IgnoreItems
// 0x00E0 (0x00E0 - 0x0000)
struct JSIContainer_C_CanAddItemToSlot_IgnoreItems final
{
public:
	int32                                         ToSlot;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    IgnoreItems;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotatedVector_;                                    // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllGood_;                                          // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes;                  // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes_1;                // 0x0080(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanAddItemToSlot_IgnoreItems) == 0x000008, "Wrong alignment on JSIContainer_C_CanAddItemToSlot_IgnoreItems");
static_assert(sizeof(JSIContainer_C_CanAddItemToSlot_IgnoreItems) == 0x0000E0, "Wrong size on JSIContainer_C_CanAddItemToSlot_IgnoreItems");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, ToSlot) == 0x000000, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, ItemVector) == 0x000008, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, TryRotated_) == 0x000018, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, IgnoreItems) == 0x000020, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::IgnoreItems' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Result) == 0x000030, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, RotatedVector_) == 0x000031, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::RotatedVector_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, AllGood_) == 0x000032, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::AllGood_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BreakVector2D_X) == 0x000038, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BreakVector2D_Y) == 0x000040, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_GetHostingSlots_Indexes) == 0x000048, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_GetHostingSlots_Indexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_MakeVector2D_ReturnValue) == 0x000070, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_GetHostingSlots_Indexes_1) == 0x000080, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_GetHostingSlots_Indexes_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Length_ReturnValue_2) == 0x000094, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Length_ReturnValue_3) == 0x0000A0, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000A4, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Temp_bool_True_if_break_was_hit_Variable) == 0x0000A5, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Not_PreBool_ReturnValue) == 0x0000A6, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BooleanAND_ReturnValue_1) == 0x0000A7, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Temp_int_Array_Index_Variable) == 0x0000A8, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Get_Item) == 0x0000AC, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Temp_int_Array_Index_Variable_1) == 0x0000B0, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Get_Item_1) == 0x0000B4, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Get_Item_2) == 0x0000B8, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, Temp_int_Loop_Counter_Variable_1) == 0x0000C0, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Contains_ReturnValue) == 0x0000C4, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C5, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C8, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_IsEmptySlot_isEmpty) == 0x0000CC, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BooleanOR_ReturnValue) == 0x0000CD, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Get_Item_3) == 0x0000D0, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_Array_Contains_ReturnValue_1) == 0x0000D8, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_IsEmptySlot_isEmpty_1) == 0x0000D9, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanAddItemToSlot_IgnoreItems, CallFunc_BooleanOR_ReturnValue_1) == 0x0000DA, "Member 'JSIContainer_C_CanAddItemToSlot_IgnoreItems::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CancelHighlights
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_CancelHighlights final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x000C(0x0014)()
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__1;              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_1;             // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_1;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight_1;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CancelHighlights) == 0x000008, "Wrong alignment on JSIContainer_C_CancelHighlights");
static_assert(sizeof(JSIContainer_C_CancelHighlights) == 0x000088, "Wrong size on JSIContainer_C_CancelHighlights");
static_assert(offsetof(JSIContainer_C_CancelHighlights, Temp_int_Array_Index_Variable) == 0x000000, "Member 'JSIContainer_C_CancelHighlights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'JSIContainer_C_CancelHighlights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, K2Node_MakeStruct_SlateColor) == 0x00000C, "Member 'JSIContainer_C_CancelHighlights::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_Found_) == 0x000020, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_ItemRef) == 0x000028, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_IsPending) == 0x000030, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_SetHighlight_Highlight) == 0x000040, "Member 'JSIContainer_C_CancelHighlights::CallFunc_SetHighlight_Highlight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_Found__1) == 0x000041, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_ItemRef_1) == 0x000048, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_ItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_GetEquippedItemRef_IsPending_1) == 0x000050, "Member 'JSIContainer_C_CancelHighlights::CallFunc_GetEquippedItemRef_IsPending_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_IsEquipTo__ReturnValue) == 0x000051, "Member 'JSIContainer_C_CancelHighlights::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CancelHighlights::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CancelHighlights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Greater_IntInt_ReturnValue) == 0x000061, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_BooleanAND_ReturnValue_1) == 0x000062, "Member 'JSIContainer_C_CancelHighlights::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_BooleanAND_ReturnValue_2) == 0x000063, "Member 'JSIContainer_C_CancelHighlights::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Length_ReturnValue_2) == 0x000070, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Get_Item_2) == 0x000078, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_SetHighlight_Highlight_1) == 0x000081, "Member 'JSIContainer_C_CancelHighlights::CallFunc_SetHighlight_Highlight_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanResize?
// 0x0288 (0x0288 - 0x0000)
struct JSIContainer_C_CanResize_ final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToX;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToY;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    HostingSlotsArray;                                 // 0x0018(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    FreedHostingSlotsArray;                            // 0x0028(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    FreedHostingSlots;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            SlotFound;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_1;                          // 0x00A0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_2;                          // 0x00F0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_3;                          // 0x0138(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_4;                          // 0x0148(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_5;                          // 0x0158(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A7[0x1];                                      // 0x01A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_2;               // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_4;                     // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_5;                     // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_14;                // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F6[0x2];                                      // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_15;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_16;                // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_17;                // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef;                  // 0x0218(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0225(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0226(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0227(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_3;               // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_18;                // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_6;                     // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_7;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_19;                // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_20;                // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_5;           // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_21;                // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef_1;                // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanResize_) == 0x000008, "Wrong alignment on JSIContainer_C_CanResize_");
static_assert(sizeof(JSIContainer_C_CanResize_) == 0x000288, "Wrong size on JSIContainer_C_CanResize_");
static_assert(offsetof(JSIContainer_C_CanResize_, SlotRef) == 0x000000, "Member 'JSIContainer_C_CanResize_::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, AddToX) == 0x000008, "Member 'JSIContainer_C_CanResize_::AddToX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, AddToY) == 0x00000C, "Member 'JSIContainer_C_CanResize_::AddToY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Result) == 0x000010, "Member 'JSIContainer_C_CanResize_::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, HostingSlotsArray) == 0x000018, "Member 'JSIContainer_C_CanResize_::HostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, FreedHostingSlotsArray) == 0x000028, "Member 'JSIContainer_C_CanResize_::FreedHostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, FreedHostingSlots) == 0x000038, "Member 'JSIContainer_C_CanResize_::FreedHostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, HostingSlots) == 0x000048, "Member 'JSIContainer_C_CanResize_::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, SlotFound) == 0x000058, "Member 'JSIContainer_C_CanResize_::SlotFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Y) == 0x000060, "Member 'JSIContainer_C_CanResize_::Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, X) == 0x000064, "Member 'JSIContainer_C_CanResize_::X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable) == 0x000068, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_1) == 0x000070, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_CanResize_::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_2) == 0x00007C, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_2) == 0x000080, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsInventory__ReturnValue) == 0x000084, "Member 'JSIContainer_C_CanResize_::CallFunc_IsInventory__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array) == 0x000088, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Get_Item) == 0x000098, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_1) == 0x0000A0, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B1, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000B2, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotDim_SlotDimension) == 0x0000B8, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X) == 0x0000C8, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y) == 0x0000D0, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue) == 0x0000D8, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000DC, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000E0, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Length_ReturnValue) == 0x0000E4, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000E8, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_2) == 0x0000F0, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanOR_ReturnValue) == 0x000100, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotDim_SlotDimension_1) == 0x000108, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_1) == 0x000118, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_1) == 0x000120, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_1) == 0x000128, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_RemoveItem_ReturnValue) == 0x00012C, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_2) == 0x000130, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_3) == 0x000138, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_4) == 0x000148, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_5) == 0x000158, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue) == 0x000168, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue_1) == 0x00016C, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_3) == 0x000170, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_5) == 0x000174, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue) == 0x000178, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsEmptySlot_isEmpty) == 0x000179, "Member 'JSIContainer_C_CanResize_::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_6) == 0x00017C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_7) == 0x000180, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue) == 0x000184, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000185, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_8) == 0x000188, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_9) == 0x00018C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_10) == 0x000190, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_11) == 0x000194, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000198, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000199, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue) == 0x00019A, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue_1) == 0x00019B, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue_2) == 0x00019C, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x00019D, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Loop_Counter_Variable) == 0x0001A0, "Member 'JSIContainer_C_CanResize_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_4) == 0x0001A4, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue_1) == 0x0001A5, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsEmptySlot_isEmpty_1) == 0x0001A6, "Member 'JSIContainer_C_CanResize_::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_12) == 0x0001A8, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Array_Index_Variable) == 0x0001AC, "Member 'JSIContainer_C_CanResize_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotDim_SlotDimension_2) == 0x0001B8, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotDim_SlotDimension_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_2) == 0x0001C8, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_2) == 0x0001D0, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D8, "Member 'JSIContainer_C_CanResize_::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_3) == 0x0001DC, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_4) == 0x0001E0, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_5) == 0x0001E4, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_13) == 0x0001E8, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001EC, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_14) == 0x0001F0, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0001F4, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0001F5, "Member 'JSIContainer_C_CanResize_::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue_2) == 0x0001F8, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0001FC, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_15) == 0x000200, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_16) == 0x000204, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_17) == 0x000208, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00020C, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000210, "Member 'JSIContainer_C_CanResize_::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FindSlotByIndex_SlotRef) == 0x000218, "Member 'JSIContainer_C_CanResize_::CallFunc_FindSlotByIndex_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000220, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x000224, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000225, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000226, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue_2) == 0x000227, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Not_PreBool_ReturnValue) == 0x000228, "Member 'JSIContainer_C_CanResize_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotDim_SlotDimension_3) == 0x000230, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotDim_SlotDimension_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_3) == 0x000240, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_3) == 0x000248, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_18) == 0x000250, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_6) == 0x000254, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_7) == 0x000258, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x00025C, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_19) == 0x000260, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_20) == 0x000264, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_5) == 0x000268, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_21) == 0x00026C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1) == 0x000270, "Member 'JSIContainer_C_CanResize_::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FindSlotByIndex_SlotRef_1) == 0x000278, "Member 'JSIContainer_C_CanResize_::CallFunc_FindSlotByIndex_SlotRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_isRotated__ReturnValue) == 0x000280, "Member 'JSIContainer_C_CanResize_::CallFunc_isRotated__ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanStack?
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_CanStack_ final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStack;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCount;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_Cap;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_MaxCapacity;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type_1;                           // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_2;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanStack_) == 0x000008, "Wrong alignment on JSIContainer_C_CanStack_");
static_assert(sizeof(JSIContainer_C_CanStack_) == 0x000088, "Wrong size on JSIContainer_C_CanStack_");
static_assert(offsetof(JSIContainer_C_CanStack_, Container) == 0x000000, "Member 'JSIContainer_C_CanStack_::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, ItemRef) == 0x000008, "Member 'JSIContainer_C_CanStack_::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CanStack) == 0x000010, "Member 'JSIContainer_C_CanStack_::CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CurrentCount) == 0x000014, "Member 'JSIContainer_C_CanStack_::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetCount_Count) == 0x000018, "Member 'JSIContainer_C_CanStack_::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetType_Type) == 0x00001C, "Member 'JSIContainer_C_CanStack_::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'JSIContainer_C_CanStack_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetContainerCapacity_Cap) == 0x000028, "Member 'JSIContainer_C_CanStack_::CallFunc_GetContainerCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetContainerCapacity_MaxCapacity) == 0x00002C, "Member 'JSIContainer_C_CanStack_::CallFunc_GetContainerCapacity_MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CanStack_::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'JSIContainer_C_CanStack_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, Temp_int_Array_Index_Variable) == 0x000034, "Member 'JSIContainer_C_CanStack_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'JSIContainer_C_CanStack_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_CanStack_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetMaxStack_MaxStack) == 0x000048, "Member 'JSIContainer_C_CanStack_::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetCount_Count_1) == 0x00004C, "Member 'JSIContainer_C_CanStack_::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetType_Type_1) == 0x000050, "Member 'JSIContainer_C_CanStack_::CallFunc_GetType_Type_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Subtract_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CanStack_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_CanStack_::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Greater_IntInt_ReturnValue) == 0x00005D, "Member 'JSIContainer_C_CanStack_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005E, "Member 'JSIContainer_C_CanStack_::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CanStack_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetEquippedItemRef_Found_) == 0x000064, "Member 'JSIContainer_C_CanStack_::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetEquippedItemRef_ItemRef) == 0x000068, "Member 'JSIContainer_C_CanStack_::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetEquippedItemRef_IsPending) == 0x000070, "Member 'JSIContainer_C_CanStack_::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetCount_Count_2) == 0x000074, "Member 'JSIContainer_C_CanStack_::CallFunc_GetCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000078, "Member 'JSIContainer_C_CanStack_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Less_IntInt_ReturnValue_2) == 0x000079, "Member 'JSIContainer_C_CanStack_::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_IsEquipTo__ReturnValue) == 0x00007A, "Member 'JSIContainer_C_CanStack_::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00007B, "Member 'JSIContainer_C_CanStack_::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'JSIContainer_C_CanStack_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_CanStack_::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanStackSingleSlot?
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_CanStackSingleSlot_ final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            WithItem;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanStackSingleSlot_) == 0x000008, "Wrong alignment on JSIContainer_C_CanStackSingleSlot_");
static_assert(sizeof(JSIContainer_C_CanStackSingleSlot_) == 0x000070, "Wrong size on JSIContainer_C_CanStackSingleSlot_");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Info) == 0x000000, "Member 'JSIContainer_C_CanStackSingleSlot_::Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Count) == 0x000008, "Member 'JSIContainer_C_CanStackSingleSlot_::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, WithItem) == 0x000010, "Member 'JSIContainer_C_CanStackSingleSlot_::WithItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Sucess) == 0x000018, "Member 'JSIContainer_C_CanStackSingleSlot_::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, ItemRef) == 0x000020, "Member 'JSIContainer_C_CanStackSingleSlot_::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CurrentCount) == 0x000028, "Member 'JSIContainer_C_CanStackSingleSlot_::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_IsEquipTo__ReturnValue) == 0x000038, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanOR_ReturnValue) == 0x00003B, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Less_IntInt_ReturnValue_1) == 0x00004D, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_GetCount_Count) == 0x000050, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_GetMaxStack_MaxStack) == 0x000054, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Less_IntInt_ReturnValue_2) == 0x000058, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanOR_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000061, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_GetItemID_ItemID) == 0x000064, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanAND_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00006D, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemCount
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_ChangeItemCount final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemCount) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemCount");
static_assert(sizeof(JSIContainer_C_ChangeItemCount) == 0x000018, "Wrong size on JSIContainer_C_ChangeItemCount");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemCount::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, NewCount) == 0x000008, "Member 'JSIContainer_C_ChangeItemCount::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, Changed_) == 0x00000C, "Member 'JSIContainer_C_ChangeItemCount::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00000E, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_UpdateCount_Count) == 0x000010, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_UpdateCount_Count' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemImage
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_ChangeItemImage final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NewTexture;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateImage_Updated;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemImage) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemImage");
static_assert(sizeof(JSIContainer_C_ChangeItemImage) == 0x000018, "Wrong size on JSIContainer_C_ChangeItemImage");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemImage::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, NewTexture) == 0x000008, "Member 'JSIContainer_C_ChangeItemImage::NewTexture' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, Changed_) == 0x000010, "Member 'JSIContainer_C_ChangeItemImage::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_UpdateImage_Updated) == 0x000014, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_UpdateImage_Updated' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemRarity
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_ChangeItemRarity final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NewRarity;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeRarity_Changed_;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemRarity) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemRarity");
static_assert(sizeof(JSIContainer_C_ChangeItemRarity) == 0x000018, "Wrong size on JSIContainer_C_ChangeItemRarity");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemRarity::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, NewRarity) == 0x000008, "Member 'JSIContainer_C_ChangeItemRarity::NewRarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, Changed_) == 0x000010, "Member 'JSIContainer_C_ChangeItemRarity::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, CallFunc_ChangeRarity_Changed_) == 0x000011, "Member 'JSIContainer_C_ChangeItemRarity::CallFunc_ChangeRarity_Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'JSIContainer_C_ChangeItemRarity::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemsInteract
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_ChangeItemsInteract final
{
public:
	bool                                          Interact_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemsInteract) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemsInteract");
static_assert(sizeof(JSIContainer_C_ChangeItemsInteract) == 0x000050, "Wrong size on JSIContainer_C_ChangeItemsInteract");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Interact_) == 0x000000, "Member 'JSIContainer_C_ChangeItemsInteract::Interact_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_bool_Variable) == 0x000001, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_byte_Variable) == 0x000002, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_byte_Variable_1) == 0x000003, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_int_Array_Index_Variable) == 0x000004, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, K2Node_Select_Default) == 0x000008, "Member 'JSIContainer_C_ChangeItemsInteract::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_GetEquippedItemRef_Found_) == 0x00001C, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_GetEquippedItemRef_ItemRef) == 0x000020, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_GetEquippedItemRef_IsPending) == 0x000028, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, K2Node_MakeStruct_LinearColor) == 0x00002C, "Member 'JSIContainer_C_ChangeItemsInteract::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckIfCanAddToSpecial
// 0x0150 (0x0150 - 0x0000)
struct JSIContainer_C_CheckIfCanAddToSpecial final
{
public:
	class UJSI_Slot_C*                            ItemSP;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemToAdd;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckBlind_;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DigDeeper_;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAdd;                                            // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ToContainer;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CurrentSpecialC;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DifficultyCheckBackpack__CarryOn_;        // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCanStack_Sucess;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_CheckIfCanStack_ItemRef;                  // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStackSingleSlot__Sucess;               // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_CanStackSingleSlot__ItemRef;              // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCanAddToSpecial_CanAdd;            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_CheckIfCanAddToSpecial_ToContainer;       // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_ReturnValue;                    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckWeightLimit_Result;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0114(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckIfCanAddToSpecial) == 0x000008, "Wrong alignment on JSIContainer_C_CheckIfCanAddToSpecial");
static_assert(sizeof(JSIContainer_C_CheckIfCanAddToSpecial) == 0x000150, "Wrong size on JSIContainer_C_CheckIfCanAddToSpecial");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, ItemSP) == 0x000000, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::ItemSP' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, ItemToAdd) == 0x000008, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::ItemToAdd' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CheckBlind_) == 0x000010, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CheckBlind_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, DigDeeper_) == 0x000011, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::DigDeeper_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CanAdd) == 0x000012, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CanAdd' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, ToContainer) == 0x000018, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CurrentSpecialC) == 0x000020, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CurrentSpecialC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsItemPending__IsPending) == 0x000034, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000038, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000048, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetListOfContainers_Containers) == 0x000060, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, Temp_int_Array_Index_Variable) == 0x000080, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Array_Get_Item) == 0x000088, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, Temp_int_Loop_Counter_Variable_1) == 0x000090, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Less_IntInt_ReturnValue_1) == 0x000094, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_DifficultyCheckBackpack__CarryOn_) == 0x00009C, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_DifficultyCheckBackpack__CarryOn_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Not_PreBool_ReturnValue_1) == 0x00009D, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsEquipped__ReturnValue) == 0x00009E, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsEquipTo__ReturnValue) == 0x00009F, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CheckIfCanStack_Sucess) == 0x0000A0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CheckIfCanStack_Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CheckIfCanStack_ItemRef) == 0x0000A8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CheckIfCanStack_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetCount_Count) == 0x0000B0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000B4, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_BooleanOR_ReturnValue) == 0x0000B5, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000B6, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_BooleanAND_ReturnValue) == 0x0000B7, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, Temp_int_Array_Index_Variable_1) == 0x0000B8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CanStackSingleSlot__Sucess) == 0x0000BC, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CanStackSingleSlot__Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CanStackSingleSlot__ItemRef) == 0x0000C0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CanStackSingleSlot__ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEquippedItemRef_Found_) == 0x0000D0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEquippedItemRef_ItemRef) == 0x0000D8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEquippedItemRef_IsPending) == 0x0000E0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CheckIfCanAddToSpecial_CanAdd) == 0x0000E1, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CheckIfCanAddToSpecial_CanAdd' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CheckIfCanAddToSpecial_ToContainer) == 0x0000E8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CheckIfCanAddToSpecial_ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetContainerOneRef_ContainerRef) == 0x0000F0, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsValid_ReturnValue_1) == 0x0000F8, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_Array_Contains_ReturnValue) == 0x0000F9, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetWeight_ReturnValue) == 0x000100, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetJigDA_JigDataAsset) == 0x000108, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_CheckWeightLimit_Result) == 0x000110, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_CheckWeightLimit_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetType_Type) == 0x000114, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_IsSupportedType__Supported_) == 0x00011C, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetSlotDim_SlotDimension) == 0x000120, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEmptySlot_SlotIndex) == 0x000130, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEmptySlot_Found_) == 0x000134, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_FlipSlotDim_Flipped) == 0x000138, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEmptySlot_SlotIndex_1) == 0x000148, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanAddToSpecial, CallFunc_GetEmptySlot_Found__1) == 0x00014C, "Member 'JSIContainer_C_CheckIfCanAddToSpecial::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckIfCanStack
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_CheckIfCanStack final
{
public:
	class UJSI_Slot_C*                            WithItemRef;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStackSingleSlot__Sucess;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_CanStackSingleSlot__ItemRef;              // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckIfCanStack) == 0x000008, "Wrong alignment on JSIContainer_C_CheckIfCanStack");
static_assert(sizeof(JSIContainer_C_CheckIfCanStack) == 0x000038, "Wrong size on JSIContainer_C_CheckIfCanStack");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, WithItemRef) == 0x000000, "Member 'JSIContainer_C_CheckIfCanStack::WithItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, Sucess) == 0x000008, "Member 'JSIContainer_C_CheckIfCanStack::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, ItemRef) == 0x000010, "Member 'JSIContainer_C_CheckIfCanStack::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_GetCount_Count) == 0x000018, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_IsItemPending__IsPending) == 0x00001C, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_CanStack__CanStack) == 0x00001D, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_CanStack__FreeSpaceAvailable) == 0x00001E, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_BooleanAND_ReturnValue) == 0x00001F, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_CanStackSingleSlot__Sucess) == 0x000020, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_CanStackSingleSlot__Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_CanStackSingleSlot__ItemRef) == 0x000028, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_CanStackSingleSlot__ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCanStack, CallFunc_BooleanAND_ReturnValue_1) == 0x000030, "Member 'JSIContainer_C_CheckIfCanStack::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckIfCapacityContainer
// 0x0003 (0x0003 - 0x0000)
struct JSIContainer_C_CheckIfCapacityContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckIfCapacityContainer) == 0x000001, "Wrong alignment on JSIContainer_C_CheckIfCapacityContainer");
static_assert(sizeof(JSIContainer_C_CheckIfCapacityContainer) == 0x000003, "Wrong size on JSIContainer_C_CheckIfCapacityContainer");
static_assert(offsetof(JSIContainer_C_CheckIfCapacityContainer, ReturnValue) == 0x000000, "Member 'JSIContainer_C_CheckIfCapacityContainer::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCapacityContainer, CallFunc_ISCapacityContainer_ReturnValue) == 0x000001, "Member 'JSIContainer_C_CheckIfCapacityContainer::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIfCapacityContainer, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'JSIContainer_C_CheckIfCapacityContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckKey
// 0x0080 (0x0080 - 0x0000)
struct JSIContainer_C_CheckKey final
{
public:
	struct FKeyEvent                              Input;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FKey                                   B;                                                 // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0060(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckKey) == 0x000008, "Wrong alignment on JSIContainer_C_CheckKey");
static_assert(sizeof(JSIContainer_C_CheckKey) == 0x000080, "Wrong size on JSIContainer_C_CheckKey");
static_assert(offsetof(JSIContainer_C_CheckKey, Input) == 0x000000, "Member 'JSIContainer_C_CheckKey::Input' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckKey, B) == 0x000040, "Member 'JSIContainer_C_CheckKey::B' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckKey, Value) == 0x000058, "Member 'JSIContainer_C_CheckKey::Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckKey, CallFunc_GetKey_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CheckKey::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckKey, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000078, "Member 'JSIContainer_C_CheckKey::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckLimitedEquipToStack
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_CheckLimitedEquipToStack final
{
public:
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDragWidget_C*                          DragWidgetRef;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FixedSlotRef;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled_;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SplitAmount;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipItemFromJigRef_Added;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_EquipItemFromJigRef_EquippedItemRef;      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigSplitWidget_C*                      CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveCount_Removed_;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RemoveCount_NewCount;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipItem_Equipped;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_EquipItem_SlotItemRef;                    // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckLimitedEquipToStack) == 0x000008, "Wrong alignment on JSIContainer_C_CheckLimitedEquipToStack");
static_assert(sizeof(JSIContainer_C_CheckLimitedEquipToStack) == 0x000070, "Wrong size on JSIContainer_C_CheckLimitedEquipToStack");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, DroppedSlotRef) == 0x000000, "Member 'JSIContainer_C_CheckLimitedEquipToStack::DroppedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, DragWidgetRef) == 0x000008, "Member 'JSIContainer_C_CheckLimitedEquipToStack::DragWidgetRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, FixedSlotRef) == 0x000010, "Member 'JSIContainer_C_CheckLimitedEquipToStack::FixedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, Handled_) == 0x000018, "Member 'JSIContainer_C_CheckLimitedEquipToStack::Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, SplitAmount) == 0x00001C, "Member 'JSIContainer_C_CheckLimitedEquipToStack::SplitAmount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_CanStack__CanStack) == 0x000020, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_CanStack__FreeSpaceAvailable) == 0x000021, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_EquipItemFromJigRef_Added) == 0x000022, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_EquipItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_EquipItemFromJigRef_EquippedItemRef) == 0x000028, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_EquipItemFromJigRef_EquippedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_GetCount_Count) == 0x000034, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_Create_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_RemoveCount_Removed_) == 0x000048, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_RemoveCount_Removed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_RemoveCount_NewCount) == 0x00004C, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_RemoveCount_NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_EquipItem_Equipped) == 0x000050, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_EquipItem_Equipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_EquipItem_SlotItemRef) == 0x000058, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_EquipItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_GetCount_Count_1) == 0x000060, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_Clamp_ReturnValue) == 0x000064, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_IsEquipTo__ReturnValue) == 0x000069, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_BooleanAND_ReturnValue_1) == 0x00006A, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00006B, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_IsEquipTo__ReturnValue_1) == 0x00006C, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckLimitedEquipToStack, CallFunc_BooleanAND_ReturnValue_2) == 0x00006D, "Member 'JSIContainer_C_CheckLimitedEquipToStack::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckRootContainer
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_CheckRootContainer final
{
public:
	class UJSI_Slot_C*                            DraggedItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Proceed_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetContainerHierarchy_Containers;         // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetContainerHierarchy_Containers_1;       // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckRootContainer) == 0x000008, "Wrong alignment on JSIContainer_C_CheckRootContainer");
static_assert(sizeof(JSIContainer_C_CheckRootContainer) == 0x000088, "Wrong size on JSIContainer_C_CheckRootContainer");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, DraggedItem) == 0x000000, "Member 'JSIContainer_C_CheckRootContainer::DraggedItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, Proceed_) == 0x000008, "Member 'JSIContainer_C_CheckRootContainer::Proceed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'JSIContainer_C_CheckRootContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000010, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000018, "Member 'JSIContainer_C_CheckRootContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSIContainer_C_CheckRootContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_GetListOfContainers_Containers) == 0x000030, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_IsValid_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_GetContainerHierarchy_Containers) == 0x000050, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_GetContainerHierarchy_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'JSIContainer_C_CheckRootContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Array_Contains_ReturnValue) == 0x000064, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000065, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_GetContainerHierarchy_Containers_1) == 0x000070, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_GetContainerHierarchy_Containers_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Array_Contains_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckRootContainer, CallFunc_Not_PreBool_ReturnValue) == 0x000081, "Member 'JSIContainer_C_CheckRootContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckUnhandledSplit
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_CheckUnhandledSplit final
{
public:
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDragWidget_C*                          DragWidgetRef;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FixedSlotRef;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedRotated_;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled_;                                          // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SplitAmount;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigSplitWidget_C*                      CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_2;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckUnhandledSplit) == 0x000008, "Wrong alignment on JSIContainer_C_CheckUnhandledSplit");
static_assert(sizeof(JSIContainer_C_CheckUnhandledSplit) == 0x000048, "Wrong size on JSIContainer_C_CheckUnhandledSplit");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, DroppedSlotRef) == 0x000000, "Member 'JSIContainer_C_CheckUnhandledSplit::DroppedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, DragWidgetRef) == 0x000008, "Member 'JSIContainer_C_CheckUnhandledSplit::DragWidgetRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, FixedSlotRef) == 0x000010, "Member 'JSIContainer_C_CheckUnhandledSplit::FixedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, DroppedRotated_) == 0x000018, "Member 'JSIContainer_C_CheckUnhandledSplit::DroppedRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, Handled_) == 0x000019, "Member 'JSIContainer_C_CheckUnhandledSplit::Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, SplitAmount) == 0x00001C, "Member 'JSIContainer_C_CheckUnhandledSplit::SplitAmount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_Create_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_GetCount_Count) == 0x000028, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_CanStack__CanStack) == 0x00002C, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_CanStack__FreeSpaceAvailable) == 0x00002D, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_BooleanAND_ReturnValue) == 0x00002E, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002F, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_GetCount_Count_1) == 0x000030, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_Clamp_ReturnValue) == 0x000034, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_IsEquipTo__ReturnValue) == 0x000038, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_Greater_IntInt_ReturnValue) == 0x000039, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_BooleanAND_ReturnValue_1) == 0x00003A, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_GetCount_Count_2) == 0x00003C, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_GetCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_IsEquipTo__ReturnValue_1) == 0x000041, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledSplit, CallFunc_BooleanAND_ReturnValue_2) == 0x000042, "Member 'JSIContainer_C_CheckUnhandledSplit::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckUnhandledStack
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_CheckUnhandledStack final
{
public:
	class UJSI_Slot_C*                            DropedSlotRef;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FixedSlotRef;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CompareItems_ReturnValue;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckUnhandledStack) == 0x000008, "Wrong alignment on JSIContainer_C_CheckUnhandledStack");
static_assert(sizeof(JSIContainer_C_CheckUnhandledStack) == 0x000020, "Wrong size on JSIContainer_C_CheckUnhandledStack");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, DropedSlotRef) == 0x000000, "Member 'JSIContainer_C_CheckUnhandledStack::DropedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, FixedSlotRef) == 0x000008, "Member 'JSIContainer_C_CheckUnhandledStack::FixedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, Result) == 0x000010, "Member 'JSIContainer_C_CheckUnhandledStack::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_CanStack__CanStack) == 0x000012, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_CanStack__FreeSpaceAvailable) == 0x000013, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000014, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_CompareItems_ReturnValue) == 0x000015, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_CompareItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_BooleanAND_ReturnValue_1) == 0x000017, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000018, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_BooleanAND_ReturnValue_2) == 0x000019, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckUnhandledStack, CallFunc_BooleanAND_ReturnValue_3) == 0x00001A, "Member 'JSIContainer_C_CheckUnhandledStack::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckWeightLimit
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_CheckWeightLimit final
{
public:
	double                                        ItemWeight;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        FromContainer;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allowed_;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_GetRootContainerRef_ContainerRef;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainerWithinHierarchy_ReturnValue;   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckWeightLimit) == 0x000008, "Wrong alignment on JSIContainer_C_CheckWeightLimit");
static_assert(sizeof(JSIContainer_C_CheckWeightLimit) == 0x000038, "Wrong size on JSIContainer_C_CheckWeightLimit");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, ItemWeight) == 0x000000, "Member 'JSIContainer_C_CheckWeightLimit::ItemWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, FromContainer) == 0x000008, "Member 'JSIContainer_C_CheckWeightLimit::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, Result) == 0x000010, "Member 'JSIContainer_C_CheckWeightLimit::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, Allowed_) == 0x000011, "Member 'JSIContainer_C_CheckWeightLimit::Allowed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000012, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000013, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_GetRootContainerRef_ContainerRef) == 0x000018, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_GetRootContainerRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_IsContainerWithinHierarchy_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_IsContainerWithinHierarchy_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000021, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckWeightLimit, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CheckWeightLimit::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ClearContainer
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_ClearContainer final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ClearContainer) == 0x000008, "Wrong alignment on JSIContainer_C_ClearContainer");
static_assert(sizeof(JSIContainer_C_ClearContainer) == 0x000050, "Wrong size on JSIContainer_C_ClearContainer");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Array_Index_Variable) == 0x000000, "Member 'JSIContainer_C_ClearContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'JSIContainer_C_ClearContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_ClearContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'JSIContainer_C_ClearContainer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'JSIContainer_C_ClearContainer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'JSIContainer_C_ClearContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_IsEquipTo__ReturnValue) == 0x000015, "Member 'JSIContainer_C_ClearContainer::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_ClearContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Get_Item_2) == 0x000030, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'JSIContainer_C_ClearContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'JSIContainer_C_ClearContainer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_ClearContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_ClearContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ClearItemFromArr
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_ClearItemFromArr final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer_;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerUnequippedEvent_;                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed_;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ClearItemFromArr) == 0x000008, "Wrong alignment on JSIContainer_C_ClearItemFromArr");
static_assert(sizeof(JSIContainer_C_ClearItemFromArr) == 0x000070, "Wrong size on JSIContainer_C_ClearItemFromArr");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, SlotRef) == 0x000000, "Member 'JSIContainer_C_ClearItemFromArr::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, ToContainer_) == 0x000008, "Member 'JSIContainer_C_ClearItemFromArr::ToContainer_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, TriggerUnequippedEvent_) == 0x000010, "Member 'JSIContainer_C_ClearItemFromArr::TriggerUnequippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Removed) == 0x000011, "Member 'JSIContainer_C_ClearItemFromArr::Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Removed_) == 0x000012, "Member 'JSIContainer_C_ClearItemFromArr::Removed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_ClearItemFromArr::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'JSIContainer_C_ClearItemFromArr::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Temp_int_Array_Index_Variable) == 0x000024, "Member 'JSIContainer_C_ClearItemFromArr::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'JSIContainer_C_ClearItemFromArr::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_IsEquipTo__ReturnValue) == 0x000034, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_IsEquipTo__ReturnValue_1) == 0x000040, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_RemoveItem_ReturnValue) == 0x000042, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'JSIContainer_C_ClearItemFromArr::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_Get_Item_2) == 0x000058, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearItemFromArr, CallFunc_BooleanAND_ReturnValue_1) == 0x00006D, "Member 'JSIContainer_C_ClearItemFromArr::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CombineItemRequest
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_CombineItemRequest final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRec;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotDropped;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerEventDispatcher_;                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStack;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FreeCap;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_1;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_2;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CombineItemRequest) == 0x000008, "Wrong alignment on JSIContainer_C_CombineItemRequest");
static_assert(sizeof(JSIContainer_C_CombineItemRequest) == 0x000060, "Wrong size on JSIContainer_C_CombineItemRequest");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, FromContainer) == 0x000000, "Member 'JSIContainer_C_CombineItemRequest::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, SlotRec) == 0x000008, "Member 'JSIContainer_C_CombineItemRequest::SlotRec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, SlotDropped) == 0x000010, "Member 'JSIContainer_C_CombineItemRequest::SlotDropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, TriggerEventDispatcher_) == 0x000018, "Member 'JSIContainer_C_CombineItemRequest::TriggerEventDispatcher_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, MaxStack) == 0x00001C, "Member 'JSIContainer_C_CombineItemRequest::MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, FreeCap) == 0x000020, "Member 'JSIContainer_C_CombineItemRequest::FreeCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_GetCount_Count) == 0x000024, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_GetCount_Count_1) == 0x000028, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_GetMaxStack_MaxStack) == 0x00002C, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_IsEquipTo__ReturnValue) == 0x000034, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Greater_IntInt_ReturnValue) == 0x000035, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_BooleanAND_ReturnValue) == 0x000036, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_SelectInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count) == 0x000044, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count_1) == 0x000048, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_RemoveInventoryItemByRef_Removed) == 0x00004C, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count_2) == 0x000054, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CompareItems
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_CompareItems final
{
public:
	class UJSI_Slot_C*                            Item1;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Item2;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemID_ItemID_1;                       // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CompareItems) == 0x000008, "Wrong alignment on JSIContainer_C_CompareItems");
static_assert(sizeof(JSIContainer_C_CompareItems) == 0x000028, "Wrong size on JSIContainer_C_CompareItems");
static_assert(offsetof(JSIContainer_C_CompareItems, Item1) == 0x000000, "Member 'JSIContainer_C_CompareItems::Item1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CompareItems, Item2) == 0x000008, "Member 'JSIContainer_C_CompareItems::Item2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CompareItems, ReturnValue) == 0x000010, "Member 'JSIContainer_C_CompareItems::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CompareItems, CallFunc_GetItemID_ItemID) == 0x000014, "Member 'JSIContainer_C_CompareItems::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CompareItems, CallFunc_GetItemID_ItemID_1) == 0x00001C, "Member 'JSIContainer_C_CompareItems::CallFunc_GetItemID_ItemID_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CompareItems, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000024, "Member 'JSIContainer_C_CompareItems::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ControllerHighlightItem
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_ControllerHighlightItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ControllerHighlightItem) == 0x000008, "Wrong alignment on JSIContainer_C_ControllerHighlightItem");
static_assert(sizeof(JSIContainer_C_ControllerHighlightItem) == 0x000010, "Wrong size on JSIContainer_C_ControllerHighlightItem");
static_assert(offsetof(JSIContainer_C_ControllerHighlightItem, Index_0) == 0x000000, "Member 'JSIContainer_C_ControllerHighlightItem::Index_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ControllerHighlightItem, Value) == 0x000004, "Member 'JSIContainer_C_ControllerHighlightItem::Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ControllerHighlightItem, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000005, "Member 'JSIContainer_C_ControllerHighlightItem::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ControllerHighlightItem, CallFunc_Array_Get_Item) == 0x000008, "Member 'JSIContainer_C_ControllerHighlightItem::CallFunc_Array_Get_Item' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Deep Search for Item by ID
// 0x00B0 (0x00B0 - 0x0000)
struct JSIContainer_C_Deep_Search_for_Item_by_ID final
{
public:
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SearchInEquipTo_;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Deep_Search_for_Item_by_ID_ItemRef;       // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deep_Search_for_Item_by_ID_Found_;        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Deep_Search_for_Item_by_ID) == 0x000008, "Wrong alignment on JSIContainer_C_Deep_Search_for_Item_by_ID");
static_assert(sizeof(JSIContainer_C_Deep_Search_for_Item_by_ID) == 0x0000B0, "Wrong size on JSIContainer_C_Deep_Search_for_Item_by_ID");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, ItemId) == 0x000000, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, SearchInEquipTo_) == 0x000008, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::SearchInEquipTo_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, ItemRef) == 0x000010, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, Found_) == 0x000018, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, Temp_int_Array_Index_Variable) == 0x000024, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, Temp_int_Array_Index_Variable_1) == 0x000028, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_GetJigDA_JigDataAsset) == 0x000048, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_GetContainerOneRef_ContainerRef) == 0x000050, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000060, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_GetListOfContainers_Containers) == 0x000078, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Deep_Search_for_Item_by_ID_ItemRef) == 0x000098, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Deep_Search_for_Item_by_ID_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Deep_Search_for_Item_by_ID_Found_) == 0x0000A0, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Deep_Search_for_Item_by_ID_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_IsEquipTo__ReturnValue) == 0x0000A1, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Not_PreBool_ReturnValue) == 0x0000A2, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_BooleanOR_ReturnValue) == 0x0000A3, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Array_Length_ReturnValue_1) == 0x0000A4, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_Search_for_Item_by_ID, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_Deep_Search_for_Item_by_ID::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Deep_GettAllItems
// 0x0090 (0x0090 - 0x0000)
struct JSIContainer_C_Deep_GettAllItems final
{
public:
	TArray<class UJSI_Slot_C*>                    ArrByRef;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Deep_GettAllItems) == 0x000008, "Wrong alignment on JSIContainer_C_Deep_GettAllItems");
static_assert(sizeof(JSIContainer_C_Deep_GettAllItems) == 0x000090, "Wrong size on JSIContainer_C_Deep_GettAllItems");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, ArrByRef) == 0x000000, "Member 'JSIContainer_C_Deep_GettAllItems::ArrByRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_Deep_GettAllItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_Deep_GettAllItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'JSIContainer_C_Deep_GettAllItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'JSIContainer_C_Deep_GettAllItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_GetContainerOneRef_ContainerRef) == 0x000038, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000048, "Member 'JSIContainer_C_Deep_GettAllItems::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'JSIContainer_C_Deep_GettAllItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_GetListOfContainers_Containers) == 0x000060, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x000084, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_Deep_GettAllItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Deep_GettAllItemsByID
// 0x00A8 (0x00A8 - 0x0000)
struct JSIContainer_C_Deep_GettAllItemsByID final
{
public:
	TArray<class UJSI_Slot_C*>                    ArrByRef;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UJigsawItem_DataAsset_C*                DA;                                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IncludeEquippedItems_;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Deep_GettAllItemsByID) == 0x000008, "Wrong alignment on JSIContainer_C_Deep_GettAllItemsByID");
static_assert(sizeof(JSIContainer_C_Deep_GettAllItemsByID) == 0x0000A8, "Wrong size on JSIContainer_C_Deep_GettAllItemsByID");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, ArrByRef) == 0x000000, "Member 'JSIContainer_C_Deep_GettAllItemsByID::ArrByRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, DA) == 0x000010, "Member 'JSIContainer_C_Deep_GettAllItemsByID::DA' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, IncludeEquippedItems_) == 0x000018, "Member 'JSIContainer_C_Deep_GettAllItemsByID::IncludeEquippedItems_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'JSIContainer_C_Deep_GettAllItemsByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'JSIContainer_C_Deep_GettAllItemsByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, Temp_int_Array_Index_Variable_1) == 0x000028, "Member 'JSIContainer_C_Deep_GettAllItemsByID::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_IsEquipTo__ReturnValue) == 0x00002C, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_BooleanOR_ReturnValue) == 0x00002E, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'JSIContainer_C_Deep_GettAllItemsByID::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_GetJigDA_JigDataAsset) == 0x000050, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_GetContainerOneRef_ContainerRef) == 0x000060, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000068, "Member 'JSIContainer_C_Deep_GettAllItemsByID::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'JSIContainer_C_Deep_GettAllItemsByID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_IsValid_ReturnValue) == 0x000079, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_GetListOfContainers_Containers) == 0x000080, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Add_IntInt_ReturnValue_1) == 0x00009C, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Deep_GettAllItemsByID, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A0, "Member 'JSIContainer_C_Deep_GettAllItemsByID::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DifficultyCheckBackpack?
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_DifficultyCheckBackpack_ final
{
public:
	class UJSI_Slot_C*                            SlotToCheck;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CarryOn_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DifficultyCheckBackpack_) == 0x000008, "Wrong alignment on JSIContainer_C_DifficultyCheckBackpack_");
static_assert(sizeof(JSIContainer_C_DifficultyCheckBackpack_) == 0x000018, "Wrong size on JSIContainer_C_DifficultyCheckBackpack_");
static_assert(offsetof(JSIContainer_C_DifficultyCheckBackpack_, SlotToCheck) == 0x000000, "Member 'JSIContainer_C_DifficultyCheckBackpack_::SlotToCheck' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DifficultyCheckBackpack_, CarryOn_) == 0x000008, "Member 'JSIContainer_C_DifficultyCheckBackpack_::CarryOn_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DifficultyCheckBackpack_, CallFunc_GetType_Type) == 0x00000C, "Member 'JSIContainer_C_DifficultyCheckBackpack_::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DifficultyCheckBackpack_, CallFunc_GetBoolCVar_ReturnValue) == 0x000014, "Member 'JSIContainer_C_DifficultyCheckBackpack_::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DifficultyCheckBackpack_, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000015, "Member 'JSIContainer_C_DifficultyCheckBackpack_::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DoesItemExist
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_DoesItemExist final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DoesItemExist) == 0x000008, "Wrong alignment on JSIContainer_C_DoesItemExist");
static_assert(sizeof(JSIContainer_C_DoesItemExist) == 0x000010, "Wrong size on JSIContainer_C_DoesItemExist");
static_assert(offsetof(JSIContainer_C_DoesItemExist, ItemRef) == 0x000000, "Member 'JSIContainer_C_DoesItemExist::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DoesItemExist, ReturnValue) == 0x000008, "Member 'JSIContainer_C_DoesItemExist::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DoesItemExist, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'JSIContainer_C_DoesItemExist::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DragSelectContainer
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_DragSelectContainer final
{
public:
	class UJSIContainer_C*                        MotherC;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotReceiver;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        MotherRef;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DragSelectContainer) == 0x000008, "Wrong alignment on JSIContainer_C_DragSelectContainer");
static_assert(sizeof(JSIContainer_C_DragSelectContainer) == 0x000020, "Wrong size on JSIContainer_C_DragSelectContainer");
static_assert(offsetof(JSIContainer_C_DragSelectContainer, MotherC) == 0x000000, "Member 'JSIContainer_C_DragSelectContainer::MotherC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DragSelectContainer, SlotReceiver) == 0x000008, "Member 'JSIContainer_C_DragSelectContainer::SlotReceiver' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DragSelectContainer, MotherRef) == 0x000010, "Member 'JSIContainer_C_DragSelectContainer::MotherRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DragSelectContainer, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_DragSelectContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DragSelectContainer, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'JSIContainer_C_DragSelectContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.EquipItem
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_EquipItem final
{
public:
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        SlotContainer;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerEquippedEvent_;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_EquipItem) == 0x000008, "Wrong alignment on JSIContainer_C_EquipItem");
static_assert(sizeof(JSIContainer_C_EquipItem) == 0x000060, "Wrong size on JSIContainer_C_EquipItem");
static_assert(offsetof(JSIContainer_C_EquipItem, ItemId) == 0x000000, "Member 'JSIContainer_C_EquipItem::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, Count) == 0x000008, "Member 'JSIContainer_C_EquipItem::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, SlotContainer) == 0x000010, "Member 'JSIContainer_C_EquipItem::SlotContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, TriggerEquippedEvent_) == 0x000018, "Member 'JSIContainer_C_EquipItem::TriggerEquippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, Equipped) == 0x000019, "Member 'JSIContainer_C_EquipItem::Equipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, SlotItemRef) == 0x000020, "Member 'JSIContainer_C_EquipItem::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_EquipItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, Temp_bool_Variable) == 0x000029, "Member 'JSIContainer_C_EquipItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_Clamp_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_EquipItem::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_EquipItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_SelectInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_EquipItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x00003C, "Member 'JSIContainer_C_EquipItem::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x000040, "Member 'JSIContainer_C_EquipItem::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000048, "Member 'JSIContainer_C_EquipItem::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x000050, "Member 'JSIContainer_C_EquipItem::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'JSIContainer_C_EquipItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, Temp_byte_Variable) == 0x000059, "Member 'JSIContainer_C_EquipItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_IsValid_ReturnValue_1) == 0x00005A, "Member 'JSIContainer_C_EquipItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, Temp_byte_Variable_1) == 0x00005B, "Member 'JSIContainer_C_EquipItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, K2Node_Select_Default) == 0x00005C, "Member 'JSIContainer_C_EquipItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_IsEquipped__ReturnValue) == 0x00005D, "Member 'JSIContainer_C_EquipItem::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItem, CallFunc_Not_PreBool_ReturnValue) == 0x00005E, "Member 'JSIContainer_C_EquipItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.EquipItemFromJigRef
// 0x0168 (0x0168 - 0x0000)
struct JSIContainer_C_EquipItemFromJigRef final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallEquipEvent_;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            EquippedItemRef;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        FromC;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ItemVec;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToIndex;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedByThis_Supported_;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemFromJigRef_Added;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_AddItemFromJigRef_AddedItemRef;           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ResizeSlot_Size;                          // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetImageFromInfo_Image;                   // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateImage_Updated;                      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x0134(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClearItemFromArr_Removed;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_EquipItemFromJigRef) == 0x000008, "Wrong alignment on JSIContainer_C_EquipItemFromJigRef");
static_assert(sizeof(JSIContainer_C_EquipItemFromJigRef) == 0x000168, "Wrong size on JSIContainer_C_EquipItemFromJigRef");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, ItemRef) == 0x000000, "Member 'JSIContainer_C_EquipItemFromJigRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallEquipEvent_) == 0x000008, "Member 'JSIContainer_C_EquipItemFromJigRef::CallEquipEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Added) == 0x000009, "Member 'JSIContainer_C_EquipItemFromJigRef::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, EquippedItemRef) == 0x000010, "Member 'JSIContainer_C_EquipItemFromJigRef::EquippedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, FromC) == 0x000018, "Member 'JSIContainer_C_EquipItemFromJigRef::FromC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, ItemVec) == 0x000020, "Member 'JSIContainer_C_EquipItemFromJigRef::ItemVec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Rotate_) == 0x000030, "Member 'JSIContainer_C_EquipItemFromJigRef::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, ToIndex) == 0x000034, "Member 'JSIContainer_C_EquipItemFromJigRef::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetJigDA_JigDataAsset) == 0x000038, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetSlotDim_SlotDimension) == 0x000040, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetType_Type) == 0x000050, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsSupportedByThis_Supported_) == 0x000058, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsSupportedByThis_Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_AddItemFromJigRef_Added) == 0x00005A, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_AddItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_AddItemFromJigRef_AddedItemRef) == 0x000060, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_AddItemFromJigRef_AddedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Temp_bool_Variable) == 0x000068, "Member 'JSIContainer_C_EquipItemFromJigRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue_1) == 0x000069, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_Array_Get_Item) == 0x000070, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue_2) == 0x000078, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue_3) == 0x000079, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_CalculateSize_ReturnValue) == 0x000080, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, K2Node_Select_Default) == 0x000090, "Member 'JSIContainer_C_EquipItemFromJigRef::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsEquipTo__ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_ResizeSlot_Size) == 0x0000A8, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_ResizeSlot_Size' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Temp_bool_Variable_1) == 0x0000B8, "Member 'JSIContainer_C_EquipItemFromJigRef::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsEquipped__ReturnValue) == 0x0000B9, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_Not_PreBool_ReturnValue) == 0x0000C8, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, K2Node_MakeArray_Array) == 0x0000D0, "Member 'JSIContainer_C_EquipItemFromJigRef::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_BooleanAND_ReturnValue) == 0x0000E0, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Temp_byte_Variable) == 0x0000E1, "Member 'JSIContainer_C_EquipItemFromJigRef::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetSlotDim_SlotDimension_1) == 0x0000E8, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_CalculateSizeCustom_ReturnValue) == 0x0000F8, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue_4) == 0x000108, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetImageFromInfo_Image) == 0x000110, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetImageFromInfo_Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsVisible_ReturnValue) == 0x000118, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_IsValid_ReturnValue_5) == 0x000119, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_isRotated__ReturnValue) == 0x00011A, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, K2Node_Select_Default_1) == 0x000120, "Member 'JSIContainer_C_EquipItemFromJigRef::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Temp_byte_Variable_1) == 0x000128, "Member 'JSIContainer_C_EquipItemFromJigRef::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_UpdateImage_Updated) == 0x000129, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_UpdateImage_Updated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, Temp_bool_Variable_2) == 0x00012A, "Member 'JSIContainer_C_EquipItemFromJigRef::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, K2Node_Select_Default_2) == 0x00012B, "Member 'JSIContainer_C_EquipItemFromJigRef::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetColumnRowBySlotIndex_Column) == 0x00012C, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetColumnRowBySlotIndex_Row) == 0x000130, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Padding) == 0x000134, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x000144, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_GetPaddingBySlotIndex_Row) == 0x000148, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_Array_Add_ReturnValue) == 0x00014C, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_ClearItemFromArr_Removed) == 0x000150, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_ClearItemFromArr_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_AddChildToOverlay_ReturnValue) == 0x000158, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EquipItemFromJigRef, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000160, "Member 'JSIContainer_C_EquipItemFromJigRef::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ExecuteUbergraph_JSIContainer
// 0x0400 (0x0400 - 0x0000)
struct JSIContainer_C_ExecuteUbergraph_JSIContainer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            K2Node_Event_ItemRef;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ActorRef;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewWeight;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_Event_Widget;                               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Name;                                 // 0x0028(0x0018)()
	class UBP_InspectorWindowWidget_C*            K2Node_Event_Inspector;                            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Design_;                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Columns;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Rows;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_CustomEvent_FromContainer;                  // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        K2Node_CustomEvent_ToContainer;                    // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            K2Node_CustomEvent_SlotRef;                        // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            K2Node_CustomEvent_ToSlotRef;                      // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ToSlot;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_DragRotated_;                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_TryRotated_;                    // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled_;      // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x00B0(0x0078)()
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0130(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0168(0x0078)()
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation;          // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget;                  // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_203[0x1];                                      // 0x0203(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDefaultItemInfo                       CallFunc_Array_Get_Item;                           // 0x0210(0x0010)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x024C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetNumGameplayTagsInContainer_ReturnValue; // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_2;                 // 0x027B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0290(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_3;                 // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDefaultItemInfo                       CallFunc_Array_Get_Item_1;                         // 0x02A8(0x0010)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewInventoryItem_ItemInfo;             // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x02C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Stacked_;             // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D3[0x1];                                      // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UJSIContainer_C*                  Temp_object_Variable;                              // 0x02E0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_JSIGamepadCcntroller_C> K2Node_DynamicCast_AsBPI_JSIGamepad_Ccntroller;    // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetControllerAxis_Axis;                   // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_FindNearestToColumnRow_Output_Get;        // 0x0390(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindNearestToColumnRow_Index;             // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindNearestToColumnRow_RetReverse;        // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindNearestToColumnRow_RetCheckCol;       // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39E[0x2];                                      // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FindNearestToColumnRow_RetUP_;            // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FindNearestToColumnRow_RetRight_;         // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindNearestToColumnRow_Output_Get_1;      // 0x03C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindNearestToColumnRow_Index_1;           // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindNearestToColumnRow_RetReverse_1;      // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindNearestToColumnRow_RetCheckCol_1;     // 0x03D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D6[0x2];                                      // 0x03D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FindNearestToColumnRow_RetUP__1;          // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FindNearestToColumnRow_RetRight__1;       // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ChangePrice_Price_ImplicitCast;           // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ExecuteUbergraph_JSIContainer) == 0x000008, "Wrong alignment on JSIContainer_C_ExecuteUbergraph_JSIContainer");
static_assert(sizeof(JSIContainer_C_ExecuteUbergraph_JSIContainer) == 0x000400, "Wrong size on JSIContainer_C_ExecuteUbergraph_JSIContainer");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, EntryPoint) == 0x000000, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::EntryPoint' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_ItemRef) == 0x000008, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_ActorRef) == 0x000010, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_ActorRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_NewWeight) == 0x000018, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_NewWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Widget) == 0x000020, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Name) == 0x000028, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Inspector) == 0x000040, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Inspector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_IsDesignTime) == 0x000048, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Design_) == 0x000049, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Design_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable) == 0x00004C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_MakeVector2D_ReturnValue) == 0x000058, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetSlotIndex_Result) == 0x000070, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Columns) == 0x000074, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Columns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Rows) == 0x000078, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Rows' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_FromContainer) == 0x000080, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_ToContainer) == 0x000088, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_SlotRef) == 0x000090, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_ToSlotRef) == 0x000098, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_ToSlot) == 0x0000A0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_DragRotated_) == 0x0000A4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_DragRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_TryRotated_) == 0x0000A5, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_HandleContainerOnContainer_Handled_) == 0x0000A6, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_HandleContainerOnContainer_Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_IntInt_ReturnValue) == 0x0000A7, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsEquipTo__ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000A9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_PointerEvent_1) == 0x0000B0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Operation_1) == 0x000128, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_MyGeometry) == 0x000130, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_PointerEvent) == 0x000168, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Operation) == 0x0001E0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsJig_SDrag_Operation) == 0x0001E8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsJig_SDrag_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsDrag_Widget) == 0x0001F8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsDrag_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_1) == 0x000200, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanOR_ReturnValue) == 0x000201, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanOR_ReturnValue_1) == 0x000202, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue) == 0x000204, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Has_Been_Initd_Variable) == 0x000208, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item) == 0x000210, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue) == 0x000220, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x000221, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x000224, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000228, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x000230, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Create_ReturnValue) == 0x000238, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000240, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Add_ReturnValue) == 0x000248, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeStruct_Margin) == 0x00024C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetNumGameplayTagsInContainer_ReturnValue) == 0x00025C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetNumGameplayTagsInContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x000260, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue) == 0x000261, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Loop_Counter_Variable) == 0x000264, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000268, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue_1) == 0x00026C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000270, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000274, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_IsClosed_Variable) == 0x000278, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_IsClosed_Variable_1) == 0x000279, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsEquipTo__ReturnValue_1) == 0x00027A, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsEquipTo__ReturnValue_2) == 0x00027B, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsEquipTo__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_X) == 0x000280, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_Y) == 0x000288, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000290, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Has_Been_Initd_Variable_1) == 0x000298, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsEquipTo__ReturnValue_3) == 0x000299, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsEquipTo__ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Array_Index_Variable) == 0x00029C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue) == 0x0002A0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_1) == 0x0002A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0002B8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_Added) == 0x0002B9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_SlotIndex) == 0x0002BC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_ItemInfo) == 0x0002C0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x0002C8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_Stacked_) == 0x0002D0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_Stacked_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_1) == 0x0002D1, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x0002D2, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable_1) == 0x0002D4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0002D8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002DC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_object_Variable) == 0x0002E0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue_2) == 0x0002E8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0002EC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetPlayerController_ReturnValue) == 0x0002F0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsBPI_JSIGamepad_Ccntroller) == 0x0002F8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsBPI_JSIGamepad_Ccntroller' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_2) == 0x000308, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetControllerAxis_Axis) == 0x000310, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetControllerAxis_Axis' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_VSize2D_ReturnValue) == 0x000320, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000328, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_X_1) == 0x000330, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_Y_1) == 0x000338, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000340, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Abs_ReturnValue) == 0x000348, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Abs_ReturnValue_1) == 0x000350, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000358, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000359, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SelectFloat_ReturnValue) == 0x000360, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000368, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Abs_ReturnValue_2) == 0x000370, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SelectFloat_ReturnValue_1) == 0x000378, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000380, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x000381, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SelectFloat_ReturnValue_2) == 0x000388, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_Output_Get) == 0x000390, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_Output_Get' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_Index) == 0x000398, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_Index' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetReverse) == 0x00039C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetReverse' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetCheckCol) == 0x00039D, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetCheckCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetUP_) == 0x0003A0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetUP_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetRight_) == 0x0003A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetRight_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_2) == 0x0003B0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0003B8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue_2) == 0x0003C0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_Output_Get_1) == 0x0003C8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_Output_Get_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_Index_1) == 0x0003D0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_Index_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetReverse_1) == 0x0003D4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetReverse_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetCheckCol_1) == 0x0003D5, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetCheckCol_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetUP__1) == 0x0003D8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetUP__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_FindNearestToColumnRow_RetRight__1) == 0x0003E0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_FindNearestToColumnRow_RetRight__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_3) == 0x0003E8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x0003EC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_ChangePrice_Price_ImplicitCast) == 0x0003F0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_ChangePrice_Price_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0003F8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ExpandContainer
// 0x0148 (0x0148 - 0x0000)
struct JSIContainer_C_ExpandContainer final
{
public:
	int32                                         AddColumns;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddRows;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InsertInIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewRowItemcounter;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue_1;                     // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0146(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0147(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ExpandContainer) == 0x000008, "Wrong alignment on JSIContainer_C_ExpandContainer");
static_assert(sizeof(JSIContainer_C_ExpandContainer) == 0x000148, "Wrong size on JSIContainer_C_ExpandContainer");
static_assert(offsetof(JSIContainer_C_ExpandContainer, AddColumns) == 0x000000, "Member 'JSIContainer_C_ExpandContainer::AddColumns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, AddRows) == 0x000004, "Member 'JSIContainer_C_ExpandContainer::AddRows' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Success) == 0x000008, "Member 'JSIContainer_C_ExpandContainer::Success' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, InsertInIndex) == 0x00000C, "Member 'JSIContainer_C_ExpandContainer::InsertInIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, NewRowItemcounter) == 0x000010, "Member 'JSIContainer_C_ExpandContainer::NewRowItemcounter' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000015, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, K2Node_MakeStruct_Margin) == 0x000018, "Member 'JSIContainer_C_ExpandContainer::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_BooleanOR_ReturnValue) == 0x000028, "Member 'JSIContainer_C_ExpandContainer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_GetSlotIndex_Result) == 0x00002C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'JSIContainer_C_ExpandContainer::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Variable) == 0x000040, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Variable_1) == 0x000050, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Create_ReturnValue) == 0x000058, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_3) == 0x000064, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000068, "Member 'JSIContainer_C_ExpandContainer::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Array_Index_Variable) == 0x000074, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, K2Node_MakeStruct_Margin_1) == 0x000078, "Member 'JSIContainer_C_ExpandContainer::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_GetSlotIndex_Result_1) == 0x000088, "Member 'JSIContainer_C_ExpandContainer::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_MakeVector2D_ReturnValue_1) == 0x000090, "Member 'JSIContainer_C_ExpandContainer::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Variable_2) == 0x0000A0, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000A4, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000A8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Variable_3) == 0x0000AC, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000B0, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B4, "Member 'JSIContainer_C_ExpandContainer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000B5, "Member 'JSIContainer_C_ExpandContainer::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_BooleanAND_ReturnValue) == 0x0000B6, "Member 'JSIContainer_C_ExpandContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Array_Index_Variable_1) == 0x0000C0, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Get_Item_1) == 0x0000D0, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Create_ReturnValue_1) == 0x0000D8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_AddChildToUniformGrid_ReturnValue_1) == 0x0000E0, "Member 'JSIContainer_C_ExpandContainer::CallFunc_AddChildToUniformGrid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Add_ReturnValue_1) == 0x0000E8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Get_Item_2) == 0x0000F0, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Array_Length_ReturnValue_1) == 0x0000F8, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000FC, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_7) == 0x000100, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000104, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_8) == 0x000108, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x00010C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000110, "Member 'JSIContainer_C_ExpandContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_9) == 0x000114, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000118, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00011C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, Temp_int_Variable_4) == 0x000120, "Member 'JSIContainer_C_ExpandContainer::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_10) == 0x000124, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_11) == 0x000128, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Multiply_IntInt_ReturnValue) == 0x00012C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_12) == 0x000130, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000134, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000138, "Member 'JSIContainer_C_ExpandContainer::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Add_IntInt_ReturnValue_13) == 0x00013C, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000140, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_IsEquipTo__ReturnValue) == 0x000144, "Member 'JSIContainer_C_ExpandContainer::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000145, "Member 'JSIContainer_C_ExpandContainer::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_Not_PreBool_ReturnValue) == 0x000146, "Member 'JSIContainer_C_ExpandContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExpandContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x000147, "Member 'JSIContainer_C_ExpandContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.FindBestStackingItem
// 0x0078 (0x0078 - 0x0000)
struct JSIContainer_C_FindBestStackingItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DroppedItemCount;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            BestStackingItem;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FreeSpace;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStackAll;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AvailableFreeSpace;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CurrentBest;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxCapacity_MaxCap;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_FindBestStackingItem) == 0x000008, "Wrong alignment on JSIContainer_C_FindBestStackingItem");
static_assert(sizeof(JSIContainer_C_FindBestStackingItem) == 0x000078, "Wrong size on JSIContainer_C_FindBestStackingItem");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, ItemId) == 0x000000, "Member 'JSIContainer_C_FindBestStackingItem::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, DroppedItemCount) == 0x000008, "Member 'JSIContainer_C_FindBestStackingItem::DroppedItemCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, BestStackingItem) == 0x000010, "Member 'JSIContainer_C_FindBestStackingItem::BestStackingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, FreeSpace) == 0x000018, "Member 'JSIContainer_C_FindBestStackingItem::FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CanStackAll) == 0x00001C, "Member 'JSIContainer_C_FindBestStackingItem::CanStackAll' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, AvailableFreeSpace) == 0x000020, "Member 'JSIContainer_C_FindBestStackingItem::AvailableFreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CurrentBest) == 0x000028, "Member 'JSIContainer_C_FindBestStackingItem::CurrentBest' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CurrentCount) == 0x000030, "Member 'JSIContainer_C_FindBestStackingItem::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, Temp_int_Array_Index_Variable) == 0x000034, "Member 'JSIContainer_C_FindBestStackingItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'JSIContainer_C_FindBestStackingItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000041, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_GetMaxStack_MaxStack) == 0x000054, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_GetCount_Count) == 0x000058, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_GetMaxCapacity_MaxCap) == 0x00005C, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_GetMaxCapacity_MaxCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_BooleanOR_ReturnValue) == 0x000068, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_Less_IntInt_ReturnValue_2) == 0x000069, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_GetItemID_ItemID) == 0x00006C, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000074, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_BooleanAND_ReturnValue) == 0x000075, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindBestStackingItem, CallFunc_BooleanAND_ReturnValue_1) == 0x000076, "Member 'JSIContainer_C_FindBestStackingItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.FindNearestToColumnRow
// 0x0218 (0x0218 - 0x0000)
struct JSIContainer_C_FindNearestToColumnRow final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckCol;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UP_;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Right_;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flip_;                                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Output_Get;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetReverse;                                        // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetCheckCol;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetUP_;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetRight_;                                         // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BestScore;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BestIndex;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Init;                                              // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            BestItem;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         BestRow;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BestCol;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Current;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Col;                                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_3;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_3;    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Column;   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Row;      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_1;                    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_2;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_5;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_6;            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_3;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_7;            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Column_1; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Row_1;    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_8;            // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_9;            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue_4;                    // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15F[0x1];                                      // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Column_2; // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Row_2;    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_2;      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16B[0x1];                                      // 0x016B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_10;           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue_5;                    // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_11;           // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_1;        // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192[0x2];                                      // 0x0192(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Column_3; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Row_3;    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_12;           // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A7[0x1];                                      // 0x01A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_13;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue_6;                    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_2;        // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x01C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_3;      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_3;            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Column_4; // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_NonPure_Row_4;    // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_14;           // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue_7;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_15;           // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_5;             // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_3;        // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_FindNearestToColumnRow) == 0x000008, "Wrong alignment on JSIContainer_C_FindNearestToColumnRow");
static_assert(sizeof(JSIContainer_C_FindNearestToColumnRow) == 0x000218, "Wrong size on JSIContainer_C_FindNearestToColumnRow");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Reverse) == 0x000000, "Member 'JSIContainer_C_FindNearestToColumnRow::Reverse' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CheckCol) == 0x000001, "Member 'JSIContainer_C_FindNearestToColumnRow::CheckCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, UP_) == 0x000008, "Member 'JSIContainer_C_FindNearestToColumnRow::UP_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Right_) == 0x000010, "Member 'JSIContainer_C_FindNearestToColumnRow::Right_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Flip_) == 0x000018, "Member 'JSIContainer_C_FindNearestToColumnRow::Flip_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Output_Get) == 0x000020, "Member 'JSIContainer_C_FindNearestToColumnRow::Output_Get' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Index_0) == 0x000028, "Member 'JSIContainer_C_FindNearestToColumnRow::Index_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, RetReverse) == 0x00002C, "Member 'JSIContainer_C_FindNearestToColumnRow::RetReverse' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, RetCheckCol) == 0x00002D, "Member 'JSIContainer_C_FindNearestToColumnRow::RetCheckCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, RetUP_) == 0x000030, "Member 'JSIContainer_C_FindNearestToColumnRow::RetUP_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, RetRight_) == 0x000038, "Member 'JSIContainer_C_FindNearestToColumnRow::RetRight_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, BestScore) == 0x000040, "Member 'JSIContainer_C_FindNearestToColumnRow::BestScore' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, BestIndex) == 0x000044, "Member 'JSIContainer_C_FindNearestToColumnRow::BestIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Init) == 0x000048, "Member 'JSIContainer_C_FindNearestToColumnRow::Init' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, BestItem) == 0x000050, "Member 'JSIContainer_C_FindNearestToColumnRow::BestItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, BestRow) == 0x000058, "Member 'JSIContainer_C_FindNearestToColumnRow::BestRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, BestCol) == 0x00005C, "Member 'JSIContainer_C_FindNearestToColumnRow::BestCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Current) == 0x000060, "Member 'JSIContainer_C_FindNearestToColumnRow::Current' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Row) == 0x000068, "Member 'JSIContainer_C_FindNearestToColumnRow::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Col) == 0x00006C, "Member 'JSIContainer_C_FindNearestToColumnRow::Col' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_bool_Variable) == 0x000070, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_SelectInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_bool_Variable_1) == 0x000078, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_SelectInt_ReturnValue_1) == 0x00007C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_2) == 0x000081, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_3) == 0x000082, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_4) == 0x000083, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_SelectInt_ReturnValue_2) == 0x000084, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_5) == 0x000088, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_SelectInt_ReturnValue_3) == 0x00008C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_SelectInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_int_Variable) == 0x000090, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000094, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_int_Variable_1) == 0x0000A0, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000A4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_bool_Variable_2) == 0x0000AD, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_6) == 0x0000AE, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000AF, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_int_Variable_2) == 0x0000B4, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0000B8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000BC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_DoubleDouble_ReturnValue_3) == 0x0000C0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_bool_Variable_3) == 0x0000C1, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_7) == 0x0000C2, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Column) == 0x0000C4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Row) == 0x0000C8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000CC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000D0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue) == 0x0000D4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000D8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000DC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x0000E0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_1) == 0x0000E4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000E8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x0000EC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_2) == 0x0000F0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_5) == 0x0000F4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000F8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_6) == 0x0000FC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_3) == 0x000100, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_7) == 0x000104, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_8) == 0x000108, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_6) == 0x00010C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_9) == 0x000110, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Array_LastIndex_ReturnValue) == 0x000114, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000118, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00011C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00011D, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue) == 0x00011E, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Column_1) == 0x000120, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Column_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Row_1) == 0x000124, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Row_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_10) == 0x000128, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_8) == 0x00012C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue) == 0x000130, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue) == 0x000131, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000132, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_9) == 0x000134, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_1) == 0x000138, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_4) == 0x00013C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue) == 0x000140, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Multiply_IntInt_ReturnValue) == 0x000144, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_1) == 0x000148, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_7) == 0x00014C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_2) == 0x000150, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_1) == 0x000151, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000152, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Not_PreBool_ReturnValue_11) == 0x000153, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, Temp_int_Variable_3) == 0x000154, "Member 'JSIContainer_C_FindNearestToColumnRow::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000158, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x00015C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00015D, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_3) == 0x00015E, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Column_2) == 0x000160, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Column_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Row_2) == 0x000164, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Row_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_NotEqual_ObjectObject_ReturnValue_2) == 0x000168, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_NotEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000169, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_2) == 0x00016A, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_10) == 0x00016C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_4) == 0x000170, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_5) == 0x000174, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_2) == 0x000178, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00017C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_3) == 0x000180, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_3) == 0x000181, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_11) == 0x000184, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_5) == 0x000188, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_8) == 0x00018C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_4) == 0x000190, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_BoolBool_ReturnValue_1) == 0x000191, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Column_3) == 0x000194, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Column_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Row_3) == 0x000198, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Row_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_9) == 0x00019C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_12) == 0x0001A0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_5) == 0x0001A4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_6) == 0x0001A5, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue_3) == 0x0001A6, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_13) == 0x0001A8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_6) == 0x0001AC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_6) == 0x0001B0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_4) == 0x0001B4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x0001B8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_5) == 0x0001BC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_10) == 0x0001C0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_7) == 0x0001C4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_7) == 0x0001C5, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_BoolBool_ReturnValue_2) == 0x0001C6, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_BoolBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0001C7, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_8) == 0x0001C8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Array_Get_Item) == 0x0001D0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_NotEqual_ObjectObject_ReturnValue_3) == 0x0001D8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_NotEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Array_LastIndex_ReturnValue_3) == 0x0001DC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Array_LastIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Column_4) == 0x0001E0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Column_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_GetColumnRowBySlotIndex_NonPure_Row_4) == 0x0001E4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_GetColumnRowBySlotIndex_NonPure_Row_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0001E8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue_4) == 0x0001E9, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_9) == 0x0001EA, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_8) == 0x0001EB, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_10) == 0x0001EC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_14) == 0x0001F0, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_6) == 0x0001F4, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Abs_Int_ReturnValue_7) == 0x0001F8, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Abs_Int_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanOR_ReturnValue_7) == 0x0001FC, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x000200, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Subtract_IntInt_ReturnValue_15) == 0x000204, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Subtract_IntInt_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Greater_IntInt_ReturnValue_5) == 0x000208, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Greater_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Add_IntInt_ReturnValue_11) == 0x00020C, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_BooleanAND_ReturnValue_11) == 0x000210, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_Less_IntInt_ReturnValue_9) == 0x000211, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindNearestToColumnRow, CallFunc_EqualEqual_BoolBool_ReturnValue_3) == 0x000212, "Member 'JSIContainer_C_FindNearestToColumnRow::CallFunc_EqualEqual_BoolBool_ReturnValue_3' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.FindSlotByIndex
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_FindSlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_FindSlotByIndex) == 0x000008, "Wrong alignment on JSIContainer_C_FindSlotByIndex");
static_assert(sizeof(JSIContainer_C_FindSlotByIndex) == 0x000028, "Wrong size on JSIContainer_C_FindSlotByIndex");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, Index_0) == 0x000000, "Member 'JSIContainer_C_FindSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, SlotRef) == 0x000008, "Member 'JSIContainer_C_FindSlotByIndex::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_FindSlotByIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_FindSlotByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_FindSlotByIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'JSIContainer_C_FindSlotByIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FindSlotByIndex, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'JSIContainer_C_FindSlotByIndex::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.FlipSlotDim
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_FlipSlotDim final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Flipped;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_FlipSlotDim) == 0x000008, "Wrong alignment on JSIContainer_C_FlipSlotDim");
static_assert(sizeof(JSIContainer_C_FlipSlotDim) == 0x000040, "Wrong size on JSIContainer_C_FlipSlotDim");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, SlotVector) == 0x000000, "Member 'JSIContainer_C_FlipSlotDim::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, Flipped) == 0x000010, "Member 'JSIContainer_C_FlipSlotDim::Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_BreakVector2D_X) == 0x000020, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Get Slot Index by Column Row
// 0x001C (0x001C - 0x0000)
struct JSIContainer_C_Get_Slot_Index_by_Column_Row final
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Get_Slot_Index_by_Column_Row) == 0x000004, "Wrong alignment on JSIContainer_C_Get_Slot_Index_by_Column_Row");
static_assert(sizeof(JSIContainer_C_Get_Slot_Index_by_Column_Row) == 0x00001C, "Wrong size on JSIContainer_C_Get_Slot_Index_by_Column_Row");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, Column) == 0x000000, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, Row) == 0x000004, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, ReturnValue) == 0x000008, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, CallFunc_Multiply_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Slot_Index_by_Column_Row, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'JSIContainer_C_Get_Slot_Index_by_Column_Row::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetAllAttachments
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_GetAllAttachments final
{
public:
	TArray<class FName>                           Attachments;                                       // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(JSIContainer_C_GetAllAttachments) == 0x000008, "Wrong alignment on JSIContainer_C_GetAllAttachments");
static_assert(sizeof(JSIContainer_C_GetAllAttachments) == 0x000010, "Wrong size on JSIContainer_C_GetAllAttachments");
static_assert(offsetof(JSIContainer_C_GetAllAttachments, Attachments) == 0x000000, "Member 'JSIContainer_C_GetAllAttachments::Attachments' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetCapacity
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_GetCapacity final
{
public:
	int32                                         Cap;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempInt;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetCapacity) == 0x000008, "Wrong alignment on JSIContainer_C_GetCapacity");
static_assert(sizeof(JSIContainer_C_GetCapacity) == 0x000030, "Wrong size on JSIContainer_C_GetCapacity");
static_assert(offsetof(JSIContainer_C_GetCapacity, Cap) == 0x000000, "Member 'JSIContainer_C_GetCapacity::Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, TempInt) == 0x000004, "Member 'JSIContainer_C_GetCapacity::TempInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSIContainer_C_GetCapacity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_GetCapacity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetCapacity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetCapacity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_GetCapacity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GetCapacity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_GetCount_Count) == 0x000024, "Member 'JSIContainer_C_GetCapacity::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCapacity, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'JSIContainer_C_GetCapacity::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetColumnRowBySlotIndex
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetColumnRowBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempRow;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempColumn;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetColumnRowBySlotIndex) == 0x000004, "Wrong alignment on JSIContainer_C_GetColumnRowBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetColumnRowBySlotIndex) == 0x000020, "Wrong size on JSIContainer_C_GetColumnRowBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, Column) == 0x000004, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, Row) == 0x000008, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, TempRow) == 0x00000C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::TempRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, TempColumn) == 0x000010, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::TempColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetColumnRowBySlotIndex_NonPure
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetColumnRowBySlotIndex_NonPure final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempRow;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempColumn;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure) == 0x000004, "Wrong alignment on JSIContainer_C_GetColumnRowBySlotIndex_NonPure");
static_assert(sizeof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure) == 0x000020, "Wrong size on JSIContainer_C_GetColumnRowBySlotIndex_NonPure");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, Column) == 0x000004, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, Row) == 0x000008, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, TempRow) == 0x00000C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::TempRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, TempColumn) == 0x000010, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::TempColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex_NonPure, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex_NonPure::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerByAttachmentType
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_GetContainerByAttachmentType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        JigContainer;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ContainerIndex;                                    // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetContainerByAttachmentType) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerByAttachmentType");
static_assert(sizeof(JSIContainer_C_GetContainerByAttachmentType) == 0x000018, "Wrong size on JSIContainer_C_GetContainerByAttachmentType");
static_assert(offsetof(JSIContainer_C_GetContainerByAttachmentType, Type) == 0x000000, "Member 'JSIContainer_C_GetContainerByAttachmentType::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerByAttachmentType, JigContainer) == 0x000008, "Member 'JSIContainer_C_GetContainerByAttachmentType::JigContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerByAttachmentType, ContainerIndex) == 0x000010, "Member 'JSIContainer_C_GetContainerByAttachmentType::ContainerIndex' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerHierarchy
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_GetContainerHierarchy final
{
public:
	TArray<class UJSIContainer_C*>                Containers;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSIContainer_C*>                FoundContainers;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSIContainer_C*                        CurrentContainer;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetContainerHierarchy) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerHierarchy");
static_assert(sizeof(JSIContainer_C_GetContainerHierarchy) == 0x000030, "Wrong size on JSIContainer_C_GetContainerHierarchy");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, Containers) == 0x000000, "Member 'JSIContainer_C_GetContainerHierarchy::Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, FoundContainers) == 0x000010, "Member 'JSIContainer_C_GetContainerHierarchy::FoundContainers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CurrentContainer) == 0x000020, "Member 'JSIContainer_C_GetContainerHierarchy::CurrentContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_IsEquipTo__ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_Array_Add_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerIndex
// 0x0068 (0x0068 - 0x0000)
struct JSIContainer_C_GetContainerIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetContainerIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerIndex");
static_assert(sizeof(JSIContainer_C_GetContainerIndex) == 0x000068, "Wrong size on JSIContainer_C_GetContainerIndex");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, Index_0) == 0x000000, "Member 'JSIContainer_C_GetContainerIndex::Index_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, Temp_int_Array_Index_Variable) == 0x000004, "Member 'JSIContainer_C_GetContainerIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'JSIContainer_C_GetContainerIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_GetContainerOneRef_ContainerRef) == 0x000010, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000020, "Member 'JSIContainer_C_GetContainerIndex::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'JSIContainer_C_GetContainerIndex::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_GetListOfContainers_Containers) == 0x000038, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_Array_Get_Item) == 0x000050, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetContainerIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerName
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_GetContainerName final
{
public:
	class FText                                   ContainerName_0;                                   // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(JSIContainer_C_GetContainerName) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerName");
static_assert(sizeof(JSIContainer_C_GetContainerName) == 0x000018, "Wrong size on JSIContainer_C_GetContainerName");
static_assert(offsetof(JSIContainer_C_GetContainerName, ContainerName_0) == 0x000000, "Member 'JSIContainer_C_GetContainerName::ContainerName_0' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainersFromEquipped
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_GetContainersFromEquipped final
{
public:
	TArray<class UJSIContainer_C*>                Container;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetContainers_Container;                  // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(JSIContainer_C_GetContainersFromEquipped) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainersFromEquipped");
static_assert(sizeof(JSIContainer_C_GetContainersFromEquipped) == 0x000038, "Wrong size on JSIContainer_C_GetContainersFromEquipped");
static_assert(offsetof(JSIContainer_C_GetContainersFromEquipped, Container) == 0x000000, "Member 'JSIContainer_C_GetContainersFromEquipped::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainersFromEquipped, CallFunc_GetEquippedItemRef_Found_) == 0x000010, "Member 'JSIContainer_C_GetContainersFromEquipped::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainersFromEquipped, CallFunc_GetEquippedItemRef_ItemRef) == 0x000018, "Member 'JSIContainer_C_GetContainersFromEquipped::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainersFromEquipped, CallFunc_GetEquippedItemRef_IsPending) == 0x000020, "Member 'JSIContainer_C_GetContainersFromEquipped::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainersFromEquipped, CallFunc_GetContainers_Container) == 0x000028, "Member 'JSIContainer_C_GetContainersFromEquipped::CallFunc_GetContainers_Container' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetDropWidget
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetDropWidget final
{
public:
	class UDropItemBackGwidget_C*                 DropWRef;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetDropWidget) == 0x000008, "Wrong alignment on JSIContainer_C_GetDropWidget");
static_assert(sizeof(JSIContainer_C_GetDropWidget) == 0x000008, "Wrong size on JSIContainer_C_GetDropWidget");
static_assert(offsetof(JSIContainer_C_GetDropWidget, DropWRef) == 0x000000, "Member 'JSIContainer_C_GetDropWidget::DropWRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEmptySlot
// 0x00D8 (0x00D8 - 0x0000)
struct JSIContainer_C_GetEmptySlot final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkipToSlot;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreScan;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            FoundItem;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVY;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVX;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetContainerCapacity_Cap;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_MaxCapacity;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEmptySlot) == 0x000008, "Wrong alignment on JSIContainer_C_GetEmptySlot");
static_assert(sizeof(JSIContainer_C_GetEmptySlot) == 0x0000D8, "Wrong size on JSIContainer_C_GetEmptySlot");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVector) == 0x000000, "Member 'JSIContainer_C_GetEmptySlot::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotIndex) == 0x000010, "Member 'JSIContainer_C_GetEmptySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Found_) == 0x000014, "Member 'JSIContainer_C_GetEmptySlot::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SkipToSlot) == 0x000018, "Member 'JSIContainer_C_GetEmptySlot::SkipToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, IgnoreScan) == 0x00001C, "Member 'JSIContainer_C_GetEmptySlot::IgnoreScan' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, FoundItem) == 0x000020, "Member 'JSIContainer_C_GetEmptySlot::FoundItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVY) == 0x000028, "Member 'JSIContainer_C_GetEmptySlot::SlotVY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVX) == 0x00002C, "Member 'JSIContainer_C_GetEmptySlot::SlotVX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CurrentIndex) == 0x000030, "Member 'JSIContainer_C_GetEmptySlot::CurrentIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BreakVector2D_X) == 0x000038, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BreakVector2D_Y) == 0x000040, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEmptySlot_isEmpty) == 0x000048, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_FTrunc_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_FTrunc_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable) == 0x000054, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable) == 0x00005C, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_1) == 0x000060, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEquipped__ReturnValue) == 0x000069, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEquipTo__ReturnValue) == 0x00006A, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_SelectInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x000071, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_GetContainerCapacity_Cap) == 0x000074, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_GetContainerCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_GetContainerCapacity_MaxCapacity) == 0x000078, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_GetContainerCapacity_MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_1) == 0x00007D, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_2) == 0x00007E, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000088, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_2) == 0x00008C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_2) == 0x000090, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Get_Item) == 0x000098, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000A0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000A4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000AC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000B0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEmptySlot_isEmpty_1) == 0x0000C0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000C1, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue) == 0x0000C2, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0000C3, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000C8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0000CC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000D0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x0000D4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D5, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000D6, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_2) == 0x0000D7, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEmptySlotTryRotated
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_GetEmptySlotTryRotated final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToIndex;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEmptySlotTryRotated) == 0x000008, "Wrong alignment on JSIContainer_C_GetEmptySlotTryRotated");
static_assert(sizeof(JSIContainer_C_GetEmptySlotTryRotated) == 0x000048, "Wrong size on JSIContainer_C_GetEmptySlotTryRotated");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, SlotVector) == 0x000000, "Member 'JSIContainer_C_GetEmptySlotTryRotated::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, Found_) == 0x000010, "Member 'JSIContainer_C_GetEmptySlotTryRotated::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, ToIndex) == 0x000014, "Member 'JSIContainer_C_GetEmptySlotTryRotated::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_BreakVector2D_X) == 0x000018, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_GetEmptySlot_SlotIndex) == 0x000028, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_GetEmptySlot_Found_) == 0x00002C, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_GetEmptySlot_SlotIndex_1) == 0x000040, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_GetEmptySlot_Found__1) == 0x000044, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000045, "Member 'JSIContainer_C_GetEmptySlotTryRotated::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEmptySlotTryRotated_NonPure
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_GetEmptySlotTryRotated_NonPure final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToSlotIndex;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToIndex;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEmptySlotTryRotated_NonPure) == 0x000008, "Wrong alignment on JSIContainer_C_GetEmptySlotTryRotated_NonPure");
static_assert(sizeof(JSIContainer_C_GetEmptySlotTryRotated_NonPure) == 0x000058, "Wrong size on JSIContainer_C_GetEmptySlotTryRotated_NonPure");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, SlotVector) == 0x000000, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, Found_) == 0x000010, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, ToSlotIndex) == 0x000014, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::ToSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, Rotated_) == 0x000018, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, ToIndex) == 0x00001C, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_BreakVector2D_X) == 0x000020, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_GetEmptySlot_SlotIndex) == 0x000048, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_GetEmptySlot_Found_) == 0x00004C, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_GetEmptySlot_SlotIndex_1) == 0x000050, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_GetEmptySlot_Found__1) == 0x000054, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlotTryRotated_NonPure, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000055, "Member 'JSIContainer_C_GetEmptySlotTryRotated_NonPure::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEquippedItemRef
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_GetEquippedItemRef final
{
public:
	bool                                          Found_;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPending;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEquippedItemRef) == 0x000008, "Wrong alignment on JSIContainer_C_GetEquippedItemRef");
static_assert(sizeof(JSIContainer_C_GetEquippedItemRef) == 0x000028, "Wrong size on JSIContainer_C_GetEquippedItemRef");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, Found_) == 0x000000, "Member 'JSIContainer_C_GetEquippedItemRef::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, ItemRef) == 0x000008, "Member 'JSIContainer_C_GetEquippedItemRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, IsPending) == 0x000010, "Member 'JSIContainer_C_GetEquippedItemRef::IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_IsEquipTo__ReturnValue) == 0x000011, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_IsItemPending__IsPending) == 0x000024, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Greater_IntInt_ReturnValue) == 0x000025, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_BooleanAND_ReturnValue) == 0x000026, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetFreeSpaceIfCapacityContainer
// 0x0014 (0x0014 - 0x0000)
struct JSIContainer_C_GetFreeSpaceIfCapacityContainer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetContainerCapacity_Cap;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_MaxCapacity;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetFreeSpaceIfCapacityContainer) == 0x000004, "Wrong alignment on JSIContainer_C_GetFreeSpaceIfCapacityContainer");
static_assert(sizeof(JSIContainer_C_GetFreeSpaceIfCapacityContainer) == 0x000014, "Wrong size on JSIContainer_C_GetFreeSpaceIfCapacityContainer");
static_assert(offsetof(JSIContainer_C_GetFreeSpaceIfCapacityContainer, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetFreeSpaceIfCapacityContainer::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetFreeSpaceIfCapacityContainer, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetFreeSpaceIfCapacityContainer::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetFreeSpaceIfCapacityContainer, CallFunc_GetContainerCapacity_Cap) == 0x000008, "Member 'JSIContainer_C_GetFreeSpaceIfCapacityContainer::CallFunc_GetContainerCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetFreeSpaceIfCapacityContainer, CallFunc_GetContainerCapacity_MaxCapacity) == 0x00000C, "Member 'JSIContainer_C_GetFreeSpaceIfCapacityContainer::CallFunc_GetContainerCapacity_MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetFreeSpaceIfCapacityContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetFreeSpaceIfCapacityContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetHighestCapacityContainer
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_GetHighestCapacityContainer final
{
public:
	TArray<class UJSI_Slot_C*>                    Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            Output_Get;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CurrentBestItem;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCap;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetContainerCapacity_Cap;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_MaxCapacity;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetHighestCapacityContainer) == 0x000008, "Wrong alignment on JSIContainer_C_GetHighestCapacityContainer");
static_assert(sizeof(JSIContainer_C_GetHighestCapacityContainer) == 0x000060, "Wrong size on JSIContainer_C_GetHighestCapacityContainer");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, Items) == 0x000000, "Member 'JSIContainer_C_GetHighestCapacityContainer::Items' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, Output_Get) == 0x000010, "Member 'JSIContainer_C_GetHighestCapacityContainer::Output_Get' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CurrentBestItem) == 0x000018, "Member 'JSIContainer_C_GetHighestCapacityContainer::CurrentBestItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CurrentCap) == 0x000020, "Member 'JSIContainer_C_GetHighestCapacityContainer::CurrentCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, Temp_int_Array_Index_Variable) == 0x000034, "Member 'JSIContainer_C_GetHighestCapacityContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'JSIContainer_C_GetHighestCapacityContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_ISCapacityContainer_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_GetContainerCapacity_Cap) == 0x00004C, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_GetContainerCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_GetContainerCapacity_MaxCapacity) == 0x000050, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_GetContainerCapacity_MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHighestCapacityContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_GetHighestCapacityContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetHostingSlots
// 0x00B0 (0x00B0 - 0x0000)
struct JSIContainer_C_GetHostingSlots final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVec;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Indexes;                                           // 0x0018(0x0010)(Parm, OutParm)
	int32                                         StartingRow;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingCol;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 HostingSlots;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetHostingSlots) == 0x000008, "Wrong alignment on JSIContainer_C_GetHostingSlots");
static_assert(sizeof(JSIContainer_C_GetHostingSlots) == 0x0000B0, "Wrong size on JSIContainer_C_GetHostingSlots");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetHostingSlots::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, ItemVec) == 0x000008, "Member 'JSIContainer_C_GetHostingSlots::ItemVec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, Indexes) == 0x000018, "Member 'JSIContainer_C_GetHostingSlots::Indexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, StartingRow) == 0x000028, "Member 'JSIContainer_C_GetHostingSlots::StartingRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, StartingCol) == 0x00002C, "Member 'JSIContainer_C_GetHostingSlots::StartingCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, Y) == 0x000030, "Member 'JSIContainer_C_GetHostingSlots::Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, X) == 0x000034, "Member 'JSIContainer_C_GetHostingSlots::X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, HostingSlots) == 0x000038, "Member 'JSIContainer_C_GetHostingSlots::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_BreakVector2D_X) == 0x000048, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000058, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_GetColumnRowBySlotIndex_Row) == 0x00005C, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_FTrunc_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_FTrunc_ReturnValue_1) == 0x000064, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, Temp_int_Variable) == 0x000068, "Member 'JSIContainer_C_GetHostingSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_2) == 0x000074, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, Temp_int_Variable_1) == 0x000078, "Member 'JSIContainer_C_GetHostingSlots::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_3) == 0x00007C, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000080, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_4) == 0x00008C, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Subtract_IntInt_ReturnValue) == 0x000090, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000094, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_5) == 0x000098, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Greater_IntInt_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000A0, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Add_IntInt_ReturnValue_7) == 0x0000A4, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_BooleanOR_ReturnValue) == 0x0000A9, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetHostingSlots, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'JSIContainer_C_GetHostingSlots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetImageFromInfo
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetImageFromInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Image;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_2;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetImageFromInfo) == 0x000008, "Wrong alignment on JSIContainer_C_GetImageFromInfo");
static_assert(sizeof(JSIContainer_C_GetImageFromInfo) == 0x000020, "Wrong size on JSIContainer_C_GetImageFromInfo");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, Info) == 0x000000, "Member 'JSIContainer_C_GetImageFromInfo::Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, Image) == 0x000008, "Member 'JSIContainer_C_GetImageFromInfo::Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsEquipTo__ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_Not_PreBool_ReturnValue_1) == 0x000013, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsEquipTo__ReturnValue_1) == 0x000015, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsValid_ReturnValue_2) == 0x000017, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_Not_PreBool_ReturnValue_2) == 0x000018, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_IsEquipTo__ReturnValue_2) == 0x000019, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_IsEquipTo__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_BooleanAND_ReturnValue_1) == 0x00001A, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetImageFromInfo, CallFunc_BooleanAND_ReturnValue_2) == 0x00001B, "Member 'JSIContainer_C_GetImageFromInfo::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByID
// 0x0068 (0x0068 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByID final
{
public:
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByID) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByID");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByID) == 0x000068, "Wrong size on JSIContainer_C_GetInventoryItemsByID");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemId) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Found_) == 0x000008, "Member 'JSIContainer_C_GetInventoryItemsByID::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemsFound) == 0x000010, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemsFoundArray) == 0x000020, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_GetInventoryItemsByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSIContainer_C_GetInventoryItemsByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_GetJigDA_JigDataAsset) == 0x000050, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByIDList
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByIDList final
{
public:
	TArray<class UJigsawItem_DataAsset_C*>        ItemId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Found_;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0018(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByIDList) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByIDList");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByIDList) == 0x000070, "Wrong size on JSIContainer_C_GetInventoryItemsByIDList");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, ItemId) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByIDList::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, Found_) == 0x000010, "Member 'JSIContainer_C_GetInventoryItemsByIDList::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, ItemsFound) == 0x000018, "Member 'JSIContainer_C_GetInventoryItemsByIDList::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, ItemsFoundArray) == 0x000028, "Member 'JSIContainer_C_GetInventoryItemsByIDList::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, Temp_int_Array_Index_Variable) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByIDList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'JSIContainer_C_GetInventoryItemsByIDList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_GetJigDA_JigDataAsset) == 0x000058, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Array_Contains_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByIDList, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_GetInventoryItemsByIDList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByType
// 0x0068 (0x0068 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x004C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByType) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByType");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByType) == 0x000068, "Wrong size on JSIContainer_C_GetInventoryItemsByType");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Type) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByType::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Found_) == 0x000008, "Member 'JSIContainer_C_GetInventoryItemsByType::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, ItemsFound) == 0x000010, "Member 'JSIContainer_C_GetInventoryItemsByType::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, ItemsFoundArray) == 0x000020, "Member 'JSIContainer_C_GetInventoryItemsByType::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_GetInventoryItemsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSIContainer_C_GetInventoryItemsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_GetType_Type) == 0x00004C, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000054, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemBySlotIndex
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetItemBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetItemBySlotIndex) == 0x000020, "Wrong size on JSIContainer_C_GetItemBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetItemBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, Found) == 0x000004, "Member 'JSIContainer_C_GetItemBySlotIndex::Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, Item) == 0x000008, "Member 'JSIContainer_C_GetItemBySlotIndex::Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_IsEmptySlot_isEmpty) == 0x00001D, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemByUniqueID
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_GetItemByUniqueID final
{
public:
	struct FGuid                                  UniqueID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Item;                                              // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CallFunc_GetUniqueID_UniqueServerID;               // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GuidGuid_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemByUniqueID");
static_assert(sizeof(JSIContainer_C_GetItemByUniqueID) == 0x000050, "Wrong size on JSIContainer_C_GetItemByUniqueID");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, UniqueID) == 0x000000, "Member 'JSIContainer_C_GetItemByUniqueID::UniqueID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Found) == 0x000010, "Member 'JSIContainer_C_GetItemByUniqueID::Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Item) == 0x000018, "Member 'JSIContainer_C_GetItemByUniqueID::Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Temp_int_Array_Index_Variable) == 0x000020, "Member 'JSIContainer_C_GetItemByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'JSIContainer_C_GetItemByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x00003C, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_EqualEqual_GuidGuid_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_EqualEqual_GuidGuid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemsByRarity
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_GetItemsByRarity final
{
public:
	struct FGameplayTag                           Rarity;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemsByRarity) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemsByRarity");
static_assert(sizeof(JSIContainer_C_GetItemsByRarity) == 0x000058, "Wrong size on JSIContainer_C_GetItemsByRarity");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Rarity) == 0x000000, "Member 'JSIContainer_C_GetItemsByRarity::Rarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Found_) == 0x000008, "Member 'JSIContainer_C_GetItemsByRarity::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, ItemsFound) == 0x000010, "Member 'JSIContainer_C_GetItemsByRarity::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, ItemsFoundArray) == 0x000020, "Member 'JSIContainer_C_GetItemsByRarity::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_GetItemsByRarity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSIContainer_C_GetItemsByRarity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000049, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemsByStackAbility
// 0x0068 (0x0068 - 0x0000)
struct JSIContainer_C_GetItemsByStackAbility final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    Items;                                             // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    FoundItems;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemsByStackAbility) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemsByStackAbility");
static_assert(sizeof(JSIContainer_C_GetItemsByStackAbility) == 0x000068, "Wrong size on JSIContainer_C_GetItemsByStackAbility");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, ItemId) == 0x000000, "Member 'JSIContainer_C_GetItemsByStackAbility::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, Sucess) == 0x000008, "Member 'JSIContainer_C_GetItemsByStackAbility::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, Items) == 0x000010, "Member 'JSIContainer_C_GetItemsByStackAbility::Items' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, FoundItems) == 0x000020, "Member 'JSIContainer_C_GetItemsByStackAbility::FoundItems' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_GetItemsByStackAbility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSIContainer_C_GetItemsByStackAbility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Array_Add_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_GetCount_Count) == 0x00004C, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_GetMaxStack_MaxStack) == 0x000050, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_CanStack__CanStack) == 0x000054, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_CanStack__FreeSpaceAvailable) == 0x000055, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Less_IntInt_ReturnValue) == 0x000056, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_GetItemID_ItemID) == 0x000058, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000064, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_Less_IntInt_ReturnValue_1) == 0x000065, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_BooleanAND_ReturnValue) == 0x000066, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByStackAbility, CallFunc_BooleanAND_ReturnValue_1) == 0x000067, "Member 'JSIContainer_C_GetItemsByStackAbility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemsCount
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetItemsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemsCount) == 0x000004, "Wrong alignment on JSIContainer_C_GetItemsCount");
static_assert(sizeof(JSIContainer_C_GetItemsCount) == 0x000008, "Wrong size on JSIContainer_C_GetItemsCount");
static_assert(offsetof(JSIContainer_C_GetItemsCount, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetItemsCount::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsCount, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetItemsCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetJSIContainerByPlayerSlots
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetJSIContainerByPlayerSlots final
{
public:
	struct FGameplayTag                           Slot_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            EquippedItem;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPending_;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetJSIContainerByPlayerSlots) == 0x000008, "Wrong alignment on JSIContainer_C_GetJSIContainerByPlayerSlots");
static_assert(sizeof(JSIContainer_C_GetJSIContainerByPlayerSlots) == 0x000020, "Wrong size on JSIContainer_C_GetJSIContainerByPlayerSlots");
static_assert(offsetof(JSIContainer_C_GetJSIContainerByPlayerSlots, Slot_0) == 0x000000, "Member 'JSIContainer_C_GetJSIContainerByPlayerSlots::Slot_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetJSIContainerByPlayerSlots, Container) == 0x000008, "Member 'JSIContainer_C_GetJSIContainerByPlayerSlots::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetJSIContainerByPlayerSlots, EquippedItem) == 0x000010, "Member 'JSIContainer_C_GetJSIContainerByPlayerSlots::EquippedItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetJSIContainerByPlayerSlots, IsPending_) == 0x000018, "Member 'JSIContainer_C_GetJSIContainerByPlayerSlots::IsPending_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLastItem
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetLastItem final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLastItem) == 0x000008, "Wrong alignment on JSIContainer_C_GetLastItem");
static_assert(sizeof(JSIContainer_C_GetLastItem) == 0x000020, "Wrong size on JSIContainer_C_GetLastItem");
static_assert(offsetof(JSIContainer_C_GetLastItem, ItemRef) == 0x000000, "Member 'JSIContainer_C_GetLastItem::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLastItem, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'JSIContainer_C_GetLastItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLastItem, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetLastItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLastItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetLastItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLastItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_GetLastItem::CallFunc_Array_Get_Item' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLength
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLength) == 0x000004, "Wrong alignment on JSIContainer_C_GetLength");
static_assert(sizeof(JSIContainer_C_GetLength) == 0x000008, "Wrong size on JSIContainer_C_GetLength");
static_assert(offsetof(JSIContainer_C_GetLength, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetLength::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLength, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetLength::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetListOfNonAddContainers
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_GetListOfNonAddContainers final
{
public:
	TArray<class UJSIContainer_C*>                Containers;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(JSIContainer_C_GetListOfNonAddContainers) == 0x000008, "Wrong alignment on JSIContainer_C_GetListOfNonAddContainers");
static_assert(sizeof(JSIContainer_C_GetListOfNonAddContainers) == 0x000010, "Wrong size on JSIContainer_C_GetListOfNonAddContainers");
static_assert(offsetof(JSIContainer_C_GetListOfNonAddContainers, Containers) == 0x000000, "Member 'JSIContainer_C_GetListOfNonAddContainers::Containers' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLootContent
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetLootContent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLootContent) == 0x000008, "Wrong alignment on JSIContainer_C_GetLootContent");
static_assert(sizeof(JSIContainer_C_GetLootContent) == 0x000008, "Wrong size on JSIContainer_C_GetLootContent");
static_assert(offsetof(JSIContainer_C_GetLootContent, Widget) == 0x000000, "Member 'JSIContainer_C_GetLootContent::Widget' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLowestIndexItem
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_GetLowestIndexItem final
{
public:
	class UJSI_Slot_C*                            HostingItem;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLowestIndexItem) == 0x000008, "Wrong alignment on JSIContainer_C_GetLowestIndexItem");
static_assert(sizeof(JSIContainer_C_GetLowestIndexItem) == 0x000038, "Wrong size on JSIContainer_C_GetLowestIndexItem");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, HostingItem) == 0x000000, "Member 'JSIContainer_C_GetLowestIndexItem::HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSIContainer_C_GetLowestIndexItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_GetLowestIndexItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_GetHostedSlot_HostingItem) == 0x000028, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestIndexItem, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetLowestIndexItem::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetMaxCapacity
// 0x000C (0x000C - 0x0000)
struct JSIContainer_C_GetMaxCapacity final
{
public:
	int32                                         ItemMaxStack;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCap;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetMaxCapacity) == 0x000004, "Wrong alignment on JSIContainer_C_GetMaxCapacity");
static_assert(sizeof(JSIContainer_C_GetMaxCapacity) == 0x00000C, "Wrong size on JSIContainer_C_GetMaxCapacity");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, ItemMaxStack) == 0x000000, "Member 'JSIContainer_C_GetMaxCapacity::ItemMaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, MaxCap) == 0x000004, "Member 'JSIContainer_C_GetMaxCapacity::MaxCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, CallFunc_IsContainer__IsContainer_) == 0x000008, "Member 'JSIContainer_C_GetMaxCapacity::CallFunc_IsContainer__IsContainer_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'JSIContainer_C_GetMaxCapacity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, CallFunc_Greater_IntInt_ReturnValue) == 0x00000A, "Member 'JSIContainer_C_GetMaxCapacity::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCapacity, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'JSIContainer_C_GetMaxCapacity::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetPaddingBySlotIndex
// 0x0138 (0x0138 - 0x0000)
struct JSIContainer_C_GetPaddingBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                Padding_0;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Conumn;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RowIndex;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Top_ImplicitCast;                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_2;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_3;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetPaddingBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetPaddingBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetPaddingBySlotIndex) == 0x000138, "Wrong size on JSIContainer_C_GetPaddingBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetPaddingBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, SlotVector) == 0x000008, "Member 'JSIContainer_C_GetPaddingBySlotIndex::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Padding_0) == 0x000018, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Padding_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Conumn) == 0x000028, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Row) == 0x00002C, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, RowIndex) == 0x000030, "Member 'JSIContainer_C_GetPaddingBySlotIndex::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, ColumnIndex) == 0x000034, "Member 'JSIContainer_C_GetPaddingBySlotIndex::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_X) == 0x000038, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_Y) == 0x000040, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_X_1) == 0x000070, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_Y_1) == 0x000078, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000080, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000090, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000098, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0000B8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000C8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x0000D0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x0000D8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x0000E0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Margin) == 0x0000E8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000F8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000100, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x000108, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Top_ImplicitCast) == 0x000110, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Top_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000118, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_2) == 0x000120, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_3) == 0x000128, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Left_ImplicitCast) == 0x000130, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetRootContainerRef
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetRootContainerRef final
{
public:
	bool                                          ExcludeEquipTo;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ContainerRef;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_GetRootContainerRef_ContainerRef;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetRootContainerRef) == 0x000008, "Wrong alignment on JSIContainer_C_GetRootContainerRef");
static_assert(sizeof(JSIContainer_C_GetRootContainerRef) == 0x000020, "Wrong size on JSIContainer_C_GetRootContainerRef");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, ExcludeEquipTo) == 0x000000, "Member 'JSIContainer_C_GetRootContainerRef::ExcludeEquipTo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, ContainerRef) == 0x000008, "Member 'JSIContainer_C_GetRootContainerRef::ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_GetRootContainerRef_ContainerRef) == 0x000010, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_GetRootContainerRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_IsEquipTo__ReturnValue) == 0x000019, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00001A, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetSlotIndex final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotIndex) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotIndex");
static_assert(sizeof(JSIContainer_C_GetSlotIndex) == 0x000008, "Wrong size on JSIContainer_C_GetSlotIndex");
static_assert(offsetof(JSIContainer_C_GetSlotIndex, Result) == 0x000000, "Member 'JSIContainer_C_GetSlotIndex::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetSlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotMotherUID
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_GetSlotMotherUID final
{
public:
	bool                                          ReturnContainerID_IfInvalid_;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GetContainerIDIfSpecialC_;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  UDID;                                              // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  CallFunc_GetUniqueID_UniqueServerID;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotMotherUID) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotMotherUID");
static_assert(sizeof(JSIContainer_C_GetSlotMotherUID) == 0x000048, "Wrong size on JSIContainer_C_GetSlotMotherUID");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, ReturnContainerID_IfInvalid_) == 0x000000, "Member 'JSIContainer_C_GetSlotMotherUID::ReturnContainerID_IfInvalid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, GetContainerIDIfSpecialC_) == 0x000001, "Member 'JSIContainer_C_GetSlotMotherUID::GetContainerIDIfSpecialC_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, UDID) == 0x000004, "Member 'JSIContainer_C_GetSlotMotherUID::UDID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, Temp_struct_Variable) == 0x000014, "Member 'JSIContainer_C_GetSlotMotherUID::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, CallFunc_IsSpecialContainer__ReturnValue) == 0x000024, "Member 'JSIContainer_C_GetSlotMotherUID::CallFunc_IsSpecialContainer__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, Temp_bool_Variable) == 0x000025, "Member 'JSIContainer_C_GetSlotMotherUID::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, CallFunc_IsValid_ReturnValue) == 0x000026, "Member 'JSIContainer_C_GetSlotMotherUID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, K2Node_Select_Default) == 0x000028, "Member 'JSIContainer_C_GetSlotMotherUID::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, CallFunc_GetUniqueID_UniqueServerID) == 0x000038, "Member 'JSIContainer_C_GetSlotMotherUID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetTotalCountOfItemID
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_GetTotalCountOfItemID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalItemCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalCount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetTotalCountOfItemID) == 0x000008, "Wrong alignment on JSIContainer_C_GetTotalCountOfItemID");
static_assert(sizeof(JSIContainer_C_GetTotalCountOfItemID) == 0x000040, "Wrong size on JSIContainer_C_GetTotalCountOfItemID");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, ItemId) == 0x000000, "Member 'JSIContainer_C_GetTotalCountOfItemID::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, TotalItemCount) == 0x000008, "Member 'JSIContainer_C_GetTotalCountOfItemID::TotalItemCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, TotalCount) == 0x00000C, "Member 'JSIContainer_C_GetTotalCountOfItemID::TotalCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_GetTotalCountOfItemID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_GetTotalCountOfItemID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_GetItemID_ItemID) == 0x00002C, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000035, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_GetCount_Count) == 0x000038, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemID, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_GetTotalCountOfItemID::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetTotalCountOfItemType
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_GetTotalCountOfItemType final
{
public:
	struct FGameplayTag                           ItemType;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalItemCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalCount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x002C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetTotalCountOfItemType) == 0x000008, "Wrong alignment on JSIContainer_C_GetTotalCountOfItemType");
static_assert(sizeof(JSIContainer_C_GetTotalCountOfItemType) == 0x000040, "Wrong size on JSIContainer_C_GetTotalCountOfItemType");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, ItemType) == 0x000000, "Member 'JSIContainer_C_GetTotalCountOfItemType::ItemType' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, TotalItemCount) == 0x000008, "Member 'JSIContainer_C_GetTotalCountOfItemType::TotalItemCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, TotalCount) == 0x00000C, "Member 'JSIContainer_C_GetTotalCountOfItemType::TotalCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_GetTotalCountOfItemType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_GetTotalCountOfItemType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_GetType_Type) == 0x00002C, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000035, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_GetCount_Count) == 0x000038, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalCountOfItemType, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_GetTotalCountOfItemType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetTotalWeight
// 0x0098 (0x0098 - 0x0000)
struct JSIContainer_C_GetTotalWeight final
{
public:
	double                                        WeightRef;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetTotalWeight) == 0x000008, "Wrong alignment on JSIContainer_C_GetTotalWeight");
static_assert(sizeof(JSIContainer_C_GetTotalWeight) == 0x000098, "Wrong size on JSIContainer_C_GetTotalWeight");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, WeightRef) == 0x000000, "Member 'JSIContainer_C_GetTotalWeight::WeightRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSIContainer_C_GetTotalWeight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_GetTotalWeight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'JSIContainer_C_GetTotalWeight::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'JSIContainer_C_GetTotalWeight::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_GetWeight_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_GetWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_GetCount_Count) == 0x000040, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_GetContainerOneRef_ContainerRef) == 0x000048, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000050, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000058, "Member 'JSIContainer_C_GetTotalWeight::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'JSIContainer_C_GetTotalWeight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000070, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_GetListOfContainers_Containers) == 0x000078, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_IsValid_ReturnValue) == 0x000094, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetTotalWeight, CallFunc_Less_IntInt_ReturnValue_1) == 0x000095, "Member 'JSIContainer_C_GetTotalWeight::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetValidReloadContainers
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_GetValidReloadContainers final
{
public:
	TArray<class UJSIContainer_C*>                Containers;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(JSIContainer_C_GetValidReloadContainers) == 0x000008, "Wrong alignment on JSIContainer_C_GetValidReloadContainers");
static_assert(sizeof(JSIContainer_C_GetValidReloadContainers) == 0x000010, "Wrong size on JSIContainer_C_GetValidReloadContainers");
static_assert(offsetof(JSIContainer_C_GetValidReloadContainers, Containers) == 0x000000, "Member 'JSIContainer_C_GetValidReloadContainers::Containers' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HandleContainerOnContainer
// 0x0120 (0x0120 - 0x0000)
struct JSIContainer_C_HandleContainerOnContainer final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ToSlotRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DraggedRotated_;                                   // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled_;                                          // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Don_tMove;                                         // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            BestStackingItem;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FreeSpace;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToEmptySlot_;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue;                 // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue_1;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveFromJSIParent_Removed;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindBestStackingItem_BestStackingItem;    // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindBestStackingItem_FreeSpace;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindBestStackingItem_CanStackAll;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_2;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_3;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_2;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemFromJigRef_Added;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_AddItemFromJigRef_AddedItemRef;           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCapacity_Cap;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxCapacity_MaxCap;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count_3;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveFromJSIParent_Removed_1;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetImageFromInfo_Image;                   // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added;                         // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewItem_AddedToSlot;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_AddNewItem_Info;                          // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef;                   // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_4;                      // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_5;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemFromJigRef_Added_1;                // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_AddItemFromJigRef_AddedItemRef_1;         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue_2;               // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0107(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue_3;               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_2;                 // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EquipItemFromJigRef_Added;                // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_EquipItemFromJigRef_EquippedItemRef;      // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_4;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HandleContainerOnContainer) == 0x000008, "Wrong alignment on JSIContainer_C_HandleContainerOnContainer");
static_assert(sizeof(JSIContainer_C_HandleContainerOnContainer) == 0x000120, "Wrong size on JSIContainer_C_HandleContainerOnContainer");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, FromContainer) == 0x000000, "Member 'JSIContainer_C_HandleContainerOnContainer::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToContainer) == 0x000008, "Member 'JSIContainer_C_HandleContainerOnContainer::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, SlotRef) == 0x000010, "Member 'JSIContainer_C_HandleContainerOnContainer::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToSlotRef) == 0x000018, "Member 'JSIContainer_C_HandleContainerOnContainer::ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToSlot) == 0x000020, "Member 'JSIContainer_C_HandleContainerOnContainer::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, DraggedRotated_) == 0x000024, "Member 'JSIContainer_C_HandleContainerOnContainer::DraggedRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, TryRotated_) == 0x000025, "Member 'JSIContainer_C_HandleContainerOnContainer::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Handled_) == 0x000026, "Member 'JSIContainer_C_HandleContainerOnContainer::Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Don_tMove) == 0x000027, "Member 'JSIContainer_C_HandleContainerOnContainer::Don_tMove' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, BestStackingItem) == 0x000028, "Member 'JSIContainer_C_HandleContainerOnContainer::BestStackingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, FreeSpace) == 0x000030, "Member 'JSIContainer_C_HandleContainerOnContainer::FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CurrentCount) == 0x000034, "Member 'JSIContainer_C_HandleContainerOnContainer::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToEmptySlot_) == 0x000038, "Member 'JSIContainer_C_HandleContainerOnContainer::ToEmptySlot_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsEmptySlot_isEmpty) == 0x000039, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsInventory__ReturnValue) == 0x00003B, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsInventory__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsInventory__ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsInventory__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetMaxStack_MaxStack) == 0x000040, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count) == 0x000048, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveFromJSIParent_Removed) == 0x00004C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveFromJSIParent_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_1) == 0x000050, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetItemID_ItemID) == 0x000054, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_FindBestStackingItem_BestStackingItem) == 0x000060, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_FindBestStackingItem_BestStackingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_FindBestStackingItem_FreeSpace) == 0x000068, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_FindBestStackingItem_FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_FindBestStackingItem_CanStackAll) == 0x00006C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_FindBestStackingItem_CanStackAll' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000070, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue_1) == 0x000074, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count) == 0x000078, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_2) == 0x00007C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_3) == 0x000080, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_1) == 0x00008C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_2) == 0x000090, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddItemFromJigRef_Added) == 0x000094, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddItemFromJigRef_AddedItemRef) == 0x000098, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddItemFromJigRef_AddedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCapacity_Cap) == 0x0000A0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x0000A4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetMaxCapacity_MaxCap) == 0x0000A8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetMaxCapacity_MaxCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B1, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000B2, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_3) == 0x0000B4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveFromJSIParent_Removed_1) == 0x0000B8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveFromJSIParent_Removed_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetImageFromInfo_Image) == 0x0000C0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetImageFromInfo_Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000C8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewItem_Added) == 0x0000CC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewItem_AddedToSlot) == 0x0000D0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewItem_AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewItem_Info) == 0x0000D8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewItem_Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewItem_SlotItemRef) == 0x0000E0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_4) == 0x0000E8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_5) == 0x0000EC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddItemFromJigRef_Added_1) == 0x0000F1, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddItemFromJigRef_Added_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddItemFromJigRef_AddedItemRef_1) == 0x0000F8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddItemFromJigRef_AddedItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsEquipTo__ReturnValue) == 0x000100, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsEquipTo__ReturnValue_1) == 0x000101, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000102, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_2) == 0x000103, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsInventory__ReturnValue_2) == 0x000104, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsInventory__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_3) == 0x000105, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue) == 0x000106, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000107, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsInventory__ReturnValue_3) == 0x000108, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsInventory__ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsEquipTo__ReturnValue_2) == 0x000109, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsEquipTo__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_4) == 0x00010A, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EquipItemFromJigRef_Added) == 0x00010B, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EquipItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EquipItemFromJigRef_EquippedItemRef) == 0x000110, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EquipItemFromJigRef_EquippedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_4) == 0x000118, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CanStack__CanStack) == 0x00011C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CanStack__FreeSpaceAvailable) == 0x00011D, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_5) == 0x00011E, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HandleDragEnter
// 0x00F0 (0x00F0 - 0x0000)
struct JSIContainer_C_HandleDragEnter final
{
public:
	class UJSI_Slot_C*                            DraggedItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsContainer;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0014)()
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCanStack_Sucess;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_CheckIfCanStack_ItemRef;                  // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__1;              // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_1;             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_1;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__2;              // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_2;             // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_2;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue_1;        // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__3;              // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_3;             // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_3;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__4;              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_4;             // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_4;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotContainer_ReturnValue;              // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_2;      // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCanAddToSpecial_CanAdd;            // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_CheckIfCanAddToSpecial_ToContainer;       // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset_1;                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x00D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlotTryRotated_Found_;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3[0x1];                                       // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type_1;                           // 0x00E4(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue_1;                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported__1;            // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x00EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HandleDragEnter) == 0x000008, "Wrong alignment on JSIContainer_C_HandleDragEnter");
static_assert(sizeof(JSIContainer_C_HandleDragEnter) == 0x0000F0, "Wrong size on JSIContainer_C_HandleDragEnter");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, DraggedItem) == 0x000000, "Member 'JSIContainer_C_HandleDragEnter::DraggedItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, IsContainer) == 0x000008, "Member 'JSIContainer_C_HandleDragEnter::IsContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsContainer__IsContainer_) == 0x000009, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsContainer__IsContainer_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_Found_) == 0x00000A, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_ItemRef) == 0x000010, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_IsPending) == 0x000018, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'JSIContainer_C_HandleDragEnter::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsEquipTo__ReturnValue) == 0x00003C, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00003D, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00003E, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsValid_ReturnValue) == 0x00003F, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, Temp_bool_Variable) == 0x000040, "Member 'JSIContainer_C_HandleDragEnter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, K2Node_Select_Default) == 0x000048, "Member 'JSIContainer_C_HandleDragEnter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_SetHighlight_Highlight) == 0x000051, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_SetHighlight_Highlight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_1) == 0x000052, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_2) == 0x000053, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_CheckIfCanStack_Sucess) == 0x000054, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_CheckIfCanStack_Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_CheckIfCanStack_ItemRef) == 0x000058, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_CheckIfCanStack_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_3) == 0x000060, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsEquipped__ReturnValue) == 0x000061, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_Found__1) == 0x000062, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_ItemRef_1) == 0x000068, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_ItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_IsPending_1) == 0x000070, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_IsPending_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_SelectInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsSpecialContainer__ReturnValue) == 0x000078, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsSpecialContainer__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_Not_PreBool_ReturnValue_1) == 0x000079, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_Found__2) == 0x00007A, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_Found__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_ItemRef_2) == 0x000080, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_ItemRef_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_IsPending_2) == 0x000088, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_IsPending_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsSpecialContainer__ReturnValue_1) == 0x000089, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsSpecialContainer__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_Found__3) == 0x00008A, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_Found__3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_ItemRef_3) == 0x000090, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_ItemRef_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_IsPending_3) == 0x000098, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_IsPending_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000099, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsItemPending__IsPending) == 0x00009A, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_Not_PreBool_ReturnValue_2) == 0x00009B, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_Found__4) == 0x00009C, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_Found__4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_ItemRef_4) == 0x0000A0, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_ItemRef_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEquippedItemRef_IsPending_4) == 0x0000A8, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEquippedItemRef_IsPending_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsSlotContainer_ReturnValue) == 0x0000A9, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsSlotContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_ISCapacityContainer_ReturnValue) == 0x0000AA, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_4) == 0x0000AB, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000AC, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_NotEqual_ObjectObject_ReturnValue_2) == 0x0000AD, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_NotEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_CheckIfCanAddToSpecial_CanAdd) == 0x0000AE, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_CheckIfCanAddToSpecial_CanAdd' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_CheckIfCanAddToSpecial_ToContainer) == 0x0000B0, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_CheckIfCanAddToSpecial_ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetJigDA_JigDataAsset) == 0x0000B8, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetJigDA_JigDataAsset_1) == 0x0000C0, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetJigDA_JigDataAsset_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetSlotDim_SlotDimension) == 0x0000C8, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetType_Type) == 0x0000D8, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetEmptySlotTryRotated_Found_) == 0x0000E0, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetEmptySlotTryRotated_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsSupportedType__Supported_) == 0x0000E1, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_5) == 0x0000E2, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_GetType_Type_1) == 0x0000E4, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_GetType_Type_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsEquipped__ReturnValue_1) == 0x0000EC, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsEquipped__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsSupportedType__Supported__1) == 0x0000ED, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsSupportedType__Supported__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_BooleanAND_ReturnValue_6) == 0x0000EE, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleDragEnter, CallFunc_IsEquipTo__ReturnValue_1) == 0x0000EF, "Member 'JSIContainer_C_HandleDragEnter::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HasItems
// 0x0002 (0x0002 - 0x0000)
struct JSIContainer_C_HasItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HasItems) == 0x000001, "Wrong alignment on JSIContainer_C_HasItems");
static_assert(sizeof(JSIContainer_C_HasItems) == 0x000002, "Wrong size on JSIContainer_C_HasItems");
static_assert(offsetof(JSIContainer_C_HasItems, ReturnValue) == 0x000000, "Member 'JSIContainer_C_HasItems::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HasItems, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'JSIContainer_C_HasItems::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HighlightItemsByType
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_HighlightItemsByType final
{
public:
	struct FGameplayTagContainer                  Types;                                             // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         CallFunc_GetNumGameplayTagsInContainer_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0064(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HighlightItemsByType) == 0x000008, "Wrong alignment on JSIContainer_C_HighlightItemsByType");
static_assert(sizeof(JSIContainer_C_HighlightItemsByType) == 0x000070, "Wrong size on JSIContainer_C_HighlightItemsByType");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Types) == 0x000000, "Member 'JSIContainer_C_HighlightItemsByType::Types' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_GetNumGameplayTagsInContainer_ReturnValue) == 0x000020, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_GetNumGameplayTagsInContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_GetType_Type) == 0x000064, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_HasTag_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_HasTag_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HighlightNext
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_HighlightNext final
{
public:
	class UJSI_Slot_C*                            Current;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CurrentHighlighted;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CurrentBest;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HighlightNext) == 0x000008, "Wrong alignment on JSIContainer_C_HighlightNext");
static_assert(sizeof(JSIContainer_C_HighlightNext) == 0x000060, "Wrong size on JSIContainer_C_HighlightNext");
static_assert(offsetof(JSIContainer_C_HighlightNext, Current) == 0x000000, "Member 'JSIContainer_C_HighlightNext::Current' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CurrentHighlighted) == 0x000008, "Member 'JSIContainer_C_HighlightNext::CurrentHighlighted' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CurrentBest) == 0x000010, "Member 'JSIContainer_C_HighlightNext::CurrentBest' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_HighlightNext::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_HighlightNext::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_HighlightNext::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, Temp_int_Array_Index_Variable) == 0x000024, "Member 'JSIContainer_C_HighlightNext::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'JSIContainer_C_HighlightNext::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'JSIContainer_C_HighlightNext::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_HighlightNext::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'JSIContainer_C_HighlightNext::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_HighlightNext::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003D, "Member 'JSIContainer_C_HighlightNext::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_IsValid_ReturnValue_1) == 0x00003E, "Member 'JSIContainer_C_HighlightNext::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'JSIContainer_C_HighlightNext::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_IsValid_ReturnValue_2) == 0x000044, "Member 'JSIContainer_C_HighlightNext::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSIContainer_C_HighlightNext::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_HighlightNext::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000051, "Member 'JSIContainer_C_HighlightNext::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Less_IntInt_ReturnValue_2) == 0x000052, "Member 'JSIContainer_C_HighlightNext::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'JSIContainer_C_HighlightNext::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'JSIContainer_C_HighlightNext::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_Less_IntInt_ReturnValue_3) == 0x000059, "Member 'JSIContainer_C_HighlightNext::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightNext, CallFunc_IsValid_ReturnValue_3) == 0x00005A, "Member 'JSIContainer_C_HighlightNext::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HighlightSlots
// 0x0318 (0x0318 - 0x0000)
struct JSIContainer_C_HighlightSlots final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MouseLoc;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRecRef;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported_;                                        // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedWithinSelf_;                                // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightSpecial_;                                 // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CurrentSpecialC;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ContainerSupported_;                               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         YLastIndex;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XLastIndex;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvalidMove;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemFoundArray;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue_1;    // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DifficultyCheckBackpack__CarryOn_;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_ReturnValue;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckWeightLimit_Result;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_ReturnValue_1;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x011C(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0130(0x0014)()
	bool                                          CallFunc_CheckIfCanAddToSpecial_CanAdd;            // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_CheckIfCanAddToSpecial_ToContainer;       // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_167[0x1];                                      // 0x0167(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID_1;                       // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack_1;                     // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem_1;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckWeightLimit_Result_1;                // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack_2;                     // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable_1;           // 0x0216(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217[0x1];                                      // 0x0217(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0218(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedByThis_Supported_;             // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0225(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue;          // 0x0226(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0227(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef;                  // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0280(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x028D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28E[0x2];                                      // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0290(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x02A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x02A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_5;                        // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_5;                        // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x02EC(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0300(0x0014)()
	bool                                          CallFunc_SetHighlight_Highlight_1;                 // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HighlightSlots) == 0x000008, "Wrong alignment on JSIContainer_C_HighlightSlots");
static_assert(sizeof(JSIContainer_C_HighlightSlots) == 0x000318, "Wrong size on JSIContainer_C_HighlightSlots");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotIndex) == 0x000000, "Member 'JSIContainer_C_HighlightSlots::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotVector) == 0x000008, "Member 'JSIContainer_C_HighlightSlots::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, MouseLoc) == 0x000018, "Member 'JSIContainer_C_HighlightSlots::MouseLoc' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotRef) == 0x000028, "Member 'JSIContainer_C_HighlightSlots::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotRecRef) == 0x000030, "Member 'JSIContainer_C_HighlightSlots::SlotRecRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Rotated_) == 0x000038, "Member 'JSIContainer_C_HighlightSlots::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Supported_) == 0x000039, "Member 'JSIContainer_C_HighlightSlots::Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, DroppedWithinSelf_) == 0x00003A, "Member 'JSIContainer_C_HighlightSlots::DroppedWithinSelf_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, HighlightSpecial_) == 0x00003B, "Member 'JSIContainer_C_HighlightSlots::HighlightSpecial_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CurrentSpecialC) == 0x000040, "Member 'JSIContainer_C_HighlightSlots::CurrentSpecialC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ContainerSupported_) == 0x000048, "Member 'JSIContainer_C_HighlightSlots::ContainerSupported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, YLastIndex) == 0x00004C, "Member 'JSIContainer_C_HighlightSlots::YLastIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, XLastIndex) == 0x000050, "Member 'JSIContainer_C_HighlightSlots::XLastIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, InvalidMove) == 0x000054, "Member 'JSIContainer_C_HighlightSlots::InvalidMove' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ItemFoundArray) == 0x000058, "Member 'JSIContainer_C_HighlightSlots::ItemFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ItemFound) == 0x000068, "Member 'JSIContainer_C_HighlightSlots::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000078, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Loop_Counter_Variable_1) == 0x000088, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Divide_Vector2DVector2D_ReturnValue_1) == 0x000090, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Divide_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X) == 0x0000B8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y) == 0x0000C0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FFloor_ReturnValue) == 0x0000C8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FFloor_ReturnValue_1) == 0x0000CC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Array_Index_Variable_1) == 0x0000D4, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Variable) == 0x0000D8, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000DC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Variable_1) == 0x0000E0, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000E4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_DifficultyCheckBackpack__CarryOn_) == 0x0000E8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_DifficultyCheckBackpack__CarryOn_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetWeight_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CheckWeightLimit_Result) == 0x0000F8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CheckWeightLimit_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetWeight_ReturnValue_1) == 0x000100, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_bool_Variable) == 0x000108, "Member 'JSIContainer_C_HighlightSlots::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsValid_ReturnValue) == 0x000109, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsEmptySlot_isEmpty) == 0x00010A, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetHostedSlot_HostingItem) == 0x000110, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue_1) == 0x000119, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, K2Node_MakeStruct_SlateColor) == 0x00011C, "Member 'JSIContainer_C_HighlightSlots::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, K2Node_MakeStruct_SlateColor_1) == 0x000130, "Member 'JSIContainer_C_HighlightSlots::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CheckIfCanAddToSpecial_CanAdd) == 0x000144, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CheckIfCanAddToSpecial_CanAdd' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CheckIfCanAddToSpecial_ToContainer) == 0x000148, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CheckIfCanAddToSpecial_ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetItemID_ItemID) == 0x000150, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsEmptySlot_isEmpty_1) == 0x000158, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetCount_Count) == 0x00015C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetMaxStack_MaxStack) == 0x000160, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__CanStack) == 0x000164, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__FreeSpaceAvailable) == 0x000165, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000166, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetItemID_ItemID_1) == 0x000168, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetItemID_ItemID_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000170, "Member 'JSIContainer_C_HighlightSlots::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue) == 0x000171, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_1) == 0x000172, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__CanStack_1) == 0x000173, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__CanStack_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000178, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000180, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_1) == 0x000188, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_1) == 0x000190, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000198, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001A0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue) == 0x0001A4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001A8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_2) == 0x0001B0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_2) == 0x0001B8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001C0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_2) == 0x0001C1, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetHostedSlot_HostingItem_1) == 0x0001C8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetHostedSlot_HostingItem_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001D0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetJigDA_JigDataAsset) == 0x0001D8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetSlotDim_SlotDimension) == 0x0001E0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CheckWeightLimit_Result_1) == 0x0001F0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CheckWeightLimit_Result_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FlipSlotDim_Flipped) == 0x0001F8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_SlotIndex) == 0x000208, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_Found_) == 0x00020C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_SlotIndex_1) == 0x000210, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_Found__1) == 0x000214, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__CanStack_2) == 0x000215, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__CanStack_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__FreeSpaceAvailable_1) == 0x000216, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__FreeSpaceAvailable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetType_Type) == 0x000218, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsSupportedByThis_Supported_) == 0x000220, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsSupportedByThis_Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsValid_ReturnValue_1) == 0x000221, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsItemPending__IsPending) == 0x000222, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsContainer__IsContainer_) == 0x000223, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsContainer__IsContainer_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_3) == 0x000224, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000225, "Member 'JSIContainer_C_HighlightSlots::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsSpecialContainer__ReturnValue) == 0x000226, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsSpecialContainer__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_4) == 0x000227, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue) == 0x000228, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00022C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000230, "Member 'JSIContainer_C_HighlightSlots::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000231, "Member 'JSIContainer_C_HighlightSlots::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_5) == 0x000232, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000234, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000238, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_5) == 0x00023C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_6) == 0x000240, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000244, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_2) == 0x000248, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FindSlotByIndex_SlotRef) == 0x000250, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FindSlotByIndex_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_6) == 0x000258, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_3) == 0x000260, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_3) == 0x000268, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000270, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_1) == 0x000278, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Get_Item) == 0x000280, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue) == 0x000288, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SetHighlight_Highlight) == 0x00028C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SetHighlight_Highlight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_3) == 0x00028D, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Get_Item_1) == 0x000290, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue_1) == 0x000298, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue_2) == 0x00029C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_4) == 0x0002A0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_5) == 0x0002A1, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue) == 0x0002A2, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_7) == 0x0002A3, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002A4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue_2) == 0x0002A5, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue_1) == 0x0002A6, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue_2) == 0x0002A7, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_8) == 0x0002A8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Add_ReturnValue) == 0x0002AC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_4) == 0x0002B0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_4) == 0x0002B8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_5) == 0x0002C0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_5) == 0x0002C8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_2) == 0x0002D0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_3) == 0x0002D4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Greater_IntInt_ReturnValue) == 0x0002D8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SelectInt_ReturnValue) == 0x0002DC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x0002E0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x0002E4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_bool_Variable_1) == 0x0002E8, "Member 'JSIContainer_C_HighlightSlots::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, K2Node_Select_Default) == 0x0002EC, "Member 'JSIContainer_C_HighlightSlots::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, K2Node_Select_Default_1) == 0x000300, "Member 'JSIContainer_C_HighlightSlots::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SetHighlight_Highlight_1) == 0x000314, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SetHighlight_Highlight_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Hightlight_DragMove
// 0x00A8 (0x00A8 - 0x0000)
struct JSIContainer_C_Hightlight_DragMove final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            DragSlotRef;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRec;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedWithinSelf_;                                // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeightLimit;                                       // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckWeightLimit_Result;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_DragSelectContainer_MotherRef;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Hightlight_DragMove) == 0x000008, "Wrong alignment on JSIContainer_C_Hightlight_DragMove");
static_assert(sizeof(JSIContainer_C_Hightlight_DragMove) == 0x0000A8, "Wrong size on JSIContainer_C_Hightlight_DragMove");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, SlotIndex) == 0x000000, "Member 'JSIContainer_C_Hightlight_DragMove::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, DragSlotRef) == 0x000008, "Member 'JSIContainer_C_Hightlight_DragMove::DragSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, SlotRec) == 0x000010, "Member 'JSIContainer_C_Hightlight_DragMove::SlotRec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, Rotated_) == 0x000018, "Member 'JSIContainer_C_Hightlight_DragMove::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, DroppedWithinSelf_) == 0x000019, "Member 'JSIContainer_C_Hightlight_DragMove::DroppedWithinSelf_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, WeightLimit) == 0x00001A, "Member 'JSIContainer_C_Hightlight_DragMove::WeightLimit' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, Temp_bool_Variable) == 0x00001B, "Member 'JSIContainer_C_Hightlight_DragMove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_CheckWeightLimit_Result) == 0x00001C, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_CheckWeightLimit_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_GetJigDA_JigDataAsset) == 0x000020, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_DragSelectContainer_MotherRef) == 0x000028, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_DragSelectContainer_MotherRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_GetType_Type) == 0x000030, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_IsSupportedType__Supported_) == 0x000038, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000039, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_GetSlotDim_SlotDimension) == 0x000040, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BreakVector2D_X) == 0x000058, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BreakVector2D_Y) == 0x000060, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, K2Node_Select_Default) == 0x000078, "Member 'JSIContainer_C_Hightlight_DragMove::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000088, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_Array_Get_Item) == 0x000090, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BooleanOR_ReturnValue) == 0x000098, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BooleanAND_ReturnValue) == 0x000099, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BooleanAND_ReturnValue_1) == 0x00009A, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BooleanAND_ReturnValue_2) == 0x0000A1, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Initialize
// 0x0001 (0x0001 - 0x0000)
struct JSIContainer_C_Initialize final
{
public:
	bool                                          Design_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Initialize) == 0x000001, "Wrong alignment on JSIContainer_C_Initialize");
static_assert(sizeof(JSIContainer_C_Initialize) == 0x000001, "Wrong size on JSIContainer_C_Initialize");
static_assert(offsetof(JSIContainer_C_Initialize, Design_) == 0x000000, "Member 'JSIContainer_C_Initialize::Design_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsContainerWithinHierarchy
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_IsContainerWithinHierarchy final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Con;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainerWithinHierarchy_ReturnValue;   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsContainerWithinHierarchy) == 0x000008, "Wrong alignment on JSIContainer_C_IsContainerWithinHierarchy");
static_assert(sizeof(JSIContainer_C_IsContainerWithinHierarchy) == 0x000088, "Wrong size on JSIContainer_C_IsContainerWithinHierarchy");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, Container) == 0x000000, "Member 'JSIContainer_C_IsContainerWithinHierarchy::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, ReturnValue) == 0x000008, "Member 'JSIContainer_C_IsContainerWithinHierarchy::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, Con) == 0x000010, "Member 'JSIContainer_C_IsContainerWithinHierarchy::Con' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSIContainer_C_IsContainerWithinHierarchy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000020, "Member 'JSIContainer_C_IsContainerWithinHierarchy::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'JSIContainer_C_IsContainerWithinHierarchy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000031, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_GetListOfContainers_Containers) == 0x000038, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, Temp_int_Variable) == 0x000054, "Member 'JSIContainer_C_IsContainerWithinHierarchy::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'JSIContainer_C_IsContainerWithinHierarchy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_IsContainerWithinHierarchy_ReturnValue) == 0x000060, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_IsContainerWithinHierarchy_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000068, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_GetContainerOneRef_ContainerRef) == 0x000078, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_Array_LastIndex_ReturnValue) == 0x000080, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsContainerWithinHierarchy, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'JSIContainer_C_IsContainerWithinHierarchy::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsEquipped?
// 0x000C (0x000C - 0x0000)
struct JSIContainer_C_IsEquipped_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLength_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsEquipped_) == 0x000004, "Wrong alignment on JSIContainer_C_IsEquipped_");
static_assert(sizeof(JSIContainer_C_IsEquipped_) == 0x00000C, "Wrong size on JSIContainer_C_IsEquipped_");
static_assert(offsetof(JSIContainer_C_IsEquipped_, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsEquipped_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsEquipped_, CallFunc_GetLength_ReturnValue) == 0x000004, "Member 'JSIContainer_C_IsEquipped_::CallFunc_GetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsEquipped_, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_IsEquipped_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsEquipTo?
// 0x0002 (0x0002 - 0x0000)
struct JSIContainer_C_IsEquipTo_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsEquipTo_) == 0x000001, "Wrong alignment on JSIContainer_C_IsEquipTo_");
static_assert(sizeof(JSIContainer_C_IsEquipTo_) == 0x000002, "Wrong size on JSIContainer_C_IsEquipTo_");
static_assert(offsetof(JSIContainer_C_IsEquipTo_, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsEquipTo_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsEquipTo_, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000001, "Member 'JSIContainer_C_IsEquipTo_::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsInventory?
// 0x0003 (0x0003 - 0x0000)
struct JSIContainer_C_IsInventory_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsInventory_) == 0x000001, "Wrong alignment on JSIContainer_C_IsInventory_");
static_assert(sizeof(JSIContainer_C_IsInventory_) == 0x000003, "Wrong size on JSIContainer_C_IsInventory_");
static_assert(offsetof(JSIContainer_C_IsInventory_, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsInventory_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsInventory_, CallFunc_IsEquipTo__ReturnValue) == 0x000001, "Member 'JSIContainer_C_IsInventory_::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsInventory_, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'JSIContainer_C_IsInventory_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSlotContainer
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_IsSlotContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSlotContainer) == 0x000008, "Wrong alignment on JSIContainer_C_IsSlotContainer");
static_assert(sizeof(JSIContainer_C_IsSlotContainer) == 0x000018, "Wrong size on JSIContainer_C_IsSlotContainer");
static_assert(offsetof(JSIContainer_C_IsSlotContainer, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsSlotContainer::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSlotContainer, CallFunc_GetEquippedItemRef_Found_) == 0x000001, "Member 'JSIContainer_C_IsSlotContainer::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSlotContainer, CallFunc_GetEquippedItemRef_ItemRef) == 0x000008, "Member 'JSIContainer_C_IsSlotContainer::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSlotContainer, CallFunc_GetEquippedItemRef_IsPending) == 0x000010, "Member 'JSIContainer_C_IsSlotContainer::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSlotContainer, CallFunc_IsContainer__IsContainer_) == 0x000011, "Member 'JSIContainer_C_IsSlotContainer::CallFunc_IsContainer__IsContainer_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSupportedByThis
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_IsSupportedByThis final
{
public:
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Type;                                              // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported_;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSupportedByThis) == 0x000008, "Wrong alignment on JSIContainer_C_IsSupportedByThis");
static_assert(sizeof(JSIContainer_C_IsSupportedByThis) == 0x000018, "Wrong size on JSIContainer_C_IsSupportedByThis");
static_assert(offsetof(JSIContainer_C_IsSupportedByThis, ItemId) == 0x000000, "Member 'JSIContainer_C_IsSupportedByThis::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedByThis, Type) == 0x000008, "Member 'JSIContainer_C_IsSupportedByThis::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedByThis, Supported_) == 0x000010, "Member 'JSIContainer_C_IsSupportedByThis::Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedByThis, CallFunc_IsSupportedType__Supported_) == 0x000011, "Member 'JSIContainer_C_IsSupportedByThis::CallFunc_IsSupportedType__Supported_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSupportedID?
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_IsSupportedID_ final
{
public:
	class UJigsawItem_DataAsset_C*                ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSupportedID_) == 0x000008, "Wrong alignment on JSIContainer_C_IsSupportedID_");
static_assert(sizeof(JSIContainer_C_IsSupportedID_) == 0x000020, "Wrong size on JSIContainer_C_IsSupportedID_");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, ID) == 0x000000, "Member 'JSIContainer_C_IsSupportedID_::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, Supported) == 0x000008, "Member 'JSIContainer_C_IsSupportedID_::Supported' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Contains_ReturnValue_1) == 0x000012, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Length_ReturnValue_1) == 0x000014, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000018, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSupportedType?
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_IsSupportedType_ final
{
public:
	struct FGameplayTagContainer                  SupportedItemTypes_0;                              // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayTagContainer                  NotSupportedItemTypes_0;                           // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Type;                                              // 0x0048(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported_;                                        // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedID__Supported;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedID__Supported_1;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumGameplayTagsInContainer_ReturnValue; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSupportedType_) == 0x000008, "Wrong alignment on JSIContainer_C_IsSupportedType_");
static_assert(sizeof(JSIContainer_C_IsSupportedType_) == 0x000060, "Wrong size on JSIContainer_C_IsSupportedType_");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, SupportedItemTypes_0) == 0x000000, "Member 'JSIContainer_C_IsSupportedType_::SupportedItemTypes_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, NotSupportedItemTypes_0) == 0x000020, "Member 'JSIContainer_C_IsSupportedType_::NotSupportedItemTypes_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, ItemId) == 0x000040, "Member 'JSIContainer_C_IsSupportedType_::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, Type) == 0x000048, "Member 'JSIContainer_C_IsSupportedType_::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, Supported_) == 0x000050, "Member 'JSIContainer_C_IsSupportedType_::Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_HasTag_ReturnValue) == 0x000051, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_HasTag_ReturnValue_1) == 0x000052, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_IsSupportedID__Supported) == 0x000053, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_IsSupportedID__Supported' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_IsSupportedID__Supported_1) == 0x000054, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_IsSupportedID__Supported_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_BooleanAND_ReturnValue) == 0x000055, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_GetNumGameplayTagsInContainer_ReturnValue) == 0x000058, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_GetNumGameplayTagsInContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_Array_Contains_ReturnValue) == 0x00005D, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsWidgetReady?
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_IsWidgetReady_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0004(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsWidgetReady_) == 0x000008, "Wrong alignment on JSIContainer_C_IsWidgetReady_");
static_assert(sizeof(JSIContainer_C_IsWidgetReady_) == 0x000060, "Wrong size on JSIContainer_C_IsWidgetReady_");
static_assert(offsetof(JSIContainer_C_IsWidgetReady_, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsWidgetReady_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsWidgetReady_, CallFunc_GetCachedGeometry_ReturnValue) == 0x000004, "Member 'JSIContainer_C_IsWidgetReady_::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsWidgetReady_, CallFunc_GetLocalSize_ReturnValue) == 0x000040, "Member 'JSIContainer_C_IsWidgetReady_::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsWidgetReady_, CallFunc_VSize2D_ReturnValue) == 0x000050, "Member 'JSIContainer_C_IsWidgetReady_::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsWidgetReady_, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_IsWidgetReady_::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.JigSetLootContent
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_JigSetLootContent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(JSIContainer_C_JigSetLootContent) == 0x000008, "Wrong alignment on JSIContainer_C_JigSetLootContent");
static_assert(sizeof(JSIContainer_C_JigSetLootContent) == 0x000020, "Wrong size on JSIContainer_C_JigSetLootContent");
static_assert(offsetof(JSIContainer_C_JigSetLootContent, Widget) == 0x000000, "Member 'JSIContainer_C_JigSetLootContent::Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_JigSetLootContent, Name_0) == 0x000008, "Member 'JSIContainer_C_JigSetLootContent::Name_0' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.JSIOnWeightUpdated
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_JSIOnWeightUpdated final
{
public:
	double                                        NewWeight;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_JSIOnWeightUpdated) == 0x000008, "Wrong alignment on JSIContainer_C_JSIOnWeightUpdated");
static_assert(sizeof(JSIContainer_C_JSIOnWeightUpdated) == 0x000008, "Wrong size on JSIContainer_C_JSIOnWeightUpdated");
static_assert(offsetof(JSIContainer_C_JSIOnWeightUpdated, NewWeight) == 0x000000, "Member 'JSIContainer_C_JSIOnWeightUpdated::NewWeight' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ManageContainerName
// 0x0005 (0x0005 - 0x0000)
struct JSIContainer_C_ManageContainerName final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ManageContainerName) == 0x000001, "Wrong alignment on JSIContainer_C_ManageContainerName");
static_assert(sizeof(JSIContainer_C_ManageContainerName) == 0x000005, "Wrong size on JSIContainer_C_ManageContainerName");
static_assert(offsetof(JSIContainer_C_ManageContainerName, Temp_bool_Variable) == 0x000000, "Member 'JSIContainer_C_ManageContainerName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ManageContainerName, Temp_byte_Variable) == 0x000001, "Member 'JSIContainer_C_ManageContainerName::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ManageContainerName, Temp_byte_Variable_1) == 0x000002, "Member 'JSIContainer_C_ManageContainerName::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ManageContainerName, CallFunc_IsEquipped__ReturnValue) == 0x000003, "Member 'JSIContainer_C_ManageContainerName::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ManageContainerName, K2Node_Select_Default) == 0x000004, "Member 'JSIContainer_C_ManageContainerName::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveItemToIndexByItemRef
// 0x0178 (0x0178 - 0x0000)
struct JSIContainer_C_MoveItemToIndexByItemRef final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved_;                                            // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         TargetRow;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetColumn;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveItemToIndexByItemRef) == 0x000008, "Wrong alignment on JSIContainer_C_MoveItemToIndexByItemRef");
static_assert(sizeof(JSIContainer_C_MoveItemToIndexByItemRef) == 0x000178, "Wrong size on JSIContainer_C_MoveItemToIndexByItemRef");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ItemRef) == 0x000000, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ToIndex) == 0x000008, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Rotate_) == 0x00000C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Moved_) == 0x00000D, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Moved_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, HostingSlots) == 0x000010, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, TargetRow) == 0x000020, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::TargetRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, TargetColumn) == 0x000024, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::TargetColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, SlotIndex) == 0x000028, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ItemVector) == 0x000030, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Array_Index_Variable) == 0x000044, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_bool_Variable) == 0x000050, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Variable) == 0x000058, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_2) == 0x000064, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Variable_1) == 0x000068, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_3) == 0x00006C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_isRotated__ReturnValue) == 0x000070, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Padding) == 0x000074, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x000084, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Row) == 0x000088, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item) == 0x000090, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000B0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x0000B4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item_2) == 0x0000B8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Add_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetHostedSlot_HostingItem) == 0x0000C8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_IsEmptySlot_isEmpty) == 0x0000D0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D1, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue) == 0x0000D2, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetColumnRowBySlotIndex_Column) == 0x0000D4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetColumnRowBySlotIndex_Row) == 0x0000D8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_X) == 0x0000E0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_Y) == 0x0000E8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_FTrunc_ReturnValue) == 0x0000F4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue_1) == 0x0000F8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000FC, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Greater_IntInt_ReturnValue) == 0x000100, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Subtract_IntInt_ReturnValue) == 0x000104, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_FTrunc_ReturnValue_1) == 0x000108, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00010C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_6) == 0x000110, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_7) == 0x000114, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000118, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetSlotDim_SlotDimension) == 0x000120, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000130, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_X_1) == 0x000138, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_Y_1) == 0x000140, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue_2) == 0x000148, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_MakeVector2D_ReturnValue) == 0x000150, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, K2Node_Select_Default) == 0x000160, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000170, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveItemToIndexBySlotIndex
// 0x0180 (0x0180 - 0x0000)
struct JSIContainer_C_MoveItemToIndexBySlotIndex final
{
public:
	int32                                         ItemSlotIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved_;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            TheItemRef;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         TargetRow;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetColumn;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem_1;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveItemToIndexBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_MoveItemToIndexBySlotIndex");
static_assert(sizeof(JSIContainer_C_MoveItemToIndexBySlotIndex) == 0x000180, "Wrong size on JSIContainer_C_MoveItemToIndexBySlotIndex");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ItemSlotIndex) == 0x000000, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ItemSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ToIndex) == 0x000004, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Rotate_) == 0x000008, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Moved_) == 0x000009, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Moved_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TheItemRef) == 0x000010, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TheItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, HostingSlots) == 0x000018, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TargetRow) == 0x000028, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TargetRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TargetColumn) == 0x00002C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TargetColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, SlotIndex) == 0x000030, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ItemVector) == 0x000038, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Array_Index_Variable) == 0x000050, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Variable) == 0x000058, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Variable_1) == 0x000064, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item) == 0x000070, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetHostedSlot_HostingItem) == 0x000080, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsValid_ReturnValue_1) == 0x000089, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_isRotated__ReturnValue) == 0x00009C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Not_PreBool_ReturnValue) == 0x00009D, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetSlotDim_SlotDimension) == 0x0000A0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_X) == 0x0000B0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_Y) == 0x0000B8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_MakeVector2D_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Padding) == 0x0000D0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x0000E0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Row) == 0x0000E4, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Loop_Counter_Variable_1) == 0x0000E8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000EC, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000F0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_2) == 0x0000F8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue_2) == 0x000100, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue_2) == 0x000104, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_bool_Variable) == 0x000105, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, K2Node_Select_Default) == 0x000108, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_4) == 0x000118, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x00011C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_3) == 0x000120, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Add_ReturnValue) == 0x000128, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetHostedSlot_HostingItem_1) == 0x000130, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetHostedSlot_HostingItem_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsEmptySlot_isEmpty) == 0x000138, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000139, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue) == 0x00013A, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_X_1) == 0x000140, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_Y_1) == 0x000148, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_FTrunc_ReturnValue) == 0x000150, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_FTrunc_ReturnValue_1) == 0x000154, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_5) == 0x000158, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_6) == 0x00015C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Greater_IntInt_ReturnValue) == 0x000160, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_7) == 0x000164, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000168, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00016C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00016D, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000170, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetColumnRowBySlotIndex_Row) == 0x000174, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000178, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue_1) == 0x000179, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00017A, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue_2) == 0x00017B, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x00017C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.On Controller Enter Leave
// 0x0001 (0x0001 - 0x0000)
struct JSIContainer_C_On_Controller_Enter_Leave final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_On_Controller_Enter_Leave) == 0x000001, "Wrong alignment on JSIContainer_C_On_Controller_Enter_Leave");
static_assert(sizeof(JSIContainer_C_On_Controller_Enter_Leave) == 0x000001, "Wrong size on JSIContainer_C_On_Controller_Enter_Leave");
static_assert(offsetof(JSIContainer_C_On_Controller_Enter_Leave, Value) == 0x000000, "Member 'JSIContainer_C_On_Controller_Enter_Leave::Value' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDragEnter
// 0x00B8 (0x00B8 - 0x0000)
struct JSIContainer_C_OnDragEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDragEnter) == 0x000008, "Wrong alignment on JSIContainer_C_OnDragEnter");
static_assert(sizeof(JSIContainer_C_OnDragEnter) == 0x0000B8, "Wrong size on JSIContainer_C_OnDragEnter");
static_assert(offsetof(JSIContainer_C_OnDragEnter, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnDragEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragEnter, PointerEvent) == 0x000038, "Member 'JSIContainer_C_OnDragEnter::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragEnter, Operation) == 0x0000B0, "Member 'JSIContainer_C_OnDragEnter::Operation' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDragLeave
// 0x0080 (0x0080 - 0x0000)
struct JSIContainer_C_OnDragLeave final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDragLeave) == 0x000008, "Wrong alignment on JSIContainer_C_OnDragLeave");
static_assert(sizeof(JSIContainer_C_OnDragLeave) == 0x000080, "Wrong size on JSIContainer_C_OnDragLeave");
static_assert(offsetof(JSIContainer_C_OnDragLeave, PointerEvent) == 0x000000, "Member 'JSIContainer_C_OnDragLeave::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragLeave, Operation) == 0x000078, "Member 'JSIContainer_C_OnDragLeave::Operation' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDrop
// 0x0300 (0x0300 - 0x0000)
struct JSIContainer_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialC_Dropped;                                  // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecialC_Index;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UnhandledCheckSplit;                               // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedRotated;                                    // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          DragWidgetRef;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FixedSlotRef;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation;          // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget;                  // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_OnDropCheckStackability_StackWith;        // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef;                  // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRootContainer_Proceed_;              // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef_1;                // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef_2;                // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLimitedEquipToStack_Handled_;        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef_3;                // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_FindSlotByIndex_SlotRef_4;                // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlotTryRotated_NonPure_Found_;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlotTryRotated_NonPure_ToSlotIndex; // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlotTryRotated_NonPure_Rotated_;  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUnhandledStack_Result;               // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUnhandledStack_Result_1;             // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUnhandledSplit_Handled_;             // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUnhandledSplit_Handled__1;           // 0x016F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DifficultyCheckBackpack__CarryOn_;        // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_UnhandledGetTargetContainer_Target;       // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled_;      // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigSplitWidget_C*                      CallFunc_Create_ReturnValue;                       // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled__1;    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_2;      // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19B[0x5];                                      // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_GetCSlotFromHosted_SlotContainer;         // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x01AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_2;                 // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AF[0x1];                                      // 0x01AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__1;              // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C3[0x5];                                      // 0x01C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_1;             // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_1;           // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            K2Node_Select_Default;                             // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_GetCSlotFromHosted_SlotContainer_1;       // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_3;                 // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EB[0x5];                                      // 0x01EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_UnhandledGetTargetContainer_Target_1;     // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectChange_NOChange;                    // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x01FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FF[0x1];                                      // 0x01FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_Select_Default_1;                           // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLimitedEquipToStack_Handled__1;      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x020B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_Select_Default_2;                           // 0x0210(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack_1;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack_2;                     // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable_1;           // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CompareItems_ReturnValue;                 // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled__2;    // 0x021E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21F[0x1];                                      // 0x021F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PerfromDrop_Moved;                        // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_3;      // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectChange_NOChange_1;                  // 0x0233(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__2;              // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_236[0x2];                                      // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_2;             // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_2;           // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset;                    // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled__3;    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type;                             // 0x0254(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found__3;              // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef_3;             // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending_3;           // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0270(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_Select_Default_3;                           // 0x0280(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer__1;              // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x028B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset_1;                  // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled__4;    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetType_Type_1;                           // 0x029C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef_1; // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer__2;              // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported__1;            // 0x02B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled__5;    // 0x02B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x02B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_2;                    // 0x02B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_Select_Default_4;                           // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        K2Node_Select_Default_5;                           // 0x02C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemBySlotIndex_Found;                 // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetItemBySlotIndex_Item;                  // 0x02D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_16;                // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_17;                // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E3[0x5];                                      // 0x02E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CallFunc_GetJigDA_JigDataAsset_2;                  // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetType_Type_2;                           // 0x02F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue_1;                // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported__2;            // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_4;                 // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDrop) == 0x000008, "Wrong alignment on JSIContainer_C_OnDrop");
static_assert(sizeof(JSIContainer_C_OnDrop) == 0x000300, "Wrong size on JSIContainer_C_OnDrop");
static_assert(offsetof(JSIContainer_C_OnDrop, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, PointerEvent) == 0x000038, "Member 'JSIContainer_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Operation) == 0x0000B0, "Member 'JSIContainer_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, SpecialC_Dropped) == 0x0000B9, "Member 'JSIContainer_C_OnDrop::SpecialC_Dropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, SpecialC_Index) == 0x0000BC, "Member 'JSIContainer_C_OnDrop::SpecialC_Index' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, UnhandledCheckSplit) == 0x0000C0, "Member 'JSIContainer_C_OnDrop::UnhandledCheckSplit' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, DroppedRotated) == 0x0000C1, "Member 'JSIContainer_C_OnDrop::DroppedRotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, DragWidgetRef) == 0x0000C8, "Member 'JSIContainer_C_OnDrop::DragWidgetRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, DroppedSlotRef) == 0x0000D0, "Member 'JSIContainer_C_OnDrop::DroppedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, FixedSlotRef) == 0x0000D8, "Member 'JSIContainer_C_OnDrop::FixedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_AsJig_SDrag_Operation) == 0x0000E0, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_AsJig_SDrag_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue) == 0x0000E9, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_AsDrag_Widget) == 0x0000F0, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_AsDrag_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_bSuccess_1) == 0x0000F8, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_OnDropCheckStackability_StackWith) == 0x000100, "Member 'JSIContainer_C_OnDrop::CallFunc_OnDropCheckStackability_StackWith' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable) == 0x000109, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_1) == 0x00010A, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_FindSlotByIndex_SlotRef) == 0x000110, "Member 'JSIContainer_C_OnDrop::CallFunc_FindSlotByIndex_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipTo__ReturnValue) == 0x000118, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckRootContainer_Proceed_) == 0x000119, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckRootContainer_Proceed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_FindSlotByIndex_SlotRef_1) == 0x000120, "Member 'JSIContainer_C_OnDrop::CallFunc_FindSlotByIndex_SlotRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_FindSlotByIndex_SlotRef_2) == 0x000128, "Member 'JSIContainer_C_OnDrop::CallFunc_FindSlotByIndex_SlotRef_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckLimitedEquipToStack_Handled_) == 0x000130, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckLimitedEquipToStack_Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_2) == 0x000131, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_3) == 0x000132, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_4) == 0x000133, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_FindSlotByIndex_SlotRef_3) == 0x000138, "Member 'JSIContainer_C_OnDrop::CallFunc_FindSlotByIndex_SlotRef_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_FindSlotByIndex_SlotRef_4) == 0x000140, "Member 'JSIContainer_C_OnDrop::CallFunc_FindSlotByIndex_SlotRef_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetSlotDim_SlotDimension) == 0x000148, "Member 'JSIContainer_C_OnDrop::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetPlayerController_ReturnValue) == 0x000158, "Member 'JSIContainer_C_OnDrop::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEmptySlotTryRotated_NonPure_Found_) == 0x000160, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEmptySlotTryRotated_NonPure_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEmptySlotTryRotated_NonPure_ToSlotIndex) == 0x000164, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEmptySlotTryRotated_NonPure_ToSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEmptySlotTryRotated_NonPure_Rotated_) == 0x000168, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEmptySlotTryRotated_NonPure_Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HasAuthority_ReturnValue) == 0x000169, "Member 'JSIContainer_C_OnDrop::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipped__ReturnValue) == 0x00016A, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckUnhandledStack_Result) == 0x00016B, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckUnhandledStack_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckUnhandledStack_Result_1) == 0x00016C, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckUnhandledStack_Result_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEmptySlot_isEmpty) == 0x00016D, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckUnhandledSplit_Handled_) == 0x00016E, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckUnhandledSplit_Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckUnhandledSplit_Handled__1) == 0x00016F, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckUnhandledSplit_Handled__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEmptySlot_isEmpty_1) == 0x000170, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000171, "Member 'JSIContainer_C_OnDrop::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000172, "Member 'JSIContainer_C_OnDrop::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_5) == 0x000173, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue) == 0x000174, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_DifficultyCheckBackpack__CarryOn_) == 0x000175, "Member 'JSIContainer_C_OnDrop::CallFunc_DifficultyCheckBackpack__CarryOn_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_UnhandledGetTargetContainer_Target) == 0x000178, "Member 'JSIContainer_C_OnDrop::CallFunc_UnhandledGetTargetContainer_Target' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_6) == 0x000180, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_1) == 0x000181, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_7) == 0x000182, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled_) == 0x000183, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_8) == 0x000184, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Create_ReturnValue) == 0x000188, "Member 'JSIContainer_C_OnDrop::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled__1) == 0x000190, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_9) == 0x000191, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_10) == 0x000192, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsContainer__IsContainer_) == 0x000193, "Member 'JSIContainer_C_OnDrop::CallFunc_IsContainer__IsContainer_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_NotEqual_ObjectObject_ReturnValue_2) == 0x000194, "Member 'JSIContainer_C_OnDrop::CallFunc_NotEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue_1) == 0x000195, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanOR_ReturnValue) == 0x000196, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_2) == 0x000197, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_3) == 0x000198, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipTo__ReturnValue_1) == 0x000199, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00019A, "Member 'JSIContainer_C_OnDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetCSlotFromHosted_SlotContainer) == 0x0001A0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetCSlotFromHosted_SlotContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_4) == 0x0001A8, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_11) == 0x0001A9, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001AA, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_5) == 0x0001AB, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipTo__ReturnValue_2) == 0x0001AC, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipTo__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_6) == 0x0001AD, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanOR_ReturnValue_1) == 0x0001AE, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_SelectInt_ReturnValue) == 0x0001B0, "Member 'JSIContainer_C_OnDrop::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_Found_) == 0x0001B4, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_ItemRef) == 0x0001B8, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_IsPending) == 0x0001C0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_12) == 0x0001C1, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_Found__1) == 0x0001C2, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_ItemRef_1) == 0x0001C8, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_ItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_IsPending_1) == 0x0001D0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_IsPending_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default) == 0x0001D8, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetCSlotFromHosted_SlotContainer_1) == 0x0001E0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetCSlotFromHosted_SlotContainer_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipTo__ReturnValue_3) == 0x0001E8, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipTo__ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_13) == 0x0001E9, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_7) == 0x0001EA, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_UnhandledGetTargetContainer_Target_1) == 0x0001F0, "Member 'JSIContainer_C_OnDrop::CallFunc_UnhandledGetTargetContainer_Target_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_DetectChange_NOChange) == 0x0001F8, "Member 'JSIContainer_C_OnDrop::CallFunc_DetectChange_NOChange' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_8) == 0x0001F9, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanOR_ReturnValue_2) == 0x0001FA, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0001FB, "Member 'JSIContainer_C_OnDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001FC, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable_1) == 0x0001FD, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_9) == 0x0001FE, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default_1) == 0x000200, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CheckLimitedEquipToStack_Handled__1) == 0x000208, "Member 'JSIContainer_C_OnDrop::CallFunc_CheckLimitedEquipToStack_Handled__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable_2) == 0x000209, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CanStack__CanStack) == 0x00020A, "Member 'JSIContainer_C_OnDrop::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CanStack__FreeSpaceAvailable) == 0x00020B, "Member 'JSIContainer_C_OnDrop::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_10) == 0x00020C, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default_2) == 0x000210, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CanStack__CanStack_1) == 0x000218, "Member 'JSIContainer_C_OnDrop::CallFunc_CanStack__CanStack_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CanStack__CanStack_2) == 0x000219, "Member 'JSIContainer_C_OnDrop::CallFunc_CanStack__CanStack_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CanStack__FreeSpaceAvailable_1) == 0x00021A, "Member 'JSIContainer_C_OnDrop::CallFunc_CanStack__FreeSpaceAvailable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_CompareItems_ReturnValue) == 0x00021B, "Member 'JSIContainer_C_OnDrop::CallFunc_CompareItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_11) == 0x00021C, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_12) == 0x00021D, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled__2) == 0x00021E, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetSlotDim_SlotDimension_1) == 0x000220, "Member 'JSIContainer_C_OnDrop::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_PerfromDrop_Moved) == 0x000230, "Member 'JSIContainer_C_OnDrop::CallFunc_PerfromDrop_Moved' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_NotEqual_ObjectObject_ReturnValue_3) == 0x000231, "Member 'JSIContainer_C_OnDrop::CallFunc_NotEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable_3) == 0x000232, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_DetectChange_NOChange_1) == 0x000233, "Member 'JSIContainer_C_OnDrop::CallFunc_DetectChange_NOChange_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000234, "Member 'JSIContainer_C_OnDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_Found__2) == 0x000235, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_Found__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_ItemRef_2) == 0x000238, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_ItemRef_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_IsPending_2) == 0x000240, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_IsPending_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetJigDA_JigDataAsset) == 0x000248, "Member 'JSIContainer_C_OnDrop::CallFunc_GetJigDA_JigDataAsset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled__3) == 0x000250, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled__3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetType_Type) == 0x000254, "Member 'JSIContainer_C_OnDrop::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_Found__3) == 0x00025C, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_Found__3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_ItemRef_3) == 0x000260, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_ItemRef_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetEquippedItemRef_IsPending_3) == 0x000268, "Member 'JSIContainer_C_OnDrop::CallFunc_GetEquippedItemRef_IsPending_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable_4) == 0x000269, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000270, "Member 'JSIContainer_C_OnDrop::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_14) == 0x000278, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default_3) == 0x000280, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_13) == 0x000288, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue_4) == 0x000289, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsContainer__IsContainer__1) == 0x00028A, "Member 'JSIContainer_C_OnDrop::CallFunc_IsContainer__IsContainer__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_14) == 0x00028B, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsSupportedType__Supported_) == 0x00028C, "Member 'JSIContainer_C_OnDrop::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetJigDA_JigDataAsset_1) == 0x000290, "Member 'JSIContainer_C_OnDrop::CallFunc_GetJigDA_JigDataAsset_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled__4) == 0x000298, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled__4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetType_Type_1) == 0x00029C, "Member 'JSIContainer_C_OnDrop::CallFunc_GetType_Type_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetSpecialContainerRef_SpecialContainerRef_1) == 0x0002A8, "Member 'JSIContainer_C_OnDrop::CallFunc_GetSpecialContainerRef_SpecialContainerRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_15) == 0x0002B0, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue_5) == 0x0002B1, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsContainer__IsContainer__2) == 0x0002B2, "Member 'JSIContainer_C_OnDrop::CallFunc_IsContainer__IsContainer__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsSupportedType__Supported__1) == 0x0002B3, "Member 'JSIContainer_C_OnDrop::CallFunc_IsSupportedType__Supported__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_15) == 0x0002B4, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_HandleContainerOnContainer_Handled__5) == 0x0002B5, "Member 'JSIContainer_C_OnDrop::CallFunc_HandleContainerOnContainer_Handled__5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsValid_ReturnValue_16) == 0x0002B6, "Member 'JSIContainer_C_OnDrop::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEmptySlot_isEmpty_2) == 0x0002B7, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEmptySlot_isEmpty_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Temp_bool_Variable_5) == 0x0002B8, "Member 'JSIContainer_C_OnDrop::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default_4) == 0x0002C0, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_Select_Default_5) == 0x0002C8, "Member 'JSIContainer_C_OnDrop::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetItemBySlotIndex_Found) == 0x0002D0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetItemBySlotIndex_Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetItemBySlotIndex_Item) == 0x0002D8, "Member 'JSIContainer_C_OnDrop::CallFunc_GetItemBySlotIndex_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0002E0, "Member 'JSIContainer_C_OnDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_16) == 0x0002E1, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_BooleanAND_ReturnValue_17) == 0x0002E2, "Member 'JSIContainer_C_OnDrop::CallFunc_BooleanAND_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetJigDA_JigDataAsset_2) == 0x0002E8, "Member 'JSIContainer_C_OnDrop::CallFunc_GetJigDA_JigDataAsset_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetType_Type_2) == 0x0002F0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetType_Type_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipped__ReturnValue_1) == 0x0002F8, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipped__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsSupportedType__Supported__2) == 0x0002F9, "Member 'JSIContainer_C_OnDrop::CallFunc_IsSupportedType__Supported__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_IsEquipTo__ReturnValue_4) == 0x0002FA, "Member 'JSIContainer_C_OnDrop::CallFunc_IsEquipTo__ReturnValue_4' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDropCheckStackability
// 0x00B0 (0x00B0 - 0x0000)
struct JSIContainer_C_OnDropCheckStackability final
{
public:
	class UJSI_Slot_C*                            FixedSlot;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemDropped;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            StackWith;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Result;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0058(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_GetLastItem_ItemRef;                      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCanStack_Sucess;                   // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_CheckIfCanStack_ItemRef;                  // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDropCheckStackability) == 0x000008, "Wrong alignment on JSIContainer_C_OnDropCheckStackability");
static_assert(sizeof(JSIContainer_C_OnDropCheckStackability) == 0x0000B0, "Wrong size on JSIContainer_C_OnDropCheckStackability");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, FixedSlot) == 0x000000, "Member 'JSIContainer_C_OnDropCheckStackability::FixedSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, ItemDropped) == 0x000008, "Member 'JSIContainer_C_OnDropCheckStackability::ItemDropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, StackWith) == 0x000010, "Member 'JSIContainer_C_OnDropCheckStackability::StackWith' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, Result) == 0x000018, "Member 'JSIContainer_C_OnDropCheckStackability::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_CanStack__CanStack) == 0x000020, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_CanStack__FreeSpaceAvailable) == 0x000021, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_IsValid_ReturnValue_1) == 0x000023, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_GetHostedSlot_HostingItem) == 0x000028, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_GetContainerOneRef_ContainerRef) == 0x000038, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000040, "Member 'JSIContainer_C_OnDropCheckStackability::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'JSIContainer_C_OnDropCheckStackability::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_IsValid_ReturnValue_3) == 0x000051, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_GetListOfContainers_Containers) == 0x000058, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'JSIContainer_C_OnDropCheckStackability::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, Temp_int_Array_Index_Variable) == 0x000078, "Member 'JSIContainer_C_OnDropCheckStackability::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Array_Get_Item) == 0x000080, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_GetLastItem_ItemRef) == 0x000090, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_GetLastItem_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_Array_Get_Item_2) == 0x000098, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x0000A1, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_CheckIfCanStack_Sucess) == 0x0000A2, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_CheckIfCanStack_Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDropCheckStackability, CallFunc_CheckIfCanStack_ItemRef) == 0x0000A8, "Member 'JSIContainer_C_OnDropCheckStackability::CallFunc_CheckIfCanStack_ItemRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnKeyDown
// 0x01F0 (0x01F0 - 0x0000)
struct JSIContainer_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	int32                                         Row;                                               // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Col;                                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0138(0x00B8)()
};
static_assert(alignof(JSIContainer_C_OnKeyDown) == 0x000008, "Wrong alignment on JSIContainer_C_OnKeyDown");
static_assert(sizeof(JSIContainer_C_OnKeyDown) == 0x0001F0, "Wrong size on JSIContainer_C_OnKeyDown");
static_assert(offsetof(JSIContainer_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'JSIContainer_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'JSIContainer_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, Row) == 0x000130, "Member 'JSIContainer_C_OnKeyDown::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, Col) == 0x000134, "Member 'JSIContainer_C_OnKeyDown::Col' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000138, "Member 'JSIContainer_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnKeyUp
// 0x01E8 (0x01E8 - 0x0000)
struct JSIContainer_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0130(0x00B8)()
};
static_assert(alignof(JSIContainer_C_OnKeyUp) == 0x000008, "Wrong alignment on JSIContainer_C_OnKeyUp");
static_assert(sizeof(JSIContainer_C_OnKeyUp) == 0x0001E8, "Wrong size on JSIContainer_C_OnKeyUp");
static_assert(offsetof(JSIContainer_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'JSIContainer_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyUp, ReturnValue) == 0x000078, "Member 'JSIContainer_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000130, "Member 'JSIContainer_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.PerfromDrop
// 0x00C0 (0x00C0 - 0x0000)
struct JSIContainer_C_PerfromDrop final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved;                                             // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemFoundArray;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FromY;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FromX;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue_1;                 // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_PerfromDrop) == 0x000008, "Wrong alignment on JSIContainer_C_PerfromDrop");
static_assert(sizeof(JSIContainer_C_PerfromDrop) == 0x0000C0, "Wrong size on JSIContainer_C_PerfromDrop");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotIndex) == 0x000000, "Member 'JSIContainer_C_PerfromDrop::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotVector) == 0x000008, "Member 'JSIContainer_C_PerfromDrop::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotRef) == 0x000018, "Member 'JSIContainer_C_PerfromDrop::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Rotated_) == 0x000020, "Member 'JSIContainer_C_PerfromDrop::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Moved) == 0x000021, "Member 'JSIContainer_C_PerfromDrop::Moved' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, ItemFoundArray) == 0x000028, "Member 'JSIContainer_C_PerfromDrop::ItemFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, ItemFound) == 0x000038, "Member 'JSIContainer_C_PerfromDrop::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, FromY) == 0x000040, "Member 'JSIContainer_C_PerfromDrop::FromY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, FromX) == 0x000044, "Member 'JSIContainer_C_PerfromDrop::FromX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Array_Index_Variable) == 0x000050, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_isRotated__ReturnValue) == 0x00005C, "Member 'JSIContainer_C_PerfromDrop::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_PerfromDrop::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000065, "Member 'JSIContainer_C_PerfromDrop::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanOR_ReturnValue) == 0x000066, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item) == 0x000068, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanOR_ReturnValue_1) == 0x000078, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_isRotated__ReturnValue_1) == 0x000079, "Member 'JSIContainer_C_PerfromDrop::CallFunc_isRotated__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Not_PreBool_ReturnValue) == 0x00007A, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_IsValid_ReturnValue) == 0x00007B, "Member 'JSIContainer_C_PerfromDrop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_2) == 0x000080, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00008D, "Member 'JSIContainer_C_PerfromDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanAND_ReturnValue) == 0x00008E, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanAND_ReturnValue_1) == 0x00008F, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000090, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Padding) == 0x000094, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x0000A4, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Row) == 0x0000A8, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Length_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_3) == 0x0000B0, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B8, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct JSIContainer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_PreConstruct) == 0x000001, "Wrong alignment on JSIContainer_C_PreConstruct");
static_assert(sizeof(JSIContainer_C_PreConstruct) == 0x000001, "Wrong size on JSIContainer_C_PreConstruct");
static_assert(offsetof(JSIContainer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'JSIContainer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Re-Init
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_Re_Init final
{
public:
	int32                                         Columns;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rows;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Re_Init) == 0x000004, "Wrong alignment on JSIContainer_C_Re_Init");
static_assert(sizeof(JSIContainer_C_Re_Init) == 0x000008, "Wrong size on JSIContainer_C_Re_Init");
static_assert(offsetof(JSIContainer_C_Re_Init, Columns) == 0x000000, "Member 'JSIContainer_C_Re_Init::Columns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Re_Init, Rows) == 0x000004, "Member 'JSIContainer_C_Re_Init::Rows' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveInventoryItemByRef
// 0x0070 (0x0070 - 0x0000)
struct JSIContainer_C_RemoveInventoryItemByRef final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerUnequippedEvent_;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed_;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UnequipItem_Unequipped;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_UnequipItem_SlotRef;                      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveInventoryItemByRef) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveInventoryItemByRef");
static_assert(sizeof(JSIContainer_C_RemoveInventoryItemByRef) == 0x000070, "Wrong size on JSIContainer_C_RemoveInventoryItemByRef");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, SlotRef) == 0x000000, "Member 'JSIContainer_C_RemoveInventoryItemByRef::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, TriggerUnequippedEvent_) == 0x000008, "Member 'JSIContainer_C_RemoveInventoryItemByRef::TriggerUnequippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Removed) == 0x000009, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Removed_) == 0x00000A, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Removed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_UnequipItem_Unequipped) == 0x00000B, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_UnequipItem_Unequipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_UnequipItem_SlotRef) == 0x000010, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_UnequipItem_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_bool_True_if_break_was_hit_Variable) == 0x000024, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_IsEquipped__ReturnValue) == 0x000038, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_IsEquipTo__ReturnValue) == 0x000039, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_RemoveItem_ReturnValue) == 0x00003B, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000048, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Less_IntInt_ReturnValue_1) == 0x000058, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_BooleanAND_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveItemByUniqueID
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_RemoveItemByUniqueID final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CallFunc_GetUniqueID_UniqueServerID;               // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GuidGuid_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveItemByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveItemByUniqueID");
static_assert(sizeof(JSIContainer_C_RemoveItemByUniqueID) == 0x000048, "Wrong size on JSIContainer_C_RemoveItemByUniqueID");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, ID) == 0x000000, "Member 'JSIContainer_C_RemoveItemByUniqueID::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Sucess) == 0x000010, "Member 'JSIContainer_C_RemoveItemByUniqueID::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Temp_int_Array_Index_Variable) == 0x000014, "Member 'JSIContainer_C_RemoveItemByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_RemoveItemByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000031, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x000034, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_EqualEqual_GuidGuid_ReturnValue) == 0x000044, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_EqualEqual_GuidGuid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveSortHighlightedTypes
// 0x00A0 (0x00A0 - 0x0000)
struct JSIContainer_C_RemoveSortHighlightedTypes final
{
public:
	struct FGameplayTagContainer                  Types;                                             // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayTagContainer                  RemoveIndexes;                                     // 0x0020(0x0020)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0058(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0080(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0094(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveSortHighlightedTypes) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveSortHighlightedTypes");
static_assert(sizeof(JSIContainer_C_RemoveSortHighlightedTypes) == 0x0000A0, "Wrong size on JSIContainer_C_RemoveSortHighlightedTypes");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Types) == 0x000000, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Types' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, RemoveIndexes) == 0x000020, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::RemoveIndexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Array_Index_Variable) == 0x000048, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Array_Index_Variable_1) == 0x00004C, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000058, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Get_Item) == 0x000068, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000074, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_RemoveGameplayTag_ReturnValue) == 0x000079, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_RemoveGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000080, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Get_Item_1) == 0x000094, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_HasTag_ReturnValue) == 0x00009D, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_HasTag_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ResizeItem
// 0x0120 (0x0120 - 0x0000)
struct JSIContainer_C_ResizeItem final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToX;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToY;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resized_;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToSlot;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_AddToXY_SlotDimension;                    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResize__Result;                        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    CallFunc_CanResize__HostingSlotsArray;             // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    CallFunc_CanResize__FreedHostingSlotsArray;        // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ResizeSlot_Size;                          // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ResizeItem) == 0x000008, "Wrong alignment on JSIContainer_C_ResizeItem");
static_assert(sizeof(JSIContainer_C_ResizeItem) == 0x000120, "Wrong size on JSIContainer_C_ResizeItem");
static_assert(offsetof(JSIContainer_C_ResizeItem, SlotRef) == 0x000000, "Member 'JSIContainer_C_ResizeItem::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, AddToX) == 0x000008, "Member 'JSIContainer_C_ResizeItem::AddToX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, AddToY) == 0x00000C, "Member 'JSIContainer_C_ResizeItem::AddToY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Resized_) == 0x000010, "Member 'JSIContainer_C_ResizeItem::Resized_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, ToSlot) == 0x000014, "Member 'JSIContainer_C_ResizeItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_ResizeItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Array_Index_Variable) == 0x000020, "Member 'JSIContainer_C_ResizeItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_IsInventory__ReturnValue) == 0x000024, "Member 'JSIContainer_C_ResizeItem::CallFunc_IsInventory__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_AddToXY_SlotDimension) == 0x000028, "Member 'JSIContainer_C_ResizeItem::CallFunc_AddToXY_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'JSIContainer_C_ResizeItem::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CalculateSizeCustom_ReturnValue) == 0x000040, "Member 'JSIContainer_C_ResizeItem::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'JSIContainer_C_ResizeItem::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_isRotated__ReturnValue) == 0x000058, "Member 'JSIContainer_C_ResizeItem::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__Result) == 0x000059, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__HostingSlotsArray) == 0x000060, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__HostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__FreedHostingSlotsArray) == 0x000070, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__FreedHostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Get_Item) == 0x000080, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_GetSlotDim_SlotDimension) == 0x0000A0, "Member 'JSIContainer_C_ResizeItem::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CalculateSize_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_ResizeItem::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_SelectInt_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_ResizeItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_ResizeSlot_Size) == 0x0000C8, "Member 'JSIContainer_C_ResizeItem::CallFunc_ResizeSlot_Size' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D8, "Member 'JSIContainer_C_ResizeItem::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_SelectInt_ReturnValue_1) == 0x0000E0, "Member 'JSIContainer_C_ResizeItem::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000E8, "Member 'JSIContainer_C_ResizeItem::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_GetSlotDim_SlotDimension_1) == 0x0000F0, "Member 'JSIContainer_C_ResizeItem::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_MakeVector2D_ReturnValue) == 0x000100, "Member 'JSIContainer_C_ResizeItem::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000110, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SelectRotation
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_SelectRotation final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedRotated_;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SelectRotation) == 0x000008, "Wrong alignment on JSIContainer_C_SelectRotation");
static_assert(sizeof(JSIContainer_C_SelectRotation) == 0x000010, "Wrong size on JSIContainer_C_SelectRotation");
static_assert(offsetof(JSIContainer_C_SelectRotation, ItemRef) == 0x000000, "Member 'JSIContainer_C_SelectRotation::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, DroppedRotated_) == 0x000008, "Member 'JSIContainer_C_SelectRotation::DroppedRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Rotated) == 0x000009, "Member 'JSIContainer_C_SelectRotation::Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable) == 0x00000A, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'JSIContainer_C_SelectRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable_1) == 0x00000C, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable_2) == 0x00000D, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, K2Node_Select_Default) == 0x00000E, "Member 'JSIContainer_C_SelectRotation::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetActionbarFollower
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_SetActionbarFollower final
{
public:
	class UJSI_Slot_C*                            JigRef;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetActionbarFollower) == 0x000008, "Wrong alignment on JSIContainer_C_SetActionbarFollower");
static_assert(sizeof(JSIContainer_C_SetActionbarFollower) == 0x000010, "Wrong size on JSIContainer_C_SetActionbarFollower");
static_assert(offsetof(JSIContainer_C_SetActionbarFollower, JigRef) == 0x000000, "Member 'JSIContainer_C_SetActionbarFollower::JigRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetActionbarFollower, Return) == 0x000008, "Member 'JSIContainer_C_SetActionbarFollower::Return' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetActorOwner
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_SetActorOwner final
{
public:
	class AActor*                                 ActorRef;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetActorOwner) == 0x000008, "Wrong alignment on JSIContainer_C_SetActorOwner");
static_assert(sizeof(JSIContainer_C_SetActorOwner) == 0x000008, "Wrong size on JSIContainer_C_SetActorOwner");
static_assert(offsetof(JSIContainer_C_SetActorOwner, ActorRef) == 0x000000, "Member 'JSIContainer_C_SetActorOwner::ActorRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetEquippedHighlight
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_SetEquippedHighlight final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0014(0x0014)()
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetEquippedHighlight) == 0x000008, "Wrong alignment on JSIContainer_C_SetEquippedHighlight");
static_assert(sizeof(JSIContainer_C_SetEquippedHighlight) == 0x000060, "Wrong size on JSIContainer_C_SetEquippedHighlight");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, Valid) == 0x000000, "Member 'JSIContainer_C_SetEquippedHighlight::Valid' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, Temp_bool_Variable) == 0x000001, "Member 'JSIContainer_C_SetEquippedHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, Temp_bool_Variable_1) == 0x000002, "Member 'JSIContainer_C_SetEquippedHighlight::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_Array_Get_Item) == 0x000008, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, K2Node_Select_Default) == 0x000014, "Member 'JSIContainer_C_SetEquippedHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_GetEquippedItemRef_Found_) == 0x000028, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_GetEquippedItemRef_ItemRef) == 0x000030, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_GetEquippedItemRef_IsPending) == 0x000038, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, K2Node_MakeArray_Array) == 0x000040, "Member 'JSIContainer_C_SetEquippedHighlight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, K2Node_Select_Default_1) == 0x000050, "Member 'JSIContainer_C_SetEquippedHighlight::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetEquippedHighlight, CallFunc_SetHighlight_Highlight) == 0x000058, "Member 'JSIContainer_C_SetEquippedHighlight::CallFunc_SetHighlight_Highlight' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetInspectorRef
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_SetInspectorRef final
{
public:
	class UBP_InspectorWindowWidget_C*            Inspector;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetInspectorRef) == 0x000008, "Wrong alignment on JSIContainer_C_SetInspectorRef");
static_assert(sizeof(JSIContainer_C_SetInspectorRef) == 0x000008, "Wrong size on JSIContainer_C_SetInspectorRef");
static_assert(offsetof(JSIContainer_C_SetInspectorRef, Inspector) == 0x000000, "Member 'JSIContainer_C_SetInspectorRef::Inspector' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetItemReference
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_SetItemReference final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetItemReference) == 0x000008, "Wrong alignment on JSIContainer_C_SetItemReference");
static_assert(sizeof(JSIContainer_C_SetItemReference) == 0x000008, "Wrong size on JSIContainer_C_SetItemReference");
static_assert(offsetof(JSIContainer_C_SetItemReference, ItemRef) == 0x000000, "Member 'JSIContainer_C_SetItemReference::ItemRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetLock Column Row
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_SetLock_Column_Row final
{
public:
	int32                                         ColumnToLock;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RowToLock;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock_;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetLock_Column_Row) == 0x000008, "Wrong alignment on JSIContainer_C_SetLock_Column_Row");
static_assert(sizeof(JSIContainer_C_SetLock_Column_Row) == 0x000058, "Wrong size on JSIContainer_C_SetLock_Column_Row");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, ColumnToLock) == 0x000000, "Member 'JSIContainer_C_SetLock_Column_Row::ColumnToLock' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, RowToLock) == 0x000004, "Member 'JSIContainer_C_SetLock_Column_Row::RowToLock' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, Lock_) == 0x000008, "Member 'JSIContainer_C_SetLock_Column_Row::Lock_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000009, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00000A, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, Temp_int_Variable) == 0x00000C, "Member 'JSIContainer_C_SetLock_Column_Row::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, Temp_int_Variable_1) == 0x00001C, "Member 'JSIContainer_C_SetLock_Column_Row::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue) == 0x000020, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Less_IntInt_ReturnValue_1) == 0x000038, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1) == 0x00003C, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Get_Slot_Index_by_Column_Row_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_BooleanAND_ReturnValue_1) == 0x000040, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetLock_Column_Row, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000054, "Member 'JSIContainer_C_SetLock_Column_Row::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetSlotDragVisualHighlight
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_SetSlotDragVisualHighlight final
{
public:
	bool                                          Valid_;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0014(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0028(0x0014)()
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetSlotDragVisualHighlight) == 0x000008, "Wrong alignment on JSIContainer_C_SetSlotDragVisualHighlight");
static_assert(sizeof(JSIContainer_C_SetSlotDragVisualHighlight) == 0x000050, "Wrong size on JSIContainer_C_SetSlotDragVisualHighlight");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, Valid_) == 0x000000, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::Valid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, Temp_bool_Variable) == 0x000001, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, CallFunc_GetEquippedItemRef_Found_) == 0x000002, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, CallFunc_GetEquippedItemRef_ItemRef) == 0x000008, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, CallFunc_GetEquippedItemRef_IsPending) == 0x000010, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, K2Node_MakeStruct_SlateColor) == 0x000014, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, K2Node_Select_Default) == 0x000028, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotDragVisualHighlight, CallFunc_SetHighlight_Highlight) == 0x000048, "Member 'JSIContainer_C_SetSlotDragVisualHighlight::CallFunc_SetHighlight_Highlight' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetSlotHighlight
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_SetSlotHighlight final
{
public:
	bool                                          Valid_;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0028(0x0014)()
	bool                                          CallFunc_SetHighlight_Highlight;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetSlotHighlight) == 0x000008, "Wrong alignment on JSIContainer_C_SetSlotHighlight");
static_assert(sizeof(JSIContainer_C_SetSlotHighlight) == 0x000040, "Wrong size on JSIContainer_C_SetSlotHighlight");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, Valid_) == 0x000000, "Member 'JSIContainer_C_SetSlotHighlight::Valid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, Temp_bool_Variable) == 0x000001, "Member 'JSIContainer_C_SetSlotHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'JSIContainer_C_SetSlotHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, CallFunc_Array_Get_Item) == 0x000008, "Member 'JSIContainer_C_SetSlotHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'JSIContainer_C_SetSlotHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, K2Node_MakeArray_Array) == 0x000018, "Member 'JSIContainer_C_SetSlotHighlight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, K2Node_Select_Default) == 0x000028, "Member 'JSIContainer_C_SetSlotHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetSlotHighlight, CallFunc_SetHighlight_Highlight) == 0x00003C, "Member 'JSIContainer_C_SetSlotHighlight::CallFunc_SetHighlight_Highlight' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SomeFunctionBool
// 0x0002 (0x0002 - 0x0000)
struct JSIContainer_C_SomeFunctionBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SomeFunctionBool) == 0x000001, "Wrong alignment on JSIContainer_C_SomeFunctionBool");
static_assert(sizeof(JSIContainer_C_SomeFunctionBool) == 0x000002, "Wrong size on JSIContainer_C_SomeFunctionBool");
static_assert(offsetof(JSIContainer_C_SomeFunctionBool, ReturnValue) == 0x000000, "Member 'JSIContainer_C_SomeFunctionBool::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SomeFunctionBool, CallFunc_RandomBool_ReturnValue) == 0x000001, "Member 'JSIContainer_C_SomeFunctionBool::CallFunc_RandomBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.TrySwapItems
// 0x0138 (0x0138 - 0x0000)
struct JSIContainer_C_TrySwapItems final
{
public:
	class UJSI_Slot_C*                            Item1;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Item2;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Item2NewIndex;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Item1NewIndex;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Item2Rotated;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Item1Rotated;                                      // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    PostAddIgnoreSlotsArr;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    IgnoreSlotsArr;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          SameContainer;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        Item2_Container;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Item1_Container;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension;                 // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemFromJigRef_Added;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_AddItemFromJigRef_AddedItemRef;           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemFromJigRef_Added_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_AddItemFromJigRef_AddedItemRef_1;         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveFromJSIParent_Removed;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_IgnoreItems_Result;      // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector_; // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotDim_SlotDimension_1;               // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_IgnoreItems_Result_1;    // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector__1; // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetHostingSlots_Indexes;                  // 0x0108(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_TrySwapItems) == 0x000008, "Wrong alignment on JSIContainer_C_TrySwapItems");
static_assert(sizeof(JSIContainer_C_TrySwapItems) == 0x000138, "Wrong size on JSIContainer_C_TrySwapItems");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item1) == 0x000000, "Member 'JSIContainer_C_TrySwapItems::Item1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item2) == 0x000008, "Member 'JSIContainer_C_TrySwapItems::Item2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Success) == 0x000010, "Member 'JSIContainer_C_TrySwapItems::Success' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item2NewIndex) == 0x000014, "Member 'JSIContainer_C_TrySwapItems::Item2NewIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item1NewIndex) == 0x000018, "Member 'JSIContainer_C_TrySwapItems::Item1NewIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item2Rotated) == 0x00001C, "Member 'JSIContainer_C_TrySwapItems::Item2Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item1Rotated) == 0x00001D, "Member 'JSIContainer_C_TrySwapItems::Item1Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, PostAddIgnoreSlotsArr) == 0x000020, "Member 'JSIContainer_C_TrySwapItems::PostAddIgnoreSlotsArr' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, IgnoreSlotsArr) == 0x000030, "Member 'JSIContainer_C_TrySwapItems::IgnoreSlotsArr' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, SameContainer) == 0x000040, "Member 'JSIContainer_C_TrySwapItems::SameContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item2_Container) == 0x000048, "Member 'JSIContainer_C_TrySwapItems::Item2_Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Item1_Container) == 0x000050, "Member 'JSIContainer_C_TrySwapItems::Item1_Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Array_Index_Variable) == 0x000058, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Array_Index_Variable_2) == 0x000068, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Loop_Counter_Variable_1) == 0x00006C, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_GetSlotDim_SlotDimension) == 0x000078, "Member 'JSIContainer_C_TrySwapItems::CallFunc_GetSlotDim_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_AddItemFromJigRef_Added) == 0x000088, "Member 'JSIContainer_C_TrySwapItems::CallFunc_AddItemFromJigRef_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_AddItemFromJigRef_AddedItemRef) == 0x000090, "Member 'JSIContainer_C_TrySwapItems::CallFunc_AddItemFromJigRef_AddedItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_AddItemFromJigRef_Added_1) == 0x000098, "Member 'JSIContainer_C_TrySwapItems::CallFunc_AddItemFromJigRef_Added_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_AddItemFromJigRef_AddedItemRef_1) == 0x0000A0, "Member 'JSIContainer_C_TrySwapItems::CallFunc_AddItemFromJigRef_AddedItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_RemoveFromJSIParent_Removed) == 0x0000A8, "Member 'JSIContainer_C_TrySwapItems::CallFunc_RemoveFromJSIParent_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000A9, "Member 'JSIContainer_C_TrySwapItems::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_bool_Variable) == 0x0000AA, "Member 'JSIContainer_C_TrySwapItems::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, Temp_int_Loop_Counter_Variable_2) == 0x0000AC, "Member 'JSIContainer_C_TrySwapItems::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_CanAddItemToSlot_IgnoreItems_Result) == 0x0000BD, "Member 'JSIContainer_C_TrySwapItems::CallFunc_CanAddItemToSlot_IgnoreItems_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector_) == 0x0000BE, "Member 'JSIContainer_C_TrySwapItems::CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000C0, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_GetSlotDim_SlotDimension_1) == 0x0000C8, "Member 'JSIContainer_C_TrySwapItems::CallFunc_GetSlotDim_SlotDimension_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_FlipSlotDim_Flipped) == 0x0000D8, "Member 'JSIContainer_C_TrySwapItems::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Get_Item_1) == 0x0000E8, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Length_ReturnValue_1) == 0x0000F0, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F4, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_CanAddItemToSlot_IgnoreItems_Result_1) == 0x0000F5, "Member 'JSIContainer_C_TrySwapItems::CallFunc_CanAddItemToSlot_IgnoreItems_Result_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector__1) == 0x0000F6, "Member 'JSIContainer_C_TrySwapItems::CallFunc_CanAddItemToSlot_IgnoreItems_RotatedVector__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, K2Node_Select_Default) == 0x0000F8, "Member 'JSIContainer_C_TrySwapItems::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_GetHostingSlots_Indexes) == 0x000108, "Member 'JSIContainer_C_TrySwapItems::CallFunc_GetHostingSlots_Indexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Get_Item_3) == 0x000120, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_RemoveItem_ReturnValue) == 0x000128, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Array_Length_ReturnValue_2) == 0x00012C, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TrySwapItems, CallFunc_Less_IntInt_ReturnValue_2) == 0x000130, "Member 'JSIContainer_C_TrySwapItems::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UnequipItem
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_UnequipItem final
{
public:
	bool                                          TriggerUnequippedEvent_;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unequipped;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotR;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UnequipItem) == 0x000008, "Wrong alignment on JSIContainer_C_UnequipItem");
static_assert(sizeof(JSIContainer_C_UnequipItem) == 0x000028, "Wrong size on JSIContainer_C_UnequipItem");
static_assert(offsetof(JSIContainer_C_UnequipItem, TriggerUnequippedEvent_) == 0x000000, "Member 'JSIContainer_C_UnequipItem::TriggerUnequippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, Unequipped) == 0x000001, "Member 'JSIContainer_C_UnequipItem::Unequipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, SlotRef) == 0x000008, "Member 'JSIContainer_C_UnequipItem::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, SlotR) == 0x000010, "Member 'JSIContainer_C_UnequipItem::SlotR' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_UnequipItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, CallFunc_IsEquipped__ReturnValue) == 0x000020, "Member 'JSIContainer_C_UnequipItem::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Update_OnCountChanged
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_Update_OnCountChanged final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OldCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDefaultWeight_Weight;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Update_OnCountChanged) == 0x000008, "Wrong alignment on JSIContainer_C_Update_OnCountChanged");
static_assert(sizeof(JSIContainer_C_Update_OnCountChanged) == 0x000038, "Wrong size on JSIContainer_C_Update_OnCountChanged");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, ItemRef) == 0x000000, "Member 'JSIContainer_C_Update_OnCountChanged::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, OldCount) == 0x000008, "Member 'JSIContainer_C_Update_OnCountChanged::OldCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, NewCount) == 0x00000C, "Member 'JSIContainer_C_Update_OnCountChanged::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_Update_OnCountChanged::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, CallFunc_GetDefaultWeight_Weight) == 0x000018, "Member 'JSIContainer_C_Update_OnCountChanged::CallFunc_GetDefaultWeight_Weight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'JSIContainer_C_Update_OnCountChanged::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'JSIContainer_C_Update_OnCountChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnCountChanged, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSIContainer_C_Update_OnCountChanged::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Update_OnItemAdded
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_Update_OnItemAdded final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ItemWeight;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Update_OnItemAdded) == 0x000008, "Wrong alignment on JSIContainer_C_Update_OnItemAdded");
static_assert(sizeof(JSIContainer_C_Update_OnItemAdded) == 0x000020, "Wrong size on JSIContainer_C_Update_OnItemAdded");
static_assert(offsetof(JSIContainer_C_Update_OnItemAdded, ItemRef) == 0x000000, "Member 'JSIContainer_C_Update_OnItemAdded::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemAdded, ItemWeight) == 0x000008, "Member 'JSIContainer_C_Update_OnItemAdded::ItemWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemAdded, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'JSIContainer_C_Update_OnItemAdded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemAdded, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'JSIContainer_C_Update_OnItemAdded::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Update_OnItemRemoved
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_Update_OnItemRemoved final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ItemWeight;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Update_OnItemRemoved) == 0x000008, "Wrong alignment on JSIContainer_C_Update_OnItemRemoved");
static_assert(sizeof(JSIContainer_C_Update_OnItemRemoved) == 0x000020, "Wrong size on JSIContainer_C_Update_OnItemRemoved");
static_assert(offsetof(JSIContainer_C_Update_OnItemRemoved, ItemRef) == 0x000000, "Member 'JSIContainer_C_Update_OnItemRemoved::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemRemoved, ItemWeight) == 0x000008, "Member 'JSIContainer_C_Update_OnItemRemoved::ItemWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemRemoved, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'JSIContainer_C_Update_OnItemRemoved::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Update_OnItemRemoved, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_Update_OnItemRemoved::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UpdateCapacityContainer
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_UpdateCapacityContainer final
{
public:
	int32                                         TempInt;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStack_MaxStack;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfCapacityContainer_ReturnValue;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UpdateCapacityContainer) == 0x000008, "Wrong alignment on JSIContainer_C_UpdateCapacityContainer");
static_assert(sizeof(JSIContainer_C_UpdateCapacityContainer) == 0x000058, "Wrong size on JSIContainer_C_UpdateCapacityContainer");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, TempInt) == 0x000000, "Member 'JSIContainer_C_UpdateCapacityContainer::TempInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'JSIContainer_C_UpdateCapacityContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'JSIContainer_C_UpdateCapacityContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_GetMaxStack_MaxStack) == 0x000010, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_GetMaxStack_MaxStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000018, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000020, "Member 'JSIContainer_C_UpdateCapacityContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'JSIContainer_C_UpdateCapacityContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_GetCount_Count) == 0x000044, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCapacityContainer, CallFunc_CheckIfCapacityContainer_ReturnValue) == 0x000050, "Member 'JSIContainer_C_UpdateCapacityContainer::CallFunc_CheckIfCapacityContainer_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UpdateCountByUniqueID
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_UpdateCountByUniqueID final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  CallFunc_GetUniqueID_UniqueServerID;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GuidGuid_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UpdateCountByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_UpdateCountByUniqueID");
static_assert(sizeof(JSIContainer_C_UpdateCountByUniqueID) == 0x000050, "Wrong size on JSIContainer_C_UpdateCountByUniqueID");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, ID) == 0x000000, "Member 'JSIContainer_C_UpdateCountByUniqueID::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, NewCount) == 0x000010, "Member 'JSIContainer_C_UpdateCountByUniqueID::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Sucess) == 0x000014, "Member 'JSIContainer_C_UpdateCountByUniqueID::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSIContainer_C_UpdateCountByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'JSIContainer_C_UpdateCountByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_UpdateCount_Count) == 0x000034, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x000038, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_EqualEqual_GuidGuid_ReturnValue) == 0x000048, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_EqualEqual_GuidGuid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetListOfContainers
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetListOfContainers final
{
public:
	TArray<class UJSIContainer_C*>                Containers;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSIContainer_C*>                K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(JSIContainer_C_GetListOfContainers) == 0x000008, "Wrong alignment on JSIContainer_C_GetListOfContainers");
static_assert(sizeof(JSIContainer_C_GetListOfContainers) == 0x000020, "Wrong size on JSIContainer_C_GetListOfContainers");
static_assert(offsetof(JSIContainer_C_GetListOfContainers, Containers) == 0x000000, "Member 'JSIContainer_C_GetListOfContainers::Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetListOfContainers, K2Node_MakeArray_Array) == 0x000010, "Member 'JSIContainer_C_GetListOfContainers::K2Node_MakeArray_Array' has a wrong offset!");

}


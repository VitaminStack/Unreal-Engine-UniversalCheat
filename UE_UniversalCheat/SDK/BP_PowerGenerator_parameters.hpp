#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PowerGenerator

#include "Basic.hpp"

#include "S_JigPayload_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PowerGenerator.BP_PowerGenerator_C.Shake
// 0x0150 (0x0150 - 0x0000)
struct BP_PowerGenerator_C_Shake final
{
public:
	struct FVector                                RelativeMeshLoc;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpriteShakeHor;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0068(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PowerGenerator_C_Shake) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_Shake");
static_assert(sizeof(BP_PowerGenerator_C_Shake) == 0x000150, "Wrong size on BP_PowerGenerator_C_Shake");
static_assert(offsetof(BP_PowerGenerator_C_Shake, RelativeMeshLoc) == 0x000000, "Member 'BP_PowerGenerator_C_Shake::RelativeMeshLoc' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, SpriteShakeHor) == 0x000018, "Member 'BP_PowerGenerator_C_Shake::SpriteShakeHor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_RandomFloatInRange_ReturnValue) == 0x000020, "Member 'BP_PowerGenerator_C_Shake::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_BreakVector_X) == 0x000028, "Member 'BP_PowerGenerator_C_Shake::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_PowerGenerator_C_Shake::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_BreakVector_Z) == 0x000038, "Member 'BP_PowerGenerator_C_Shake::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_PowerGenerator_C_Shake::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BP_PowerGenerator_C_Shake::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'BP_PowerGenerator_C_Shake::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_Shake, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000068, "Member 'BP_PowerGenerator_C_Shake::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.SetPickupCount
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_SetPickupCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_SetPickupCount) == 0x000004, "Wrong alignment on BP_PowerGenerator_C_SetPickupCount");
static_assert(sizeof(BP_PowerGenerator_C_SetPickupCount) == 0x000008, "Wrong size on BP_PowerGenerator_C_SetPickupCount");
static_assert(offsetof(BP_PowerGenerator_C_SetPickupCount, NewCount) == 0x000000, "Member 'BP_PowerGenerator_C_SetPickupCount::NewCount' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_SetPickupCount, Result) == 0x000004, "Member 'BP_PowerGenerator_C_SetPickupCount::Result' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.SetInteractOption
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_SetInteractOption final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_SetInteractOption) == 0x000004, "Wrong alignment on BP_PowerGenerator_C_SetInteractOption");
static_assert(sizeof(BP_PowerGenerator_C_SetInteractOption) == 0x000008, "Wrong size on BP_PowerGenerator_C_SetInteractOption");
static_assert(offsetof(BP_PowerGenerator_C_SetInteractOption, Option) == 0x000000, "Member 'BP_PowerGenerator_C_SetInteractOption::Option' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnStopExecuteInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_OnStopExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_OnStopExecuteInteract) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnStopExecuteInteract");
static_assert(sizeof(BP_PowerGenerator_C_OnStopExecuteInteract) == 0x000008, "Wrong size on BP_PowerGenerator_C_OnStopExecuteInteract");
static_assert(offsetof(BP_PowerGenerator_C_OnStopExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_PowerGenerator_C_OnStopExecuteInteract::InteractingActor' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnServerExecuteInteract
// 0x0040 (0x0040 - 0x0000)
struct BP_PowerGenerator_C_OnServerExecuteInteract final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ByActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_OnServerExecuteInteract) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnServerExecuteInteract");
static_assert(sizeof(BP_PowerGenerator_C_OnServerExecuteInteract) == 0x000040, "Wrong size on BP_PowerGenerator_C_OnServerExecuteInteract");
static_assert(offsetof(BP_PowerGenerator_C_OnServerExecuteInteract, Option) == 0x000000, "Member 'BP_PowerGenerator_C_OnServerExecuteInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnServerExecuteInteract, ByActor) == 0x000008, "Member 'BP_PowerGenerator_C_OnServerExecuteInteract::ByActor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnServerExecuteInteract, Payload) == 0x000010, "Member 'BP_PowerGenerator_C_OnServerExecuteInteract::Payload' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnRequestServerInteract
// 0x0048 (0x0048 - 0x0000)
struct BP_PowerGenerator_C_OnRequestServerInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_OnRequestServerInteract) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnRequestServerInteract");
static_assert(sizeof(BP_PowerGenerator_C_OnRequestServerInteract) == 0x000048, "Wrong size on BP_PowerGenerator_C_OnRequestServerInteract");
static_assert(offsetof(BP_PowerGenerator_C_OnRequestServerInteract, Actor) == 0x000000, "Member 'BP_PowerGenerator_C_OnRequestServerInteract::Actor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnRequestServerInteract, Option) == 0x000008, "Member 'BP_PowerGenerator_C_OnRequestServerInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnRequestServerInteract, Payload) == 0x000010, "Member 'BP_PowerGenerator_C_OnRequestServerInteract::Payload' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnRequestServerInteract, Result) == 0x000040, "Member 'BP_PowerGenerator_C_OnRequestServerInteract::Result' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnExecuteInteractDialogue
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_OnExecuteInteractDialogue final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_OnExecuteInteractDialogue) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnExecuteInteractDialogue");
static_assert(sizeof(BP_PowerGenerator_C_OnExecuteInteractDialogue) == 0x000008, "Wrong size on BP_PowerGenerator_C_OnExecuteInteractDialogue");
static_assert(offsetof(BP_PowerGenerator_C_OnExecuteInteractDialogue, InteractingActor) == 0x000000, "Member 'BP_PowerGenerator_C_OnExecuteInteractDialogue::InteractingActor' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnExecuteInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_PowerGenerator_C_OnExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_OnExecuteInteract) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnExecuteInteract");
static_assert(sizeof(BP_PowerGenerator_C_OnExecuteInteract) == 0x000010, "Wrong size on BP_PowerGenerator_C_OnExecuteInteract");
static_assert(offsetof(BP_PowerGenerator_C_OnExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_PowerGenerator_C_OnExecuteInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnExecuteInteract, Option) == 0x000008, "Member 'BP_PowerGenerator_C_OnExecuteInteract::Option' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.OnBeginInteract
// 0x0058 (0x0058 - 0x0000)
struct BP_PowerGenerator_C_OnBeginInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_PowerGenerator_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_OnBeginInteract");
static_assert(sizeof(BP_PowerGenerator_C_OnBeginInteract) == 0x000058, "Wrong size on BP_PowerGenerator_C_OnBeginInteract");
static_assert(offsetof(BP_PowerGenerator_C_OnBeginInteract, InteractingActor) == 0x000000, "Member 'BP_PowerGenerator_C_OnBeginInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_OnBeginInteract, Options) == 0x000008, "Member 'BP_PowerGenerator_C_OnBeginInteract::Options' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.JigSetCanInteract
// 0x0003 (0x0003 - 0x0000)
struct BP_PowerGenerator_C_JigSetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePhysics;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_JigSetCanInteract) == 0x000001, "Wrong alignment on BP_PowerGenerator_C_JigSetCanInteract");
static_assert(sizeof(BP_PowerGenerator_C_JigSetCanInteract) == 0x000003, "Wrong size on BP_PowerGenerator_C_JigSetCanInteract");
static_assert(offsetof(BP_PowerGenerator_C_JigSetCanInteract, CanInteract) == 0x000000, "Member 'BP_PowerGenerator_C_JigSetCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_JigSetCanInteract, EnablePhysics) == 0x000001, "Member 'BP_PowerGenerator_C_JigSetCanInteract::EnablePhysics' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_JigSetCanInteract, Result) == 0x000002, "Member 'BP_PowerGenerator_C_JigSetCanInteract::Result' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.JigCanInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_PowerGenerator_C_JigCanInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_JigCanInteract) == 0x000001, "Wrong alignment on BP_PowerGenerator_C_JigCanInteract");
static_assert(sizeof(BP_PowerGenerator_C_JigCanInteract) == 0x000001, "Wrong size on BP_PowerGenerator_C_JigCanInteract");
static_assert(offsetof(BP_PowerGenerator_C_JigCanInteract, Result) == 0x000000, "Member 'BP_PowerGenerator_C_JigCanInteract::Result' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.GetMainSceneComp
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_GetMainSceneComp final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_GetMainSceneComp) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_GetMainSceneComp");
static_assert(sizeof(BP_PowerGenerator_C_GetMainSceneComp) == 0x000008, "Wrong size on BP_PowerGenerator_C_GetMainSceneComp");
static_assert(offsetof(BP_PowerGenerator_C_GetMainSceneComp, Comp) == 0x000000, "Member 'BP_PowerGenerator_C_GetMainSceneComp::Comp' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.GetJigMultiplayerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_GetJigMultiplayerComponent final
{
public:
	class UActorComponent*                        JigComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_GetJigMultiplayerComponent) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_GetJigMultiplayerComponent");
static_assert(sizeof(BP_PowerGenerator_C_GetJigMultiplayerComponent) == 0x000008, "Wrong size on BP_PowerGenerator_C_GetJigMultiplayerComponent");
static_assert(offsetof(BP_PowerGenerator_C_GetJigMultiplayerComponent, JigComp) == 0x000000, "Member 'BP_PowerGenerator_C_GetJigMultiplayerComponent::JigComp' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.GetItemInfo
// 0x0078 (0x0078 - 0x0000)
struct BP_PowerGenerator_C_GetItemInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatsConfig;                                 // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TMap<class FString, class FString>            CustomData;                                        // 0x0028(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_PowerGenerator_C_GetItemInfo) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_GetItemInfo");
static_assert(sizeof(BP_PowerGenerator_C_GetItemInfo) == 0x000078, "Wrong size on BP_PowerGenerator_C_GetItemInfo");
static_assert(offsetof(BP_PowerGenerator_C_GetItemInfo, Info) == 0x000000, "Member 'BP_PowerGenerator_C_GetItemInfo::Info' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_GetItemInfo, Count) == 0x000008, "Member 'BP_PowerGenerator_C_GetItemInfo::Count' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_GetItemInfo, RandomStatsConfig) == 0x000010, "Member 'BP_PowerGenerator_C_GetItemInfo::RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_GetItemInfo, CustomData) == 0x000028, "Member 'BP_PowerGenerator_C_GetItemInfo::CustomData' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.GetInteractOptions
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PowerGenerator_C_GetInteractOptions final
{
public:
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0000(0x0050)(Parm, OutParm)
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map;                                // 0x0050(0x0050)()
};
static_assert(alignof(BP_PowerGenerator_C_GetInteractOptions) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_GetInteractOptions");
static_assert(sizeof(BP_PowerGenerator_C_GetInteractOptions) == 0x0000A0, "Wrong size on BP_PowerGenerator_C_GetInteractOptions");
static_assert(offsetof(BP_PowerGenerator_C_GetInteractOptions, Options) == 0x000000, "Member 'BP_PowerGenerator_C_GetInteractOptions::Options' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_GetInteractOptions, K2Node_MakeMap_Map) == 0x000050, "Member 'BP_PowerGenerator_C_GetInteractOptions::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.ExecuteUbergraph_BP_PowerGenerator
// 0x03E0 (0x03E0 - 0x0000)
struct BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsBeyondLastLayer;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_LayerIndex;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsSeen;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_2;                             // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ByActor;                              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          K2Node_Event_Payload;                              // 0x0070(0x0030)(HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Interactor_1;                   // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_WorldObjectPower_C> K2Node_DynamicCast_AsBPI_World_Object_Power;       // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindJigItemByDA_Result;                   // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindJigItemByDA_Found;                    // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ServerFindThenConsumeByItemID_Result;     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0110(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0160(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0170(0x0018)()
	class AActor*                                 K2Node_CustomEvent_Interactor;                     // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_JigMultiplayer_C*                   CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ServerFindThenConsumeByItemID_Result_1;   // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_WorldObjectPower_C> K2Node_DynamicCast_AsBPI_World_Object_Power_1;     // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_1;                             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractWidgetOption_C*             CallFunc_Array_Get_Item_2;                         // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_2;                             // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FText>                K2Node_MakeMap_Map;                                // 0x01F8(0x0050)()
	TMap<class FName, class FText>                K2Node_MakeMap_Map_1;                              // 0x0248(0x0050)()
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_3;                             // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x02A0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Option_1;                             // 0x02BC(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map_2;                              // 0x02C8(0x0050)(ConstParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option;                               // 0x0328(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x0338(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_Event_Options;                              // 0x0358(0x0050)(ConstParm)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_4;                             // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_5;                             // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget;                // 0x03C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget_1;              // 0x03C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractWidgetOption_C*             CallFunc_Array_Get_Item_3;                         // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator");
static_assert(sizeof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator) == 0x0003E0, "Wrong size on BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, EntryPoint) == 0x000000, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_ComponentBoundEvent_bIsBeyondLastLayer) == 0x000004, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_ComponentBoundEvent_bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_ComponentBoundEvent_LayerIndex) == 0x000008, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_ComponentBoundEvent_LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_ComponentBoundEvent_bIsSeen) == 0x00000C, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_ComponentBoundEvent_bIsSeen' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_text_Variable) == 0x000018, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_text_Variable_1) == 0x000038, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_bool_Variable) == 0x000050, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_InteractingActor_3) == 0x000058, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_Option_2) == 0x000060, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_Option_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_ByActor) == 0x000068, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_ByActor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_Payload) == 0x000070, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_InteractingActor_2) == 0x0000A0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_CustomEvent_Interactor_1) == 0x0000A8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_CustomEvent_Interactor_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetComponentByClass_ReturnValue) == 0x0000B0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_K2_SetTimer_ReturnValue) == 0x0000C0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_int_Loop_Counter_Variable_1) == 0x0000C8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Length_ReturnValue) == 0x0000CC, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_AsBPI_World_Object_Power) == 0x0000E0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_AsBPI_World_Object_Power' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Length_ReturnValue_1) == 0x0000F4, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_FindJigItemByDA_Result) == 0x0000F9, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_FindJigItemByDA_Result' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_FindJigItemByDA_Found) == 0x000100, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_FindJigItemByDA_Found' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_ServerFindThenConsumeByItemID_Result) == 0x000108, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_ServerFindThenConsumeByItemID_Result' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_MakeStruct_FormatArgumentData) == 0x000110, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_MakeArray_Array) == 0x000160, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Format_ReturnValue) == 0x000170, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_CustomEvent_Interactor) == 0x000188, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_CustomEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Not_PreBool_ReturnValue) == 0x000190, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000198, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_IsValid_ReturnValue_1) == 0x0001A0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_ServerFindThenConsumeByItemID_Result_1) == 0x0001A1, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_ServerFindThenConsumeByItemID_Result_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, Temp_int_Array_Index_Variable_1) == 0x0001A4, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001A8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_AsBPI_World_Object_Power_1) == 0x0001B8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_AsBPI_World_Object_Power_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_bSuccess_1) == 0x0001C8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD) == 0x0001D0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD_1) == 0x0001D8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_IsValid_ReturnValue_2) == 0x0001E0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Get_Item_2) == 0x0001E8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD_2) == 0x0001F0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_MakeMap_Map) == 0x0001F8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_MakeMap_Map_1) == 0x000248, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD_3) == 0x000298, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD_3' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Select_Default) == 0x0002A0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_IsValid_ReturnValue_3) == 0x0002B8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_Option_1) == 0x0002BC, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_Option_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_MakeMap_Map_2) == 0x0002C8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_MakeMap_Map_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Not_PreBool_ReturnValue_2) == 0x000318, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_InteractingActor_1) == 0x000320, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_Option) == 0x000328, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_Option' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000330, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_AsBPI_Player) == 0x000338, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_DynamicCast_bSuccess_2) == 0x000348, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_InteractingActor) == 0x000350, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, K2Node_Event_Options) == 0x000358, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::K2Node_Event_Options' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetBoolCVar_ReturnValue) == 0x0003A8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD_4) == 0x0003B0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD_4' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_GetHUD_HUD_5) == 0x0003B8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_GetHUD_HUD_5' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_ShowInteractWidget_Widget) == 0x0003C0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_ShowInteractWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_ShowInteractWidget_Widget_1) == 0x0003C8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_ShowInteractWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_IsValid_ReturnValue_4) == 0x0003D0, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator, CallFunc_Array_Get_Item_3) == 0x0003D8, "Member 'BP_PowerGenerator_C_ExecuteUbergraph_BP_PowerGenerator::CallFunc_Array_Get_Item_3' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.Event_TurnOn
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_Event_TurnOn final
{
public:
	class AActor*                                 Interactor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_Event_TurnOn) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_Event_TurnOn");
static_assert(sizeof(BP_PowerGenerator_C_Event_TurnOn) == 0x000008, "Wrong size on BP_PowerGenerator_C_Event_TurnOn");
static_assert(offsetof(BP_PowerGenerator_C_Event_TurnOn, Interactor) == 0x000000, "Member 'BP_PowerGenerator_C_Event_TurnOn::Interactor' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.Event_AddGas
// 0x0008 (0x0008 - 0x0000)
struct BP_PowerGenerator_C_Event_AddGas final
{
public:
	class AActor*                                 Interactor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_Event_AddGas) == 0x000008, "Wrong alignment on BP_PowerGenerator_C_Event_AddGas");
static_assert(sizeof(BP_PowerGenerator_C_Event_AddGas) == 0x000008, "Wrong size on BP_PowerGenerator_C_Event_AddGas");
static_assert(offsetof(BP_PowerGenerator_C_Event_AddGas, Interactor) == 0x000000, "Member 'BP_PowerGenerator_C_Event_AddGas::Interactor' has a wrong offset!");

// Function BP_PowerGenerator.BP_PowerGenerator_C.BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature final
{
public:
	bool                                          bIsBeyondLastLayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeen;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature");
static_assert(sizeof(BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature) == 0x00000C, "Wrong size on BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature");
static_assert(offsetof(BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, bIsBeyondLastLayer) == 0x000000, "Member 'BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, LayerIndex) == 0x000004, "Member 'BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, bIsSeen) == 0x000008, "Member 'BP_PowerGenerator_C_BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::bIsSeen' has a wrong offset!");

}


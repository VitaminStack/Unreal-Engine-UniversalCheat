#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SelectorSlider

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SelectorSlider.SelectorSlider_C
// 0x01B8 (0x0478 - 0x02C0)
class USelectorSlider_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border;                                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Bordercontainer_SizeBox;                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BottomSpacer;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                btn_left;                                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                btn_right;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_left_btn;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_right_btn;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                LeftMargin;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                RightMargin;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider;                                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderName;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SliderSizeBox;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderValue;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TopSpacer;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Valuecontainer_SizeBox;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   SliderTitle;                                       // 0x0348(0x0018)(Edit, BlueprintVisible)
	class FText                                   Unit;                                              // 0x0360(0x0018)(Edit, BlueprintVisible)
	class FText                                   UnitPrefix;                                        // 0x0378(0x0018)(Edit, BlueprintVisible)
	int32                                         FontSize;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SliderDefaultValueTip;                             // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          ChangeTextColorWhenFocused_;                       // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSliderAndTextColor;                         // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSliderAndTextColor;                       // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TopMargin;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BottomMargin;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftSideMargin;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightSideMargin;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoxSize;                                           // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultValue;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           Options;                                           // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPhotoModeWidget_C*                     PhotoModeWidget;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Value)>  Dispatcher;                                        // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Use_0_as_default_option_;                          // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Default_option_name__if_boolean_is_true_;          // 0x0438(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           BackgroundColor;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Focus_;                                            // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ResetDispatcher;                                   // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void ChangeValue(double Value, bool Focus__0);
	void ExecuteUbergraph_SelectorSlider(int32 EntryPoint);
	void FocusWithMouseWheel();
	void Initialize(double DefaultValue_0, const TArray<class FText>& Options_0, bool Use_0_as_default_option__0, const class FText& Default_option_name__if_boolean_is_true__0, class UPhotoModeWidget_C* PhotoModeWidget__Self_);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void ResetSlider(bool Focus__0, bool ResetThisSlider_);
	void ResetSliderFocus();
	void Set_Focused_or_Unfocused_Color(bool ChangeSliderColorWhenFocused_, bool ChangeTextColorWhenFocused__0, class USlider* Slider_0, class UImage* imgLeftButton, class UImage* imgRightButton, class UWidget* SliderTitle_0, class UWidget* SliderValue_0, bool SetMargin, struct FSlateBrush* LeftButtonColor, struct FSlateBrush* RightButtonColor);
	struct FSlateBrush SetLeftButtonSettings();
	struct FSlateBrush SetRightButtonSettings();
	void SetSliderFocus();
	class FText setTxtValue();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SelectorSlider_C">();
	}
	static class USelectorSlider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectorSlider_C>();
	}
};
static_assert(alignof(USelectorSlider_C) == 0x000008, "Wrong alignment on USelectorSlider_C");
static_assert(sizeof(USelectorSlider_C) == 0x000478, "Wrong size on USelectorSlider_C");
static_assert(offsetof(USelectorSlider_C, UberGraphFrame) == 0x0002C0, "Member 'USelectorSlider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Border) == 0x0002C8, "Member 'USelectorSlider_C::Border' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Bordercontainer_SizeBox) == 0x0002D0, "Member 'USelectorSlider_C::Bordercontainer_SizeBox' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, BottomSpacer) == 0x0002D8, "Member 'USelectorSlider_C::BottomSpacer' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, btn_left) == 0x0002E0, "Member 'USelectorSlider_C::btn_left' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, btn_right) == 0x0002E8, "Member 'USelectorSlider_C::btn_right' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, img_left_btn) == 0x0002F0, "Member 'USelectorSlider_C::img_left_btn' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, img_right_btn) == 0x0002F8, "Member 'USelectorSlider_C::img_right_btn' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, LeftMargin) == 0x000300, "Member 'USelectorSlider_C::LeftMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, RightMargin) == 0x000308, "Member 'USelectorSlider_C::RightMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SizeBox) == 0x000310, "Member 'USelectorSlider_C::SizeBox' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Slider) == 0x000318, "Member 'USelectorSlider_C::Slider' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SliderName) == 0x000320, "Member 'USelectorSlider_C::SliderName' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SliderSizeBox) == 0x000328, "Member 'USelectorSlider_C::SliderSizeBox' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SliderValue) == 0x000330, "Member 'USelectorSlider_C::SliderValue' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, TopSpacer) == 0x000338, "Member 'USelectorSlider_C::TopSpacer' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Valuecontainer_SizeBox) == 0x000340, "Member 'USelectorSlider_C::Valuecontainer_SizeBox' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SliderTitle) == 0x000348, "Member 'USelectorSlider_C::SliderTitle' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Unit) == 0x000360, "Member 'USelectorSlider_C::Unit' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, UnitPrefix) == 0x000378, "Member 'USelectorSlider_C::UnitPrefix' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, FontSize) == 0x000390, "Member 'USelectorSlider_C::FontSize' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, SliderDefaultValueTip) == 0x000398, "Member 'USelectorSlider_C::SliderDefaultValueTip' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, ChangeTextColorWhenFocused_) == 0x0003B0, "Member 'USelectorSlider_C::ChangeTextColorWhenFocused_' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, FocusedSliderAndTextColor) == 0x0003B4, "Member 'USelectorSlider_C::FocusedSliderAndTextColor' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, UnfocusedSliderAndTextColor) == 0x0003C4, "Member 'USelectorSlider_C::UnfocusedSliderAndTextColor' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, TopMargin) == 0x0003D8, "Member 'USelectorSlider_C::TopMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, BottomMargin) == 0x0003E0, "Member 'USelectorSlider_C::BottomMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, LeftSideMargin) == 0x0003E8, "Member 'USelectorSlider_C::LeftSideMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, RightSideMargin) == 0x0003F0, "Member 'USelectorSlider_C::RightSideMargin' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, BoxSize) == 0x0003F8, "Member 'USelectorSlider_C::BoxSize' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, DefaultValue) == 0x000400, "Member 'USelectorSlider_C::DefaultValue' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Options) == 0x000408, "Member 'USelectorSlider_C::Options' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, PhotoModeWidget) == 0x000418, "Member 'USelectorSlider_C::PhotoModeWidget' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Dispatcher) == 0x000420, "Member 'USelectorSlider_C::Dispatcher' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Use_0_as_default_option_) == 0x000430, "Member 'USelectorSlider_C::Use_0_as_default_option_' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Default_option_name__if_boolean_is_true_) == 0x000438, "Member 'USelectorSlider_C::Default_option_name__if_boolean_is_true_' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, BackgroundColor) == 0x000450, "Member 'USelectorSlider_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, Focus_) == 0x000460, "Member 'USelectorSlider_C::Focus_' has a wrong offset!");
static_assert(offsetof(USelectorSlider_C, ResetDispatcher) == 0x000468, "Member 'USelectorSlider_C::ResetDispatcher' has a wrong offset!");

}


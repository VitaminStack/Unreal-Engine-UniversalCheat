#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Int_PassiveSkills

#include "Basic.hpp"


namespace SDK::Params
{

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_FirstAid
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_FirstAid final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_FirstAid) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_FirstAid");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_FirstAid) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_FirstAid");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_FirstAid, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_FirstAid::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Fishing
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Fishing final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Fishing) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Fishing");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Fishing) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Fishing");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Fishing, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Fishing::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Fitness
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Fitness final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Fitness) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Fitness");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Fitness) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Fitness");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Fitness, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Fitness::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Marksmanship
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Marksmanship final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Marksmanship) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Marksmanship");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Marksmanship) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Marksmanship");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Marksmanship, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Marksmanship::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Reloading
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Reloading final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Reloading) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Reloading");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Reloading) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Reloading");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Reloading, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Reloading::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Scavenging
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Scavenging final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Scavenging) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Scavenging");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Scavenging) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Scavenging");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Scavenging, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Scavenging::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Sneaking
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Sneaking final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Sneaking) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Sneaking");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Sneaking) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Sneaking");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Sneaking, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Sneaking::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Strength
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Strength final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Strength) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Strength");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Strength) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Strength");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Strength, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Strength::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Thief
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Thief final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Thief) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Thief");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Thief) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Thief");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Thief, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Thief::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.AddXP_Toughness
// 0x0008 (0x0008 - 0x0000)
struct Int_PassiveSkills_C_AddXP_Toughness final
{
public:
	double                                        float_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_AddXP_Toughness) == 0x000008, "Wrong alignment on Int_PassiveSkills_C_AddXP_Toughness");
static_assert(sizeof(Int_PassiveSkills_C_AddXP_Toughness) == 0x000008, "Wrong size on Int_PassiveSkills_C_AddXP_Toughness");
static_assert(offsetof(Int_PassiveSkills_C_AddXP_Toughness, float_0) == 0x000000, "Member 'Int_PassiveSkills_C_AddXP_Toughness::float_0' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_FirstAid
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_FirstAid final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_FirstAid) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_FirstAid");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_FirstAid) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_FirstAid");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_FirstAid, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_FirstAid::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Fishing
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Fishing final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Fishing) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Fishing");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Fishing) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Fishing");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Fishing, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Fishing::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Fitness
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Fitness final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Fitness) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Fitness");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Fitness) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Fitness");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Fitness, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Fitness::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Marksmanship
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Marksmanship final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Marksmanship) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Marksmanship");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Marksmanship) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Marksmanship");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Marksmanship, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Marksmanship::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Reloading
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Reloading final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Reloading) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Reloading");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Reloading) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Reloading");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Reloading, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Reloading::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Scavenging
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Scavenging final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Scavenging) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Scavenging");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Scavenging) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Scavenging");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Scavenging, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Scavenging::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Sneaking
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Sneaking final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Sneaking) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Sneaking");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Sneaking) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Sneaking");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Sneaking, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Sneaking::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Strength
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Strength final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Strength) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Strength");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Strength) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Strength");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Strength, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Strength::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Thief
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Thief final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Thief) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Thief");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Thief) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Thief");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Thief, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Thief::Used_' has a wrong offset!");

// Function Int_PassiveSkills.Int_PassiveSkills_C.XPMultiplier_Toughness
// 0x0001 (0x0001 - 0x0000)
struct Int_PassiveSkills_C_XPMultiplier_Toughness final
{
public:
	bool                                          Used_;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Int_PassiveSkills_C_XPMultiplier_Toughness) == 0x000001, "Wrong alignment on Int_PassiveSkills_C_XPMultiplier_Toughness");
static_assert(sizeof(Int_PassiveSkills_C_XPMultiplier_Toughness) == 0x000001, "Wrong size on Int_PassiveSkills_C_XPMultiplier_Toughness");
static_assert(offsetof(Int_PassiveSkills_C_XPMultiplier_Toughness, Used_) == 0x000000, "Member 'Int_PassiveSkills_C_XPMultiplier_Toughness::Used_' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterSpline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterSpline.BP_WaterSpline_C
// 0x0050 (0x02F0 - 0x02A0)
class ABP_WaterSpline_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShallowWater_;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Start_Scale;                                       // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              End_Scale;                                         // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   SplineComp;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Radiated_;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetCollisionType();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_WaterSpline(int32 EntryPoint);
	void BndEvt__BP_WaterSplineTEST_SplineComp_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_WaterSplineTEST_SplineComp_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterSpline_C">();
	}
	static class ABP_WaterSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterSpline_C>();
	}
};
static_assert(alignof(ABP_WaterSpline_C) == 0x000008, "Wrong alignment on ABP_WaterSpline_C");
static_assert(sizeof(ABP_WaterSpline_C) == 0x0002F0, "Wrong size on ABP_WaterSpline_C");
static_assert(offsetof(ABP_WaterSpline_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_WaterSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Spline) == 0x0002A8, "Member 'ABP_WaterSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, ShallowWater_) == 0x0002B0, "Member 'ABP_WaterSpline_C::ShallowWater_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Material) == 0x0002B8, "Member 'ABP_WaterSpline_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Start_Scale) == 0x0002C0, "Member 'ABP_WaterSpline_C::Start_Scale' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, End_Scale) == 0x0002D0, "Member 'ABP_WaterSpline_C::End_Scale' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, SplineComp) == 0x0002E0, "Member 'ABP_WaterSpline_C::SplineComp' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Radiated_) == 0x0002E8, "Member 'ABP_WaterSpline_C::Radiated_' has a wrong offset!");

}


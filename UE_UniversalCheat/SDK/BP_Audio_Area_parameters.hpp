#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_Area

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Audio_Area.BP_Audio_Area_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Audio_Area.BP_Audio_Area_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Audio_Area_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Audio_Area.BP_Audio_Area_C.ExecuteUbergraph_BP_Audio_Area
// 0x0180 (0x0180 - 0x0000)
struct BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_Audio_Area_C*                 Temp_object_Variable;                              // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Audio_Manager_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0148(0x0010)(ReferenceParm)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Audio_Manager_C*                    CallFunc_Array_Get_Item;                           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Audio_Manager_C*                    K2Node_CustomEvent_AudioReference;                 // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area) == 0x000008, "Wrong alignment on BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area");
static_assert(sizeof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area) == 0x000180, "Wrong size on BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, EntryPoint) == 0x000000, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, Temp_object_Variable) == 0x000008, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000010, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000018, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000020, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000028, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000118, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherActor) == 0x000120, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherComp) == 0x000128, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000130, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000138, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000141, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_IsValid_ReturnValue_1) == 0x000142, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000143, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_GetAllActorsOfClass_OutActors) == 0x000148, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000158, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_Array_Get_Item) == 0x000160, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000168, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_IsValid_ReturnValue_2) == 0x000169, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_IsValid_ReturnValue_3) == 0x00016A, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_Greater_IntInt_ReturnValue) == 0x00016B, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_Array_Find_ReturnValue) == 0x00016C, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000170, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area, K2Node_CustomEvent_AudioReference) == 0x000178, "Member 'BP_Audio_Area_C_ExecuteUbergraph_BP_Audio_Area::K2Node_CustomEvent_AudioReference' has a wrong offset!");

// Function BP_Audio_Area.BP_Audio_Area_C.NewAudioManager
// 0x0008 (0x0008 - 0x0000)
struct BP_Audio_Area_C_NewAudioManager final
{
public:
	class ABP_Audio_Manager_C*                    AudioReference_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_Area_C_NewAudioManager) == 0x000008, "Wrong alignment on BP_Audio_Area_C_NewAudioManager");
static_assert(sizeof(BP_Audio_Area_C_NewAudioManager) == 0x000008, "Wrong size on BP_Audio_Area_C_NewAudioManager");
static_assert(offsetof(BP_Audio_Area_C_NewAudioManager, AudioReference_0) == 0x000000, "Member 'BP_Audio_Area_C_NewAudioManager::AudioReference_0' has a wrong offset!");

// Function BP_Audio_Area.BP_Audio_Area_C.UserConstructionScript
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Audio_Area_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_1;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_3;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Audio_Manager_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0050(0x0010)(ReferenceParm)
	class ABP_Audio_Manager_C*                    CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0080(0x0018)()
	struct FColor                                 K2Node_Select_Default_1;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_Area_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Audio_Area_C_UserConstructionScript");
static_assert(sizeof(BP_Audio_Area_C_UserConstructionScript) == 0x0000A0, "Wrong size on BP_Audio_Area_C_UserConstructionScript");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_int_Variable) == 0x000000, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable) == 0x000008, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable_1) == 0x000010, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable_2) == 0x000018, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable_3) == 0x000020, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable_4) == 0x000028, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_object_Variable_5) == 0x000030, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, Temp_int_Variable_1) == 0x000038, "Member 'BP_Audio_Area_C_UserConstructionScript::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_MakeStruct_Color) == 0x00003C, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_MakeStruct_Color' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_MakeStruct_Color_1) == 0x000040, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_MakeStruct_Color_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_MakeStruct_Color_2) == 0x000044, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_MakeStruct_Color_2' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_MakeStruct_Color_3) == 0x000048, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_MakeStruct_Color_3' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, CallFunc_GetAllActorsOfClass_OutActors) == 0x000050, "Member 'BP_Audio_Area_C_UserConstructionScript::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_Audio_Area_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_Select_Default) == 0x000068, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, CallFunc_Conv_IntToString_ReturnValue) == 0x000070, "Member 'BP_Audio_Area_C_UserConstructionScript::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, CallFunc_Conv_StringToText_ReturnValue) == 0x000080, "Member 'BP_Audio_Area_C_UserConstructionScript::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_Area_C_UserConstructionScript, K2Node_Select_Default_1) == 0x000098, "Member 'BP_Audio_Area_C_UserConstructionScript::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Audio_Area.BP_Audio_Area_C.VisualizeArea
// 0x0001 (0x0001 - 0x0000)
struct BP_Audio_Area_C_VisualizeArea final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_Area_C_VisualizeArea) == 0x000001, "Wrong alignment on BP_Audio_Area_C_VisualizeArea");
static_assert(sizeof(BP_Audio_Area_C_VisualizeArea) == 0x000001, "Wrong size on BP_Audio_Area_C_VisualizeArea");
static_assert(offsetof(BP_Audio_Area_C_VisualizeArea, bNewVisibility) == 0x000000, "Member 'BP_Audio_Area_C_VisualizeArea::bNewVisibility' has a wrong offset!");

}


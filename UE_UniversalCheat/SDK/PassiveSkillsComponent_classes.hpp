#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PassiveSkillsComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PassiveSkillsComponent.PassiveSkillsComponent_C
// 0x02D0 (0x0388 - 0x00B8)
class UPassiveSkillsComponent_C final : public UBaseComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PassiveSkillsComponent_C;           // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CurrentFitnessXP;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFitnessXP;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFitnessLevel;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFitnessLevel;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentStrengthXP;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxStrengthXP;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentStrengthLevel;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxStrengthLevel;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentToughessXP;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxToughnessXP;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentToughessLevel;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxToughessLevel;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSneakingXP;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSneakingXP;                                     // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSneakingLevel;                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSneakingLevel;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFirstAidXP;                                 // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFirstAidXP;                                     // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFirstAidLevel;                              // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFirstAidLevel;                                  // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMarksmanshipXP;                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxMarksmanshipXP;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMarksmanshipLevel;                          // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxMarksmanshipLevel;                              // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentReloadingXP;                                // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxReloadingXP;                                    // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentReloadingLevel;                             // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxReloadingLevel;                                 // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FitnessPercentage;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StrengthPercentage;                                // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ToughnessPercentage;                               // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SneakingPercentage;                                // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstAidPercentage;                                // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarksmanshipPercentage;                            // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReloadingPercentage;                               // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FitnessMultiplier;                                 // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StrengthMultiplier;                                // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ToughnessMultiplier;                               // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SneakingMultiplier;                                // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstAidMultiplier;                                // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReloadingMultiplier;                               // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarksmanshipMultiplier;                            // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StrengthSpeedMultiplier;                           // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FitnessStaminaMultiplier;                          // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentThiefXP;                                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxThiefXP;                                        // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentThiefLevel;                                 // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxThiefLevel;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThiefPercentage;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThiefMultiplier;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFishingXP;                                  // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFishingXP;                                      // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFishingLevel;                               // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFishingLevel;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FishingPercentage;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FishingMultiplier;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FitnessStaminaRegainMultiplier;                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FitnessSwimmingMultiplier;                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FitnessMultiplierUsed_;                            // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StrengthMultiplierUsed_;                           // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToughnessMultiplierUsed_;                          // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SneakingMultiplierUsed_;                           // 0x0293(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstAidMultiplierUsed_;                           // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MarksmanshipMultiplierUsed_;                       // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReloadingMultiplierUsed_;                          // 0x0296(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThiefMultiplierUsed_;                              // 0x0297(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FishingMultiplierUsed_;                            // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentScavengingXP;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScavengingXP;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentScavengingLevel;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScavengingLevel;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScavengingPercentage;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScavengingMultiplier;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScavengingMultiplierUsed_;                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateFitnessUI;                                   // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateStrengthUI;                                  // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateToughnessUI;                                 // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateSneakingUI;                                  // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateFirstAidUI;                                  // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateReloadingUI;                                 // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateMarksmanshipUI;                              // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateThiefUI;                                     // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateFishingUI;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double CurrentXP, double MaxXP, double CurrentLevel, double NextLevel, double Percentage)> UpdateScavengingUI;                                // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ComponentLoad;                                     // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddXP(double AddXP_0, double Skill, double* NewXP);
	void AddXP_FirstAid(double float_0);
	void AddXP_Fishing(double float_0);
	void AddXP_Fitness(double float_0);
	void AddXP_Marksmanship(double float_0);
	void AddXP_Reloading(double float_0);
	void AddXP_Scavenging(double float_0);
	void AddXP_Sneaking(double float_0);
	void AddXP_Strength(double float_0);
	void AddXP_Thief(double float_0);
	void AddXP_Toughness(double float_0);
	void CalculateMaxXP(double MaxXP, float* MaxXPLevel);
	void CalculatePercentage(double CurrentXP, double MaxXP, double* CurrentPercentage);
	void ComponentLoaded();
	void ComponentPreSave();
	void Event_ComponentLoad();
	void ExecuteUbergraph_PassiveSkillsComponent(int32 EntryPoint);
	void FirstAid_LevelUp();
	void Fishing_LevelUp();
	void Fitness_LevelUp();
	void LevelUpNotification(const class FText& Skill, double Level);
	void LoadComponent();
	void Marksmanship_LevelUp();
	void Reloading_LevelUp();
	void ResetPassiveSkills();
	void ResetPassiveSkills_NewSave();
	void Scavenging_LevelUp();
	void Sneaking_LevelUp();
	void Strength_LevelUp();
	void Thief_LevelUp();
	void Toughness_LevelUp();
	void XPMultiplier_FirstAid(bool* Used_);
	void XPMultiplier_Fishing(bool* Used_);
	void XPMultiplier_Fitness(bool* Used_);
	void XPMultiplier_Marksmanship(bool* Used_);
	void XPMultiplier_Reloading(bool* Used_);
	void XPMultiplier_Scavenging(bool* Used_);
	void XPMultiplier_Sneaking(bool* Used_);
	void XPMultiplier_Strength(bool* Used_);
	void XPMultiplier_Thief(bool* Used_);
	void XPMultiplier_Toughness(bool* Used_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PassiveSkillsComponent_C">();
	}
	static class UPassiveSkillsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPassiveSkillsComponent_C>();
	}
};
static_assert(alignof(UPassiveSkillsComponent_C) == 0x000008, "Wrong alignment on UPassiveSkillsComponent_C");
static_assert(sizeof(UPassiveSkillsComponent_C) == 0x000388, "Wrong size on UPassiveSkillsComponent_C");
static_assert(offsetof(UPassiveSkillsComponent_C, UberGraphFrame_PassiveSkillsComponent_C) == 0x0000B8, "Member 'UPassiveSkillsComponent_C::UberGraphFrame_PassiveSkillsComponent_C' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFitnessXP) == 0x0000C0, "Member 'UPassiveSkillsComponent_C::CurrentFitnessXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFitnessXP) == 0x0000C8, "Member 'UPassiveSkillsComponent_C::MaxFitnessXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFitnessLevel) == 0x0000D0, "Member 'UPassiveSkillsComponent_C::CurrentFitnessLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFitnessLevel) == 0x0000D8, "Member 'UPassiveSkillsComponent_C::MaxFitnessLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentStrengthXP) == 0x0000E0, "Member 'UPassiveSkillsComponent_C::CurrentStrengthXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxStrengthXP) == 0x0000E8, "Member 'UPassiveSkillsComponent_C::MaxStrengthXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentStrengthLevel) == 0x0000F0, "Member 'UPassiveSkillsComponent_C::CurrentStrengthLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxStrengthLevel) == 0x0000F8, "Member 'UPassiveSkillsComponent_C::MaxStrengthLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentToughessXP) == 0x000100, "Member 'UPassiveSkillsComponent_C::CurrentToughessXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxToughnessXP) == 0x000108, "Member 'UPassiveSkillsComponent_C::MaxToughnessXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentToughessLevel) == 0x000110, "Member 'UPassiveSkillsComponent_C::CurrentToughessLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxToughessLevel) == 0x000118, "Member 'UPassiveSkillsComponent_C::MaxToughessLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentSneakingXP) == 0x000120, "Member 'UPassiveSkillsComponent_C::CurrentSneakingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxSneakingXP) == 0x000128, "Member 'UPassiveSkillsComponent_C::MaxSneakingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentSneakingLevel) == 0x000130, "Member 'UPassiveSkillsComponent_C::CurrentSneakingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxSneakingLevel) == 0x000138, "Member 'UPassiveSkillsComponent_C::MaxSneakingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFirstAidXP) == 0x000140, "Member 'UPassiveSkillsComponent_C::CurrentFirstAidXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFirstAidXP) == 0x000148, "Member 'UPassiveSkillsComponent_C::MaxFirstAidXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFirstAidLevel) == 0x000150, "Member 'UPassiveSkillsComponent_C::CurrentFirstAidLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFirstAidLevel) == 0x000158, "Member 'UPassiveSkillsComponent_C::MaxFirstAidLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentMarksmanshipXP) == 0x000160, "Member 'UPassiveSkillsComponent_C::CurrentMarksmanshipXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxMarksmanshipXP) == 0x000168, "Member 'UPassiveSkillsComponent_C::MaxMarksmanshipXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentMarksmanshipLevel) == 0x000170, "Member 'UPassiveSkillsComponent_C::CurrentMarksmanshipLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxMarksmanshipLevel) == 0x000178, "Member 'UPassiveSkillsComponent_C::MaxMarksmanshipLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentReloadingXP) == 0x000180, "Member 'UPassiveSkillsComponent_C::CurrentReloadingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxReloadingXP) == 0x000188, "Member 'UPassiveSkillsComponent_C::MaxReloadingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentReloadingLevel) == 0x000190, "Member 'UPassiveSkillsComponent_C::CurrentReloadingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxReloadingLevel) == 0x000198, "Member 'UPassiveSkillsComponent_C::MaxReloadingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessPercentage) == 0x0001A0, "Member 'UPassiveSkillsComponent_C::FitnessPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, StrengthPercentage) == 0x0001A8, "Member 'UPassiveSkillsComponent_C::StrengthPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ToughnessPercentage) == 0x0001B0, "Member 'UPassiveSkillsComponent_C::ToughnessPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, SneakingPercentage) == 0x0001B8, "Member 'UPassiveSkillsComponent_C::SneakingPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FirstAidPercentage) == 0x0001C0, "Member 'UPassiveSkillsComponent_C::FirstAidPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MarksmanshipPercentage) == 0x0001C8, "Member 'UPassiveSkillsComponent_C::MarksmanshipPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ReloadingPercentage) == 0x0001D0, "Member 'UPassiveSkillsComponent_C::ReloadingPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessMultiplier) == 0x0001D8, "Member 'UPassiveSkillsComponent_C::FitnessMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, StrengthMultiplier) == 0x0001E0, "Member 'UPassiveSkillsComponent_C::StrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ToughnessMultiplier) == 0x0001E8, "Member 'UPassiveSkillsComponent_C::ToughnessMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, SneakingMultiplier) == 0x0001F0, "Member 'UPassiveSkillsComponent_C::SneakingMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FirstAidMultiplier) == 0x0001F8, "Member 'UPassiveSkillsComponent_C::FirstAidMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ReloadingMultiplier) == 0x000200, "Member 'UPassiveSkillsComponent_C::ReloadingMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MarksmanshipMultiplier) == 0x000208, "Member 'UPassiveSkillsComponent_C::MarksmanshipMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, StrengthSpeedMultiplier) == 0x000210, "Member 'UPassiveSkillsComponent_C::StrengthSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessStaminaMultiplier) == 0x000218, "Member 'UPassiveSkillsComponent_C::FitnessStaminaMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentThiefXP) == 0x000220, "Member 'UPassiveSkillsComponent_C::CurrentThiefXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxThiefXP) == 0x000228, "Member 'UPassiveSkillsComponent_C::MaxThiefXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentThiefLevel) == 0x000230, "Member 'UPassiveSkillsComponent_C::CurrentThiefLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxThiefLevel) == 0x000238, "Member 'UPassiveSkillsComponent_C::MaxThiefLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ThiefPercentage) == 0x000240, "Member 'UPassiveSkillsComponent_C::ThiefPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ThiefMultiplier) == 0x000248, "Member 'UPassiveSkillsComponent_C::ThiefMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFishingXP) == 0x000250, "Member 'UPassiveSkillsComponent_C::CurrentFishingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFishingXP) == 0x000258, "Member 'UPassiveSkillsComponent_C::MaxFishingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentFishingLevel) == 0x000260, "Member 'UPassiveSkillsComponent_C::CurrentFishingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxFishingLevel) == 0x000268, "Member 'UPassiveSkillsComponent_C::MaxFishingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FishingPercentage) == 0x000270, "Member 'UPassiveSkillsComponent_C::FishingPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FishingMultiplier) == 0x000278, "Member 'UPassiveSkillsComponent_C::FishingMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessStaminaRegainMultiplier) == 0x000280, "Member 'UPassiveSkillsComponent_C::FitnessStaminaRegainMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessSwimmingMultiplier) == 0x000288, "Member 'UPassiveSkillsComponent_C::FitnessSwimmingMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FitnessMultiplierUsed_) == 0x000290, "Member 'UPassiveSkillsComponent_C::FitnessMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, StrengthMultiplierUsed_) == 0x000291, "Member 'UPassiveSkillsComponent_C::StrengthMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ToughnessMultiplierUsed_) == 0x000292, "Member 'UPassiveSkillsComponent_C::ToughnessMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, SneakingMultiplierUsed_) == 0x000293, "Member 'UPassiveSkillsComponent_C::SneakingMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FirstAidMultiplierUsed_) == 0x000294, "Member 'UPassiveSkillsComponent_C::FirstAidMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MarksmanshipMultiplierUsed_) == 0x000295, "Member 'UPassiveSkillsComponent_C::MarksmanshipMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ReloadingMultiplierUsed_) == 0x000296, "Member 'UPassiveSkillsComponent_C::ReloadingMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ThiefMultiplierUsed_) == 0x000297, "Member 'UPassiveSkillsComponent_C::ThiefMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, FishingMultiplierUsed_) == 0x000298, "Member 'UPassiveSkillsComponent_C::FishingMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentScavengingXP) == 0x0002A0, "Member 'UPassiveSkillsComponent_C::CurrentScavengingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxScavengingXP) == 0x0002A8, "Member 'UPassiveSkillsComponent_C::MaxScavengingXP' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, CurrentScavengingLevel) == 0x0002B0, "Member 'UPassiveSkillsComponent_C::CurrentScavengingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, MaxScavengingLevel) == 0x0002B8, "Member 'UPassiveSkillsComponent_C::MaxScavengingLevel' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ScavengingPercentage) == 0x0002C0, "Member 'UPassiveSkillsComponent_C::ScavengingPercentage' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ScavengingMultiplier) == 0x0002C8, "Member 'UPassiveSkillsComponent_C::ScavengingMultiplier' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ScavengingMultiplierUsed_) == 0x0002D0, "Member 'UPassiveSkillsComponent_C::ScavengingMultiplierUsed_' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateFitnessUI) == 0x0002D8, "Member 'UPassiveSkillsComponent_C::UpdateFitnessUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateStrengthUI) == 0x0002E8, "Member 'UPassiveSkillsComponent_C::UpdateStrengthUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateToughnessUI) == 0x0002F8, "Member 'UPassiveSkillsComponent_C::UpdateToughnessUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateSneakingUI) == 0x000308, "Member 'UPassiveSkillsComponent_C::UpdateSneakingUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateFirstAidUI) == 0x000318, "Member 'UPassiveSkillsComponent_C::UpdateFirstAidUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateReloadingUI) == 0x000328, "Member 'UPassiveSkillsComponent_C::UpdateReloadingUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateMarksmanshipUI) == 0x000338, "Member 'UPassiveSkillsComponent_C::UpdateMarksmanshipUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateThiefUI) == 0x000348, "Member 'UPassiveSkillsComponent_C::UpdateThiefUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateFishingUI) == 0x000358, "Member 'UPassiveSkillsComponent_C::UpdateFishingUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, UpdateScavengingUI) == 0x000368, "Member 'UPassiveSkillsComponent_C::UpdateScavengingUI' has a wrong offset!");
static_assert(offsetof(UPassiveSkillsComponent_C, ComponentLoad) == 0x000378, "Member 'UPassiveSkillsComponent_C::ComponentLoad' has a wrong offset!");

}


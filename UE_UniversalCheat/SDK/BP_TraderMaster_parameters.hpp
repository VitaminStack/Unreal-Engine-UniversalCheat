#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TraderMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_JigPayload_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "RepItemInfo_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"


namespace SDK::Params
{

// Function BP_TraderMaster.BP_TraderMaster_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_TraderMaster_C_UserConstructionScript final
{
public:
	class UStaticMesh*                            CallFunc_Array_Random_OutItem;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Array_Random_OutItem_1;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_TraderMaster_C_UserConstructionScript");
static_assert(sizeof(BP_TraderMaster_C_UserConstructionScript) == 0x000020, "Wrong size on BP_TraderMaster_C_UserConstructionScript");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_Array_Random_OutItem) == 0x000000, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_Array_Random_OutIndex) == 0x000008, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_Array_Random_OutItem_1) == 0x000010, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_Array_Random_OutItem_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_Array_Random_OutIndex_1) == 0x000018, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_Array_Random_OutIndex_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x00001C, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00001D, "Member 'BP_TraderMaster_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.SetPickupCount
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_SetPickupCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_SetPickupCount) == 0x000004, "Wrong alignment on BP_TraderMaster_C_SetPickupCount");
static_assert(sizeof(BP_TraderMaster_C_SetPickupCount) == 0x000008, "Wrong size on BP_TraderMaster_C_SetPickupCount");
static_assert(offsetof(BP_TraderMaster_C_SetPickupCount, NewCount) == 0x000000, "Member 'BP_TraderMaster_C_SetPickupCount::NewCount' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_SetPickupCount, Result) == 0x000004, "Member 'BP_TraderMaster_C_SetPickupCount::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.SetInteractOption
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_SetInteractOption final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_SetInteractOption) == 0x000004, "Wrong alignment on BP_TraderMaster_C_SetInteractOption");
static_assert(sizeof(BP_TraderMaster_C_SetInteractOption) == 0x000008, "Wrong size on BP_TraderMaster_C_SetInteractOption");
static_assert(offsetof(BP_TraderMaster_C_SetInteractOption, Option) == 0x000000, "Member 'BP_TraderMaster_C_SetInteractOption::Option' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnStopExecuteInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_OnStopExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_OnStopExecuteInteract) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnStopExecuteInteract");
static_assert(sizeof(BP_TraderMaster_C_OnStopExecuteInteract) == 0x000008, "Wrong size on BP_TraderMaster_C_OnStopExecuteInteract");
static_assert(offsetof(BP_TraderMaster_C_OnStopExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_TraderMaster_C_OnStopExecuteInteract::InteractingActor' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnServerExecuteInteract
// 0x0040 (0x0040 - 0x0000)
struct BP_TraderMaster_C_OnServerExecuteInteract final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ByActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_OnServerExecuteInteract) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnServerExecuteInteract");
static_assert(sizeof(BP_TraderMaster_C_OnServerExecuteInteract) == 0x000040, "Wrong size on BP_TraderMaster_C_OnServerExecuteInteract");
static_assert(offsetof(BP_TraderMaster_C_OnServerExecuteInteract, Option) == 0x000000, "Member 'BP_TraderMaster_C_OnServerExecuteInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnServerExecuteInteract, ByActor) == 0x000008, "Member 'BP_TraderMaster_C_OnServerExecuteInteract::ByActor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnServerExecuteInteract, Payload) == 0x000010, "Member 'BP_TraderMaster_C_OnServerExecuteInteract::Payload' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnRequestServerInteract
// 0x0048 (0x0048 - 0x0000)
struct BP_TraderMaster_C_OnRequestServerInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_OnRequestServerInteract) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnRequestServerInteract");
static_assert(sizeof(BP_TraderMaster_C_OnRequestServerInteract) == 0x000048, "Wrong size on BP_TraderMaster_C_OnRequestServerInteract");
static_assert(offsetof(BP_TraderMaster_C_OnRequestServerInteract, Actor) == 0x000000, "Member 'BP_TraderMaster_C_OnRequestServerInteract::Actor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnRequestServerInteract, Option) == 0x000008, "Member 'BP_TraderMaster_C_OnRequestServerInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnRequestServerInteract, Payload) == 0x000010, "Member 'BP_TraderMaster_C_OnRequestServerInteract::Payload' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnRequestServerInteract, Result) == 0x000040, "Member 'BP_TraderMaster_C_OnRequestServerInteract::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnExecuteInteractDialogue
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_OnExecuteInteractDialogue final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_OnExecuteInteractDialogue) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnExecuteInteractDialogue");
static_assert(sizeof(BP_TraderMaster_C_OnExecuteInteractDialogue) == 0x000008, "Wrong size on BP_TraderMaster_C_OnExecuteInteractDialogue");
static_assert(offsetof(BP_TraderMaster_C_OnExecuteInteractDialogue, InteractingActor) == 0x000000, "Member 'BP_TraderMaster_C_OnExecuteInteractDialogue::InteractingActor' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnExecuteInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_TraderMaster_C_OnExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_OnExecuteInteract) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnExecuteInteract");
static_assert(sizeof(BP_TraderMaster_C_OnExecuteInteract) == 0x000010, "Wrong size on BP_TraderMaster_C_OnExecuteInteract");
static_assert(offsetof(BP_TraderMaster_C_OnExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_TraderMaster_C_OnExecuteInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnExecuteInteract, Option) == 0x000008, "Member 'BP_TraderMaster_C_OnExecuteInteract::Option' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.OnBeginInteract
// 0x0058 (0x0058 - 0x0000)
struct BP_TraderMaster_C_OnBeginInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_TraderMaster_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_TraderMaster_C_OnBeginInteract");
static_assert(sizeof(BP_TraderMaster_C_OnBeginInteract) == 0x000058, "Wrong size on BP_TraderMaster_C_OnBeginInteract");
static_assert(offsetof(BP_TraderMaster_C_OnBeginInteract, InteractingActor) == 0x000000, "Member 'BP_TraderMaster_C_OnBeginInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_OnBeginInteract, Options) == 0x000008, "Member 'BP_TraderMaster_C_OnBeginInteract::Options' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigSetCanInteract
// 0x0003 (0x0003 - 0x0000)
struct BP_TraderMaster_C_JigSetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePhysics;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigSetCanInteract) == 0x000001, "Wrong alignment on BP_TraderMaster_C_JigSetCanInteract");
static_assert(sizeof(BP_TraderMaster_C_JigSetCanInteract) == 0x000003, "Wrong size on BP_TraderMaster_C_JigSetCanInteract");
static_assert(offsetof(BP_TraderMaster_C_JigSetCanInteract, CanInteract) == 0x000000, "Member 'BP_TraderMaster_C_JigSetCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigSetCanInteract, EnablePhysics) == 0x000001, "Member 'BP_TraderMaster_C_JigSetCanInteract::EnablePhysics' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigSetCanInteract, Result) == 0x000002, "Member 'BP_TraderMaster_C_JigSetCanInteract::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnUpdateChamberUID
// 0x0014 (0x0014 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnUpdateChamberUID final
{
public:
	struct FGuid                                  NewUID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnUpdateChamberUID) == 0x000004, "Wrong alignment on BP_TraderMaster_C_JigMP_OnUpdateChamberUID");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnUpdateChamberUID) == 0x000014, "Wrong size on BP_TraderMaster_C_JigMP_OnUpdateChamberUID");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnUpdateChamberUID, NewUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnUpdateChamberUID::NewUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnUpdateChamberUID, Result) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnUpdateChamberUID::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnTwoContainersSwap
// 0x0014 (0x0014 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnTwoContainersSwap final
{
public:
	class FName                                   FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnTwoContainersSwap) == 0x000004, "Wrong alignment on BP_TraderMaster_C_JigMP_OnTwoContainersSwap");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnTwoContainersSwap) == 0x000014, "Wrong size on BP_TraderMaster_C_JigMP_OnTwoContainersSwap");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnTwoContainersSwap, FromContainer) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnTwoContainersSwap::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnTwoContainersSwap, ToContainer) == 0x000008, "Member 'BP_TraderMaster_C_JigMP_OnTwoContainersSwap::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnTwoContainersSwap, Result) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnTwoContainersSwap::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnRequestDropItem
// 0x0150 (0x0150 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnRequestDropItem final
{
public:
	struct FRepItemInfo                           ItemInfo;                                          // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnRequestDropItem) == 0x000010, "Wrong alignment on BP_TraderMaster_C_JigMP_OnRequestDropItem");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnRequestDropItem) == 0x000150, "Wrong size on BP_TraderMaster_C_JigMP_OnRequestDropItem");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, ItemInfo) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, ContainerName) == 0x000078, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, ActorRef) == 0x000080, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000088, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000A8, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000130, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_FinishSpawningActor_ReturnValue) == 0x000138, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000140, "Member 'BP_TraderMaster_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnPickupEquipped
// 0x00B8 (0x00B8 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnPickupEquipped final
{
public:
	class AActor*                                 ActorRef;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  UID;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           Info;                                              // 0x0030(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverrideActor;                                     // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnPickupEquipped) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnPickupEquipped");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnPickupEquipped) == 0x0000B8, "Wrong size on BP_TraderMaster_C_JigMP_OnPickupEquipped");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, ActorRef) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, ToContainerName) == 0x000008, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, UID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::UID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, ToContainerUID) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, Info) == 0x000030, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::Info' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, Result) == 0x0000A8, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupEquipped, OverrideActor) == 0x0000B0, "Member 'BP_TraderMaster_C_JigMP_OnPickupEquipped::OverrideActor' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnPickupAdded
// 0x00A8 (0x00A8 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnPickupAdded final
{
public:
	struct FRepItemInfo                           Info;                                              // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnPickupAdded) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnPickupAdded");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnPickupAdded) == 0x0000A8, "Wrong size on BP_TraderMaster_C_JigMP_OnPickupAdded");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupAdded, Info) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnPickupAdded::Info' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupAdded, ItemUID) == 0x000078, "Member 'BP_TraderMaster_C_JigMP_OnPickupAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupAdded, ToContainerUID) == 0x000088, "Member 'BP_TraderMaster_C_JigMP_OnPickupAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupAdded, ToContainer) == 0x000098, "Member 'BP_TraderMaster_C_JigMP_OnPickupAdded::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnPickupAdded, Result) == 0x0000A0, "Member 'BP_TraderMaster_C_JigMP_OnPickupAdded::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnMainContainerItemRemoved
// 0x00A8 (0x00A8 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved final
{
public:
	struct FGuid                                  FromContainerUID;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemRemovedInfo;                                   // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved) == 0x0000A8, "Wrong size on BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved, FromContainerUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved, ItemUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved, ContainerName) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved, ItemRemovedInfo) == 0x000028, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved::ItemRemovedInfo' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved, Result) == 0x0000A0, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemRemoved::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnMainContainerItemAdded
// 0x00B8 (0x00B8 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnMainContainerItemAdded final
{
public:
	struct FGuid                                  ToContainerUID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemInfo;                                          // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromMain;                                          // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorRef;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnMainContainerItemAdded");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded) == 0x0000B8, "Wrong size on BP_TraderMaster_C_JigMP_OnMainContainerItemAdded");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, ToContainerUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, ItemUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, ToContainerName) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, ItemInfo) == 0x000028, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, FromMain) == 0x0000A0, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::FromMain' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, Result) == 0x0000A8, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnMainContainerItemAdded, ActorRef) == 0x0000B0, "Member 'BP_TraderMaster_C_JigMP_OnMainContainerItemAdded::ActorRef' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnItemRemoved
// 0x0040 (0x0040 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnItemRemoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ToComponent;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnItemRemoved) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnItemRemoved");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnItemRemoved) == 0x000040, "Wrong size on BP_TraderMaster_C_JigMP_OnItemRemoved");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemRemoved, ItemUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemRemoved, FromContainerUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemRemoved, ToContainerUID) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnItemRemoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemRemoved, ToComponent) == 0x000030, "Member 'BP_TraderMaster_C_JigMP_OnItemRemoved::ToComponent' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemRemoved, Result) == 0x000038, "Member 'BP_TraderMaster_C_JigMP_OnItemRemoved::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnItemMoved
// 0x0034 (0x0034 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnItemMoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnItemMoved) == 0x000004, "Wrong alignment on BP_TraderMaster_C_JigMP_OnItemMoved");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnItemMoved) == 0x000034, "Wrong size on BP_TraderMaster_C_JigMP_OnItemMoved");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemMoved, ItemUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnItemMoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemMoved, FromContainerUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnItemMoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemMoved, ToContainerUID) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnItemMoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemMoved, Result) == 0x000030, "Member 'BP_TraderMaster_C_JigMP_OnItemMoved::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnItemDropped
// 0x0030 (0x0030 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnItemDropped final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnItemDropped) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnItemDropped");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnItemDropped) == 0x000030, "Wrong size on BP_TraderMaster_C_JigMP_OnItemDropped");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemDropped, ItemUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnItemDropped::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemDropped, FromContainerUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnItemDropped::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemDropped, ActorRef) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnItemDropped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemDropped, Result) == 0x000028, "Member 'BP_TraderMaster_C_JigMP_OnItemDropped::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnItemConsumed
// 0x0118 (0x0118 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnItemConsumed final
{
public:
	struct FRepItemInfo                           ConsumedItem;                                      // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Remaining;                                         // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           InsideOf;                                          // 0x0080(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromContainer;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomData;                                        // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallbackToPlayer_;                                 // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0111(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnItemConsumed) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnItemConsumed");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnItemConsumed) == 0x000118, "Wrong size on BP_TraderMaster_C_JigMP_OnItemConsumed");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, ConsumedItem) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::ConsumedItem' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, Amount) == 0x000078, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::Amount' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, Remaining) == 0x00007C, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::Remaining' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, InsideOf) == 0x000080, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::InsideOf' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, FromContainer) == 0x0000F8, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, CustomData) == 0x000100, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::CustomData' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, CallbackToPlayer_) == 0x000110, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::CallbackToPlayer_' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemConsumed, Result) == 0x000111, "Member 'BP_TraderMaster_C_JigMP_OnItemConsumed::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnItemAdded
// 0x0040 (0x0040 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnItemAdded final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        FromComponent;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnItemAdded) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnItemAdded");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnItemAdded) == 0x000040, "Wrong size on BP_TraderMaster_C_JigMP_OnItemAdded");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemAdded, ItemUID) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemAdded, FromContainerUID) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnItemAdded::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemAdded, ToContainerUID) == 0x000020, "Member 'BP_TraderMaster_C_JigMP_OnItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemAdded, FromComponent) == 0x000030, "Member 'BP_TraderMaster_C_JigMP_OnItemAdded::FromComponent' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnItemAdded, Result) == 0x000038, "Member 'BP_TraderMaster_C_JigMP_OnItemAdded::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_OnContainersSwap
// 0x0018 (0x0018 - 0x0000)
struct BP_TraderMaster_C_JigMP_OnContainersSwap final
{
public:
	class UJSIContainer_C*                        Container1;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container2;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_OnContainersSwap) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_OnContainersSwap");
static_assert(sizeof(BP_TraderMaster_C_JigMP_OnContainersSwap) == 0x000018, "Wrong size on BP_TraderMaster_C_JigMP_OnContainersSwap");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnContainersSwap, Container1) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_OnContainersSwap::Container1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnContainersSwap, Container2) == 0x000008, "Member 'BP_TraderMaster_C_JigMP_OnContainersSwap::Container2' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_OnContainersSwap, Result) == 0x000010, "Member 'BP_TraderMaster_C_JigMP_OnContainersSwap::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigMP_GetLootWidget
// 0x0010 (0x0010 - 0x0000)
struct BP_TraderMaster_C_JigMP_GetLootWidget final
{
public:
	class UWidget*                                Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigMP_GetLootWidget) == 0x000008, "Wrong alignment on BP_TraderMaster_C_JigMP_GetLootWidget");
static_assert(sizeof(BP_TraderMaster_C_JigMP_GetLootWidget) == 0x000010, "Wrong size on BP_TraderMaster_C_JigMP_GetLootWidget");
static_assert(offsetof(BP_TraderMaster_C_JigMP_GetLootWidget, Result) == 0x000000, "Member 'BP_TraderMaster_C_JigMP_GetLootWidget::Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_JigMP_GetLootWidget, Valid_) == 0x000008, "Member 'BP_TraderMaster_C_JigMP_GetLootWidget::Valid_' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.JigCanInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_TraderMaster_C_JigCanInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_JigCanInteract) == 0x000001, "Wrong alignment on BP_TraderMaster_C_JigCanInteract");
static_assert(sizeof(BP_TraderMaster_C_JigCanInteract) == 0x000001, "Wrong size on BP_TraderMaster_C_JigCanInteract");
static_assert(offsetof(BP_TraderMaster_C_JigCanInteract, Result) == 0x000000, "Member 'BP_TraderMaster_C_JigCanInteract::Result' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.GetMainSceneComp
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_GetMainSceneComp final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_GetMainSceneComp) == 0x000008, "Wrong alignment on BP_TraderMaster_C_GetMainSceneComp");
static_assert(sizeof(BP_TraderMaster_C_GetMainSceneComp) == 0x000008, "Wrong size on BP_TraderMaster_C_GetMainSceneComp");
static_assert(offsetof(BP_TraderMaster_C_GetMainSceneComp, Comp) == 0x000000, "Member 'BP_TraderMaster_C_GetMainSceneComp::Comp' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.GetJigMultiplayerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_TraderMaster_C_GetJigMultiplayerComponent final
{
public:
	class UActorComponent*                        JigComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_GetJigMultiplayerComponent) == 0x000008, "Wrong alignment on BP_TraderMaster_C_GetJigMultiplayerComponent");
static_assert(sizeof(BP_TraderMaster_C_GetJigMultiplayerComponent) == 0x000008, "Wrong size on BP_TraderMaster_C_GetJigMultiplayerComponent");
static_assert(offsetof(BP_TraderMaster_C_GetJigMultiplayerComponent, JigComp) == 0x000000, "Member 'BP_TraderMaster_C_GetJigMultiplayerComponent::JigComp' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.GetItemInfo
// 0x0078 (0x0078 - 0x0000)
struct BP_TraderMaster_C_GetItemInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatsConfig;                                 // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TMap<class FString, class FString>            CustomData;                                        // 0x0028(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_TraderMaster_C_GetItemInfo) == 0x000008, "Wrong alignment on BP_TraderMaster_C_GetItemInfo");
static_assert(sizeof(BP_TraderMaster_C_GetItemInfo) == 0x000078, "Wrong size on BP_TraderMaster_C_GetItemInfo");
static_assert(offsetof(BP_TraderMaster_C_GetItemInfo, Info) == 0x000000, "Member 'BP_TraderMaster_C_GetItemInfo::Info' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_GetItemInfo, Count) == 0x000008, "Member 'BP_TraderMaster_C_GetItemInfo::Count' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_GetItemInfo, RandomStatsConfig) == 0x000010, "Member 'BP_TraderMaster_C_GetItemInfo::RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_GetItemInfo, CustomData) == 0x000028, "Member 'BP_TraderMaster_C_GetItemInfo::CustomData' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.GetInteractOptions
// 0x00A0 (0x00A0 - 0x0000)
struct BP_TraderMaster_C_GetInteractOptions final
{
public:
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0000(0x0050)(Parm, OutParm)
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map;                                // 0x0050(0x0050)()
};
static_assert(alignof(BP_TraderMaster_C_GetInteractOptions) == 0x000008, "Wrong alignment on BP_TraderMaster_C_GetInteractOptions");
static_assert(sizeof(BP_TraderMaster_C_GetInteractOptions) == 0x0000A0, "Wrong size on BP_TraderMaster_C_GetInteractOptions");
static_assert(offsetof(BP_TraderMaster_C_GetInteractOptions, Options) == 0x000000, "Member 'BP_TraderMaster_C_GetInteractOptions::Options' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_GetInteractOptions, K2Node_MakeMap_Map) == 0x000050, "Member 'BP_TraderMaster_C_GetInteractOptions::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.FacePlayer
// 0x00B8 (0x00B8 - 0x0000)
struct BP_TraderMaster_C_FacePlayer final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_FacePlayer) == 0x000008, "Wrong alignment on BP_TraderMaster_C_FacePlayer");
static_assert(sizeof(BP_TraderMaster_C_FacePlayer) == 0x0000B8, "Wrong size on BP_TraderMaster_C_FacePlayer");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, Target) == 0x000000, "Member 'BP_TraderMaster_C_FacePlayer::Target' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000028, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000040, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_FindLookAtRotation_ReturnValue) == 0x000058, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_RInterpTo_ReturnValue) == 0x000070, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_MakeRotator_ReturnValue) == 0x000098, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000B0, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_FacePlayer, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x0000B4, "Member 'BP_TraderMaster_C_FacePlayer::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.ExecuteUbergraph_BP_TraderMaster
// 0x0298 (0x0298 - 0x0000)
struct BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUltra_Dynamic_Sky_C*                   CallFunc_Get_Ultra_Dynamic_Sky_UDS;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Ultra_Dynamic_Sky_Valid;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Hour)>                   K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FText>                K2Node_MakeMap_Map;                                // 0x0030(0x0050)()
	TMap<class FName, class FText>                K2Node_MakeMap_Map_1;                              // 0x0080(0x0050)()
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map_2;                              // 0x00D8(0x0050)(ConstParm)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_1;                             // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget;                // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface_1; // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNarrativeComponent*                    CallFunc_GetNarrativeComponent_ReturnValue;        // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginDialogue_ReturnValue;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x01A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_SetupInventoryWidget_InventoryWidgetRef;  // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventoryVisible__Result;               // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddJigWidgetToContent_Result;             // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x5];                                      // 0x01B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x01B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_1;                             // 0x01C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ByActor;                              // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          K2Node_Event_Payload;                              // 0x01D0(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_RequestServerData_Result;                 // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option;                               // 0x0210(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_Event_Options;                              // 0x0220(0x0050)(ConstParm)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget_1;              // 0x0270(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsBeyondLastLayer;     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_LayerIndex;             // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsSeen;                // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x2];                                      // 0x0282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Option_2;                             // 0x0284(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Hour;                           // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster) == 0x000008, "Wrong alignment on BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster");
static_assert(sizeof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster) == 0x000298, "Wrong size on BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, EntryPoint) == 0x000000, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_Get_Ultra_Dynamic_Sky_UDS) == 0x000008, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_Get_Ultra_Dynamic_Sky_UDS' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_Get_Ultra_Dynamic_Sky_Valid) == 0x000010, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_Get_Ultra_Dynamic_Sky_Valid' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_InteractingActor_3) == 0x000018, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_MakeMap_Map) == 0x000030, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_MakeMap_Map_1) == 0x000080, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_InteractingActor_2) == 0x0000D0, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_MakeMap_Map_2) == 0x0000D8, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_MakeMap_Map_2' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_GetBoolCVar_ReturnValue) == 0x000128, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_GetHUD_HUD) == 0x000130, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_GetHUD_HUD_1) == 0x000138, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_GetHUD_HUD_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_ShowInteractWidget_Widget) == 0x000140, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_ShowInteractWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x000148, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_DynamicCast_AsBP_Jig_Character_Interface_1) == 0x000160, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_DynamicCast_AsBP_Jig_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000178, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_GetNarrativeComponent_ReturnValue) == 0x000190, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_GetNarrativeComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_BeginDialogue_ReturnValue) == 0x000198, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_BeginDialogue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_K2_SetTimer_ReturnValue) == 0x0001A0, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_SetupInventoryWidget_InventoryWidgetRef) == 0x0001A8, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_SetupInventoryWidget_InventoryWidgetRef' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_IsInventoryVisible__Result) == 0x0001B0, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_IsInventoryVisible__Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_AddJigWidgetToContent_Result) == 0x0001B1, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_AddJigWidgetToContent_Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_Not_PreBool_ReturnValue) == 0x0001B2, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_K2_SetTimer_ReturnValue_1) == 0x0001B8, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_Option_1) == 0x0001C0, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_Option_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_ByActor) == 0x0001C8, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_ByActor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_Payload) == 0x0001D0, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_RequestServerData_Result) == 0x000200, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_RequestServerData_Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_InteractingActor_1) == 0x000208, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_Option) == 0x000210, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_Option' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_InteractingActor) == 0x000218, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_Options) == 0x000220, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_Options' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_ShowInteractWidget_Widget_1) == 0x000270, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_ShowInteractWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_ComponentBoundEvent_bIsBeyondLastLayer) == 0x000278, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_ComponentBoundEvent_bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_ComponentBoundEvent_LayerIndex) == 0x00027C, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_ComponentBoundEvent_LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_ComponentBoundEvent_bIsSeen) == 0x000280, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_ComponentBoundEvent_bIsSeen' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_SwitchInteger_CmpSuccess) == 0x000281, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_Event_Option_2) == 0x000284, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_Event_Option_2' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, K2Node_CustomEvent_Hour) == 0x00028C, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::K2Node_CustomEvent_Hour' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000290, "Member 'BP_TraderMaster_C_ExecuteUbergraph_BP_TraderMaster::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.Event_Reset
// 0x0004 (0x0004 - 0x0000)
struct BP_TraderMaster_C_Event_Reset final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_Event_Reset) == 0x000004, "Wrong alignment on BP_TraderMaster_C_Event_Reset");
static_assert(sizeof(BP_TraderMaster_C_Event_Reset) == 0x000004, "Wrong size on BP_TraderMaster_C_Event_Reset");
static_assert(offsetof(BP_TraderMaster_C_Event_Reset, Hour) == 0x000000, "Member 'BP_TraderMaster_C_Event_Reset::Hour' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.CheckDistanceFromActor
// 0x0058 (0x0058 - 0x0000)
struct BP_TraderMaster_C_CheckDistanceFromActor final
{
public:
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnInteractActorOverDistance_Result;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_CheckDistanceFromActor) == 0x000008, "Wrong alignment on BP_TraderMaster_C_CheckDistanceFromActor");
static_assert(sizeof(BP_TraderMaster_C_CheckDistanceFromActor) == 0x000058, "Wrong size on BP_TraderMaster_C_CheckDistanceFromActor");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x000000, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_OnInteractActorOverDistance_Result) == 0x000011, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_OnInteractActorOverDistance_Result' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_CheckDistanceFromActor, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_TraderMaster_C_CheckDistanceFromActor::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_TraderMaster.BP_TraderMaster_C.BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature final
{
public:
	bool                                          bIsBeyondLastLayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeen;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature");
static_assert(sizeof(BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature) == 0x00000C, "Wrong size on BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature");
static_assert(offsetof(BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, bIsBeyondLastLayer) == 0x000000, "Member 'BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, LayerIndex) == 0x000004, "Member 'BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature, bIsSeen) == 0x000008, "Member 'BP_TraderMaster_C_BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature::bIsSeen' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AudioManager

#include "Basic.hpp"

#include "BPI_AudioManager_classes.hpp"
#include "BPI_AudioManager_parameters.hpp"


namespace SDK
{

// Function BPI_AudioManager.BPI_AudioManager_C.SetInside
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInside                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AmbientMultiplier                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FReverbSettings                  ReverbSettings                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FName                             ReverbAreaName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReverbPriority                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AudioManager_C::SetInside(bool bInside, double AmbientMultiplier, const struct FReverbSettings& ReverbSettings, class FName ReverbAreaName, double ReverbPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AudioManager_C", "SetInside");

	Params::BPI_AudioManager_C_SetInside Parms{};

	Parms.bInside = bInside;
	Parms.AmbientMultiplier = AmbientMultiplier;
	Parms.ReverbSettings = std::move(ReverbSettings);
	Parms.ReverbAreaName = ReverbAreaName;
	Parms.ReverbPriority = ReverbPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AudioManager.BPI_AudioManager_C.UpdateCombatStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Combat                                CombatStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AudioManager_C::UpdateCombatStatus(E_Combat CombatStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AudioManager_C", "UpdateCombatStatus");

	Params::BPI_AudioManager_C_UpdateCombatStatus Parms{};

	Parms.CombatStatus = CombatStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AudioManager.BPI_AudioManager_C.UpdateTimeOfDay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_TimeOfDay                             Night_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AudioManager_C::UpdateTimeOfDay(double Time, E_TimeOfDay Night_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AudioManager_C", "UpdateTimeOfDay");

	Params::BPI_AudioManager_C_UpdateTimeOfDay Parms{};

	Parms.Time = Time;
	Parms.Night_ = Night_;

	UObject::ProcessEvent(Func, &Parms);
}

}


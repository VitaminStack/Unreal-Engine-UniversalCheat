#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MapWidget.MapWidget_C
// 0x00E8 (0x03A8 - 0x02C0)
class UMapWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCheckBox*                              CheckBox_TogglePOIMarkers;                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CheckBox_ToggleSpecialMarkers;                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             East;                                              // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           InnerCanvas;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LargePOIMarkerOverlay;                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Map;                                               // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             North;                                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPlayerMarkerSelectionUI_C*             PlayerMarkerSelectionUI;                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PlayerTexture;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SmallPOIMarkerOverlay;                             // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             South;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               StandardMarkerOverlay;                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             West;                                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABP_MapData_C*                          Map_Data;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DraggingMap_;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZoomFactor;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxZoom;                                           // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentZoomStep;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinZoom;                                           // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_StandardMarker_C*>            Standard_Marker_References;                        // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_PlayerMarker_C*>              Player_Marker_References;                          // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_QuestMarker_C*>               Quest_Marker_References;                           // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_POIMarker_C*>                 POI_Marker_References;                             // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_WorldMarker_C*>               World_Marker_References;                           // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Add_Standard_Marker(const struct FS_MarkerData& Marker, class AActor* Target_Actor, class UW_StandardMarker_C** Return);
	void AddMarker();
	void AddPlayerCreatedMarker(const struct FS_MarkerData& Marker, class ABP_PlayerMarker_C* Target_Actor, int32 Index_0, class UW_PlayerMarker_C** Return);
	void AddPOICreatedMarker(const struct FS_MarkerData& Marker, class AActor* Target_Actor, bool Explored_, const struct FStruct_POI& POI_Data, class UW_POIMarker_C** Return);
	void AddQuestCreatedMarker(const struct FS_MarkerData& Marker, class ABP_QuestMarker_C* Target_Actor, class UW_QuestMarker_C** Return);
	void AddWorldCreatedMarker(const struct FS_MarkerData& Marker, class AActor* Target_Actor, const class FText& Description, class UW_WorldMarker_C** Return);
	void BndEvt__MapWidget_CheckBox_ToggleMarkers_K2Node_ComponentBoundEvent_1_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__MapWidget_CheckBox_TogglePOIMarkers_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void Calculate_Actor_Position(class AActor* Actor, struct FVector2D* Location);
	struct FVector2D CalculateMarkerToWorld(const struct FVector2D& Mouse_Position);
	void ClampSides(const struct FGeometry& Geometry, const struct FVector2D& ClampTo, struct FVector2D* Clamped);
	void Construct();
	void ExecuteUbergraph_MapWidget(int32 EntryPoint);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnScroll();
	void SetScreenPositionToPlayer();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ToggleMap(bool Toggle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapWidget_C">();
	}
	static class UMapWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapWidget_C>();
	}
};
static_assert(alignof(UMapWidget_C) == 0x000008, "Wrong alignment on UMapWidget_C");
static_assert(sizeof(UMapWidget_C) == 0x0003A8, "Wrong size on UMapWidget_C");
static_assert(offsetof(UMapWidget_C, UberGraphFrame) == 0x0002C0, "Member 'UMapWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, CheckBox_TogglePOIMarkers) == 0x0002C8, "Member 'UMapWidget_C::CheckBox_TogglePOIMarkers' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, CheckBox_ToggleSpecialMarkers) == 0x0002D0, "Member 'UMapWidget_C::CheckBox_ToggleSpecialMarkers' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, East) == 0x0002D8, "Member 'UMapWidget_C::East' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, InnerCanvas) == 0x0002E0, "Member 'UMapWidget_C::InnerCanvas' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, LargePOIMarkerOverlay) == 0x0002E8, "Member 'UMapWidget_C::LargePOIMarkerOverlay' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, Map) == 0x0002F0, "Member 'UMapWidget_C::Map' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, North) == 0x0002F8, "Member 'UMapWidget_C::North' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, PlayerMarkerSelectionUI) == 0x000300, "Member 'UMapWidget_C::PlayerMarkerSelectionUI' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, PlayerTexture) == 0x000308, "Member 'UMapWidget_C::PlayerTexture' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, SmallPOIMarkerOverlay) == 0x000310, "Member 'UMapWidget_C::SmallPOIMarkerOverlay' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, South) == 0x000318, "Member 'UMapWidget_C::South' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, StandardMarkerOverlay) == 0x000320, "Member 'UMapWidget_C::StandardMarkerOverlay' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, West) == 0x000328, "Member 'UMapWidget_C::West' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, Map_Data) == 0x000330, "Member 'UMapWidget_C::Map_Data' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, DraggingMap_) == 0x000338, "Member 'UMapWidget_C::DraggingMap_' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, ZoomFactor) == 0x000340, "Member 'UMapWidget_C::ZoomFactor' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, MaxZoom) == 0x000348, "Member 'UMapWidget_C::MaxZoom' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, CurrentZoomStep) == 0x00034C, "Member 'UMapWidget_C::CurrentZoomStep' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, MinZoom) == 0x000350, "Member 'UMapWidget_C::MinZoom' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, Standard_Marker_References) == 0x000358, "Member 'UMapWidget_C::Standard_Marker_References' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, Player_Marker_References) == 0x000368, "Member 'UMapWidget_C::Player_Marker_References' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, Quest_Marker_References) == 0x000378, "Member 'UMapWidget_C::Quest_Marker_References' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, POI_Marker_References) == 0x000388, "Member 'UMapWidget_C::POI_Marker_References' has a wrong offset!");
static_assert(offsetof(UMapWidget_C, World_Marker_References) == 0x000398, "Member 'UMapWidget_C::World_Marker_References' has a wrong offset!");

}


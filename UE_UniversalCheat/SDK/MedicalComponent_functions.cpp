#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MedicalComponent

#include "Basic.hpp"

#include "MedicalComponent_classes.hpp"
#include "MedicalComponent_parameters.hpp"


namespace SDK
{

// Function MedicalComponent.MedicalComponent_C.Bleed
// (Public, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Bleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Bleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.Client_CreateMedUI
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MedicalEffect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Adding_                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::Client_CreateMedUI(class FName MedicalEffect, bool Adding_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Client_CreateMedUI");

	Params::MedicalComponent_C_Client_CreateMedUI Parms{};

	Parms.MedicalEffect = MedicalEffect;
	Parms.Adding_ = Adding_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.Client_RemoveEffect
// (Net, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UMedicalComponent_C::Client_RemoveEffect(TArray<class FName>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Client_RemoveEffect");

	Params::MedicalComponent_C_Client_RemoveEffect Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function MedicalComponent.MedicalComponent_C.ComponentLoaded
// (Event, Public, BlueprintEvent)

void UMedicalComponent_C::ComponentLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "ComponentLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.ComponentPreSave
// (Event, Public, BlueprintEvent)

void UMedicalComponent_C::ComponentPreSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "ComponentPreSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.CreateNotificationUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  UI_Delay                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::CreateNotificationUI(const class FText& Text, class UTexture2D* Image, const struct FLinearColor& Color, double UI_Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "CreateNotificationUI");

	Params::MedicalComponent_C_CreateNotificationUI Parms{};

	Parms.Text = std::move(Text);
	Parms.Image = Image;
	Parms.Color = std::move(Color);
	Parms.UI_Delay = UI_Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.Event_TimeToStopBleed
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Event_TimeToStopBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Event_TimeToStopBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.Event_TimeToStopBrokenBone
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Event_TimeToStopBrokenBone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Event_TimeToStopBrokenBone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.Event_TimeToStopHeavyBleed
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Event_TimeToStopHeavyBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Event_TimeToStopHeavyBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.ExecuteUbergraph_MedicalComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::ExecuteUbergraph_MedicalComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "ExecuteUbergraph_MedicalComponent");

	Params::MedicalComponent_C_ExecuteUbergraph_MedicalComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.GetInGameUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_Ingame_C*                     UI                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::GetInGameUI(class UBP_Ingame_C** UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "GetInGameUI");

	Params::MedicalComponent_C_GetInGameUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UI != nullptr)
		*UI = Parms.UI;
}


// Function MedicalComponent.MedicalComponent_C.GetPlayerRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerCharacter_C*            Player_0                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::GetPlayerRef(class ABP_PlayerCharacter_C** Player_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "GetPlayerRef");

	Params::MedicalComponent_C_GetPlayerRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_0 != nullptr)
		*Player_0 = Parms.Player_0;
}


// Function MedicalComponent.MedicalComponent_C.HeavyBleed
// (Public, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::HeavyBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "HeavyBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.IncreaseHealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::IncreaseHealth(double Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "IncreaseHealth");

	Params::MedicalComponent_C_IncreaseHealth Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.IsBurning?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::IsBurning_(bool* Burning_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "IsBurning?");

	Params::MedicalComponent_C_IsBurning_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Burning_ != nullptr)
		*Burning_ = Parms.Burning_;
}


// Function MedicalComponent.MedicalComponent_C.IsGPSEquipped?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GPS_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::IsGPSEquipped_(bool* GPS_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "IsGPSEquipped?");

	Params::MedicalComponent_C_IsGPSEquipped_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GPS_ != nullptr)
		*GPS_ = Parms.GPS_;
}


// Function MedicalComponent.MedicalComponent_C.IsPlayerInVehicle?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InVehicle                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::IsPlayerInVehicle_(bool* InVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "IsPlayerInVehicle?");

	Params::MedicalComponent_C_IsPlayerInVehicle_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVehicle != nullptr)
		*InVehicle = Parms.InVehicle;
}


// Function MedicalComponent.MedicalComponent_C.LoadComponent
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::LoadComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "LoadComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.OnRep_Bleed?
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::OnRep_Bleed_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "OnRep_Bleed?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.OnRep_BrokenBone?
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::OnRep_BrokenBone_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "OnRep_BrokenBone?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.OnRep_HeavyBleed?
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::OnRep_HeavyBleed_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "OnRep_HeavyBleed?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.OnRep_RadiationSickness?
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::OnRep_RadiationSickness_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "OnRep_RadiationSickness?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.PlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::PlayerDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "PlayerDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.PlayMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Play_Rate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::PlayMontage(class UAnimMontage* Montage, double Play_Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "PlayMontage");

	Params::MedicalComponent_C_PlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.Play_Rate = Play_Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendHealthToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendHealthToClient(double NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendHealthToClient");

	Params::MedicalComponent_C_SendHealthToClient Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendHungerToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewHunger                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendHungerToClient(double NewHunger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendHungerToClient");

	Params::MedicalComponent_C_SendHungerToClient Parms{};

	Parms.NewHunger = NewHunger;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendOxygenToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewOxygen                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendOxygenToClient(double NewOxygen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendOxygenToClient");

	Params::MedicalComponent_C_SendOxygenToClient Parms{};

	Parms.NewOxygen = NewOxygen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendRadiationToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewRadiation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendRadiationToClient(double NewRadiation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendRadiationToClient");

	Params::MedicalComponent_C_SendRadiationToClient Parms{};

	Parms.NewRadiation = NewRadiation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendStaminaToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewStamina                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendStaminaToClient(double NewStamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendStaminaToClient");

	Params::MedicalComponent_C_SendStaminaToClient Parms{};

	Parms.NewStamina = NewStamina;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SendThirstToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewThirst                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SendThirstToClient(double NewThirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SendThirstToClient");

	Params::MedicalComponent_C_SendThirstToClient Parms{};

	Parms.NewThirst = NewThirst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SetBurning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SetBurning(bool Burning, double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SetBurning");

	Params::MedicalComponent_C_SetBurning Parms{};

	Parms.Burning = Burning;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SetPostProcessHealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SetPostProcessHealth(bool Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SetPostProcessHealth");

	Params::MedicalComponent_C_SetPostProcessHealth Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.SetTraceToWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Set_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::SetTraceToWorld(bool Set_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "SetTraceToWorld");

	Params::MedicalComponent_C_SetTraceToWorld Parms{};

	Parms.Set_ = Set_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.StopMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::StopMontage(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "StopMontage");

	Params::MedicalComponent_C_StopMontage Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.Svr_Damage
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   BaseDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::Svr_Damage(class AActor* DamagedActor, float BaseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Svr_Damage");

	Params::MedicalComponent_C_Svr_Damage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.BaseDamage = BaseDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.Time_Bleed
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Time_Bleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Time_Bleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.Time_BrokenBone
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Time_BrokenBone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Time_BrokenBone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.Time_HeavyBleed
// (BlueprintCallable, BlueprintEvent)

void UMedicalComponent_C::Time_HeavyBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "Time_HeavyBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MedicalComponent.MedicalComponent_C.UpdatePlayerSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::UpdatePlayerSpeed(double NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "UpdatePlayerSpeed");

	Params::MedicalComponent_C_UpdatePlayerSpeed Parms{};

	Parms.NewSpeed = NewSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MedicalComponent.MedicalComponent_C.VehicleInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enter_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_VehicleMaster_C*              VehicleRef                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UMedicalComponent_C::VehicleInteraction(bool Enter_, const class ABP_VehicleMaster_C*& VehicleRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicalComponent_C", "VehicleInteraction");

	Params::MedicalComponent_C_VehicleInteraction Parms{};

	Parms.Enter_ = Enter_;
	Parms.VehicleRef = VehicleRef;

	UObject::ProcessEvent(Func, &Parms);
}

}


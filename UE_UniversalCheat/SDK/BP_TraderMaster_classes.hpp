#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TraderMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_VendorTypes_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TraderMaster.BP_TraderMaster_C
// 0x0098 (0x0338 - 0x02A0)
class ABP_TraderMaster_C : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Hair;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Beard;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   VendorName;                                        // 0x02D0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TSubclassOf<class UDialogue>                  Dialogue;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_VendorTypes                              VendorTable;                                       // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    HairMeshes;                                        // 0x0318(0x0010)(Edit, BlueprintVisible)
	TArray<class UStaticMesh*>                    BeardMeshes;                                       // 0x0328(0x0010)(Edit, BlueprintVisible)

public:
	void UserConstructionScript();
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetInteractOption(const struct FGameplayTag& Option);
	void ReceiveBeginPlay();
	void PickupBuildFromGround();
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigCanInteract(bool* Result);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void FacePlayer(class AActor* Target);
	void ExecuteUbergraph_BP_TraderMaster(int32 EntryPoint);
	void Event_Reset(int32 Hour);
	void CheckDistanceFromActor();
	void BndEvt__BP_MPVendor_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TraderMaster_C">();
	}
	static class ABP_TraderMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TraderMaster_C>();
	}
};
static_assert(alignof(ABP_TraderMaster_C) == 0x000008, "Wrong alignment on ABP_TraderMaster_C");
static_assert(sizeof(ABP_TraderMaster_C) == 0x000338, "Wrong size on ABP_TraderMaster_C");
static_assert(offsetof(ABP_TraderMaster_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_TraderMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, Hair) == 0x0002A8, "Member 'ABP_TraderMaster_C::Hair' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, Beard) == 0x0002B0, "Member 'ABP_TraderMaster_C::Beard' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, AIOSubject) == 0x0002B8, "Member 'ABP_TraderMaster_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, SkeletalMesh) == 0x0002C0, "Member 'ABP_TraderMaster_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, BP_JigMultiplayer) == 0x0002C8, "Member 'ABP_TraderMaster_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, VendorName) == 0x0002D0, "Member 'ABP_TraderMaster_C::VendorName' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, Dialogue) == 0x0002E8, "Member 'ABP_TraderMaster_C::Dialogue' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, CurrentActor) == 0x0002F0, "Member 'ABP_TraderMaster_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, InteractingActorLoc) == 0x0002F8, "Member 'ABP_TraderMaster_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, VendorTable) == 0x000310, "Member 'ABP_TraderMaster_C::VendorTable' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, HairMeshes) == 0x000318, "Member 'ABP_TraderMaster_C::HairMeshes' has a wrong offset!");
static_assert(offsetof(ABP_TraderMaster_C, BeardMeshes) == 0x000328, "Member 'ABP_TraderMaster_C::BeardMeshes' has a wrong offset!");

}


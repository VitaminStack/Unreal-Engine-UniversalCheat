#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIWeapon_Master

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_OrderOptions_structs.hpp"
#include "E_NoAmmo_structs.hpp"
#include "E_HitboxTypeAI_structs.hpp"
#include "S_AllAIAnims_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIWeapon_Master.BP_AIWeapon_Master_C
// 0x0A70 (0x0D08 - 0x0298)
class ABP_AIWeapon_Master_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Particle_Socket;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    End_Trace;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Start_Trace;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attach_Point;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RangeStartPoint;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Equip_Animation;                               // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Equip_Animation;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Equip_Attach_Socket;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Unequip_Animation;                             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Unequip_Animation;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Unequip_Attach_Socket;                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_HitboxTypeAI, double>                  Damage;                                            // 0x0318(0x0050)(Edit, BlueprintVisible)
	class UBP_SmartAIComponent_C*                 AI_Component;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Max_Number_Of_Hits;                                // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Melee_Attack_Anims_Order;                          // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Melee_Animations;                                  // 0x0378(0x0010)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   Lower_Melee_Animations;                            // 0x0388(0x0010)(Edit, BlueprintVisible)
	bool                                          Can_Melee_Attack_While_Moving;                     // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Melee_Attack_Frequency_Min;                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Melee_Attack_Frequency_Max;                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Melee_Anim_Time_Frequancy;                     // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Melee_Attack;                                  // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reloading;                                         // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B3[0x1];                                      // 0x03B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current_Hits;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Hit_Actors;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Current_Ammo;                                      // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              RangeAttackSound;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Range_Attack;                                  // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x3];                                      // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weapon_Noise;                                      // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Range_Attack_Distance;                             // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Range__Trace_;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spread__Trace_;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class UParticleSystem*> Surface_Emitters__Trace_;                          // 0x03F8(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class UMaterialInterface*> Surface_Decal__Trace_;                             // 0x0448(0x0050)(Edit, BlueprintVisible)
	struct FVector                                Surface_Decal_Size__Trace_;                        // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_LifeSpan__Trace_;                            // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_Fade_Distance__Trace_;                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Radius__Trace_;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Hit_Deviation__Projectile_;                    // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Projectile_Actor_Settings;                     // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Projectile_Homing_Acceleration_Magnitude;          // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Range_Projectile;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Accuracy__Projectile_;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Miss_Deviation__Projectile_;                   // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Homing_Projectile;                                 // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Character_Reload_Montage;                          // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Reload;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Ammo;                                          // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Max_Total_Ammo;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Magazine_Ammo;                                 // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NoAmmo                                      No_Ammo_Behaviour;                                 // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Holdable_Anims;                                // 0x0515(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_516[0x2];                                      // 0x0516(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AllAIAnims                          Weapon_Animations;                                 // 0x0518(0x04C8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UAnimMontage*                           Holdable_Mesh_Reload_Anim;                         // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Emote_Anims;                                 // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Range_Attack_Anims_Order;                          // 0x09E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EA[0x6];                                      // 0x09EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Range_Attack_Anims;                                // 0x09F0(0x0010)(Edit, BlueprintVisible)
	double                                        Range_Attack_Frequency_Min;                        // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Range_Attack_Frequency_Max;                        // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Range_Anim_Time_Frequancy;                     // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Range_Attack_While_Moving;                     // 0x0A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_With_Full_Magazine;                          // 0x0A12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A13[0x5];                                      // 0x0A13(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Holdable_Mesh_Shoot_Anim;                          // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Muzzle_Effect;                                     // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Range_Attack_Particle_Effect;                      // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Effect_Hit_Result;                                 // 0x0A30(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Delay_Range_Attack;                                // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Range_Delay_Time;                                  // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Melee_Trace_Radius;                                // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Melee_Timer;                                       // 0x0B30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Block;                                         // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_BlockType, int32>                      Block_Chances;                                     // 0x0B40(0x0050)(Edit, BlueprintVisible)
	double                                        Block_Cooldown;                                    // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Melee_Block_Anims;                                 // 0x0B98(0x0010)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   Blocked_Attack_Montage;                            // 0x0BA8(0x0010)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class UParticleSystem*> Melee_Emitters;                                    // 0x0BB8(0x0050)(Edit, BlueprintVisible)
	double                                        Projectile_Speed;                                  // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Melee_Rotation;                              // 0x0C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProjectileUseWeaponDamage;                         // 0x0C11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C12[0x6];                                      // 0x0C12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, class USoundBase*>     Surface_Sound__Trace_;                             // 0x0C18(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class USoundBase*>     Melee_Surface_Sounds;                              // 0x0C68(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class UMaterialInterface*> MeleeDecals;                                       // 0x0CB8(0x0050)(Edit, BlueprintVisible)

public:
	void Add_Current_Ammo(int32 Add_Amount);
	void Current_Ammo_Check(bool* Has_Ammo, int32* Ammo);
	void ExecuteUbergraph_BP_AIWeapon_Master(int32 EntryPoint);
	void Melee_Hit(class AActor* Hit_Actor, class UPrimitiveComponent* Hit_Component, class FName Bone_Name, const struct FHitResult& Hit);
	void Multicast_Melee_Emitter(const struct FHitResult& Hit);
	void Multicast_Play_Skeletal_Mesh_Montage(class UAnimMontage* Montage);
	void Multicast_Range_Attack_Effects(const struct FHitResult& Hit);
	void OnBlendOut_4840180348DE7FAC42113FADB8E440A3(class FName NotifyName);
	void OnCompleted_4840180348DE7FAC42113FADB8E440A3(class FName NotifyName);
	void OnInterrupted_4840180348DE7FAC42113FADB8E440A3(class FName NotifyName);
	void OnNotifyBegin_4840180348DE7FAC42113FADB8E440A3(class FName NotifyName);
	void OnNotifyEnd_4840180348DE7FAC42113FADB8E440A3(class FName NotifyName);
	void ReceiveBeginPlay();
	void Remove_Current_Ammo(int32 Remove_Amount);
	void Remove_Total_Ammo(int32 Remove_Ammo, bool* Removed_All, int32* Remaining_Ammo);
	void Server_End_Melee_Attack();
	void Server_Melee_Attack();
	void Server_Play_Shoot_Montage();
	void Server_Play_Skeletal_Mesh_Montage(class UAnimMontage* Montage);
	void Server_Range_Attack_Muzzle_Effect(const struct FHitResult& Hit);
	void SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FVector& TraceEndLocation, const struct FRotator& Rotation);
	void Total_Ammo_Check(bool* Has_Ammo, int32* Ammo);
	void Update_Melee_Hit();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIWeapon_Master_C">();
	}
	static class ABP_AIWeapon_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AIWeapon_Master_C>();
	}
};
static_assert(alignof(ABP_AIWeapon_Master_C) == 0x000008, "Wrong alignment on ABP_AIWeapon_Master_C");
static_assert(sizeof(ABP_AIWeapon_Master_C) == 0x000D08, "Wrong size on ABP_AIWeapon_Master_C");
static_assert(offsetof(ABP_AIWeapon_Master_C, UberGraphFrame) == 0x000298, "Member 'ABP_AIWeapon_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, StaticMesh) == 0x0002A0, "Member 'ABP_AIWeapon_Master_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Particle_Socket) == 0x0002A8, "Member 'ABP_AIWeapon_Master_C::Particle_Socket' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, End_Trace) == 0x0002B0, "Member 'ABP_AIWeapon_Master_C::End_Trace' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Start_Trace) == 0x0002B8, "Member 'ABP_AIWeapon_Master_C::Start_Trace' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, SkeletalMesh) == 0x0002C0, "Member 'ABP_AIWeapon_Master_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Attach_Point) == 0x0002C8, "Member 'ABP_AIWeapon_Master_C::Attach_Point' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, RangeStartPoint) == 0x0002D0, "Member 'ABP_AIWeapon_Master_C::RangeStartPoint' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Arrow) == 0x0002D8, "Member 'ABP_AIWeapon_Master_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, DefaultSceneRoot) == 0x0002E0, "Member 'ABP_AIWeapon_Master_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Equip_Animation) == 0x0002E8, "Member 'ABP_AIWeapon_Master_C::Use_Equip_Animation' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Equip_Animation) == 0x0002F0, "Member 'ABP_AIWeapon_Master_C::Equip_Animation' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Equip_Attach_Socket) == 0x0002F8, "Member 'ABP_AIWeapon_Master_C::Equip_Attach_Socket' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Unequip_Animation) == 0x000300, "Member 'ABP_AIWeapon_Master_C::Use_Unequip_Animation' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Unequip_Animation) == 0x000308, "Member 'ABP_AIWeapon_Master_C::Unequip_Animation' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Unequip_Attach_Socket) == 0x000310, "Member 'ABP_AIWeapon_Master_C::Unequip_Attach_Socket' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Damage) == 0x000318, "Member 'ABP_AIWeapon_Master_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, AI_Component) == 0x000368, "Member 'ABP_AIWeapon_Master_C::AI_Component' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Max_Number_Of_Hits) == 0x000370, "Member 'ABP_AIWeapon_Master_C::Max_Number_Of_Hits' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Attack_Anims_Order) == 0x000374, "Member 'ABP_AIWeapon_Master_C::Melee_Attack_Anims_Order' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Animations) == 0x000378, "Member 'ABP_AIWeapon_Master_C::Melee_Animations' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Lower_Melee_Animations) == 0x000388, "Member 'ABP_AIWeapon_Master_C::Lower_Melee_Animations' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Melee_Attack_While_Moving) == 0x000398, "Member 'ABP_AIWeapon_Master_C::Can_Melee_Attack_While_Moving' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Attack_Frequency_Min) == 0x0003A0, "Member 'ABP_AIWeapon_Master_C::Melee_Attack_Frequency_Min' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Attack_Frequency_Max) == 0x0003A8, "Member 'ABP_AIWeapon_Master_C::Melee_Attack_Frequency_Max' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Melee_Anim_Time_Frequancy) == 0x0003B0, "Member 'ABP_AIWeapon_Master_C::Use_Melee_Anim_Time_Frequancy' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Melee_Attack) == 0x0003B1, "Member 'ABP_AIWeapon_Master_C::Can_Melee_Attack' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Reloading) == 0x0003B2, "Member 'ABP_AIWeapon_Master_C::Reloading' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Current_Hits) == 0x0003B4, "Member 'ABP_AIWeapon_Master_C::Current_Hits' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Hit_Actors) == 0x0003B8, "Member 'ABP_AIWeapon_Master_C::Hit_Actors' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Current_Ammo) == 0x0003C8, "Member 'ABP_AIWeapon_Master_C::Current_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, RangeAttackSound) == 0x0003D0, "Member 'ABP_AIWeapon_Master_C::RangeAttackSound' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Range_Attack) == 0x0003D8, "Member 'ABP_AIWeapon_Master_C::Can_Range_Attack' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Weapon_Noise) == 0x0003DC, "Member 'ABP_AIWeapon_Master_C::Weapon_Noise' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Distance) == 0x0003E0, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Distance' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range__Trace_) == 0x0003E8, "Member 'ABP_AIWeapon_Master_C::Range__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Spread__Trace_) == 0x0003F0, "Member 'ABP_AIWeapon_Master_C::Spread__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Surface_Emitters__Trace_) == 0x0003F8, "Member 'ABP_AIWeapon_Master_C::Surface_Emitters__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Surface_Decal__Trace_) == 0x000448, "Member 'ABP_AIWeapon_Master_C::Surface_Decal__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Surface_Decal_Size__Trace_) == 0x000498, "Member 'ABP_AIWeapon_Master_C::Surface_Decal_Size__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Decal_LifeSpan__Trace_) == 0x0004B0, "Member 'ABP_AIWeapon_Master_C::Decal_LifeSpan__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Decal_Fade_Distance__Trace_) == 0x0004B8, "Member 'ABP_AIWeapon_Master_C::Decal_Fade_Distance__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Radius__Trace_) == 0x0004C0, "Member 'ABP_AIWeapon_Master_C::Radius__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Max_Hit_Deviation__Projectile_) == 0x0004C8, "Member 'ABP_AIWeapon_Master_C::Max_Hit_Deviation__Projectile_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Projectile_Actor_Settings) == 0x0004D0, "Member 'ABP_AIWeapon_Master_C::Use_Projectile_Actor_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Projectile_Homing_Acceleration_Magnitude) == 0x0004D8, "Member 'ABP_AIWeapon_Master_C::Projectile_Homing_Acceleration_Magnitude' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Projectile) == 0x0004E0, "Member 'ABP_AIWeapon_Master_C::Range_Projectile' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Accuracy__Projectile_) == 0x0004E8, "Member 'ABP_AIWeapon_Master_C::Accuracy__Projectile_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Max_Miss_Deviation__Projectile_) == 0x0004F0, "Member 'ABP_AIWeapon_Master_C::Max_Miss_Deviation__Projectile_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Homing_Projectile) == 0x0004F8, "Member 'ABP_AIWeapon_Master_C::Homing_Projectile' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Character_Reload_Montage) == 0x000500, "Member 'ABP_AIWeapon_Master_C::Character_Reload_Montage' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Reload) == 0x000508, "Member 'ABP_AIWeapon_Master_C::Can_Reload' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Ammo) == 0x000509, "Member 'ABP_AIWeapon_Master_C::Use_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Max_Total_Ammo) == 0x00050C, "Member 'ABP_AIWeapon_Master_C::Max_Total_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Max_Magazine_Ammo) == 0x000510, "Member 'ABP_AIWeapon_Master_C::Max_Magazine_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, No_Ammo_Behaviour) == 0x000514, "Member 'ABP_AIWeapon_Master_C::No_Ammo_Behaviour' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Holdable_Anims) == 0x000515, "Member 'ABP_AIWeapon_Master_C::Use_Holdable_Anims' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Weapon_Animations) == 0x000518, "Member 'ABP_AIWeapon_Master_C::Weapon_Animations' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Holdable_Mesh_Reload_Anim) == 0x0009E0, "Member 'ABP_AIWeapon_Master_C::Holdable_Mesh_Reload_Anim' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Allow_Emote_Anims) == 0x0009E8, "Member 'ABP_AIWeapon_Master_C::Allow_Emote_Anims' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Anims_Order) == 0x0009E9, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Anims_Order' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Anims) == 0x0009F0, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Anims' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Frequency_Min) == 0x000A00, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Frequency_Min' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Frequency_Max) == 0x000A08, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Frequency_Max' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Use_Range_Anim_Time_Frequancy) == 0x000A10, "Member 'ABP_AIWeapon_Master_C::Use_Range_Anim_Time_Frequancy' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Range_Attack_While_Moving) == 0x000A11, "Member 'ABP_AIWeapon_Master_C::Can_Range_Attack_While_Moving' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Start_With_Full_Magazine) == 0x000A12, "Member 'ABP_AIWeapon_Master_C::Start_With_Full_Magazine' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Holdable_Mesh_Shoot_Anim) == 0x000A18, "Member 'ABP_AIWeapon_Master_C::Holdable_Mesh_Shoot_Anim' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Muzzle_Effect) == 0x000A20, "Member 'ABP_AIWeapon_Master_C::Muzzle_Effect' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Attack_Particle_Effect) == 0x000A28, "Member 'ABP_AIWeapon_Master_C::Range_Attack_Particle_Effect' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Effect_Hit_Result) == 0x000A30, "Member 'ABP_AIWeapon_Master_C::Effect_Hit_Result' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Delay_Range_Attack) == 0x000B18, "Member 'ABP_AIWeapon_Master_C::Delay_Range_Attack' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Range_Delay_Time) == 0x000B20, "Member 'ABP_AIWeapon_Master_C::Range_Delay_Time' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Trace_Radius) == 0x000B28, "Member 'ABP_AIWeapon_Master_C::Melee_Trace_Radius' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Timer) == 0x000B30, "Member 'ABP_AIWeapon_Master_C::Melee_Timer' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Can_Block) == 0x000B38, "Member 'ABP_AIWeapon_Master_C::Can_Block' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Block_Chances) == 0x000B40, "Member 'ABP_AIWeapon_Master_C::Block_Chances' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Block_Cooldown) == 0x000B90, "Member 'ABP_AIWeapon_Master_C::Block_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Block_Anims) == 0x000B98, "Member 'ABP_AIWeapon_Master_C::Melee_Block_Anims' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Blocked_Attack_Montage) == 0x000BA8, "Member 'ABP_AIWeapon_Master_C::Blocked_Attack_Montage' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Emitters) == 0x000BB8, "Member 'ABP_AIWeapon_Master_C::Melee_Emitters' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Projectile_Speed) == 0x000C08, "Member 'ABP_AIWeapon_Master_C::Projectile_Speed' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Allow_Melee_Rotation) == 0x000C10, "Member 'ABP_AIWeapon_Master_C::Allow_Melee_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, ProjectileUseWeaponDamage) == 0x000C11, "Member 'ABP_AIWeapon_Master_C::ProjectileUseWeaponDamage' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Surface_Sound__Trace_) == 0x000C18, "Member 'ABP_AIWeapon_Master_C::Surface_Sound__Trace_' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, Melee_Surface_Sounds) == 0x000C68, "Member 'ABP_AIWeapon_Master_C::Melee_Surface_Sounds' has a wrong offset!");
static_assert(offsetof(ABP_AIWeapon_Master_C, MeleeDecals) == 0x000CB8, "Member 'ABP_AIWeapon_Master_C::MeleeDecals' has a wrong offset!");

}


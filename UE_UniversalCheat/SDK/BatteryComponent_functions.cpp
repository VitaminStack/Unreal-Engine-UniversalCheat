#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BatteryComponent

#include "Basic.hpp"

#include "BatteryComponent_classes.hpp"
#include "BatteryComponent_parameters.hpp"


namespace SDK
{

// Function BatteryComponent.BatteryComponent_C.CheckBatteryLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JigMultiplayer_C*             JigComp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Battery_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBatteryComponent_C::CheckBatteryLevel(class UBP_JigMultiplayer_C* JigComp, const struct FGuid& UID, bool* Battery_, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatteryComponent_C", "CheckBatteryLevel");

	Params::BatteryComponent_C_CheckBatteryLevel Parms{};

	Parms.JigComp = JigComp;
	Parms.UID = std::move(UID);

	UObject::ProcessEvent(Func, &Parms);

	if (Battery_ != nullptr)
		*Battery_ = Parms.Battery_;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BatteryComponent.BatteryComponent_C.ExecuteUbergraph_BatteryComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBatteryComponent_C::ExecuteUbergraph_BatteryComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatteryComponent_C", "ExecuteUbergraph_BatteryComponent");

	Params::BatteryComponent_C_ExecuteUbergraph_BatteryComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BatteryComponent.BatteryComponent_C.Svr_Initialise
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBatteryComponent_C::Svr_Initialise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatteryComponent_C", "Svr_Initialise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BatteryComponent.BatteryComponent_C.UseBattery
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JigMultiplayer_C*             JigComp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinusDur                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewDur                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Successful_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBatteryComponent_C::UseBattery(class UBP_JigMultiplayer_C* JigComp, const struct FGuid& UID, double MinusDur, double* NewDur, bool* Successful_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatteryComponent_C", "UseBattery");

	Params::BatteryComponent_C_UseBattery Parms{};

	Parms.JigComp = JigComp;
	Parms.UID = std::move(UID);
	Parms.MinusDur = MinusDur;

	UObject::ProcessEvent(Func, &Parms);

	if (NewDur != nullptr)
		*NewDur = Parms.NewDur;

	if (Successful_ != nullptr)
		*Successful_ = Parms.Successful_;
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalDog

#include "Basic.hpp"

#include "BP_Animal_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AnimalDog.BP_AnimalDog_C
// 0x0070 (0x0710 - 0x06A0)
class ABP_AnimalDog_C final : public ABP_Animal_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AnimalDog_C;                     // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        PlayerPosition;                                    // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class USkeletalMesh*, class UMaterial*>  Model;                                             // 0x06B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetMeshAndMaterial();
	void SetInteractOption(const struct FGameplayTag& Option);
	void ReceiveBeginPlay();
	void PickupBuildFromGround();
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigCanInteract(bool* Result);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void ExecuteUbergraph_BP_AnimalDog(int32 EntryPoint);
	void BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnimalDog_C">();
	}
	static class ABP_AnimalDog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AnimalDog_C>();
	}
};
static_assert(alignof(ABP_AnimalDog_C) == 0x000010, "Wrong alignment on ABP_AnimalDog_C");
static_assert(sizeof(ABP_AnimalDog_C) == 0x000710, "Wrong size on ABP_AnimalDog_C");
static_assert(offsetof(ABP_AnimalDog_C, UberGraphFrame_BP_AnimalDog_C) == 0x0006A0, "Member 'ABP_AnimalDog_C::UberGraphFrame_BP_AnimalDog_C' has a wrong offset!");
static_assert(offsetof(ABP_AnimalDog_C, PlayerPosition) == 0x0006A8, "Member 'ABP_AnimalDog_C::PlayerPosition' has a wrong offset!");
static_assert(offsetof(ABP_AnimalDog_C, AIOSubject) == 0x0006B0, "Member 'ABP_AnimalDog_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_AnimalDog_C, Model) == 0x0006B8, "Member 'ABP_AnimalDog_C::Model' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhotoModeFreeCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PhotoModeFreeCamera.PhotoModeFreeCamera_C
// 0x0080 (0x03C8 - 0x0348)
class APhotoModeFreeCamera_C final : public ASpectatorPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        FreeCameraMaximumDistance;                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ACharacter*                             PlayerPawn;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              MovingFreeCamera;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              NotMovingFreeCamera;                               // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        CameraSensitivity;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        TimeDilation;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        StartingFOV;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               StartingRotation;                                  // 0x03A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          UseMaximumDistanceLimit;                           // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_PhotoModeFreeCamera(int32 EntryPoint);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PhotoModeFreeCamera_C">();
	}
	static class APhotoModeFreeCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhotoModeFreeCamera_C>();
	}
};
static_assert(alignof(APhotoModeFreeCamera_C) == 0x000008, "Wrong alignment on APhotoModeFreeCamera_C");
static_assert(sizeof(APhotoModeFreeCamera_C) == 0x0003C8, "Wrong size on APhotoModeFreeCamera_C");
static_assert(offsetof(APhotoModeFreeCamera_C, UberGraphFrame) == 0x000348, "Member 'APhotoModeFreeCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, Camera) == 0x000350, "Member 'APhotoModeFreeCamera_C::Camera' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, SpringArm) == 0x000358, "Member 'APhotoModeFreeCamera_C::SpringArm' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, FreeCameraMaximumDistance) == 0x000360, "Member 'APhotoModeFreeCamera_C::FreeCameraMaximumDistance' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, PlayerPawn) == 0x000368, "Member 'APhotoModeFreeCamera_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, MovingFreeCamera) == 0x000370, "Member 'APhotoModeFreeCamera_C::MovingFreeCamera' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, NotMovingFreeCamera) == 0x000380, "Member 'APhotoModeFreeCamera_C::NotMovingFreeCamera' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, CameraSensitivity) == 0x000390, "Member 'APhotoModeFreeCamera_C::CameraSensitivity' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, TimeDilation) == 0x000398, "Member 'APhotoModeFreeCamera_C::TimeDilation' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, StartingFOV) == 0x0003A0, "Member 'APhotoModeFreeCamera_C::StartingFOV' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, StartingRotation) == 0x0003A8, "Member 'APhotoModeFreeCamera_C::StartingRotation' has a wrong offset!");
static_assert(offsetof(APhotoModeFreeCamera_C, UseMaximumDistanceLimit) == 0x0003C0, "Member 'APhotoModeFreeCamera_C::UseMaximumDistanceLimit' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WindTurbine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WindTurbine.BP_WindTurbine_C
// 0x0068 (0x0308 - 0x02A0)
class ABP_WindTurbine_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UActor_Weather_Status_C*                Actor_Weather_Status;                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Prop_Powerpole_Single_01;                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x02C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x02E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Timer;                                             // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetInteractDistance(class AActor* Target);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_WindTurbine(int32 EntryPoint);
	void Event_StartSpin();
	void Event_Spin();
	void CheckDistanceFromActor();
	void BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WindTurbine_C">();
	}
	static class ABP_WindTurbine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WindTurbine_C>();
	}
};
static_assert(alignof(ABP_WindTurbine_C) == 0x000008, "Wrong alignment on ABP_WindTurbine_C");
static_assert(sizeof(ABP_WindTurbine_C) == 0x000308, "Wrong size on ABP_WindTurbine_C");
static_assert(offsetof(ABP_WindTurbine_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_WindTurbine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, Actor_Weather_Status) == 0x0002A8, "Member 'ABP_WindTurbine_C::Actor_Weather_Status' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, AIOSubject) == 0x0002B0, "Member 'ABP_WindTurbine_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, SM_Prop_Powerpole_Single_01) == 0x0002B8, "Member 'ABP_WindTurbine_C::SM_Prop_Powerpole_Single_01' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, StaticMesh) == 0x0002C0, "Member 'ABP_WindTurbine_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, InteractingActorLoc) == 0x0002C8, "Member 'ABP_WindTurbine_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, CurrentActor) == 0x0002E0, "Member 'ABP_WindTurbine_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, Name_0) == 0x0002E8, "Member 'ABP_WindTurbine_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_WindTurbine_C, Timer) == 0x000300, "Member 'ABP_WindTurbine_C::Timer' has a wrong offset!");

}


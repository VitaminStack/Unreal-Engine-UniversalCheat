#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDS_Climate_Preset

#include "Basic.hpp"

#include "UDS_TemperatureType_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass UDS_Climate_Preset.UDS_Climate_Preset_C
// 0x00C0 (0x00F0 - 0x0030)
class UUDS_Climate_Preset_C final : public UPrimaryDataAsset
{
public:
	double                                        Winter_Average_High_Temp__C_;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Winter_Average_Low_Temp__C_;                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spring_Average_High_Temp__C_;                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spring_Average_Low_Temp__C_;                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Summer_Average_High_Temp__C_;                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Summer_Average_Low_Temp__C_;                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Autumn_Average_High_Temp__C_;                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Autumn_Average_Low_Temp__C_;                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Winter_Cloudy_Percentage;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spring_Cloudy_Percentage;                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Summer_Cloudy_Percentage;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Autumn_Cloudy_Percentage;                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Winter_Rainfall__mm_;                              // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spring_Rainfall__mm_;                              // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Summer_Rainfall__mm_;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Autumn_Rainfall__mm_;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Winter_Snowfall__mm_;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spring_Snowfall__mm_;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Summer_Snowfall__mm_;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Autumn_Snowfall__mm_;                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sand_Present;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Data_Source;                                       // 0x00D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Return_Temperature_Range_in_Scale(EUDS_TemperatureType Scale, int32 Season, double* Low, double* High);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UDS_Climate_Preset_C">();
	}
	static class UUDS_Climate_Preset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUDS_Climate_Preset_C>();
	}
};
static_assert(alignof(UUDS_Climate_Preset_C) == 0x000008, "Wrong alignment on UUDS_Climate_Preset_C");
static_assert(sizeof(UUDS_Climate_Preset_C) == 0x0000F0, "Wrong size on UUDS_Climate_Preset_C");
static_assert(offsetof(UUDS_Climate_Preset_C, Winter_Average_High_Temp__C_) == 0x000030, "Member 'UUDS_Climate_Preset_C::Winter_Average_High_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Winter_Average_Low_Temp__C_) == 0x000038, "Member 'UUDS_Climate_Preset_C::Winter_Average_Low_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Spring_Average_High_Temp__C_) == 0x000040, "Member 'UUDS_Climate_Preset_C::Spring_Average_High_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Spring_Average_Low_Temp__C_) == 0x000048, "Member 'UUDS_Climate_Preset_C::Spring_Average_Low_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Summer_Average_High_Temp__C_) == 0x000050, "Member 'UUDS_Climate_Preset_C::Summer_Average_High_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Summer_Average_Low_Temp__C_) == 0x000058, "Member 'UUDS_Climate_Preset_C::Summer_Average_Low_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Autumn_Average_High_Temp__C_) == 0x000060, "Member 'UUDS_Climate_Preset_C::Autumn_Average_High_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Autumn_Average_Low_Temp__C_) == 0x000068, "Member 'UUDS_Climate_Preset_C::Autumn_Average_Low_Temp__C_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Winter_Cloudy_Percentage) == 0x000070, "Member 'UUDS_Climate_Preset_C::Winter_Cloudy_Percentage' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Spring_Cloudy_Percentage) == 0x000078, "Member 'UUDS_Climate_Preset_C::Spring_Cloudy_Percentage' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Summer_Cloudy_Percentage) == 0x000080, "Member 'UUDS_Climate_Preset_C::Summer_Cloudy_Percentage' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Autumn_Cloudy_Percentage) == 0x000088, "Member 'UUDS_Climate_Preset_C::Autumn_Cloudy_Percentage' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Winter_Rainfall__mm_) == 0x000090, "Member 'UUDS_Climate_Preset_C::Winter_Rainfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Spring_Rainfall__mm_) == 0x000098, "Member 'UUDS_Climate_Preset_C::Spring_Rainfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Summer_Rainfall__mm_) == 0x0000A0, "Member 'UUDS_Climate_Preset_C::Summer_Rainfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Autumn_Rainfall__mm_) == 0x0000A8, "Member 'UUDS_Climate_Preset_C::Autumn_Rainfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Winter_Snowfall__mm_) == 0x0000B0, "Member 'UUDS_Climate_Preset_C::Winter_Snowfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Spring_Snowfall__mm_) == 0x0000B8, "Member 'UUDS_Climate_Preset_C::Spring_Snowfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Summer_Snowfall__mm_) == 0x0000C0, "Member 'UUDS_Climate_Preset_C::Summer_Snowfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Autumn_Snowfall__mm_) == 0x0000C8, "Member 'UUDS_Climate_Preset_C::Autumn_Snowfall__mm_' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Sand_Present) == 0x0000D0, "Member 'UUDS_Climate_Preset_C::Sand_Present' has a wrong offset!");
static_assert(offsetof(UUDS_Climate_Preset_C, Data_Source) == 0x0000D8, "Member 'UUDS_Climate_Preset_C::Data_Source' has a wrong offset!");

}


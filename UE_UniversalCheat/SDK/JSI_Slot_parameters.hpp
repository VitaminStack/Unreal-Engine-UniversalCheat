#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSI_Slot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "RarityColors_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_ItemStat_structs.hpp"


namespace SDK::Params
{

// Function JSI_Slot.JSI_Slot_C.AbleToStackTo?
// 0x0050 (0x0050 - 0x0000)
struct JSI_Slot_C_AbleToStackTo_ final
{
public:
	class UJSI_Slot_C*                            ToItem;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDurability_Durability;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDurability_MaxDurability;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDurability_Durability_1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDurability_MaxDurability_1;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__FreeSpaceAvailable;             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetItemID_ItemID;                         // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemID_ItemID_1;                       // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_AbleToStackTo_) == 0x000008, "Wrong alignment on JSI_Slot_C_AbleToStackTo_");
static_assert(sizeof(JSI_Slot_C_AbleToStackTo_) == 0x000050, "Wrong size on JSI_Slot_C_AbleToStackTo_");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, ToItem) == 0x000000, "Member 'JSI_Slot_C_AbleToStackTo_::ToItem' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, ReturnValue) == 0x000008, "Member 'JSI_Slot_C_AbleToStackTo_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetDurability_Durability) == 0x000010, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetDurability_Durability' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetDurability_MaxDurability) == 0x000018, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetDurability_MaxDurability' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetDurability_Durability_1) == 0x000020, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetDurability_Durability_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetDurability_MaxDurability_1) == 0x000028, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetDurability_MaxDurability_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_FTrunc_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_FTrunc_ReturnValue_1) == 0x000034, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_CanStack__CanStack) == 0x000038, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_CanStack__FreeSpaceAvailable) == 0x000039, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_CanStack__FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003A, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetItemID_ItemID) == 0x00003C, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetItemID_ItemID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_GetItemID_ItemID_1) == 0x000044, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_GetItemID_ItemID_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00004C, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_BooleanAND_ReturnValue_1) == 0x00004E, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AbleToStackTo_, CallFunc_BooleanAND_ReturnValue_2) == 0x00004F, "Member 'JSI_Slot_C_AbleToStackTo_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.AdaptImageToActionbar
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_AdaptImageToActionbar final
{
public:
	class UTextureRenderTarget2D*                 RenderTargetSnap_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotFim;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateImage_Updated;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_AdaptImageToActionbar) == 0x000008, "Wrong alignment on JSI_Slot_C_AdaptImageToActionbar");
static_assert(sizeof(JSI_Slot_C_AdaptImageToActionbar) == 0x000028, "Wrong size on JSI_Slot_C_AdaptImageToActionbar");
static_assert(offsetof(JSI_Slot_C_AdaptImageToActionbar, RenderTargetSnap_0) == 0x000000, "Member 'JSI_Slot_C_AdaptImageToActionbar::RenderTargetSnap_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdaptImageToActionbar, SlotFim) == 0x000008, "Member 'JSI_Slot_C_AdaptImageToActionbar::SlotFim' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdaptImageToActionbar, CallFunc_UpdateImage_Updated) == 0x000018, "Member 'JSI_Slot_C_AdaptImageToActionbar::CallFunc_UpdateImage_Updated' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdaptImageToActionbar, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'JSI_Slot_C_AdaptImageToActionbar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdaptImageToActionbar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_AdaptImageToActionbar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.AddToXY
// 0x0058 (0x0058 - 0x0000)
struct JSI_Slot_C_AddToXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotDimension;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_AddToXY) == 0x000008, "Wrong alignment on JSI_Slot_C_AddToXY");
static_assert(sizeof(JSI_Slot_C_AddToXY) == 0x000058, "Wrong size on JSI_Slot_C_AddToXY");
static_assert(offsetof(JSI_Slot_C_AddToXY, X) == 0x000000, "Member 'JSI_Slot_C_AddToXY::X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, Y) == 0x000004, "Member 'JSI_Slot_C_AddToXY::Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, SlotDimension) == 0x000008, "Member 'JSI_Slot_C_AddToXY::SlotDimension' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_BreakVector2D_X) == 0x000018, "Member 'JSI_Slot_C_AddToXY::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'JSI_Slot_C_AddToXY::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_AddToXY::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000030, "Member 'JSI_Slot_C_AddToXY::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'JSI_Slot_C_AddToXY::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'JSI_Slot_C_AddToXY::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AddToXY, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_AddToXY::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.AdjustImageScale
// 0x0098 (0x0098 - 0x0000)
struct JSI_Slot_C_AdjustImageScale final
{
public:
	struct FVector2D                              SlotFim;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_AdjustImageScale) == 0x000008, "Wrong alignment on JSI_Slot_C_AdjustImageScale");
static_assert(sizeof(JSI_Slot_C_AdjustImageScale) == 0x000098, "Wrong size on JSI_Slot_C_AdjustImageScale");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, SlotFim) == 0x000000, "Member 'JSI_Slot_C_AdjustImageScale::SlotFim' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, Temp_bool_Variable) == 0x000010, "Member 'JSI_Slot_C_AdjustImageScale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, Temp_struct_Variable) == 0x000018, "Member 'JSI_Slot_C_AdjustImageScale::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, Temp_bool_Variable_1) == 0x000028, "Member 'JSI_Slot_C_AdjustImageScale::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_BreakVector2D_X) == 0x000030, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_MakeVector2D_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_MakeVector2D_ReturnValue_1) == 0x000060, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000070, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000071, "Member 'JSI_Slot_C_AdjustImageScale::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, K2Node_Select_Default) == 0x000078, "Member 'JSI_Slot_C_AdjustImageScale::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_AdjustImageScale, K2Node_Select_Default_1) == 0x000088, "Member 'JSI_Slot_C_AdjustImageScale::K2Node_Select_Default_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.CanOpenSpecialContainer?
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_CanOpenSpecialContainer_ final
{
public:
	bool                                          Return_value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_CanOpenSpecialContainer_) == 0x000001, "Wrong alignment on JSI_Slot_C_CanOpenSpecialContainer_");
static_assert(sizeof(JSI_Slot_C_CanOpenSpecialContainer_) == 0x000008, "Wrong size on JSI_Slot_C_CanOpenSpecialContainer_");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, Return_value) == 0x000000, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::Return_value' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_GetVisibility_ReturnValue) == 0x000002, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_IsVisible_ReturnValue) == 0x000003, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanOpenSpecialContainer_, CallFunc_BooleanAND_ReturnValue_1) == 0x000007, "Member 'JSI_Slot_C_CanOpenSpecialContainer_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.CanStack?
// 0x000C (0x000C - 0x0000)
struct JSI_Slot_C_CanStack_ final
{
public:
	bool                                          CanStack;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeSpaceAvailable;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_CanStack_) == 0x000004, "Wrong alignment on JSI_Slot_C_CanStack_");
static_assert(sizeof(JSI_Slot_C_CanStack_) == 0x00000C, "Wrong size on JSI_Slot_C_CanStack_");
static_assert(offsetof(JSI_Slot_C_CanStack_, CanStack) == 0x000000, "Member 'JSI_Slot_C_CanStack_::CanStack' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanStack_, FreeSpaceAvailable) == 0x000001, "Member 'JSI_Slot_C_CanStack_::FreeSpaceAvailable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanStack_, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'JSI_Slot_C_CanStack_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CanStack_, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_CanStack_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.CapacityContainer_GetLastItem
// 0x0020 (0x0020 - 0x0000)
struct JSI_Slot_C_CapacityContainer_GetLastItem final
{
public:
	class UJSI_Slot_C*                            Output;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_CapacityContainer_GetLastItem) == 0x000008, "Wrong alignment on JSI_Slot_C_CapacityContainer_GetLastItem");
static_assert(sizeof(JSI_Slot_C_CapacityContainer_GetLastItem) == 0x000020, "Wrong size on JSI_Slot_C_CapacityContainer_GetLastItem");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, Output) == 0x000000, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::Output' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CapacityContainer_GetLastItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSI_Slot_C_CapacityContainer_GetLastItem::CallFunc_Array_Get_Item' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ChangePrice
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_ChangePrice final
{
public:
	double                                        Price_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ChangePrice) == 0x000008, "Wrong alignment on JSI_Slot_C_ChangePrice");
static_assert(sizeof(JSI_Slot_C_ChangePrice) == 0x000008, "Wrong size on JSI_Slot_C_ChangePrice");
static_assert(offsetof(JSI_Slot_C_ChangePrice, Price_0) == 0x000000, "Member 'JSI_Slot_C_ChangePrice::Price_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ChangeRarity
// 0x000C (0x000C - 0x0000)
struct JSI_Slot_C_ChangeRarity final
{
public:
	struct FGameplayTag                           Rarity_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ChangeRarity) == 0x000004, "Wrong alignment on JSI_Slot_C_ChangeRarity");
static_assert(sizeof(JSI_Slot_C_ChangeRarity) == 0x00000C, "Wrong size on JSI_Slot_C_ChangeRarity");
static_assert(offsetof(JSI_Slot_C_ChangeRarity, Rarity_0) == 0x000000, "Member 'JSI_Slot_C_ChangeRarity::Rarity_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ChangeRarity, Changed_) == 0x000008, "Member 'JSI_Slot_C_ChangeRarity::Changed_' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.CheckIfScaleIsNeeded
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_CheckIfScaleIsNeeded final
{
public:
	double                                        CallFunc_BreakVector2D_X;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_CheckIfScaleIsNeeded) == 0x000008, "Wrong alignment on JSI_Slot_C_CheckIfScaleIsNeeded");
static_assert(sizeof(JSI_Slot_C_CheckIfScaleIsNeeded) == 0x000018, "Wrong size on JSI_Slot_C_CheckIfScaleIsNeeded");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_BreakVector2D_X) == 0x000000, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_IsEquipTo__ReturnValue) == 0x000011, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000012, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckIfScaleIsNeeded, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'JSI_Slot_C_CheckIfScaleIsNeeded::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.CheckRootContainer
// 0x0088 (0x0088 - 0x0000)
struct JSI_Slot_C_CheckRootContainer final
{
public:
	class UJSI_Slot_C*                            DraggedItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAdd_;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetContainerHierarchy_Containers;         // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                CallFunc_GetContainerHierarchy_Containers_1;       // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_CheckRootContainer) == 0x000008, "Wrong alignment on JSI_Slot_C_CheckRootContainer");
static_assert(sizeof(JSI_Slot_C_CheckRootContainer) == 0x000088, "Wrong size on JSI_Slot_C_CheckRootContainer");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, DraggedItem) == 0x000000, "Member 'JSI_Slot_C_CheckRootContainer::DraggedItem' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CanAdd_) == 0x000008, "Member 'JSI_Slot_C_CheckRootContainer::CanAdd_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'JSI_Slot_C_CheckRootContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000010, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000018, "Member 'JSI_Slot_C_CheckRootContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSI_Slot_C_CheckRootContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_GetListOfContainers_Containers) == 0x000030, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_IsValid_ReturnValue_1) == 0x00004C, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Array_Contains_ReturnValue) == 0x00004D, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Not_PreBool_ReturnValue) == 0x00004E, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_GetContainerHierarchy_Containers) == 0x000050, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_GetContainerHierarchy_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Array_Contains_ReturnValue_1) == 0x000060, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'JSI_Slot_C_CheckRootContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_GetContainerHierarchy_Containers_1) == 0x000070, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_GetContainerHierarchy_Containers_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Array_Contains_ReturnValue_2) == 0x000080, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000081, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_CheckRootContainer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000082, "Member 'JSI_Slot_C_CheckRootContainer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.DeepSearch_GetAllItems
// 0x0088 (0x0088 - 0x0000)
struct JSI_Slot_C_DeepSearch_GetAllItems final
{
public:
	TArray<class UJSI_Slot_C*>                    ArrItemsByRef;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_DeepSearch_GetAllItems) == 0x000008, "Wrong alignment on JSI_Slot_C_DeepSearch_GetAllItems");
static_assert(sizeof(JSI_Slot_C_DeepSearch_GetAllItems) == 0x000088, "Wrong size on JSI_Slot_C_DeepSearch_GetAllItems");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, ArrItemsByRef) == 0x000000, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::ArrItemsByRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_GetContainerOneRef_ContainerRef) == 0x000028, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000038, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_GetListOfContainers_Containers) == 0x000050, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Array_Get_Item) == 0x000068, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DeepSearch_GetAllItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x000084, "Member 'JSI_Slot_C_DeepSearch_GetAllItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.DetectChange
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_DetectChange final
{
public:
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          DraggedRotated_;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NOChange;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndexOnDrop_SlotIndex;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_DetectChange) == 0x000008, "Wrong alignment on JSI_Slot_C_DetectChange");
static_assert(sizeof(JSI_Slot_C_DetectChange) == 0x000018, "Wrong size on JSI_Slot_C_DetectChange");
static_assert(offsetof(JSI_Slot_C_DetectChange, DroppedSlotRef) == 0x000000, "Member 'JSI_Slot_C_DetectChange::DroppedSlotRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, DraggedRotated_) == 0x000008, "Member 'JSI_Slot_C_DetectChange::DraggedRotated_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, NOChange) == 0x000009, "Member 'JSI_Slot_C_DetectChange::NOChange' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_GetSlotIndexOnDrop_SlotIndex) == 0x00000C, "Member 'JSI_Slot_C_DetectChange::CallFunc_GetSlotIndexOnDrop_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_DetectChange::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_DetectChange::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000012, "Member 'JSI_Slot_C_DetectChange::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'JSI_Slot_C_DetectChange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_DetectChange, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'JSI_Slot_C_DetectChange::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ExecuteUbergraph_JSI_Slot
// 0x09A0 (0x09A0 - 0x0000)
struct JSI_Slot_C_ExecuteUbergraph_JSI_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_2;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_2;        // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Create_ReturnValue;                       // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x00BC(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x00F8(0x0078)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0170(0x0078)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x01E8(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x0220(0x0078)()
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation;          // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget;                  // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRootContainer_CanAdd_;               // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x02C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x02C8(0x0078)(ConstParm)
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0350(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x035C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue;                 // 0x035D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x035E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x035F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragDropOperation*                     K2Node_CustomEvent_Op;                             // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation_1;        // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRootContainer_CanAdd__1;             // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget_1;                // 0x0380(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x038A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue_1;               // 0x038B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Rotate_;                        // 0x038D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_FlipVector_;                    // 0x038E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F[0x1];                                      // 0x038F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB[0x1];                                      // 0x03AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x03AC(0x0014)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_3;         // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x03DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB[0x5];                                      // 0x03DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x03E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x03F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x03F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0404(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0418(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x042C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PendingTimer_C*                     CallFunc_Create_ReturnValue_1;                     // 0x0440(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Pending_;                       // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_PlaybackSpeed;                  // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_TimerInSec;                     // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0478(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0488(0x0014)()
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x049C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotSize_Size;                         // 0x04A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetJigItemImage_TextureRef;               // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_1;                           // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA[0x6];                                      // 0x04CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x04EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x04EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0510(0x0018)()
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x0528(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0548(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0558(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_ReturnValue_2;                     // 0x0570(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0578(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0589(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x058A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x058B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C[0x4];                                      // 0x058C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1; // 0x0590(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface_2; // 0x05A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x05C0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item_1;                         // 0x05D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x05E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x05E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x05E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x05E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x05F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x0602(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603[0x5];                                      // 0x0603(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_2;                            // 0x0608(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0610(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0618(0x0014)()
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x062D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62E[0x2];                                      // 0x062E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetBorderColorByRarity_Color;             // 0x0630(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_H;                               // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_S;                               // 0x0644(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_V;                               // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RGBToHSV_A;                               // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_4;                           // 0x0650(0x0014)()
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0670(0x00D0)()
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0740(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_5;                           // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_HSVToRGB_ReturnValue;                     // 0x0750(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPrice_Price;                           // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0770(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0788(0x0050)(HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_6;                           // 0x07D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x07E0(0x00D0)()
	class FText                                   CallFunc_GetCurrency_Currency;                     // 0x08B0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x08C8(0x0050)(HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0928(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_939[0x7];                                      // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0940(0x0018)()
	bool                                          CallFunc_ISCapacityContainer_ReturnValue_1;        // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0959(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95A[0x6];                                      // 0x095A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_7;                           // 0x0960(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x0970(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x097C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast; // 0x0980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_A_ImplicitCast;                  // 0x0984(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast_1;        // 0x0988(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_HSVToRGB_V_ImplicitCast;                  // 0x0998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot) == 0x000010, "Wrong alignment on JSI_Slot_C_ExecuteUbergraph_JSI_Slot");
static_assert(sizeof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot) == 0x0009A0, "Wrong size on JSI_Slot_C_ExecuteUbergraph_JSI_Slot");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, EntryPoint) == 0x000000, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_struct_Variable) == 0x000008, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_struct_Variable_1) == 0x000018, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_object_Variable) == 0x000028, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable) == 0x000030, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_byte_Variable) == 0x000040, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_byte_Variable_1) == 0x000041, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetPlayerPawn_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000070, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_1) == 0x000078, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_3) == 0x000079, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000080, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_4) == 0x000088, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Has_Been_Initd_Variable) == 0x000089, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetPlayerPawn_ReturnValue_2) == 0x000090, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetPlayerPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_5) == 0x000098, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetComponentByClass_ReturnValue_2) == 0x0000A0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_6) == 0x0000A8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Create_ReturnValue) == 0x0000B0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_2) == 0x0000B8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Has_Been_Initd_Variable_1) == 0x0000B9, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_MyGeometry_1) == 0x0000BC, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_MouseEvent_1) == 0x0000F8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_MouseEvent) == 0x000170, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_MyGeometry) == 0x0001E8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_PointerEvent_1) == 0x000220, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_Operation_1) == 0x000298, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_IsClosed_Variable) == 0x0002A0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsJig_SDrag_Operation) == 0x0002A8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsJig_SDrag_Operation' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess) == 0x0002B0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsDrag_Widget) == 0x0002B8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsDrag_Widget' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_1) == 0x0002C0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_CheckRootContainer_CanAdd_) == 0x0002C1, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_CheckRootContainer_CanAdd_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue) == 0x0002C2, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0002C3, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_PointerEvent) == 0x0002C8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_Operation) == 0x000340, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_int_Array_Index_Variable_1) == 0x000348, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Array_Get_Item) == 0x000350, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Array_Length_ReturnValue) == 0x000358, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Less_IntInt_ReturnValue) == 0x00035C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsInventory__ReturnValue) == 0x00035D, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsInventory__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BooleanAND_ReturnValue) == 0x00035E, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_7) == 0x00035F, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_IsClosed_Variable_1) == 0x000360, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_8) == 0x000361, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Event_IsDesignTime) == 0x000362, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_Op) == 0x000368, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_Op' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsJig_SDrag_Operation_1) == 0x000370, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsJig_SDrag_Operation_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_2) == 0x000378, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_CheckRootContainer_CanAdd__1) == 0x000379, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_CheckRootContainer_CanAdd__1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsDrag_Widget_1) == 0x000380, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsDrag_Widget_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_3) == 0x000388, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_1) == 0x000389, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x00038A, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsInventory__ReturnValue_1) == 0x00038B, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsInventory__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BooleanAND_ReturnValue_1) == 0x00038C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_Rotate_) == 0x00038D, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_Rotate_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_FlipVector_) == 0x00038E, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_FlipVector_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000390, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_3) == 0x000398, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x0003A0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_9) == 0x0003A8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_2) == 0x0003A9, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_3) == 0x0003AA, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_SlateColor) == 0x0003AC, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x0003C0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetDynamicMaterial_ReturnValue_3) == 0x0003C8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetDynamicMaterial_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_SelectFloat_ReturnValue) == 0x0003D0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_10) == 0x0003D8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsEquipTo__ReturnValue) == 0x0003D9, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsVisible_ReturnValue) == 0x0003DA, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_struct_Variable_2) == 0x0003E0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_11) == 0x0003F0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_4) == 0x0003F1, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_12) == 0x0003F2, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_13) == 0x0003F3, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_LinearColor) == 0x0003F4, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_LinearColor_1) == 0x000404, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_4) == 0x000414, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default) == 0x000418, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_14) == 0x000428, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CreateDelegate_OutputDelegate) == 0x00042C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Create_ReturnValue_1) == 0x000440, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_Pending_) == 0x000448, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_Pending_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_PlaybackSpeed) == 0x000450, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_CustomEvent_TimerInSec) == 0x000458, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_CustomEvent_TimerInSec' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000460, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_PlayAnimation_ReturnValue) == 0x000468, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_SelectFloat_ReturnValue_1) == 0x000470, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_LinearColor_2) == 0x000478, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_SlateColor_1) == 0x000488, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_ISCapacityContainer_ReturnValue) == 0x00049C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetSlotSize_Size) == 0x0004A0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetSlotSize_Size' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_15) == 0x0004B0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetJigItemImage_TextureRef) == 0x0004B8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetJigItemImage_TextureRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_1) == 0x0004C0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_16) == 0x0004C8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_5) == 0x0004C9, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_real_Variable) == 0x0004D0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0004D8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_17) == 0x0004E8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_5) == 0x0004E9, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BooleanAND_ReturnValue_2) == 0x0004EA, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Greater_IntInt_ReturnValue) == 0x0004EB, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_X) == 0x0004F0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_Y) == 0x0004F8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_FTrunc_ReturnValue) == 0x000500, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_2) == 0x000504, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_FTrunc_ReturnValue_1) == 0x000508, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Conv_IntToText_ReturnValue) == 0x000510, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_CalculateSize_ReturnValue) == 0x000528, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_X_1) == 0x000538, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_Y_1) == 0x000540, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_MakeVector2D_ReturnValue) == 0x000548, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_3) == 0x000558, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_18) == 0x000568, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Create_ReturnValue_2) == 0x000570, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000578, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_4) == 0x000588, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValidClass_ReturnValue) == 0x000589, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValidClass_ReturnValue_1) == 0x00058A, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_6) == 0x00058B, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1) == 0x000590, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_5) == 0x0005A0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_AsJSISpecial_Widget_Interface_2) == 0x0005A8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_AsJSISpecial_Widget_Interface_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_DynamicCast_bSuccess_6) == 0x0005B8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetListOfContainers_Containers) == 0x0005C0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_19) == 0x0005D0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Array_Get_Item_1) == 0x0005D8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Array_Length_ReturnValue_1) == 0x0005E0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_20) == 0x0005E4, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Less_IntInt_ReturnValue_1) == 0x0005E5, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_7) == 0x0005E6, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BooleanAND_ReturnValue_3) == 0x0005E7, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_object_Variable_1) == 0x0005E8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_MakeVector2D_ReturnValue_1) == 0x0005F0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_6) == 0x000600, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_21) == 0x000601, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_22) == 0x000602, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_object_Variable_2) == 0x000608, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_AddChildToOverlay_ReturnValue) == 0x000610, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_SlateColor_2) == 0x000618, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_IsValid_ReturnValue_23) == 0x00062C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Not_PreBool_ReturnValue_8) == 0x00062D, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetBorderColorByRarity_Color) == 0x000630, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetBorderColorByRarity_Color' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_RGBToHSV_H) == 0x000640, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_RGBToHSV_H' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_RGBToHSV_S) == 0x000644, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_RGBToHSV_S' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_RGBToHSV_V) == 0x000648, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_RGBToHSV_V' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_RGBToHSV_A) == 0x00064C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_RGBToHSV_A' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_4) == 0x000650, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000668, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_SlateBrush) == 0x000670, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000740, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_5) == 0x000748, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_HSVToRGB_ReturnValue) == 0x000750, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_HSVToRGB_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetPrice_Price) == 0x000760, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetPrice_Price' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, Temp_bool_Variable_7) == 0x000768, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000770, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_FormatArgumentData) == 0x000788, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_6) == 0x0007D8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_SlateBrush_1) == 0x0007E0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_GetCurrency_Currency) == 0x0008B0, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_GetCurrency_Currency' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_FormatArgumentData_1) == 0x0008C8, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_X_2) == 0x000918, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BreakVector2D_Y_2) == 0x000920, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeArray_Array) == 0x000928, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000938, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Format_ReturnValue) == 0x000940, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_ISCapacityContainer_ReturnValue_1) == 0x000958, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_ISCapacityContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_BooleanAND_ReturnValue_4) == 0x000959, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_Select_Default_7) == 0x000960, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x000970, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000978, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00097C, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast) == 0x000980, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_A_ImplicitCast) == 0x000984, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, K2Node_MakeStruct_ImageSize_ImplicitCast_1) == 0x000988, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::K2Node_MakeStruct_ImageSize_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000990, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ExecuteUbergraph_JSI_Slot, CallFunc_HSVToRGB_V_ImplicitCast) == 0x000998, "Member 'JSI_Slot_C_ExecuteUbergraph_JSI_Slot::CallFunc_HSVToRGB_V_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.Get_SlotBorder_ToolTipWidget_0
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0 final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnHoverTooltipWidget_C*                CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0) == 0x000008, "Wrong alignment on JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0");
static_assert(sizeof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0) == 0x000028, "Wrong size on JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_Create_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_Not_PreBool_ReturnValue_1) == 0x000021, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'JSI_Slot_C_Get_SlotBorder_ToolTipWidget_0::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetBorderColorByRarity
// 0x004C (0x004C - 0x0000)
struct JSI_Slot_C_GetBorderColorByRarity final
{
public:
	struct FGameplayTag                           Rarity_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRarityColors                          CallFunc_Array_Get_Item;                           // 0x0028(0x001C)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetBorderColorByRarity) == 0x000004, "Wrong alignment on JSI_Slot_C_GetBorderColorByRarity");
static_assert(sizeof(JSI_Slot_C_GetBorderColorByRarity) == 0x00004C, "Wrong size on JSI_Slot_C_GetBorderColorByRarity");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, Rarity_0) == 0x000000, "Member 'JSI_Slot_C_GetBorderColorByRarity::Rarity_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, Color) == 0x000008, "Member 'JSI_Slot_C_GetBorderColorByRarity::Color' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSI_Slot_C_GetBorderColorByRarity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'JSI_Slot_C_GetBorderColorByRarity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetBorderColorByRarity, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000049, "Member 'JSI_Slot_C_GetBorderColorByRarity::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetClickLocation
// 0x01E8 (0x01E8 - 0x0000)
struct JSI_Slot_C_GetClickLocation final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvents;                                       // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector2D                              Output_Get;                                        // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDragPivot                                    Temp_byte_Variable;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_4;               // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_5;               // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_6;               // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_7;               // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_8;               // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetClickLocation) == 0x000008, "Wrong alignment on JSI_Slot_C_GetClickLocation");
static_assert(sizeof(JSI_Slot_C_GetClickLocation) == 0x0001E8, "Wrong size on JSI_Slot_C_GetClickLocation");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, Geometry) == 0x000000, "Member 'JSI_Slot_C_GetClickLocation::Geometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, MouseEvents) == 0x000038, "Member 'JSI_Slot_C_GetClickLocation::MouseEvents' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, Output_Get) == 0x0000B0, "Member 'JSI_Slot_C_GetClickLocation::Output_Get' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, Temp_byte_Variable) == 0x0000C0, "Member 'JSI_Slot_C_GetClickLocation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0000C8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue) == 0x0000D8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0000E8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0000F8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_X) == 0x000108, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_Y) == 0x000110, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_X_1) == 0x000118, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_Y_1) == 0x000120, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_1) == 0x000128, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000138, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000140, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_2) == 0x000148, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_3) == 0x000158, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000168, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_4) == 0x000170, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_5) == 0x000180, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_6) == 0x000190, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_X_2) == 0x0001A0, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_BreakVector2D_Y_2) == 0x0001A8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0001B0, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_7) == 0x0001B8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, CallFunc_MakeVector2D_ReturnValue_8) == 0x0001C8, "Member 'JSI_Slot_C_GetClickLocation::CallFunc_MakeVector2D_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetClickLocation, K2Node_Select_Default) == 0x0001D8, "Member 'JSI_Slot_C_GetClickLocation::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetContainerCapacity
// 0x0068 (0x0068 - 0x0000)
struct JSI_Slot_C_GetContainerCapacity final
{
public:
	int32                                         Cap;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCapacity;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalCap;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCapacity_Cap;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCapacity_Cap_1;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetContainerCapacity) == 0x000008, "Wrong alignment on JSI_Slot_C_GetContainerCapacity");
static_assert(sizeof(JSI_Slot_C_GetContainerCapacity) == 0x000068, "Wrong size on JSI_Slot_C_GetContainerCapacity");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, Cap) == 0x000000, "Member 'JSI_Slot_C_GetContainerCapacity::Cap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, MaxCapacity) == 0x000004, "Member 'JSI_Slot_C_GetContainerCapacity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, LocalCap) == 0x000008, "Member 'JSI_Slot_C_GetContainerCapacity::LocalCap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'JSI_Slot_C_GetContainerCapacity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'JSI_Slot_C_GetContainerCapacity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000018, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000020, "Member 'JSI_Slot_C_GetContainerCapacity::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'JSI_Slot_C_GetContainerCapacity::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_IsSpecialContainer__ReturnValue) == 0x000031, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_IsSpecialContainer__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_GetListOfContainers_Containers) == 0x000038, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_GetCapacity_Cap) == 0x000050, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_GetCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerCapacity, CallFunc_GetCapacity_Cap_1) == 0x000060, "Member 'JSI_Slot_C_GetContainerCapacity::CallFunc_GetCapacity_Cap_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetContainerOneRef
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_GetContainerOneRef final
{
public:
	class UUserWidget*                            ContainerRef;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetContainerOneRef) == 0x000008, "Wrong alignment on JSI_Slot_C_GetContainerOneRef");
static_assert(sizeof(JSI_Slot_C_GetContainerOneRef) == 0x000018, "Wrong size on JSI_Slot_C_GetContainerOneRef");
static_assert(offsetof(JSI_Slot_C_GetContainerOneRef, ContainerRef) == 0x000000, "Member 'JSI_Slot_C_GetContainerOneRef::ContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerOneRef, Temp_bool_Variable) == 0x000008, "Member 'JSI_Slot_C_GetContainerOneRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerOneRef, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'JSI_Slot_C_GetContainerOneRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerOneRef, K2Node_Select_Default) == 0x000010, "Member 'JSI_Slot_C_GetContainerOneRef::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetContainerRef
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_GetContainerRef final
{
public:
	class UUserWidget*                            SpecialContainerRef_0;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        SlotContainer_0;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecialContainer;                                // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetContainerRef) == 0x000008, "Wrong alignment on JSI_Slot_C_GetContainerRef");
static_assert(sizeof(JSI_Slot_C_GetContainerRef) == 0x000018, "Wrong size on JSI_Slot_C_GetContainerRef");
static_assert(offsetof(JSI_Slot_C_GetContainerRef, SpecialContainerRef_0) == 0x000000, "Member 'JSI_Slot_C_GetContainerRef::SpecialContainerRef_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerRef, SlotContainer_0) == 0x000008, "Member 'JSI_Slot_C_GetContainerRef::SlotContainer_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerRef, IsSpecialContainer) == 0x000010, "Member 'JSI_Slot_C_GetContainerRef::IsSpecialContainer' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainerRef, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_GetContainerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetContainers
// 0x0058 (0x0058 - 0x0000)
struct JSI_Slot_C_GetContainers final
{
public:
	TArray<class UJSIContainer_C*>                Container;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetContainers) == 0x000008, "Wrong alignment on JSI_Slot_C_GetContainers");
static_assert(sizeof(JSI_Slot_C_GetContainers) == 0x000058, "Wrong size on JSI_Slot_C_GetContainers");
static_assert(offsetof(JSI_Slot_C_GetContainers, Container) == 0x000000, "Member 'JSI_Slot_C_GetContainers::Container' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, CallFunc_GetContainerOneRef_ContainerRef) == 0x000010, "Member 'JSI_Slot_C_GetContainers::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, K2Node_MakeArray_Array) == 0x000018, "Member 'JSI_Slot_C_GetContainers::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000028, "Member 'JSI_Slot_C_GetContainers::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'JSI_Slot_C_GetContainers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, CallFunc_GetListOfContainers_Containers) == 0x000040, "Member 'JSI_Slot_C_GetContainers::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetContainers, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_GetContainers::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetCount
// 0x0004 (0x0004 - 0x0000)
struct JSI_Slot_C_GetCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetCount) == 0x000004, "Wrong alignment on JSI_Slot_C_GetCount");
static_assert(sizeof(JSI_Slot_C_GetCount) == 0x000004, "Wrong size on JSI_Slot_C_GetCount");
static_assert(offsetof(JSI_Slot_C_GetCount, Count) == 0x000000, "Member 'JSI_Slot_C_GetCount::Count' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetCSlotFromHosted
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_GetCSlotFromHosted final
{
public:
	class UJSIContainer_C*                        SlotContainer_0;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetCSlotFromHosted) == 0x000008, "Wrong alignment on JSI_Slot_C_GetCSlotFromHosted");
static_assert(sizeof(JSI_Slot_C_GetCSlotFromHosted) == 0x000018, "Wrong size on JSI_Slot_C_GetCSlotFromHosted");
static_assert(offsetof(JSI_Slot_C_GetCSlotFromHosted, SlotContainer_0) == 0x000000, "Member 'JSI_Slot_C_GetCSlotFromHosted::SlotContainer_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCSlotFromHosted, CallFunc_GetHostedSlot_HostingItem) == 0x000008, "Member 'JSI_Slot_C_GetCSlotFromHosted::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCSlotFromHosted, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_GetCSlotFromHosted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCSlotFromHosted, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'JSI_Slot_C_GetCSlotFromHosted::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetCurrency
// 0x0040 (0x0040 - 0x0000)
struct JSI_Slot_C_GetCurrency final
{
public:
	class FText                                   Currency;                                          // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   CurrencyLocal;                                     // 0x0018(0x0018)(Edit, BlueprintVisible)
	class UBP_JigMultiplayer_C*                   K2Node_DynamicCast_AsBP_Jig_Multiplayer;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetCurrency) == 0x000008, "Wrong alignment on JSI_Slot_C_GetCurrency");
static_assert(sizeof(JSI_Slot_C_GetCurrency) == 0x000040, "Wrong size on JSI_Slot_C_GetCurrency");
static_assert(offsetof(JSI_Slot_C_GetCurrency, Currency) == 0x000000, "Member 'JSI_Slot_C_GetCurrency::Currency' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCurrency, CurrencyLocal) == 0x000018, "Member 'JSI_Slot_C_GetCurrency::CurrencyLocal' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCurrency, K2Node_DynamicCast_AsBP_Jig_Multiplayer) == 0x000030, "Member 'JSI_Slot_C_GetCurrency::K2Node_DynamicCast_AsBP_Jig_Multiplayer' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCurrency, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'JSI_Slot_C_GetCurrency::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCurrency, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'JSI_Slot_C_GetCurrency::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetCurrency, K2Node_SwitchName_CmpSuccess) == 0x00003A, "Member 'JSI_Slot_C_GetCurrency::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetDefaultWeight
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetDefaultWeight final
{
public:
	double                                        Weight;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetDefaultWeight) == 0x000008, "Wrong alignment on JSI_Slot_C_GetDefaultWeight");
static_assert(sizeof(JSI_Slot_C_GetDefaultWeight) == 0x000008, "Wrong size on JSI_Slot_C_GetDefaultWeight");
static_assert(offsetof(JSI_Slot_C_GetDefaultWeight, Weight) == 0x000000, "Member 'JSI_Slot_C_GetDefaultWeight::Weight' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetDurability
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_GetDurability final
{
public:
	double                                        Durability_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDurability;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetDurability) == 0x000008, "Wrong alignment on JSI_Slot_C_GetDurability");
static_assert(sizeof(JSI_Slot_C_GetDurability) == 0x000010, "Wrong size on JSI_Slot_C_GetDurability");
static_assert(offsetof(JSI_Slot_C_GetDurability, Durability_0) == 0x000000, "Member 'JSI_Slot_C_GetDurability::Durability_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetDurability, MaxDurability) == 0x000008, "Member 'JSI_Slot_C_GetDurability::MaxDurability' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetFreeSpace
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetFreeSpace final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetFreeSpace) == 0x000004, "Wrong alignment on JSI_Slot_C_GetFreeSpace");
static_assert(sizeof(JSI_Slot_C_GetFreeSpace) == 0x000008, "Wrong size on JSI_Slot_C_GetFreeSpace");
static_assert(offsetof(JSI_Slot_C_GetFreeSpace, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_GetFreeSpace::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetFreeSpace, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'JSI_Slot_C_GetFreeSpace::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetHostedSlot
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetHostedSlot final
{
public:
	class UJSI_Slot_C*                            HostingItem;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetHostedSlot) == 0x000008, "Wrong alignment on JSI_Slot_C_GetHostedSlot");
static_assert(sizeof(JSI_Slot_C_GetHostedSlot) == 0x000008, "Wrong size on JSI_Slot_C_GetHostedSlot");
static_assert(offsetof(JSI_Slot_C_GetHostedSlot, HostingItem) == 0x000000, "Member 'JSI_Slot_C_GetHostedSlot::HostingItem' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetItemID
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetItemID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetItemID) == 0x000004, "Wrong alignment on JSI_Slot_C_GetItemID");
static_assert(sizeof(JSI_Slot_C_GetItemID) == 0x000008, "Wrong size on JSI_Slot_C_GetItemID");
static_assert(offsetof(JSI_Slot_C_GetItemID, ItemId) == 0x000000, "Member 'JSI_Slot_C_GetItemID::ItemId' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_GetItemName final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(JSI_Slot_C_GetItemName) == 0x000008, "Wrong alignment on JSI_Slot_C_GetItemName");
static_assert(sizeof(JSI_Slot_C_GetItemName) == 0x000018, "Wrong size on JSI_Slot_C_GetItemName");
static_assert(offsetof(JSI_Slot_C_GetItemName, Name_0) == 0x000000, "Member 'JSI_Slot_C_GetItemName::Name_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetJigDA
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetJigDA final
{
public:
	class UJigsawItem_DataAsset_C*                JigDataAsset_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetJigDA) == 0x000008, "Wrong alignment on JSI_Slot_C_GetJigDA");
static_assert(sizeof(JSI_Slot_C_GetJigDA) == 0x000008, "Wrong size on JSI_Slot_C_GetJigDA");
static_assert(offsetof(JSI_Slot_C_GetJigDA, JigDataAsset_0) == 0x000000, "Member 'JSI_Slot_C_GetJigDA::JigDataAsset_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetJigItemImage
// 0x0040 (0x0040 - 0x0000)
struct JSI_Slot_C_GetJigItemImage final
{
public:
	class UTexture*                               TextureRef;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIT_ItemSnapCaptor_C>  K2Node_DynamicCast_AsIT_Item_Snap_Captor;          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_GetSnap_Texture;                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetJigItemImage) == 0x000008, "Wrong alignment on JSI_Slot_C_GetJigItemImage");
static_assert(sizeof(JSI_Slot_C_GetJigItemImage) == 0x000040, "Wrong size on JSI_Slot_C_GetJigItemImage");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, TextureRef) == 0x000000, "Member 'JSI_Slot_C_GetJigItemImage::TextureRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_GetJigItemImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_GetJigItemImage::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, K2Node_DynamicCast_AsIT_Item_Snap_Captor) == 0x000018, "Member 'JSI_Slot_C_GetJigItemImage::K2Node_DynamicCast_AsIT_Item_Snap_Captor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSI_Slot_C_GetJigItemImage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, CallFunc_GetSnap_Texture) == 0x000030, "Member 'JSI_Slot_C_GetJigItemImage::CallFunc_GetSnap_Texture' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetJigItemImage, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'JSI_Slot_C_GetJigItemImage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetLenOfItemsInContainer
// 0x0070 (0x0070 - 0x0000)
struct JSI_Slot_C_GetLenOfItemsInContainer final
{
public:
	int32                                         Output_Get;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLength_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetLenOfItemsInContainer) == 0x000008, "Wrong alignment on JSI_Slot_C_GetLenOfItemsInContainer");
static_assert(sizeof(JSI_Slot_C_GetLenOfItemsInContainer) == 0x000070, "Wrong size on JSI_Slot_C_GetLenOfItemsInContainer");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, Output_Get) == 0x000000, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::Output_Get' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, Length) == 0x000004, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::Length' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_GetContainerOneRef_ContainerRef) == 0x000018, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000028, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_GetListOfContainers_Containers) == 0x000040, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_Array_Get_Item) == 0x000058, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_GetLength_ReturnValue) == 0x000064, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_GetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetLenOfItemsInContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'JSI_Slot_C_GetLenOfItemsInContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetMaxStack
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_GetMaxStack final
{
public:
	bool                                          CheckCapacityContainer_;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStack;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetContainerCapacity_Cap;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetContainerCapacity_MaxCapacity;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetMaxStack) == 0x000004, "Wrong alignment on JSI_Slot_C_GetMaxStack");
static_assert(sizeof(JSI_Slot_C_GetMaxStack) == 0x000018, "Wrong size on JSI_Slot_C_GetMaxStack");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CheckCapacityContainer_) == 0x000000, "Member 'JSI_Slot_C_GetMaxStack::CheckCapacityContainer_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, MaxStack) == 0x000004, "Member 'JSI_Slot_C_GetMaxStack::MaxStack' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_GetContainerCapacity_Cap) == 0x00000C, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_GetContainerCapacity_Cap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_GetContainerCapacity_MaxCapacity) == 0x000010, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_GetContainerCapacity_MaxCapacity' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetMaxStack, CallFunc_ISCapacityContainer_ReturnValue) == 0x000015, "Member 'JSI_Slot_C_GetMaxStack::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetPendingAttachments
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_GetPendingAttachments final
{
public:
	TArray<class FName>                           PendingSnapAttachements_0;                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(JSI_Slot_C_GetPendingAttachments) == 0x000008, "Wrong alignment on JSI_Slot_C_GetPendingAttachments");
static_assert(sizeof(JSI_Slot_C_GetPendingAttachments) == 0x000010, "Wrong size on JSI_Slot_C_GetPendingAttachments");
static_assert(offsetof(JSI_Slot_C_GetPendingAttachments, PendingSnapAttachements_0) == 0x000000, "Member 'JSI_Slot_C_GetPendingAttachments::PendingSnapAttachements_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetPrice
// 0x0130 (0x0130 - 0x0000)
struct JSI_Slot_C_GetPrice final
{
public:
	double                                        Price_0;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PriceOfItems;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    AllItems;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	double                                        FinalPrice;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDurability_Durability;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDurability_MaxDurability;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_JigCompInfo_C>    K2Node_DynamicCast_AsBPI_Jig_Comp_Info;            // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JigCom_IsVendor_Result;                   // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetContainerOneRef_ContainerRef;          // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetPrice) == 0x000008, "Wrong alignment on JSI_Slot_C_GetPrice");
static_assert(sizeof(JSI_Slot_C_GetPrice) == 0x000130, "Wrong size on JSI_Slot_C_GetPrice");
static_assert(offsetof(JSI_Slot_C_GetPrice, Price_0) == 0x000000, "Member 'JSI_Slot_C_GetPrice::Price_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, PriceOfItems) == 0x000008, "Member 'JSI_Slot_C_GetPrice::PriceOfItems' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, AllItems) == 0x000010, "Member 'JSI_Slot_C_GetPrice::AllItems' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, FinalPrice) == 0x000020, "Member 'JSI_Slot_C_GetPrice::FinalPrice' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSI_Slot_C_GetPrice::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'JSI_Slot_C_GetPrice::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_GetPrice::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, Temp_int_Array_Index_Variable_1) == 0x000034, "Member 'JSI_Slot_C_GetPrice::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_GetDurability_Durability) == 0x000038, "Member 'JSI_Slot_C_GetPrice::CallFunc_GetDurability_Durability' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_GetDurability_MaxDurability) == 0x000040, "Member 'JSI_Slot_C_GetPrice::CallFunc_GetDurability_MaxDurability' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_GetPrice::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_BreakVector2D_X) == 0x000058, "Member 'JSI_Slot_C_GetPrice::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_BreakVector2D_Y) == 0x000060, "Member 'JSI_Slot_C_GetPrice::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, K2Node_DynamicCast_AsBPI_Jig_Comp_Info) == 0x000068, "Member 'JSI_Slot_C_GetPrice::K2Node_DynamicCast_AsBPI_Jig_Comp_Info' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'JSI_Slot_C_GetPrice::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000079, "Member 'JSI_Slot_C_GetPrice::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_JigCom_IsVendor_Result) == 0x00007A, "Member 'JSI_Slot_C_GetPrice::CallFunc_JigCom_IsVendor_Result' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_NormalizeToRange_ReturnValue) == 0x000080, "Member 'JSI_Slot_C_GetPrice::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_GetContainerOneRef_ContainerRef) == 0x000088, "Member 'JSI_Slot_C_GetPrice::CallFunc_GetContainerOneRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000090, "Member 'JSI_Slot_C_GetPrice::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'JSI_Slot_C_GetPrice::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'JSI_Slot_C_GetPrice::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_GetListOfContainers_Containers) == 0x0000B0, "Member 'JSI_Slot_C_GetPrice::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_FTrunc_ReturnValue) == 0x0000C0, "Member 'JSI_Slot_C_GetPrice::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'JSI_Slot_C_GetPrice::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D0, "Member 'JSI_Slot_C_GetPrice::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_SelectFloat_ReturnValue) == 0x0000D8, "Member 'JSI_Slot_C_GetPrice::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'JSI_Slot_C_GetPrice::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Less_IntInt_ReturnValue) == 0x0000E4, "Member 'JSI_Slot_C_GetPrice::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_IsValid_ReturnValue) == 0x0000E5, "Member 'JSI_Slot_C_GetPrice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'JSI_Slot_C_GetPrice::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'JSI_Slot_C_GetPrice::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_GetCount_Count) == 0x0000F8, "Member 'JSI_Slot_C_GetPrice::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000100, "Member 'JSI_Slot_C_GetPrice::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Array_Length_ReturnValue_1) == 0x000108, "Member 'JSI_Slot_C_GetPrice::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000110, "Member 'JSI_Slot_C_GetPrice::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, Temp_int_Loop_Counter_Variable_1) == 0x000118, "Member 'JSI_Slot_C_GetPrice::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000120, "Member 'JSI_Slot_C_GetPrice::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Less_IntInt_ReturnValue_1) == 0x000128, "Member 'JSI_Slot_C_GetPrice::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetPrice, CallFunc_Add_IntInt_ReturnValue_1) == 0x00012C, "Member 'JSI_Slot_C_GetPrice::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetSlotDim
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_GetSlotDim final
{
public:
	struct FVector2D                              SlotDimension;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetSlotDim) == 0x000008, "Wrong alignment on JSI_Slot_C_GetSlotDim");
static_assert(sizeof(JSI_Slot_C_GetSlotDim) == 0x000010, "Wrong size on JSI_Slot_C_GetSlotDim");
static_assert(offsetof(JSI_Slot_C_GetSlotDim, SlotDimension) == 0x000000, "Member 'JSI_Slot_C_GetSlotDim::SlotDimension' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetSlotDimUnrotated
// 0x0038 (0x0038 - 0x0000)
struct JSI_Slot_C_GetSlotDimUnrotated final
{
public:
	struct FVector2D                              SlotDimension;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetSlotDimUnrotated) == 0x000008, "Wrong alignment on JSI_Slot_C_GetSlotDimUnrotated");
static_assert(sizeof(JSI_Slot_C_GetSlotDimUnrotated) == 0x000038, "Wrong size on JSI_Slot_C_GetSlotDimUnrotated");
static_assert(offsetof(JSI_Slot_C_GetSlotDimUnrotated, SlotDimension) == 0x000000, "Member 'JSI_Slot_C_GetSlotDimUnrotated::SlotDimension' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotDimUnrotated, CallFunc_isRotated__ReturnValue) == 0x000010, "Member 'JSI_Slot_C_GetSlotDimUnrotated::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotDimUnrotated, CallFunc_BreakVector2D_X) == 0x000018, "Member 'JSI_Slot_C_GetSlotDimUnrotated::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotDimUnrotated, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'JSI_Slot_C_GetSlotDimUnrotated::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotDimUnrotated, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_GetSlotDimUnrotated::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetSlotIndexOnDrop
// 0x0004 (0x0004 - 0x0000)
struct JSI_Slot_C_GetSlotIndexOnDrop final
{
public:
	int32                                         SlotIndex_0;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetSlotIndexOnDrop) == 0x000004, "Wrong alignment on JSI_Slot_C_GetSlotIndexOnDrop");
static_assert(sizeof(JSI_Slot_C_GetSlotIndexOnDrop) == 0x000004, "Wrong size on JSI_Slot_C_GetSlotIndexOnDrop");
static_assert(offsetof(JSI_Slot_C_GetSlotIndexOnDrop, SlotIndex_0) == 0x000000, "Member 'JSI_Slot_C_GetSlotIndexOnDrop::SlotIndex_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetSlotSize
// 0x0058 (0x0058 - 0x0000)
struct JSI_Slot_C_GetSlotSize final
{
public:
	struct FVector2D                              Size_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetSlotSize) == 0x000008, "Wrong alignment on JSI_Slot_C_GetSlotSize");
static_assert(sizeof(JSI_Slot_C_GetSlotSize) == 0x000058, "Wrong size on JSI_Slot_C_GetSlotSize");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, Size_0) == 0x000000, "Member 'JSI_Slot_C_GetSlotSize::Size_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, Temp_bool_Variable) == 0x000010, "Member 'JSI_Slot_C_GetSlotSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, Temp_bool_Variable_1) == 0x000011, "Member 'JSI_Slot_C_GetSlotSize::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, CallFunc_IsEquipTo__ReturnValue) == 0x000012, "Member 'JSI_Slot_C_GetSlotSize::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, K2Node_Select_Default) == 0x000018, "Member 'JSI_Slot_C_GetSlotSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_GetSlotSize::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, CallFunc_CalculateSizeCustom_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_GetSlotSize::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, K2Node_Select_Default_1) == 0x000040, "Member 'JSI_Slot_C_GetSlotSize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetSlotSize, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_GetSlotSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetSpecialContainerRef
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetSpecialContainerRef final
{
public:
	class UUserWidget*                            SpecialContainerRef_0;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetSpecialContainerRef) == 0x000008, "Wrong alignment on JSI_Slot_C_GetSpecialContainerRef");
static_assert(sizeof(JSI_Slot_C_GetSpecialContainerRef) == 0x000008, "Wrong size on JSI_Slot_C_GetSpecialContainerRef");
static_assert(offsetof(JSI_Slot_C_GetSpecialContainerRef, SpecialContainerRef_0) == 0x000000, "Member 'JSI_Slot_C_GetSpecialContainerRef::SpecialContainerRef_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetStatByName
// 0x0078 (0x0078 - 0x0000)
struct JSI_Slot_C_GetStatByName final
{
public:
	struct FGameplayTag                           STAT_TAG;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemStat                            Stat;                                              // 0x0010(0x0028)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemStat                            CallFunc_Array_Get_Item;                           // 0x0048(0x0028)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetStatByName) == 0x000008, "Wrong alignment on JSI_Slot_C_GetStatByName");
static_assert(sizeof(JSI_Slot_C_GetStatByName) == 0x000078, "Wrong size on JSI_Slot_C_GetStatByName");
static_assert(offsetof(JSI_Slot_C_GetStatByName, STAT_TAG) == 0x000000, "Member 'JSI_Slot_C_GetStatByName::STAT_TAG' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, Found) == 0x000008, "Member 'JSI_Slot_C_GetStatByName::Found' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, Stat) == 0x000010, "Member 'JSI_Slot_C_GetStatByName::Stat' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, Temp_int_Array_Index_Variable) == 0x000038, "Member 'JSI_Slot_C_GetStatByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'JSI_Slot_C_GetStatByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_GetStatByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, CallFunc_Array_Get_Item) == 0x000048, "Member 'JSI_Slot_C_GetStatByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'JSI_Slot_C_GetStatByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'JSI_Slot_C_GetStatByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_GetStatByName, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000075, "Member 'JSI_Slot_C_GetStatByName::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetStats
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_GetStats final
{
public:
	TArray<struct FS_ItemStat>                    ItemStats_0;                                       // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(JSI_Slot_C_GetStats) == 0x000008, "Wrong alignment on JSI_Slot_C_GetStats");
static_assert(sizeof(JSI_Slot_C_GetStats) == 0x000010, "Wrong size on JSI_Slot_C_GetStats");
static_assert(offsetof(JSI_Slot_C_GetStats, ItemStats_0) == 0x000000, "Member 'JSI_Slot_C_GetStats::ItemStats_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetType
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetType) == 0x000004, "Wrong alignment on JSI_Slot_C_GetType");
static_assert(sizeof(JSI_Slot_C_GetType) == 0x000008, "Wrong size on JSI_Slot_C_GetType");
static_assert(offsetof(JSI_Slot_C_GetType, Type) == 0x000000, "Member 'JSI_Slot_C_GetType::Type' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetUniqueID
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_GetUniqueID final
{
public:
	struct FGuid                                  UniqueServerID;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetUniqueID) == 0x000004, "Wrong alignment on JSI_Slot_C_GetUniqueID");
static_assert(sizeof(JSI_Slot_C_GetUniqueID) == 0x000010, "Wrong size on JSI_Slot_C_GetUniqueID");
static_assert(offsetof(JSI_Slot_C_GetUniqueID, UniqueServerID) == 0x000000, "Member 'JSI_Slot_C_GetUniqueID::UniqueServerID' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.GetWeight
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_GetWeight final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_GetWeight) == 0x000008, "Wrong alignment on JSI_Slot_C_GetWeight");
static_assert(sizeof(JSI_Slot_C_GetWeight) == 0x000008, "Wrong size on JSI_Slot_C_GetWeight");
static_assert(offsetof(JSI_Slot_C_GetWeight, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_GetWeight::ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.HandleSizeBox
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_HandleSizeBox final
{
public:
	double                                        CallFunc_BreakVector2D_X;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_HandleSizeBox) == 0x000008, "Wrong alignment on JSI_Slot_C_HandleSizeBox");
static_assert(sizeof(JSI_Slot_C_HandleSizeBox) == 0x000018, "Wrong size on JSI_Slot_C_HandleSizeBox");
static_assert(offsetof(JSI_Slot_C_HandleSizeBox, CallFunc_BreakVector2D_X) == 0x000000, "Member 'JSI_Slot_C_HandleSizeBox::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_HandleSizeBox, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'JSI_Slot_C_HandleSizeBox::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_HandleSizeBox, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000010, "Member 'JSI_Slot_C_HandleSizeBox::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_HandleSizeBox, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000014, "Member 'JSI_Slot_C_HandleSizeBox::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.HasPendingAttachments
// 0x0002 (0x0002 - 0x0000)
struct JSI_Slot_C_HasPendingAttachments final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_HasPendingAttachments) == 0x000001, "Wrong alignment on JSI_Slot_C_HasPendingAttachments");
static_assert(sizeof(JSI_Slot_C_HasPendingAttachments) == 0x000002, "Wrong size on JSI_Slot_C_HasPendingAttachments");
static_assert(offsetof(JSI_Slot_C_HasPendingAttachments, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_HasPendingAttachments::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_HasPendingAttachments, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_HasPendingAttachments::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsALTDown
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_IsALTDown final
{
public:
	bool                                          CTRL_Down_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDown_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsALTDown) == 0x000008, "Wrong alignment on JSI_Slot_C_IsALTDown");
static_assert(sizeof(JSI_Slot_C_IsALTDown) == 0x000018, "Wrong size on JSI_Slot_C_IsALTDown");
static_assert(offsetof(JSI_Slot_C_IsALTDown, CTRL_Down_0) == 0x000000, "Member 'JSI_Slot_C_IsALTDown::CTRL_Down_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsALTDown, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_IsALTDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsALTDown, CallFunc_IsInputKeyDown_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_IsALTDown::CallFunc_IsInputKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsALTDown, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_IsALTDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ISCapacityContainer
// 0x0003 (0x0003 - 0x0000)
struct JSI_Slot_C_ISCapacityContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ISCapacityContainer) == 0x000001, "Wrong alignment on JSI_Slot_C_ISCapacityContainer");
static_assert(sizeof(JSI_Slot_C_ISCapacityContainer) == 0x000003, "Wrong size on JSI_Slot_C_ISCapacityContainer");
static_assert(offsetof(JSI_Slot_C_ISCapacityContainer, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_ISCapacityContainer::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ISCapacityContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_ISCapacityContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ISCapacityContainer, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'JSI_Slot_C_ISCapacityContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsContainer?
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_IsContainer_ final
{
public:
	bool                                          IsContainer__0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsContainer_) == 0x000001, "Wrong alignment on JSI_Slot_C_IsContainer_");
static_assert(sizeof(JSI_Slot_C_IsContainer_) == 0x000001, "Wrong size on JSI_Slot_C_IsContainer_");
static_assert(offsetof(JSI_Slot_C_IsContainer_, IsContainer__0) == 0x000000, "Member 'JSI_Slot_C_IsContainer_::IsContainer__0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsCTRLDown
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_IsCTRLDown final
{
public:
	bool                                          CTRL_Down_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDown_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsCTRLDown) == 0x000008, "Wrong alignment on JSI_Slot_C_IsCTRLDown");
static_assert(sizeof(JSI_Slot_C_IsCTRLDown) == 0x000018, "Wrong size on JSI_Slot_C_IsCTRLDown");
static_assert(offsetof(JSI_Slot_C_IsCTRLDown, CTRL_Down_0) == 0x000000, "Member 'JSI_Slot_C_IsCTRLDown::CTRL_Down_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsCTRLDown, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_IsCTRLDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsCTRLDown, CallFunc_IsInputKeyDown_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_IsCTRLDown::CallFunc_IsInputKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsCTRLDown, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_IsCTRLDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsEmptySlot
// 0x0003 (0x0003 - 0x0000)
struct JSI_Slot_C_IsEmptySlot final
{
public:
	bool                                          IsEmpty_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsEmptySlot) == 0x000001, "Wrong alignment on JSI_Slot_C_IsEmptySlot");
static_assert(sizeof(JSI_Slot_C_IsEmptySlot) == 0x000003, "Wrong size on JSI_Slot_C_IsEmptySlot");
static_assert(offsetof(JSI_Slot_C_IsEmptySlot, IsEmpty_0) == 0x000000, "Member 'JSI_Slot_C_IsEmptySlot::IsEmpty_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsEmptySlot, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_IsEmptySlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsEmptySlot, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'JSI_Slot_C_IsEmptySlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsItemPending?
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_IsItemPending_ final
{
public:
	bool                                          IsPending_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsItemPending_) == 0x000001, "Wrong alignment on JSI_Slot_C_IsItemPending_");
static_assert(sizeof(JSI_Slot_C_IsItemPending_) == 0x000001, "Wrong size on JSI_Slot_C_IsItemPending_");
static_assert(offsetof(JSI_Slot_C_IsItemPending_, IsPending_0) == 0x000000, "Member 'JSI_Slot_C_IsItemPending_::IsPending_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsPendingSnap?
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_IsPendingSnap_ final
{
public:
	bool                                          PendingSnap_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsPendingSnap_) == 0x000001, "Wrong alignment on JSI_Slot_C_IsPendingSnap_");
static_assert(sizeof(JSI_Slot_C_IsPendingSnap_) == 0x000001, "Wrong size on JSI_Slot_C_IsPendingSnap_");
static_assert(offsetof(JSI_Slot_C_IsPendingSnap_, PendingSnap_0) == 0x000000, "Member 'JSI_Slot_C_IsPendingSnap_::PendingSnap_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.isRotated?
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_isRotated_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_isRotated_) == 0x000008, "Wrong alignment on JSI_Slot_C_isRotated_");
static_assert(sizeof(JSI_Slot_C_isRotated_) == 0x000028, "Wrong size on JSI_Slot_C_isRotated_");
static_assert(offsetof(JSI_Slot_C_isRotated_, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_isRotated_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_isRotated_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_IsEquipTo__ReturnValue) == 0x000002, "Member 'JSI_Slot_C_isRotated_::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'JSI_Slot_C_isRotated_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_isRotated_::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'JSI_Slot_C_isRotated_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_isRotated_::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_isRotated_::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_Not_PreBool_ReturnValue_1) == 0x000019, "Member 'JSI_Slot_C_isRotated_::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_isRotated_, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'JSI_Slot_C_isRotated_::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsSHIFTDown
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_IsSHIFTDown final
{
public:
	bool                                          CTRL_Down_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDown_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsSHIFTDown) == 0x000008, "Wrong alignment on JSI_Slot_C_IsSHIFTDown");
static_assert(sizeof(JSI_Slot_C_IsSHIFTDown) == 0x000018, "Wrong size on JSI_Slot_C_IsSHIFTDown");
static_assert(offsetof(JSI_Slot_C_IsSHIFTDown, CTRL_Down_0) == 0x000000, "Member 'JSI_Slot_C_IsSHIFTDown::CTRL_Down_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsSHIFTDown, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_IsSHIFTDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsSHIFTDown, CallFunc_IsInputKeyDown_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_IsSHIFTDown::CallFunc_IsInputKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsSHIFTDown, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_IsSHIFTDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsSnapOnStandBy
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_IsSnapOnStandBy final
{
public:
	bool                                          SnapIsOnStandby_0;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsSnapOnStandBy) == 0x000001, "Wrong alignment on JSI_Slot_C_IsSnapOnStandBy");
static_assert(sizeof(JSI_Slot_C_IsSnapOnStandBy) == 0x000001, "Wrong size on JSI_Slot_C_IsSnapOnStandBy");
static_assert(offsetof(JSI_Slot_C_IsSnapOnStandBy, SnapIsOnStandby_0) == 0x000000, "Member 'JSI_Slot_C_IsSnapOnStandBy::SnapIsOnStandby_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsSpecialContainer?
// 0x0002 (0x0002 - 0x0000)
struct JSI_Slot_C_IsSpecialContainer_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsSpecialContainer_) == 0x000001, "Wrong alignment on JSI_Slot_C_IsSpecialContainer_");
static_assert(sizeof(JSI_Slot_C_IsSpecialContainer_) == 0x000002, "Wrong size on JSI_Slot_C_IsSpecialContainer_");
static_assert(offsetof(JSI_Slot_C_IsSpecialContainer_, ReturnValue) == 0x000000, "Member 'JSI_Slot_C_IsSpecialContainer_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsSpecialContainer_, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'JSI_Slot_C_IsSpecialContainer_::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.IsStillValid
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_IsStillValid final
{
public:
	class UJSI_Slot_C*                            Slot_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_IsStillValid) == 0x000008, "Wrong alignment on JSI_Slot_C_IsStillValid");
static_assert(sizeof(JSI_Slot_C_IsStillValid) == 0x000028, "Wrong size on JSI_Slot_C_IsStillValid");
static_assert(offsetof(JSI_Slot_C_IsStillValid, Slot_0) == 0x000000, "Member 'JSI_Slot_C_IsStillValid::Slot_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, Valid) == 0x000008, "Member 'JSI_Slot_C_IsStillValid::Valid' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'JSI_Slot_C_IsStillValid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSI_Slot_C_IsStillValid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_IsEmptySlot_isEmpty) == 0x000018, "Member 'JSI_Slot_C_IsStillValid::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'JSI_Slot_C_IsStillValid::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'JSI_Slot_C_IsStillValid::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_IsStillValid, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_IsStillValid::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.LockSlot
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_LockSlot final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
	float                                         K2Node_MakeStruct_A_ImplicitCast;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_LockSlot) == 0x000004, "Wrong alignment on JSI_Slot_C_LockSlot");
static_assert(sizeof(JSI_Slot_C_LockSlot) == 0x000028, "Wrong size on JSI_Slot_C_LockSlot");
static_assert(offsetof(JSI_Slot_C_LockSlot, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'JSI_Slot_C_LockSlot::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_LockSlot, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'JSI_Slot_C_LockSlot::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_LockSlot, K2Node_MakeStruct_A_ImplicitCast) == 0x000024, "Member 'JSI_Slot_C_LockSlot::K2Node_MakeStruct_A_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.On_MouseDoubleClick
// 0x0388 (0x0388 - 0x0000)
struct JSI_Slot_C_On_MouseDoubleClick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0170(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_1;        // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UContainerWindowWidget_C*               CallFunc_Create_ReturnValue;                       // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InspectorCanvas_C*                  CallFunc_CreateInspectCanvas_Output_Get;           // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_2;              // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_2;        // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UContainerWindowWidget_C*               CallFunc_Create_ReturnValue_1;                     // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_3;              // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1; // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_3;        // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23B[0x5];                                      // 0x023B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_JigCompInfo_C>    K2Node_DynamicCast_AsBPI_Jig_Comp_Info;            // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JigCom_IsVendor_Result;                   // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0253(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpecialContainer__ReturnValue;          // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0257(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InspectorCanvas_C*                  CallFunc_Create_ReturnValue_2;                     // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_MakeStruct_Key;                             // 0x0268(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0283(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanOpenSpecialContainer__Return_value;    // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0288(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0293(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_1;                   // 0x0298(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A3[0x5];                                      // 0x02A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_4;              // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_4;        // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02C8(0x00B8)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0382(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0383(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_On_MouseDoubleClick) == 0x000008, "Wrong alignment on JSI_Slot_C_On_MouseDoubleClick");
static_assert(sizeof(JSI_Slot_C_On_MouseDoubleClick) == 0x000388, "Wrong size on JSI_Slot_C_On_MouseDoubleClick");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_On_MouseDoubleClick::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, MouseEvent) == 0x000038, "Member 'JSI_Slot_C_On_MouseDoubleClick::MouseEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, ReturnValue) == 0x0000B0, "Member 'JSI_Slot_C_On_MouseDoubleClick::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetPlayerPawn_ReturnValue) == 0x000168, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000170, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000189, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetComponentByClass_ReturnValue) == 0x000190, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000198, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_1) == 0x0001A0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_2) == 0x0001A1, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0001A8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Create_ReturnValue) == 0x0001B0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_3) == 0x0001B8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_CreateInspectCanvas_Output_Get) == 0x0001C0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_CreateInspectCanvas_Output_Get' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetPlayerPawn_ReturnValue_2) == 0x0001C8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetPlayerPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_4) == 0x0001D0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x0001D8, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_bSuccess) == 0x0001E8, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetComponentByClass_ReturnValue_2) == 0x0001F0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Create_ReturnValue_1) == 0x0001F8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_5) == 0x000200, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetPlayerPawn_ReturnValue_3) == 0x000208, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetPlayerPawn_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_6) == 0x000210, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1) == 0x000218, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_bSuccess_1) == 0x000228, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetComponentByClass_ReturnValue_3) == 0x000230, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetComponentByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_7) == 0x000238, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000239, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetBoolCVar_ReturnValue) == 0x00023A, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_AsBPI_Jig_Comp_Info) == 0x000240, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_AsBPI_Jig_Comp_Info' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_DynamicCast_bSuccess_2) == 0x000250, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_8) == 0x000251, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_JigCom_IsVendor_Result) == 0x000252, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_JigCom_IsVendor_Result' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValidClass_ReturnValue) == 0x000253, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue) == 0x000254, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsSpecialContainer__ReturnValue) == 0x000255, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsSpecialContainer__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_1) == 0x000256, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsEquipTo__ReturnValue) == 0x000257, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_2) == 0x000258, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_9) == 0x000259, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Create_ReturnValue_2) == 0x000260, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, K2Node_MakeStruct_Key) == 0x000268, "Member 'JSI_Slot_C_On_MouseDoubleClick::K2Node_MakeStruct_Key' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000280, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsItemPending__IsPending) == 0x000281, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanOR_ReturnValue) == 0x000282, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_3) == 0x000283, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_CanOpenSpecialContainer__Return_value) == 0x000284, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_CanOpenSpecialContainer__Return_value' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_AddChild_ReturnValue) == 0x000288, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_4) == 0x000290, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanOR_ReturnValue_1) == 0x000291, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue) == 0x000292, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_5) == 0x000293, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue_1) == 0x000294, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsVisible_ReturnValue) == 0x000295, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_AddChild_ReturnValue_1) == 0x000298, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_AddChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_10) == 0x0002A0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_11) == 0x0002A1, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_12) == 0x0002A2, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetPlayerPawn_ReturnValue_4) == 0x0002A8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetPlayerPawn_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_13) == 0x0002B0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_GetComponentByClass_ReturnValue_4) == 0x0002B8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_GetComponentByClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_IsValid_ReturnValue_14) == 0x0002C0, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Handled_ReturnValue) == 0x0002C8, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_Not_PreBool_ReturnValue_6) == 0x000380, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue_2) == 0x000381, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue_3) == 0x000382, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue_4) == 0x000383, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_On_MouseDoubleClick, CallFunc_BooleanAND_ReturnValue_5) == 0x000384, "Member 'JSI_Slot_C_On_MouseDoubleClick::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnDragCancelled
// 0x0080 (0x0080 - 0x0000)
struct JSI_Slot_C_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OnDragCancelled) == 0x000008, "Wrong alignment on JSI_Slot_C_OnDragCancelled");
static_assert(sizeof(JSI_Slot_C_OnDragCancelled) == 0x000080, "Wrong size on JSI_Slot_C_OnDragCancelled");
static_assert(offsetof(JSI_Slot_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'JSI_Slot_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragCancelled, Operation) == 0x000078, "Member 'JSI_Slot_C_OnDragCancelled::Operation' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnDragDetected
// 0x0190 (0x0190 - 0x0000)
struct JSI_Slot_C_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          CallFunc_Create_ReturnValue;                       // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   CallFunc_CreateDragDropOperation_ReturnValue;      // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDragPivot                                    Temp_byte_Variable_2;                              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x010C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventory__ReturnValue;                 // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue_1;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDragPivot                                    K2Node_Select_Default_1;                           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDown_ReturnValue;               // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OnDragDetected) == 0x000008, "Wrong alignment on JSI_Slot_C_OnDragDetected");
static_assert(sizeof(JSI_Slot_C_OnDragDetected) == 0x000190, "Wrong size on JSI_Slot_C_OnDragDetected");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'JSI_Slot_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Operation) == 0x0000B0, "Member 'JSI_Slot_C_OnDragDetected::Operation' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_bool_Variable) == 0x0000B8, "Member 'JSI_Slot_C_OnDragDetected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_byte_Variable) == 0x0000B9, "Member 'JSI_Slot_C_OnDragDetected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_byte_Variable_1) == 0x0000BA, "Member 'JSI_Slot_C_OnDragDetected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_bool_Variable_1) == 0x0000BB, "Member 'JSI_Slot_C_OnDragDetected::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Create_ReturnValue) == 0x0000C0, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_CreateDragDropOperation_ReturnValue) == 0x0000C8, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_CreateDragDropOperation_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'JSI_Slot_C_OnDragDetected::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D4, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_int_Loop_Counter_Variable) == 0x0000D8, "Member 'JSI_Slot_C_OnDragDetected::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_BooleanAND_ReturnValue) == 0x0000DC, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Add_IntInt_ReturnValue) == 0x0000E0, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_byte_Variable_2) == 0x0000E4, "Member 'JSI_Slot_C_OnDragDetected::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0000E8, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_IsEquipTo__ReturnValue) == 0x0000F8, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_bool_Variable_2) == 0x0000F9, "Member 'JSI_Slot_C_OnDragDetected::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_BooleanAND_ReturnValue_1) == 0x0000FA, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_MakeStruct_LinearColor) == 0x0000FC, "Member 'JSI_Slot_C_OnDragDetected::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_MakeStruct_LinearColor_1) == 0x00010C, "Member 'JSI_Slot_C_OnDragDetected::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_Select_Default) == 0x00011C, "Member 'JSI_Slot_C_OnDragDetected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_IsInventory__ReturnValue) == 0x00011D, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_IsInventory__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_IsEquipTo__ReturnValue_1) == 0x00011E, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_IsEquipTo__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00011F, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_BooleanAND_ReturnValue_2) == 0x000120, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_GetPlayerController_ReturnValue) == 0x000128, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_Select_Default_1) == 0x000130, "Member 'JSI_Slot_C_OnDragDetected::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_IsInputKeyDown_ReturnValue) == 0x000131, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_IsInputKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_BooleanAND_ReturnValue_3) == 0x000132, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000138, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000140, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_SelectFloat_ReturnValue) == 0x000148, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, Temp_bool_Variable_3) == 0x000150, "Member 'JSI_Slot_C_OnDragDetected::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_Select_Default_2) == 0x000158, "Member 'JSI_Slot_C_OnDragDetected::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Array_Get_Item) == 0x000168, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Array_Length_ReturnValue) == 0x000170, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_Less_IntInt_ReturnValue) == 0x000174, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000175, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, K2Node_Select_Default_3) == 0x000178, "Member 'JSI_Slot_C_OnDragDetected::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragDetected, CallFunc_SelectFloat_B_ImplicitCast) == 0x000188, "Member 'JSI_Slot_C_OnDragDetected::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnDragEnter
// 0x00B8 (0x00B8 - 0x0000)
struct JSI_Slot_C_OnDragEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OnDragEnter) == 0x000008, "Wrong alignment on JSI_Slot_C_OnDragEnter");
static_assert(sizeof(JSI_Slot_C_OnDragEnter) == 0x0000B8, "Wrong size on JSI_Slot_C_OnDragEnter");
static_assert(offsetof(JSI_Slot_C_OnDragEnter, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnDragEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragEnter, PointerEvent) == 0x000038, "Member 'JSI_Slot_C_OnDragEnter::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDragEnter, Operation) == 0x0000B0, "Member 'JSI_Slot_C_OnDragEnter::Operation' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnDrop
// 0x00D8 (0x00D8 - 0x0000)
struct JSI_Slot_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigSDragOperation_C*                   DragOperation;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OnDrop) == 0x000008, "Wrong alignment on JSI_Slot_C_OnDrop");
static_assert(sizeof(JSI_Slot_C_OnDrop) == 0x0000D8, "Wrong size on JSI_Slot_C_OnDrop");
static_assert(offsetof(JSI_Slot_C_OnDrop, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, PointerEvent) == 0x000038, "Member 'JSI_Slot_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, Operation) == 0x0000B0, "Member 'JSI_Slot_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, ReturnValue) == 0x0000B8, "Member 'JSI_Slot_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, DragOperation) == 0x0000C0, "Member 'JSI_Slot_C_OnDrop::DragOperation' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, Rotated_) == 0x0000C8, "Member 'JSI_Slot_C_OnDrop::Rotated_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnDrop, DroppedSlotRef) == 0x0000D0, "Member 'JSI_Slot_C_OnDrop::DroppedSlotRef' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct JSI_Slot_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(JSI_Slot_C_OnFocusReceived) == 0x000008, "Wrong alignment on JSI_Slot_C_OnFocusReceived");
static_assert(sizeof(JSI_Slot_C_OnFocusReceived) == 0x0001B0, "Wrong size on JSI_Slot_C_OnFocusReceived");
static_assert(offsetof(JSI_Slot_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'JSI_Slot_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'JSI_Slot_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'JSI_Slot_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnMouseButtonDown
// 0x0228 (0x0228 - 0x0000)
struct JSI_Slot_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	class UJigContextMenuComp_C*                  ContextMenu;                                       // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_ProcessMouseDown_ReturnValue;             // 0x0170(0x00B8)()
};
static_assert(alignof(JSI_Slot_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on JSI_Slot_C_OnMouseButtonDown");
static_assert(sizeof(JSI_Slot_C_OnMouseButtonDown) == 0x000228, "Wrong size on JSI_Slot_C_OnMouseButtonDown");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'JSI_Slot_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'JSI_Slot_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonDown, ContextMenu) == 0x000168, "Member 'JSI_Slot_C_OnMouseButtonDown::ContextMenu' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonDown, CallFunc_ProcessMouseDown_ReturnValue) == 0x000170, "Member 'JSI_Slot_C_OnMouseButtonDown::CallFunc_ProcessMouseDown_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnMouseButtonUp
// 0x0238 (0x0238 - 0x0000)
struct JSI_Slot_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0168(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
};
static_assert(alignof(JSI_Slot_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on JSI_Slot_C_OnMouseButtonUp");
static_assert(sizeof(JSI_Slot_C_OnMouseButtonUp) == 0x000238, "Wrong size on JSI_Slot_C_OnMouseButtonUp");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'JSI_Slot_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'JSI_Slot_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000168, "Member 'JSI_Slot_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'JSI_Slot_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct JSI_Slot_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSI_Slot_C_OnMouseEnter) == 0x000008, "Wrong alignment on JSI_Slot_C_OnMouseEnter");
static_assert(sizeof(JSI_Slot_C_OnMouseEnter) == 0x0000B0, "Wrong size on JSI_Slot_C_OnMouseEnter");
static_assert(offsetof(JSI_Slot_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'JSI_Slot_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'JSI_Slot_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnMouseLeave
// 0x0078 (0x0078 - 0x0000)
struct JSI_Slot_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSI_Slot_C_OnMouseLeave) == 0x000008, "Wrong alignment on JSI_Slot_C_OnMouseLeave");
static_assert(sizeof(JSI_Slot_C_OnMouseLeave) == 0x000078, "Wrong size on JSI_Slot_C_OnMouseLeave");
static_assert(offsetof(JSI_Slot_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'JSI_Slot_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OnVisualDragHighlight
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_OnVisualDragHighlight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OnVisualDragHighlight) == 0x000001, "Wrong alignment on JSI_Slot_C_OnVisualDragHighlight");
static_assert(sizeof(JSI_Slot_C_OnVisualDragHighlight) == 0x000001, "Wrong size on JSI_Slot_C_OnVisualDragHighlight");
static_assert(offsetof(JSI_Slot_C_OnVisualDragHighlight, Value) == 0x000000, "Member 'JSI_Slot_C_OnVisualDragHighlight::Value' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.OptimizeFixedSlot
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_OptimizeFixedSlot final
{
public:
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue_1;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_1;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_OptimizeFixedSlot) == 0x000008, "Wrong alignment on JSI_Slot_C_OptimizeFixedSlot");
static_assert(sizeof(JSI_Slot_C_OptimizeFixedSlot) == 0x000028, "Wrong size on JSI_Slot_C_OptimizeFixedSlot");
static_assert(offsetof(JSI_Slot_C_OptimizeFixedSlot, CallFunc_IsEquipTo__ReturnValue) == 0x000000, "Member 'JSI_Slot_C_OptimizeFixedSlot::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OptimizeFixedSlot, CallFunc_AddChildToOverlay_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_OptimizeFixedSlot::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OptimizeFixedSlot, CallFunc_AddChildToOverlay_ReturnValue_1) == 0x000010, "Member 'JSI_Slot_C_OptimizeFixedSlot::CallFunc_AddChildToOverlay_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OptimizeFixedSlot, CallFunc_AddChild_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_OptimizeFixedSlot::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_OptimizeFixedSlot, CallFunc_AddChild_ReturnValue_1) == 0x000020, "Member 'JSI_Slot_C_OptimizeFixedSlot::CallFunc_AddChild_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on JSI_Slot_C_PreConstruct");
static_assert(sizeof(JSI_Slot_C_PreConstruct) == 0x000001, "Wrong size on JSI_Slot_C_PreConstruct");
static_assert(offsetof(JSI_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'JSI_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ProcessMouseDown
// 0x0640 (0x0640 - 0x0000)
struct JSI_Slot_C_ProcessMouseDown final
{
public:
	struct FGeometry                              Geo;                                               // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          Pointer;                                           // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	class UJigContextMenuComp_C*                  ContextMenu;                                       // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1; // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0188(0x00B8)()
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0240(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25B[0x5];                                      // 0x025B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetClickLocation_Output_Get;              // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_DetectDragIfPressed_ReturnValue;          // 0x02A0(0x00B8)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x035A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemPending__IsPending;                 // 0x035B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x035C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x035D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35E[0x2];                                      // 0x035E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0360(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0370(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0390(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x03A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_1;        // 0x03B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x03C8(0x00B8)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0482(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0483(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0485(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_486[0x2];                                      // 0x0486(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x0488(0x00B8)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_542[0x6];                                      // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0560(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0578(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue_3;                    // 0x0588(0x00B8)()
};
static_assert(alignof(JSI_Slot_C_ProcessMouseDown) == 0x000008, "Wrong alignment on JSI_Slot_C_ProcessMouseDown");
static_assert(sizeof(JSI_Slot_C_ProcessMouseDown) == 0x000640, "Wrong size on JSI_Slot_C_ProcessMouseDown");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Geo) == 0x000000, "Member 'JSI_Slot_C_ProcessMouseDown::Geo' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Pointer) == 0x000038, "Member 'JSI_Slot_C_ProcessMouseDown::Pointer' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, ReturnValue) == 0x0000B0, "Member 'JSI_Slot_C_ProcessMouseDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, ContextMenu) == 0x000168, "Member 'JSI_Slot_C_ProcessMouseDown::ContextMenu' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Temp_struct_Variable) == 0x000170, "Member 'JSI_Slot_C_ProcessMouseDown::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000180, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue) == 0x000181, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1) == 0x000182, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Temp_bool_Variable) == 0x000183, "Member 'JSI_Slot_C_ProcessMouseDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_1) == 0x000184, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanAND_ReturnValue) == 0x000185, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Handled_ReturnValue) == 0x000188, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000240, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000258, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000259, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_2) == 0x00025A, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetLocalSize_ReturnValue) == 0x000260, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BreakVector2D_X) == 0x000270, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BreakVector2D_Y) == 0x000278, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000280, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000288, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetClickLocation_Output_Get) == 0x000290, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetClickLocation_Output_Get' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_DetectDragIfPressed_ReturnValue) == 0x0002A0, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_DetectDragIfPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_3) == 0x000358, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsValid_ReturnValue) == 0x000359, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsValid_ReturnValue_1) == 0x00035A, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsItemPending__IsPending) == 0x00035B, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsItemPending__IsPending' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsValid_ReturnValue_2) == 0x00035C, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_4) == 0x00035D, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000360, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsVisible_ReturnValue) == 0x000368, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Temp_struct_Variable_1) == 0x000370, "Member 'JSI_Slot_C_ProcessMouseDown::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsValid_ReturnValue_3) == 0x000380, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetPlayerPawn_ReturnValue) == 0x000388, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetComponentByClass_ReturnValue) == 0x000390, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, Temp_bool_Variable_1) == 0x000398, "Member 'JSI_Slot_C_ProcessMouseDown::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, K2Node_Select_Default) == 0x0003A0, "Member 'JSI_Slot_C_ProcessMouseDown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetPlayerController_ReturnValue) == 0x0003B0, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0003B8, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_IsValid_ReturnValue_4) == 0x0003C0, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanAND_ReturnValue_1) == 0x0003C1, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Handled_ReturnValue_1) == 0x0003C8, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_5) == 0x000480, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanOR_ReturnValue) == 0x000481, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanAND_ReturnValue_2) == 0x000482, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanAND_ReturnValue_3) == 0x000483, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanAND_ReturnValue_4) == 0x000484, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_6) == 0x000485, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Handled_ReturnValue_2) == 0x000488, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Handled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_7) == 0x000540, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BooleanOR_ReturnValue_1) == 0x000541, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BreakVector2D_X_1) == 0x000548, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_BreakVector2D_Y_1) == 0x000550, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000558, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_MakeVector2D_ReturnValue) == 0x000560, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Not_PreBool_ReturnValue_8) == 0x000570, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, K2Node_Select_Default_1) == 0x000578, "Member 'JSI_Slot_C_ProcessMouseDown::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ProcessMouseDown, CallFunc_Handled_ReturnValue_3) == 0x000588, "Member 'JSI_Slot_C_ProcessMouseDown::CallFunc_Handled_ReturnValue_3' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.RefreshOnDragEnter
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_RefreshOnDragEnter final
{
public:
	class UDragDropOperation*                     Op;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_RefreshOnDragEnter) == 0x000008, "Wrong alignment on JSI_Slot_C_RefreshOnDragEnter");
static_assert(sizeof(JSI_Slot_C_RefreshOnDragEnter) == 0x000008, "Wrong size on JSI_Slot_C_RefreshOnDragEnter");
static_assert(offsetof(JSI_Slot_C_RefreshOnDragEnter, Op) == 0x000000, "Member 'JSI_Slot_C_RefreshOnDragEnter::Op' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.RemoveCount
// 0x0078 (0x0078 - 0x0000)
struct JSI_Slot_C_RemoveCount final
{
public:
	int32                                         RemoveNum;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveAllIfCount_Num_;                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallOnStackChanged_;                               // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed_;                                          // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldCount_0;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldCount;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0020(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_2;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_3;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_4;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveFromJSIParent_Removed;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_5;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_RemoveCount) == 0x000008, "Wrong alignment on JSI_Slot_C_RemoveCount");
static_assert(sizeof(JSI_Slot_C_RemoveCount) == 0x000078, "Wrong size on JSI_Slot_C_RemoveCount");
static_assert(offsetof(JSI_Slot_C_RemoveCount, RemoveNum) == 0x000000, "Member 'JSI_Slot_C_RemoveCount::RemoveNum' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, RemoveAllIfCount_Num_) == 0x000004, "Member 'JSI_Slot_C_RemoveCount::RemoveAllIfCount_Num_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallOnStackChanged_) == 0x000005, "Member 'JSI_Slot_C_RemoveCount::CallOnStackChanged_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, Removed_) == 0x000006, "Member 'JSI_Slot_C_RemoveCount::Removed_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, NewCount) == 0x000008, "Member 'JSI_Slot_C_RemoveCount::NewCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, OldCount_0) == 0x00000C, "Member 'JSI_Slot_C_RemoveCount::OldCount_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, OldCount) == 0x000010, "Member 'JSI_Slot_C_RemoveCount::OldCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Abs_Int_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, Temp_bool_Variable) == 0x000018, "Member 'JSI_Slot_C_RemoveCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, Temp_byte_Variable) == 0x000019, "Member 'JSI_Slot_C_RemoveCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, Temp_byte_Variable_1) == 0x00001A, "Member 'JSI_Slot_C_RemoveCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00001B, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, K2Node_Select_Default) == 0x000038, "Member 'JSI_Slot_C_RemoveCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count) == 0x00003C, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count_1) == 0x000040, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count_2) == 0x000058, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count_3) == 0x00005C, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count_4) == 0x000060, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000064, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_RemoveFromJSIParent_Removed) == 0x000068, "Member 'JSI_Slot_C_RemoveCount::CallFunc_RemoveFromJSIParent_Removed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_GetCount_Count_5) == 0x00006C, "Member 'JSI_Slot_C_RemoveCount::CallFunc_GetCount_Count_5' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000070, "Member 'JSI_Slot_C_RemoveCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.RemoveFromJSIParent
// 0x0002 (0x0002 - 0x0000)
struct JSI_Slot_C_RemoveFromJSIParent final
{
public:
	bool                                          Removed;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_RemoveFromJSIParent) == 0x000001, "Wrong alignment on JSI_Slot_C_RemoveFromJSIParent");
static_assert(sizeof(JSI_Slot_C_RemoveFromJSIParent) == 0x000002, "Wrong size on JSI_Slot_C_RemoveFromJSIParent");
static_assert(offsetof(JSI_Slot_C_RemoveFromJSIParent, Removed) == 0x000000, "Member 'JSI_Slot_C_RemoveFromJSIParent::Removed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RemoveFromJSIParent, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000001, "Member 'JSI_Slot_C_RemoveFromJSIParent::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ResizeSlot
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_ResizeSlot final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResizeImage_;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ResizeSlot) == 0x000008, "Wrong alignment on JSI_Slot_C_ResizeSlot");
static_assert(sizeof(JSI_Slot_C_ResizeSlot) == 0x000028, "Wrong size on JSI_Slot_C_ResizeSlot");
static_assert(offsetof(JSI_Slot_C_ResizeSlot, NewSize) == 0x000000, "Member 'JSI_Slot_C_ResizeSlot::NewSize' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ResizeSlot, ResizeImage_) == 0x000010, "Member 'JSI_Slot_C_ResizeSlot::ResizeImage_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ResizeSlot, Size_0) == 0x000018, "Member 'JSI_Slot_C_ResizeSlot::Size_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.Rotate Image Default
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_Rotate_Image_Default final
{
public:
	bool                                          Rotated_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_Rotate_Image_Default) == 0x000008, "Wrong alignment on JSI_Slot_C_Rotate_Image_Default");
static_assert(sizeof(JSI_Slot_C_Rotate_Image_Default) == 0x000028, "Wrong size on JSI_Slot_C_Rotate_Image_Default");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, Rotated_) == 0x000000, "Member 'JSI_Slot_C_Rotate_Image_Default::Rotated_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_Rotate_Image_Default::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_Rotate_Image_Default::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'JSI_Slot_C_Rotate_Image_Default::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000020, "Member 'JSI_Slot_C_Rotate_Image_Default::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Rotate_Image_Default, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000024, "Member 'JSI_Slot_C_Rotate_Image_Default::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.RotateEquippedImage
// 0x0040 (0x0040 - 0x0000)
struct JSI_Slot_C_RotateEquippedImage final
{
public:
	struct FVector2D                              CallFunc_GetSlotSize_Size;                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_RotateEquippedImage) == 0x000008, "Wrong alignment on JSI_Slot_C_RotateEquippedImage");
static_assert(sizeof(JSI_Slot_C_RotateEquippedImage) == 0x000040, "Wrong size on JSI_Slot_C_RotateEquippedImage");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_GetSlotSize_Size) == 0x000000, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_GetSlotSize_Size' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_BreakVector2D_X) == 0x000010, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateEquippedImage, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000038, "Member 'JSI_Slot_C_RotateEquippedImage::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.RotateSlot
// 0x0002 (0x0002 - 0x0000)
struct JSI_Slot_C_RotateSlot final
{
public:
	bool                                          Rotate_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipVector_;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_RotateSlot) == 0x000001, "Wrong alignment on JSI_Slot_C_RotateSlot");
static_assert(sizeof(JSI_Slot_C_RotateSlot) == 0x000002, "Wrong size on JSI_Slot_C_RotateSlot");
static_assert(offsetof(JSI_Slot_C_RotateSlot, Rotate_) == 0x000000, "Member 'JSI_Slot_C_RotateSlot::Rotate_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_RotateSlot, FlipVector_) == 0x000001, "Member 'JSI_Slot_C_RotateSlot::FlipVector_' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetCapacity
// 0x0148 (0x0148 - 0x0000)
struct JSI_Slot_C_SetCapacity final
{
public:
	int32                                         CurrentCap;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unknown_;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0040(0x0018)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0128(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetCapacity) == 0x000008, "Wrong alignment on JSI_Slot_C_SetCapacity");
static_assert(sizeof(JSI_Slot_C_SetCapacity) == 0x000148, "Wrong size on JSI_Slot_C_SetCapacity");
static_assert(offsetof(JSI_Slot_C_SetCapacity, CurrentCap) == 0x000000, "Member 'JSI_Slot_C_SetCapacity::CurrentCap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Unknown_) == 0x000004, "Member 'JSI_Slot_C_SetCapacity::Unknown_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Temp_bool_Variable) == 0x000005, "Member 'JSI_Slot_C_SetCapacity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Temp_text_Variable) == 0x000008, "Member 'JSI_Slot_C_SetCapacity::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Temp_bool_Variable_1) == 0x000020, "Member 'JSI_Slot_C_SetCapacity::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Temp_byte_Variable) == 0x000021, "Member 'JSI_Slot_C_SetCapacity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, Temp_byte_Variable_1) == 0x000022, "Member 'JSI_Slot_C_SetCapacity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_SetCapacity::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, CallFunc_MakeLiteralText_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_SetCapacity::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000058, "Member 'JSI_Slot_C_SetCapacity::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, K2Node_Select_Default) == 0x000060, "Member 'JSI_Slot_C_SetCapacity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'JSI_Slot_C_SetCapacity::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C8, "Member 'JSI_Slot_C_SetCapacity::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, K2Node_MakeArray_Array) == 0x000118, "Member 'JSI_Slot_C_SetCapacity::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, CallFunc_Format_ReturnValue) == 0x000128, "Member 'JSI_Slot_C_SetCapacity::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetCapacity, K2Node_Select_Default_1) == 0x000140, "Member 'JSI_Slot_C_SetCapacity::K2Node_Select_Default_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetControllerHighlight
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_SetControllerHighlight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUserFocus_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetControllerHighlight) == 0x000008, "Wrong alignment on JSI_Slot_C_SetControllerHighlight");
static_assert(sizeof(JSI_Slot_C_SetControllerHighlight) == 0x000018, "Wrong size on JSI_Slot_C_SetControllerHighlight");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, Value) == 0x000000, "Member 'JSI_Slot_C_SetControllerHighlight::Value' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, Temp_bool_Variable) == 0x000001, "Member 'JSI_Slot_C_SetControllerHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, Temp_byte_Variable) == 0x000002, "Member 'JSI_Slot_C_SetControllerHighlight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, Temp_byte_Variable_1) == 0x000003, "Member 'JSI_Slot_C_SetControllerHighlight::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_SetControllerHighlight::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, CallFunc_HasUserFocus_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_SetControllerHighlight::CallFunc_HasUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, K2Node_Select_Default) == 0x000011, "Member 'JSI_Slot_C_SetControllerHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'JSI_Slot_C_SetControllerHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'JSI_Slot_C_SetControllerHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetControllerHighlight, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'JSI_Slot_C_SetControllerHighlight::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetDynamicInfo
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_SetDynamicInfo final
{
public:
	class UJigsawItem_DataAsset_C*                JigDataAsset_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetDynamicInfo) == 0x000008, "Wrong alignment on JSI_Slot_C_SetDynamicInfo");
static_assert(sizeof(JSI_Slot_C_SetDynamicInfo) == 0x000008, "Wrong size on JSI_Slot_C_SetDynamicInfo");
static_assert(offsetof(JSI_Slot_C_SetDynamicInfo, JigDataAsset_0) == 0x000000, "Member 'JSI_Slot_C_SetDynamicInfo::JigDataAsset_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetHighlight
// 0x0038 (0x0038 - 0x0000)
struct JSI_Slot_C_SetHighlight final
{
public:
	bool                                          Highlight_;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            HighlightColor;                                    // 0x0004(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          HideImage_;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Highlight;                                         // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetHighlight) == 0x000008, "Wrong alignment on JSI_Slot_C_SetHighlight");
static_assert(sizeof(JSI_Slot_C_SetHighlight) == 0x000038, "Wrong size on JSI_Slot_C_SetHighlight");
static_assert(offsetof(JSI_Slot_C_SetHighlight, Highlight_) == 0x000000, "Member 'JSI_Slot_C_SetHighlight::Highlight_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, HighlightColor) == 0x000004, "Member 'JSI_Slot_C_SetHighlight::HighlightColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, HideImage_) == 0x000018, "Member 'JSI_Slot_C_SetHighlight::HideImage_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, Highlight) == 0x000019, "Member 'JSI_Slot_C_SetHighlight::Highlight' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_IsEquipped__ReturnValue) == 0x00001A, "Member 'JSI_Slot_C_SetHighlight::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'JSI_Slot_C_SetHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanAND_ReturnValue_1) == 0x00001D, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanAND_ReturnValue_2) == 0x00001E, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanAND_ReturnValue_3) == 0x00001F, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanAND_ReturnValue_4) == 0x000020, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'JSI_Slot_C_SetHighlight::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_SetHighlight::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetHighlight, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000030, "Member 'JSI_Slot_C_SetHighlight::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetHostedSlot
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_SetHostedSlot final
{
public:
	class UJSI_Slot_C*                            HostingItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetHostedSlot) == 0x000008, "Wrong alignment on JSI_Slot_C_SetHostedSlot");
static_assert(sizeof(JSI_Slot_C_SetHostedSlot) == 0x000008, "Wrong size on JSI_Slot_C_SetHostedSlot");
static_assert(offsetof(JSI_Slot_C_SetHostedSlot, HostingItem) == 0x000000, "Member 'JSI_Slot_C_SetHostedSlot::HostingItem' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetHostingArray
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_SetHostingArray final
{
public:
	TArray<class UJSI_Slot_C*>                    ArrayOfHostingItem_0;                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(JSI_Slot_C_SetHostingArray) == 0x000008, "Wrong alignment on JSI_Slot_C_SetHostingArray");
static_assert(sizeof(JSI_Slot_C_SetHostingArray) == 0x000010, "Wrong size on JSI_Slot_C_SetHostingArray");
static_assert(offsetof(JSI_Slot_C_SetHostingArray, ArrayOfHostingItem_0) == 0x000000, "Member 'JSI_Slot_C_SetHostingArray::ArrayOfHostingItem_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetItemDim
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_SetItemDim final
{
public:
	struct FVector2D                              ItemDim_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetItemDim) == 0x000008, "Wrong alignment on JSI_Slot_C_SetItemDim");
static_assert(sizeof(JSI_Slot_C_SetItemDim) == 0x000010, "Wrong size on JSI_Slot_C_SetItemDim");
static_assert(offsetof(JSI_Slot_C_SetItemDim, ItemDim_0) == 0x000000, "Member 'JSI_Slot_C_SetItemDim::ItemDim_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetJigBrushSize
// 0x0100 (0x0100 - 0x0000)
struct JSI_Slot_C_SetJigBrushSize final
{
public:
	class UImage*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Image_Size;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0020(0x00D0)()
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x00F0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetJigBrushSize) == 0x000010, "Wrong alignment on JSI_Slot_C_SetJigBrushSize");
static_assert(sizeof(JSI_Slot_C_SetJigBrushSize) == 0x000100, "Wrong size on JSI_Slot_C_SetJigBrushSize");
static_assert(offsetof(JSI_Slot_C_SetJigBrushSize, Target) == 0x000000, "Member 'JSI_Slot_C_SetJigBrushSize::Target' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetJigBrushSize, Image_Size) == 0x000008, "Member 'JSI_Slot_C_SetJigBrushSize::Image_Size' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetJigBrushSize, K2Node_MakeStruct_SlateBrush) == 0x000020, "Member 'JSI_Slot_C_SetJigBrushSize::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetJigBrushSize, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x0000F0, "Member 'JSI_Slot_C_SetJigBrushSize::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetMaxCount
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_SetMaxCount final
{
public:
	bool                                          CallOnStackChanged_;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
};
static_assert(alignof(JSI_Slot_C_SetMaxCount) == 0x000008, "Wrong alignment on JSI_Slot_C_SetMaxCount");
static_assert(sizeof(JSI_Slot_C_SetMaxCount) == 0x000028, "Wrong size on JSI_Slot_C_SetMaxCount");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, CallOnStackChanged_) == 0x000000, "Member 'JSI_Slot_C_SetMaxCount::CallOnStackChanged_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, Count) == 0x000004, "Member 'JSI_Slot_C_SetMaxCount::Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, Temp_bool_Variable) == 0x000008, "Member 'JSI_Slot_C_SetMaxCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, Temp_byte_Variable) == 0x000009, "Member 'JSI_Slot_C_SetMaxCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, Temp_byte_Variable_1) == 0x00000A, "Member 'JSI_Slot_C_SetMaxCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00000B, "Member 'JSI_Slot_C_SetMaxCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, K2Node_Select_Default) == 0x00000C, "Member 'JSI_Slot_C_SetMaxCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetMaxCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_SetMaxCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetOverlaySlot
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_SetOverlaySlot final
{
public:
	class UOverlaySlot*                           OverlayRef_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetOverlaySlot) == 0x000008, "Wrong alignment on JSI_Slot_C_SetOverlaySlot");
static_assert(sizeof(JSI_Slot_C_SetOverlaySlot) == 0x000008, "Wrong size on JSI_Slot_C_SetOverlaySlot");
static_assert(offsetof(JSI_Slot_C_SetOverlaySlot, OverlayRef_0) == 0x000000, "Member 'JSI_Slot_C_SetOverlaySlot::OverlayRef_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetPending
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_SetPending final
{
public:
	bool                                          Pending_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlaybackSpeed;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerInSec;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetPending) == 0x000008, "Wrong alignment on JSI_Slot_C_SetPending");
static_assert(sizeof(JSI_Slot_C_SetPending) == 0x000018, "Wrong size on JSI_Slot_C_SetPending");
static_assert(offsetof(JSI_Slot_C_SetPending, Pending_) == 0x000000, "Member 'JSI_Slot_C_SetPending::Pending_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetPending, PlaybackSpeed) == 0x000008, "Member 'JSI_Slot_C_SetPending::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetPending, TimerInSec) == 0x000010, "Member 'JSI_Slot_C_SetPending::TimerInSec' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetPendingAttachments
// 0x0010 (0x0010 - 0x0000)
struct JSI_Slot_C_SetPendingAttachments final
{
public:
	TArray<class FName>                           PendingSnapAttachements_0;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSI_Slot_C_SetPendingAttachments) == 0x000008, "Wrong alignment on JSI_Slot_C_SetPendingAttachments");
static_assert(sizeof(JSI_Slot_C_SetPendingAttachments) == 0x000010, "Wrong size on JSI_Slot_C_SetPendingAttachments");
static_assert(offsetof(JSI_Slot_C_SetPendingAttachments, PendingSnapAttachements_0) == 0x000000, "Member 'JSI_Slot_C_SetPendingAttachments::PendingSnapAttachements_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSlotContainerRef
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_SetSlotContainerRef final
{
public:
	class UJSIContainer_C*                        SlotContainer_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Output_Get;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSlotContainerRef) == 0x000008, "Wrong alignment on JSI_Slot_C_SetSlotContainerRef");
static_assert(sizeof(JSI_Slot_C_SetSlotContainerRef) == 0x000018, "Wrong size on JSI_Slot_C_SetSlotContainerRef");
static_assert(offsetof(JSI_Slot_C_SetSlotContainerRef, SlotContainer_0) == 0x000000, "Member 'JSI_Slot_C_SetSlotContainerRef::SlotContainer_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSlotContainerRef, Output_Get) == 0x000008, "Member 'JSI_Slot_C_SetSlotContainerRef::Output_Get' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSlotContainerRef, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_SetSlotContainerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSlotImageVisibility
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_SetSlotImageVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSlotImageVisibility) == 0x000001, "Wrong alignment on JSI_Slot_C_SetSlotImageVisibility");
static_assert(sizeof(JSI_Slot_C_SetSlotImageVisibility) == 0x000001, "Wrong size on JSI_Slot_C_SetSlotImageVisibility");
static_assert(offsetof(JSI_Slot_C_SetSlotImageVisibility, InVisibility) == 0x000000, "Member 'JSI_Slot_C_SetSlotImageVisibility::InVisibility' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSnapImagePending
// 0x0028 (0x0028 - 0x0000)
struct JSI_Slot_C_SetSnapImagePending final
{
public:
	bool                                          PendingInspect;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ItemSnapLoading_C*                  CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSnapImagePending) == 0x000008, "Wrong alignment on JSI_Slot_C_SetSnapImagePending");
static_assert(sizeof(JSI_Slot_C_SetSnapImagePending) == 0x000028, "Wrong size on JSI_Slot_C_SetSnapImagePending");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, PendingInspect) == 0x000000, "Member 'JSI_Slot_C_SetSnapImagePending::PendingInspect' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, Temp_byte_Variable) == 0x000001, "Member 'JSI_Slot_C_SetSnapImagePending::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, CallFunc_Create_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_SetSnapImagePending::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_SetSnapImagePending::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, Temp_bool_Variable) == 0x000011, "Member 'JSI_Slot_C_SetSnapImagePending::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'JSI_Slot_C_SetSnapImagePending::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, Temp_byte_Variable_1) == 0x000013, "Member 'JSI_Slot_C_SetSnapImagePending::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, CallFunc_AddChildToOverlay_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_SetSnapImagePending::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSnapImagePending, K2Node_Select_Default) == 0x000020, "Member 'JSI_Slot_C_SetSnapImagePending::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSnapOnStandBy
// 0x0001 (0x0001 - 0x0000)
struct JSI_Slot_C_SetSnapOnStandBy final
{
public:
	bool                                          SnapIsOnStandby_0;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSnapOnStandBy) == 0x000001, "Wrong alignment on JSI_Slot_C_SetSnapOnStandBy");
static_assert(sizeof(JSI_Slot_C_SetSnapOnStandBy) == 0x000001, "Wrong size on JSI_Slot_C_SetSnapOnStandBy");
static_assert(offsetof(JSI_Slot_C_SetSnapOnStandBy, SnapIsOnStandby_0) == 0x000000, "Member 'JSI_Slot_C_SetSnapOnStandBy::SnapIsOnStandby_0' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSortHighlight
// 0x0008 (0x0008 - 0x0000)
struct JSI_Slot_C_SetSortHighlight final
{
public:
	bool                                          IsFaded;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowInteractionOnSort_0;                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSortHighlight) == 0x000004, "Wrong alignment on JSI_Slot_C_SetSortHighlight");
static_assert(sizeof(JSI_Slot_C_SetSortHighlight) == 0x000008, "Wrong size on JSI_Slot_C_SetSortHighlight");
static_assert(offsetof(JSI_Slot_C_SetSortHighlight, IsFaded) == 0x000000, "Member 'JSI_Slot_C_SetSortHighlight::IsFaded' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSortHighlight, AllowInteractionOnSort_0) == 0x000001, "Member 'JSI_Slot_C_SetSortHighlight::AllowInteractionOnSort_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSortHighlight, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000004, "Member 'JSI_Slot_C_SetSortHighlight::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetSpecialContainer
// 0x0070 (0x0070 - 0x0000)
struct JSI_Slot_C_SetSpecialContainer final
{
public:
	class UUserWidget*                            SpecialContainerRef_0;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSIContainer_C*>                CallFunc_GetListOfContainers_Containers;           // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetSpecialContainer) == 0x000008, "Wrong alignment on JSI_Slot_C_SetSpecialContainer");
static_assert(sizeof(JSI_Slot_C_SetSpecialContainer) == 0x000070, "Wrong size on JSI_Slot_C_SetSpecialContainer");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, SpecialContainerRef_0) == 0x000000, "Member 'JSI_Slot_C_SetSpecialContainer::SpecialContainerRef_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000008, "Member 'JSI_Slot_C_SetSpecialContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'JSI_Slot_C_SetSpecialContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1) == 0x000020, "Member 'JSI_Slot_C_SetSpecialContainer::K2Node_DynamicCast_AsJSISpecial_Widget_Interface_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'JSI_Slot_C_SetSpecialContainer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_GetListOfContainers_Containers) == 0x000038, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_GetListOfContainers_Containers' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, Temp_int_Array_Index_Variable) == 0x000050, "Member 'JSI_Slot_C_SetSpecialContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_Array_Get_Item) == 0x000058, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'JSI_Slot_C_SetSpecialContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetSpecialContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'JSI_Slot_C_SetSpecialContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetStatByName
// 0x0090 (0x0090 - 0x0000)
struct JSI_Slot_C_SetStatByName final
{
public:
	struct FGameplayTag                           STAT_TAG;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	double                                        MinVal;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxVal;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemStat                            Stat;                                              // 0x0020(0x0028)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemStat                            CallFunc_Array_Get_Item;                           // 0x0058(0x0028)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetStatByName) == 0x000008, "Wrong alignment on JSI_Slot_C_SetStatByName");
static_assert(sizeof(JSI_Slot_C_SetStatByName) == 0x000090, "Wrong size on JSI_Slot_C_SetStatByName");
static_assert(offsetof(JSI_Slot_C_SetStatByName, STAT_TAG) == 0x000000, "Member 'JSI_Slot_C_SetStatByName::STAT_TAG' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, MinVal) == 0x000008, "Member 'JSI_Slot_C_SetStatByName::MinVal' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, MaxVal) == 0x000010, "Member 'JSI_Slot_C_SetStatByName::MaxVal' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, Found) == 0x000018, "Member 'JSI_Slot_C_SetStatByName::Found' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, Stat) == 0x000020, "Member 'JSI_Slot_C_SetStatByName::Stat' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, Temp_int_Array_Index_Variable) == 0x000048, "Member 'JSI_Slot_C_SetStatByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'JSI_Slot_C_SetStatByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_SetStatByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_Array_Get_Item) == 0x000058, "Member 'JSI_Slot_C_SetStatByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'JSI_Slot_C_SetStatByName::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000081, "Member 'JSI_Slot_C_SetStatByName::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'JSI_Slot_C_SetStatByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetStatByName, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'JSI_Slot_C_SetStatByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.SetUniqueID
// 0x0024 (0x0024 - 0x0000)
struct JSI_Slot_C_SetUniqueID final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  UniqueID;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_SetUniqueID) == 0x000004, "Wrong alignment on JSI_Slot_C_SetUniqueID");
static_assert(sizeof(JSI_Slot_C_SetUniqueID) == 0x000024, "Wrong size on JSI_Slot_C_SetUniqueID");
static_assert(offsetof(JSI_Slot_C_SetUniqueID, ID) == 0x000000, "Member 'JSI_Slot_C_SetUniqueID::ID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetUniqueID, UniqueID) == 0x000010, "Member 'JSI_Slot_C_SetUniqueID::UniqueID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_SetUniqueID, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_SetUniqueID::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ShowHideDisplayName
// 0x0005 (0x0005 - 0x0000)
struct JSI_Slot_C_ShowHideDisplayName final
{
public:
	bool                                          Hide_;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ShowHideDisplayName) == 0x000001, "Wrong alignment on JSI_Slot_C_ShowHideDisplayName");
static_assert(sizeof(JSI_Slot_C_ShowHideDisplayName) == 0x000005, "Wrong size on JSI_Slot_C_ShowHideDisplayName");
static_assert(offsetof(JSI_Slot_C_ShowHideDisplayName, Hide_) == 0x000000, "Member 'JSI_Slot_C_ShowHideDisplayName::Hide_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowHideDisplayName, Temp_bool_Variable) == 0x000001, "Member 'JSI_Slot_C_ShowHideDisplayName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowHideDisplayName, Temp_byte_Variable) == 0x000002, "Member 'JSI_Slot_C_ShowHideDisplayName::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowHideDisplayName, Temp_byte_Variable_1) == 0x000003, "Member 'JSI_Slot_C_ShowHideDisplayName::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowHideDisplayName, K2Node_Select_Default) == 0x000004, "Member 'JSI_Slot_C_ShowHideDisplayName::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.ShowWeaponMagSize
// 0x00F8 (0x00F8 - 0x0000)
struct JSI_Slot_C_ShowWeaponMagSize final
{
public:
	int32                                         CurrentCap;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCap;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0070(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D8(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_ShowWeaponMagSize) == 0x000008, "Wrong alignment on JSI_Slot_C_ShowWeaponMagSize");
static_assert(sizeof(JSI_Slot_C_ShowWeaponMagSize) == 0x0000F8, "Wrong size on JSI_Slot_C_ShowWeaponMagSize");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, CurrentCap) == 0x000000, "Member 'JSI_Slot_C_ShowWeaponMagSize::CurrentCap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, MaxCap) == 0x000004, "Member 'JSI_Slot_C_ShowWeaponMagSize::MaxCap' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, Temp_bool_Variable) == 0x000008, "Member 'JSI_Slot_C_ShowWeaponMagSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_ShowWeaponMagSize::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000018, "Member 'JSI_Slot_C_ShowWeaponMagSize::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'JSI_Slot_C_ShowWeaponMagSize::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, K2Node_MakeStruct_FormatArgumentData_1) == 0x000070, "Member 'JSI_Slot_C_ShowWeaponMagSize::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, K2Node_MakeArray_Array) == 0x0000C0, "Member 'JSI_Slot_C_ShowWeaponMagSize::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, Temp_byte_Variable) == 0x0000D0, "Member 'JSI_Slot_C_ShowWeaponMagSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, CallFunc_Format_ReturnValue) == 0x0000D8, "Member 'JSI_Slot_C_ShowWeaponMagSize::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, Temp_byte_Variable_1) == 0x0000F0, "Member 'JSI_Slot_C_ShowWeaponMagSize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_ShowWeaponMagSize, K2Node_Select_Default) == 0x0000F1, "Member 'JSI_Slot_C_ShowWeaponMagSize::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.TogleHighlight
// 0x0030 (0x0030 - 0x0000)
struct JSI_Slot_C_TogleHighlight final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0004(0x0014)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x001C(0x0014)()
};
static_assert(alignof(JSI_Slot_C_TogleHighlight) == 0x000004, "Wrong alignment on JSI_Slot_C_TogleHighlight");
static_assert(sizeof(JSI_Slot_C_TogleHighlight) == 0x000030, "Wrong size on JSI_Slot_C_TogleHighlight");
static_assert(offsetof(JSI_Slot_C_TogleHighlight, Temp_bool_Variable) == 0x000000, "Member 'JSI_Slot_C_TogleHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TogleHighlight, K2Node_MakeStruct_SlateColor) == 0x000004, "Member 'JSI_Slot_C_TogleHighlight::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TogleHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_TogleHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TogleHighlight, K2Node_Select_Default) == 0x00001C, "Member 'JSI_Slot_C_TogleHighlight::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.TryUseBullet
// 0x0088 (0x0088 - 0x0000)
struct JSI_Slot_C_TryUseBullet final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  UID;                                               // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemUsed;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            UsedItem;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  TempUID;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveFromJSIParent_Removed;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  CallFunc_GetUniqueID_UniqueServerID;               // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_TryUseBullet) == 0x000008, "Wrong alignment on JSI_Slot_C_TryUseBullet");
static_assert(sizeof(JSI_Slot_C_TryUseBullet) == 0x000088, "Wrong size on JSI_Slot_C_TryUseBullet");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, Return) == 0x000000, "Member 'JSI_Slot_C_TryUseBullet::Return' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, UID) == 0x000004, "Member 'JSI_Slot_C_TryUseBullet::UID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, ItemUsed) == 0x000018, "Member 'JSI_Slot_C_TryUseBullet::ItemUsed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, UsedItem) == 0x000020, "Member 'JSI_Slot_C_TryUseBullet::UsedItem' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, TempUID) == 0x000028, "Member 'JSI_Slot_C_TryUseBullet::TempUID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, Temp_int_Array_Index_Variable) == 0x000038, "Member 'JSI_Slot_C_TryUseBullet::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'JSI_Slot_C_TryUseBullet::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000044, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Array_Get_Item) == 0x000050, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_RemoveFromJSIParent_Removed) == 0x00005C, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_RemoveFromJSIParent_Removed' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Max_ReturnValue) == 0x000060, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_GetUniqueID_UniqueServerID) == 0x000064, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_GetCount_Count) == 0x000074, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000078, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_UpdateCount_Count) == 0x00007C, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_TryUseBullet, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000080, "Member 'JSI_Slot_C_TryUseBullet::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UnhandledGetTargetContainer
// 0x0040 (0x0040 - 0x0000)
struct JSI_Slot_C_UnhandledGetTargetContainer final
{
public:
	class UJSIContainer_C*                        Container1;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container2;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Target;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_Found_;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetEquippedItemRef_ItemRef;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquippedItemRef_IsPending;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsContainer__IsContainer_;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipTo__ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UnhandledGetTargetContainer) == 0x000008, "Wrong alignment on JSI_Slot_C_UnhandledGetTargetContainer");
static_assert(sizeof(JSI_Slot_C_UnhandledGetTargetContainer) == 0x000040, "Wrong size on JSI_Slot_C_UnhandledGetTargetContainer");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, Container1) == 0x000000, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::Container1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, Container2) == 0x000008, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::Container2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, Target) == 0x000010, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::Target' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, Temp_bool_Variable) == 0x000018, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_GetEquippedItemRef_Found_) == 0x00001B, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_GetEquippedItemRef_Found_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_GetEquippedItemRef_ItemRef) == 0x000020, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_GetEquippedItemRef_ItemRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_GetEquippedItemRef_IsPending) == 0x000028, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_GetEquippedItemRef_IsPending' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, K2Node_Select_Default) == 0x000030, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_IsContainer__IsContainer_) == 0x000038, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_IsContainer__IsContainer_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_IsEquipTo__ReturnValue) == 0x000039, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_IsEquipTo__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnhandledGetTargetContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x00003B, "Member 'JSI_Slot_C_UnhandledGetTargetContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UnlockSlot
// 0x0140 (0x0140 - 0x0000)
struct JSI_Slot_C_UnlockSlot final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0014)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0044(0x0014)()
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0060(0x00D0)()
	float                                         K2Node_MakeStruct_A_ImplicitCast;                  // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x0134(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UnlockSlot) == 0x000010, "Wrong alignment on JSI_Slot_C_UnlockSlot");
static_assert(sizeof(JSI_Slot_C_UnlockSlot) == 0x000140, "Wrong size on JSI_Slot_C_UnlockSlot");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, Temp_bool_Variable) == 0x000000, "Member 'JSI_Slot_C_UnlockSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_LinearColor) == 0x000004, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_UnlockSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'JSI_Slot_C_UnlockSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_Select_Default) == 0x000044, "Member 'JSI_Slot_C_UnlockSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_SlateBrush) == 0x000060, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_A_ImplicitCast) == 0x000130, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UnlockSlot, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x000134, "Member 'JSI_Slot_C_UnlockSlot::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.Update_OnCountChanged
// 0x0050 (0x0050 - 0x0000)
struct JSI_Slot_C_Update_OnCountChanged final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OldCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDefaultWeight_Weight;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_Update_OnCountChanged) == 0x000008, "Wrong alignment on JSI_Slot_C_Update_OnCountChanged");
static_assert(sizeof(JSI_Slot_C_Update_OnCountChanged) == 0x000050, "Wrong size on JSI_Slot_C_Update_OnCountChanged");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, ItemRef) == 0x000000, "Member 'JSI_Slot_C_Update_OnCountChanged::ItemRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, OldCount) == 0x000008, "Member 'JSI_Slot_C_Update_OnCountChanged::OldCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, NewCount) == 0x00000C, "Member 'JSI_Slot_C_Update_OnCountChanged::NewCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_GetDefaultWeight_Weight) == 0x000018, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_GetDefaultWeight_Weight' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000028, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000038, "Member 'JSI_Slot_C_Update_OnCountChanged::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'JSI_Slot_C_Update_OnCountChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnCountChanged, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'JSI_Slot_C_Update_OnCountChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.Update_OnItemAdded
// 0x0030 (0x0030 - 0x0000)
struct JSI_Slot_C_Update_OnItemAdded final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_Update_OnItemAdded) == 0x000008, "Wrong alignment on JSI_Slot_C_Update_OnItemAdded");
static_assert(sizeof(JSI_Slot_C_Update_OnItemAdded) == 0x000030, "Wrong size on JSI_Slot_C_Update_OnItemAdded");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, ItemRef) == 0x000000, "Member 'JSI_Slot_C_Update_OnItemAdded::ItemRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000008, "Member 'JSI_Slot_C_Update_OnItemAdded::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_Update_OnItemAdded::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000018, "Member 'JSI_Slot_C_Update_OnItemAdded::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSI_Slot_C_Update_OnItemAdded::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemAdded, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'JSI_Slot_C_Update_OnItemAdded::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.Update_OnItemRemoved
// 0x0030 (0x0030 - 0x0000)
struct JSI_Slot_C_Update_OnItemRemoved final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetSpecialContainerRef_SpecialContainerRef; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IJSISpecialWidgetInterface_C> K2Node_DynamicCast_AsJSISpecial_Widget_Interface;  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_Update_OnItemRemoved) == 0x000008, "Wrong alignment on JSI_Slot_C_Update_OnItemRemoved");
static_assert(sizeof(JSI_Slot_C_Update_OnItemRemoved) == 0x000030, "Wrong size on JSI_Slot_C_Update_OnItemRemoved");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, ItemRef) == 0x000000, "Member 'JSI_Slot_C_Update_OnItemRemoved::ItemRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, CallFunc_GetSpecialContainerRef_SpecialContainerRef) == 0x000008, "Member 'JSI_Slot_C_Update_OnItemRemoved::CallFunc_GetSpecialContainerRef_SpecialContainerRef' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_Update_OnItemRemoved::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, K2Node_DynamicCast_AsJSISpecial_Widget_Interface) == 0x000018, "Member 'JSI_Slot_C_Update_OnItemRemoved::K2Node_DynamicCast_AsJSISpecial_Widget_Interface' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSI_Slot_C_Update_OnItemRemoved::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_Update_OnItemRemoved, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'JSI_Slot_C_Update_OnItemRemoved::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateCapacity
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_UpdateCapacity final
{
public:
	class FText                                   UpdateCountText;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(JSI_Slot_C_UpdateCapacity) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateCapacity");
static_assert(sizeof(JSI_Slot_C_UpdateCapacity) == 0x000018, "Wrong size on JSI_Slot_C_UpdateCapacity");
static_assert(offsetof(JSI_Slot_C_UpdateCapacity, UpdateCountText) == 0x000000, "Member 'JSI_Slot_C_UpdateCapacity::UpdateCountText' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateCount
// 0x0060 (0x0060 - 0x0000)
struct JSI_Slot_C_UpdateCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallOnStackChanged_;                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipIfCapContainer;                                // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ISCapacityContainer_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateCount) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateCount");
static_assert(sizeof(JSI_Slot_C_UpdateCount) == 0x000060, "Wrong size on JSI_Slot_C_UpdateCount");
static_assert(offsetof(JSI_Slot_C_UpdateCount, NewCount) == 0x000000, "Member 'JSI_Slot_C_UpdateCount::NewCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallOnStackChanged_) == 0x000004, "Member 'JSI_Slot_C_UpdateCount::CallOnStackChanged_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, SkipIfCapContainer) == 0x000005, "Member 'JSI_Slot_C_UpdateCount::SkipIfCapContainer' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, Count) == 0x000008, "Member 'JSI_Slot_C_UpdateCount::Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, OldCount) == 0x00000C, "Member 'JSI_Slot_C_UpdateCount::OldCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, Temp_byte_Variable) == 0x000010, "Member 'JSI_Slot_C_UpdateCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, Temp_byte_Variable_1) == 0x000011, "Member 'JSI_Slot_C_UpdateCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'JSI_Slot_C_UpdateCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_UpdateCount::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_UpdateCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_UpdateCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, Temp_bool_Variable) == 0x000040, "Member 'JSI_Slot_C_UpdateCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_GetCount_Count) == 0x000044, "Member 'JSI_Slot_C_UpdateCount::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, K2Node_Select_Default) == 0x000048, "Member 'JSI_Slot_C_UpdateCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_ISCapacityContainer_ReturnValue) == 0x000049, "Member 'JSI_Slot_C_UpdateCount::CallFunc_ISCapacityContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'JSI_Slot_C_UpdateCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_IsValid_ReturnValue) == 0x00004B, "Member 'JSI_Slot_C_UpdateCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'JSI_Slot_C_UpdateCount::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCount, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'JSI_Slot_C_UpdateCount::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateCustom Data
// 0x0058 (0x0058 - 0x0000)
struct JSI_Slot_C_UpdateCustom_Data final
{
public:
	TArray<class FString>                         Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FString>                         Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateCustom_Data) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateCustom_Data");
static_assert(sizeof(JSI_Slot_C_UpdateCustom_Data) == 0x000058, "Wrong size on JSI_Slot_C_UpdateCustom_Data");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, Key) == 0x000000, "Member 'JSI_Slot_C_UpdateCustom_Data::Key' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, Value) == 0x000010, "Member 'JSI_Slot_C_UpdateCustom_Data::Value' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_UpdateCustom_Data::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, Temp_int_Array_Index_Variable) == 0x000024, "Member 'JSI_Slot_C_UpdateCustom_Data::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'JSI_Slot_C_UpdateCustom_Data::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSI_Slot_C_UpdateCustom_Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_UpdateCustom_Data::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'JSI_Slot_C_UpdateCustom_Data::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateCustom_Data, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSI_Slot_C_UpdateCustom_Data::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateDurability
// 0x0118 (0x0118 - 0x0000)
struct JSI_Slot_C_UpdateDurability final
{
public:
	struct FVector2D                              NewDur;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0040(0x0018)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0068(0x0050)(HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00B8(0x0014)()
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E0(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateDurability) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateDurability");
static_assert(sizeof(JSI_Slot_C_UpdateDurability) == 0x000118, "Wrong size on JSI_Slot_C_UpdateDurability");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, NewDur) == 0x000000, "Member 'JSI_Slot_C_UpdateDurability::NewDur' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, Temp_byte_Variable) == 0x000010, "Member 'JSI_Slot_C_UpdateDurability::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BreakVector2D_X) == 0x000018, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000038, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000040, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_SelectColor_ReturnValue) == 0x000058, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, K2Node_MakeStruct_FormatArgumentData) == 0x000068, "Member 'JSI_Slot_C_UpdateDurability::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, K2Node_MakeStruct_SlateColor) == 0x0000B8, "Member 'JSI_Slot_C_UpdateDurability::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, K2Node_MakeArray_Array) == 0x0000D0, "Member 'JSI_Slot_C_UpdateDurability::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_Format_ReturnValue) == 0x0000E0, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, Temp_byte_Variable_1) == 0x0000F8, "Member 'JSI_Slot_C_UpdateDurability::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, Temp_bool_Variable) == 0x0000F9, "Member 'JSI_Slot_C_UpdateDurability::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BreakVector2D_X_1) == 0x000100, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BreakVector2D_Y_1) == 0x000108, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_Not_PreBool_ReturnValue) == 0x000110, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000111, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000112, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BooleanAND_ReturnValue) == 0x000113, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, CallFunc_BooleanOR_ReturnValue) == 0x000114, "Member 'JSI_Slot_C_UpdateDurability::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateDurability, K2Node_Select_Default) == 0x000115, "Member 'JSI_Slot_C_UpdateDurability::K2Node_Select_Default' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateImage
// 0x0038 (0x0038 - 0x0000)
struct JSI_Slot_C_UpdateImage final
{
public:
	class UTexture*                               NewTexture;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SetInInfo_;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Updated;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget*                   K2Node_DynamicCast_AsTexture_Render_Target;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateImage) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateImage");
static_assert(sizeof(JSI_Slot_C_UpdateImage) == 0x000038, "Wrong size on JSI_Slot_C_UpdateImage");
static_assert(offsetof(JSI_Slot_C_UpdateImage, NewTexture) == 0x000000, "Member 'JSI_Slot_C_UpdateImage::NewTexture' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, SetInInfo_) == 0x000008, "Member 'JSI_Slot_C_UpdateImage::SetInInfo_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, Updated) == 0x000009, "Member 'JSI_Slot_C_UpdateImage::Updated' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, K2Node_DynamicCast_AsTexture_Render_Target) == 0x000010, "Member 'JSI_Slot_C_UpdateImage::K2Node_DynamicCast_AsTexture_Render_Target' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'JSI_Slot_C_UpdateImage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_UpdateImage::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'JSI_Slot_C_UpdateImage::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'JSI_Slot_C_UpdateImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateImage, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000034, "Member 'JSI_Slot_C_UpdateImage::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateInfo
// 0x0120 (0x0120 - 0x0000)
struct JSI_Slot_C_UpdateInfo final
{
public:
	class UObject*                                Image_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Image_Size;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0014)()
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0040(0x00D0)()
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateInfo) == 0x000010, "Wrong alignment on JSI_Slot_C_UpdateInfo");
static_assert(sizeof(JSI_Slot_C_UpdateInfo) == 0x000120, "Wrong size on JSI_Slot_C_UpdateInfo");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, Image_0) == 0x000000, "Member 'JSI_Slot_C_UpdateInfo::Image_0' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, Image_Size) == 0x000008, "Member 'JSI_Slot_C_UpdateInfo::Image_Size' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, CallFunc_MakeColor_ReturnValue) == 0x000018, "Member 'JSI_Slot_C_UpdateInfo::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'JSI_Slot_C_UpdateInfo::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, K2Node_MakeStruct_SlateBrush) == 0x000040, "Member 'JSI_Slot_C_UpdateInfo::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateInfo, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x000110, "Member 'JSI_Slot_C_UpdateInfo::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateItemSnap
// 0x0030 (0x0030 - 0x0000)
struct JSI_Slot_C_UpdateItemSnap final
{
public:
	bool                                          IsActionbar_;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OldValue;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIT_ItemSnapCaptor_C>  K2Node_DynamicCast_AsIT_Item_Snap_Captor;          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget*                   CallFunc_UpdateSnap_RenderTarget;                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateItemSnap) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateItemSnap");
static_assert(sizeof(JSI_Slot_C_UpdateItemSnap) == 0x000030, "Wrong size on JSI_Slot_C_UpdateItemSnap");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, IsActionbar_) == 0x000000, "Member 'JSI_Slot_C_UpdateItemSnap::IsActionbar_' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, OldValue) == 0x000001, "Member 'JSI_Slot_C_UpdateItemSnap::OldValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'JSI_Slot_C_UpdateItemSnap::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, K2Node_DynamicCast_AsIT_Item_Snap_Captor) == 0x000010, "Member 'JSI_Slot_C_UpdateItemSnap::K2Node_DynamicCast_AsIT_Item_Snap_Captor' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'JSI_Slot_C_UpdateItemSnap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'JSI_Slot_C_UpdateItemSnap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateItemSnap, CallFunc_UpdateSnap_RenderTarget) == 0x000028, "Member 'JSI_Slot_C_UpdateItemSnap::CallFunc_UpdateSnap_RenderTarget' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateMaterialRarity
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_UpdateMaterialRarity final
{
public:
	class UMaterialInstanceDynamic*               Dync;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetBorderColorByRarity_Color;             // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateMaterialRarity) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateMaterialRarity");
static_assert(sizeof(JSI_Slot_C_UpdateMaterialRarity) == 0x000018, "Wrong size on JSI_Slot_C_UpdateMaterialRarity");
static_assert(offsetof(JSI_Slot_C_UpdateMaterialRarity, Dync) == 0x000000, "Member 'JSI_Slot_C_UpdateMaterialRarity::Dync' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateMaterialRarity, CallFunc_GetBorderColorByRarity_Color) == 0x000008, "Member 'JSI_Slot_C_UpdateMaterialRarity::CallFunc_GetBorderColorByRarity_Color' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateStats
// 0x0018 (0x0018 - 0x0000)
struct JSI_Slot_C_UpdateStats final
{
public:
	TArray<struct FS_ItemStat>                    Stats;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSI_Slot_C_UpdateStats) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateStats");
static_assert(sizeof(JSI_Slot_C_UpdateStats) == 0x000018, "Wrong size on JSI_Slot_C_UpdateStats");
static_assert(offsetof(JSI_Slot_C_UpdateStats, Stats) == 0x000000, "Member 'JSI_Slot_C_UpdateStats::Stats' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStats, CallFunc_IsVisible_ReturnValue) == 0x000010, "Member 'JSI_Slot_C_UpdateStats::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStats, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'JSI_Slot_C_UpdateStats::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSI_Slot.JSI_Slot_C.UpdateStockCount
// 0x0138 (0x0138 - 0x0000)
struct JSI_Slot_C_UpdateStockCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0050)(HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_1;                              // 0x0078(0x0018)()
	double                                        CallFunc_BreakVector2D_X;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0120(0x0018)()
};
static_assert(alignof(JSI_Slot_C_UpdateStockCount) == 0x000008, "Wrong alignment on JSI_Slot_C_UpdateStockCount");
static_assert(sizeof(JSI_Slot_C_UpdateStockCount) == 0x000138, "Wrong size on JSI_Slot_C_UpdateStockCount");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, NewCount) == 0x000000, "Member 'JSI_Slot_C_UpdateStockCount::NewCount' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, Temp_text_Variable) == 0x000008, "Member 'JSI_Slot_C_UpdateStockCount::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'JSI_Slot_C_UpdateStockCount::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'JSI_Slot_C_UpdateStockCount::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, Temp_text_Variable_1) == 0x000078, "Member 'JSI_Slot_C_UpdateStockCount::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, CallFunc_BreakVector2D_X) == 0x000090, "Member 'JSI_Slot_C_UpdateStockCount::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, CallFunc_BreakVector2D_Y) == 0x000098, "Member 'JSI_Slot_C_UpdateStockCount::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, Temp_bool_Variable) == 0x0000A0, "Member 'JSI_Slot_C_UpdateStockCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A1, "Member 'JSI_Slot_C_UpdateStockCount::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, K2Node_Select_Default) == 0x0000A8, "Member 'JSI_Slot_C_UpdateStockCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C0, "Member 'JSI_Slot_C_UpdateStockCount::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, K2Node_MakeArray_Array) == 0x000110, "Member 'JSI_Slot_C_UpdateStockCount::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSI_Slot_C_UpdateStockCount, CallFunc_Format_ReturnValue) == 0x000120, "Member 'JSI_Slot_C_UpdateStockCount::CallFunc_Format_ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AudioManager

#include "Basic.hpp"

#include "E_Combat_structs.hpp"
#include "Engine_structs.hpp"
#include "E_TimeOfDay_structs.hpp"


namespace SDK::Params
{

// Function BPI_AudioManager.BPI_AudioManager_C.SetInside
// 0x0040 (0x0040 - 0x0000)
struct BPI_AudioManager_C_SetInside final
{
public:
	bool                                          bInside;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AmbientMultiplier;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FReverbSettings                        ReverbSettings;                                    // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class FName                                   ReverbAreaName;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReverbPriority;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioManager_C_SetInside) == 0x000008, "Wrong alignment on BPI_AudioManager_C_SetInside");
static_assert(sizeof(BPI_AudioManager_C_SetInside) == 0x000040, "Wrong size on BPI_AudioManager_C_SetInside");
static_assert(offsetof(BPI_AudioManager_C_SetInside, bInside) == 0x000000, "Member 'BPI_AudioManager_C_SetInside::bInside' has a wrong offset!");
static_assert(offsetof(BPI_AudioManager_C_SetInside, AmbientMultiplier) == 0x000008, "Member 'BPI_AudioManager_C_SetInside::AmbientMultiplier' has a wrong offset!");
static_assert(offsetof(BPI_AudioManager_C_SetInside, ReverbSettings) == 0x000010, "Member 'BPI_AudioManager_C_SetInside::ReverbSettings' has a wrong offset!");
static_assert(offsetof(BPI_AudioManager_C_SetInside, ReverbAreaName) == 0x000030, "Member 'BPI_AudioManager_C_SetInside::ReverbAreaName' has a wrong offset!");
static_assert(offsetof(BPI_AudioManager_C_SetInside, ReverbPriority) == 0x000038, "Member 'BPI_AudioManager_C_SetInside::ReverbPriority' has a wrong offset!");

// Function BPI_AudioManager.BPI_AudioManager_C.UpdateCombatStatus
// 0x0001 (0x0001 - 0x0000)
struct BPI_AudioManager_C_UpdateCombatStatus final
{
public:
	E_Combat                                      CombatStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioManager_C_UpdateCombatStatus) == 0x000001, "Wrong alignment on BPI_AudioManager_C_UpdateCombatStatus");
static_assert(sizeof(BPI_AudioManager_C_UpdateCombatStatus) == 0x000001, "Wrong size on BPI_AudioManager_C_UpdateCombatStatus");
static_assert(offsetof(BPI_AudioManager_C_UpdateCombatStatus, CombatStatus) == 0x000000, "Member 'BPI_AudioManager_C_UpdateCombatStatus::CombatStatus' has a wrong offset!");

// Function BPI_AudioManager.BPI_AudioManager_C.UpdateTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct BPI_AudioManager_C_UpdateTimeOfDay final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TimeOfDay                                   Night_;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioManager_C_UpdateTimeOfDay) == 0x000008, "Wrong alignment on BPI_AudioManager_C_UpdateTimeOfDay");
static_assert(sizeof(BPI_AudioManager_C_UpdateTimeOfDay) == 0x000010, "Wrong size on BPI_AudioManager_C_UpdateTimeOfDay");
static_assert(offsetof(BPI_AudioManager_C_UpdateTimeOfDay, Time) == 0x000000, "Member 'BPI_AudioManager_C_UpdateTimeOfDay::Time' has a wrong offset!");
static_assert(offsetof(BPI_AudioManager_C_UpdateTimeOfDay, Night_) == 0x000008, "Member 'BPI_AudioManager_C_UpdateTimeOfDay::Night_' has a wrong offset!");

}


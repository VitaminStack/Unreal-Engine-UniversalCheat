#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Inventory

#include "Basic.hpp"

#include "BP_Inventory_classes.hpp"
#include "BP_Inventory_parameters.hpp"


namespace SDK
{

// Function BP_Inventory.BP_Inventory_C.BndEvt__BP_Inventory_Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UBP_Inventory_C::BndEvt__BP_Inventory_Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "BndEvt__BP_Inventory_Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_Inventory_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.ContainerListClicked
// (BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::ContainerListClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "ContainerListClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_Inventory_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.ExecuteUbergraph_BP_Inventory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::ExecuteUbergraph_BP_Inventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "ExecuteUbergraph_BP_Inventory");

	Params::BP_Inventory_C_ExecuteUbergraph_BP_Inventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.Exit
// (BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::Exit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Exit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.GetContentPanelBySlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     Result                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetContentPanelBySlot(const struct FGameplayTag& Tag, class UPanelWidget** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetContentPanelBySlot");

	Params::BP_Inventory_C_GetContentPanelBySlot Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Inventory.BP_Inventory_C.GetDropWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDropItemBackGwidget_C*           DropWRef                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetDropWidget(class UDropItemBackGwidget_C** DropWRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetDropWidget");

	Params::BP_Inventory_C_GetDropWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DropWRef != nullptr)
		*DropWRef = Parms.DropWRef;
}


// Function BP_Inventory.BP_Inventory_C.GetFlashlightDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Dur                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetFlashlightDurability(double Dur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetFlashlightDurability");

	Params::BP_Inventory_C_GetFlashlightDurability Parms{};

	Parms.Dur = Dur;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.GetInventoryData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UJSIContainer_C*>          Containers                                             (Parm, OutParm, ContainsInstancedReference)
// TArray<class UJSIContainer_C*>          ExcludedContainers                                     (Parm, OutParm, ContainsInstancedReference)
// class UBP_EquipToContent_C*             LootContentTarget                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    OnCloseClearLootWidget_                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     EquipmentContentPanel                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TMap<class UJSIContainer_C*, class UJSIContainer_C*>SwapContainers                                         (Parm, OutParm, ContainsInstancedReference)
// class UBP_CharPreview_C*                CharacterPreviewWidget                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UClass*                           PreviewCharClass                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetInventoryData(TArray<class UJSIContainer_C*>* Containers, TArray<class UJSIContainer_C*>* ExcludedContainers, class UBP_EquipToContent_C** LootContentTarget, bool* OnCloseClearLootWidget_, class UPanelWidget** EquipmentContentPanel, TMap<class UJSIContainer_C*, class UJSIContainer_C*>* SwapContainers, class UBP_CharPreview_C** CharacterPreviewWidget, class UClass** PreviewCharClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetInventoryData");

	Params::BP_Inventory_C_GetInventoryData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Containers != nullptr)
		*Containers = std::move(Parms.Containers);

	if (ExcludedContainers != nullptr)
		*ExcludedContainers = std::move(Parms.ExcludedContainers);

	if (LootContentTarget != nullptr)
		*LootContentTarget = Parms.LootContentTarget;

	if (OnCloseClearLootWidget_ != nullptr)
		*OnCloseClearLootWidget_ = Parms.OnCloseClearLootWidget_;

	if (EquipmentContentPanel != nullptr)
		*EquipmentContentPanel = Parms.EquipmentContentPanel;

	if (SwapContainers != nullptr)
		*SwapContainers = std::move(Parms.SwapContainers);

	if (CharacterPreviewWidget != nullptr)
		*CharacterPreviewWidget = Parms.CharacterPreviewWidget;

	if (PreviewCharClass != nullptr)
		*PreviewCharClass = Parms.PreviewCharClass;
}


// Function BP_Inventory.BP_Inventory_C.GetNightVisionDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Dur                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetNightVisionDurability(double Dur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetNightVisionDurability");

	Params::BP_Inventory_C_GetNightVisionDurability Parms{};

	Parms.Dur = Dur;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.GetRespiratorDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Dur                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::GetRespiratorDurability(double Dur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetRespiratorDurability");

	Params::BP_Inventory_C_GetRespiratorDurability Parms{};

	Parms.Dur = Dur;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.GetValidReloadContainers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UJSIContainer_C*>          Containers                                             (Parm, OutParm, ContainsInstancedReference)

void UBP_Inventory_C::GetValidReloadContainers(TArray<class UJSIContainer_C*>* Containers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "GetValidReloadContainers");

	Params::BP_Inventory_C_GetValidReloadContainers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Containers != nullptr)
		*Containers = std::move(Parms.Containers);
}


// Function BP_Inventory.BP_Inventory_C.HandleCraftingInventoryButtonDown
// (BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::HandleCraftingInventoryButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "HandleCraftingInventoryButtonDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.HandleLoot&VicinityButtons
// (BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::HandleLoot_VicinityButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "HandleLoot&VicinityButtons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.Loot_OnMouseButtonDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Inventory_C::Loot_OnMouseButtonDown(const struct FKey& Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Loot_OnMouseButtonDown");

	Params::BP_Inventory_C_Loot_OnMouseButtonDown Parms{};

	Parms.Button = std::move(Button);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.LootContentVisible
// (BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::LootContentVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "LootContentVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.OnCreatedFromUtility
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Inventory_C::OnCreatedFromUtility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "OnCreatedFromUtility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_Inventory_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Inventory.BP_Inventory_C.Removed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Added_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::Removed(bool Added_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Removed");

	Params::BP_Inventory_C_Removed Parms{};

	Parms.Added_ = Added_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBP_Inventory_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "OnMouseButtonDown");

	Params::BP_Inventory_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Inventory.BP_Inventory_C.OnWidgetMouseButtonDown_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Inventory_C::OnWidgetMouseButtonDown_Event_0(const struct FKey& Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "OnWidgetMouseButtonDown_Event_0");

	Params::BP_Inventory_C_OnWidgetMouseButtonDown_Event_0 Parms{};

	Parms.Button = std::move(Button);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.OnWidgetMouseButtonDown_Event_1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Inventory_C::OnWidgetMouseButtonDown_Event_1(const struct FKey& Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "OnWidgetMouseButtonDown_Event_1");

	Params::BP_Inventory_C_OnWidgetMouseButtonDown_Event_1 Parms{};

	Parms.Button = std::move(Button);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.ShowFlashlightDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::ShowFlashlightDurability(bool Show_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "ShowFlashlightDurability");

	Params::BP_Inventory_C_ShowFlashlightDurability Parms{};

	Parms.Show_ = Show_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.ShowNightVisionDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::ShowNightVisionDurability(bool Show_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "ShowNightVisionDurability");

	Params::BP_Inventory_C_ShowNightVisionDurability Parms{};

	Parms.Show_ = Show_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.ShowRespiratorDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::ShowRespiratorDurability(bool Show_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "ShowRespiratorDurability");

	Params::BP_Inventory_C_ShowRespiratorDurability Parms{};

	Parms.Show_ = Show_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Inventory_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Tick");

	Params::BP_Inventory_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Inventory.BP_Inventory_C.Vicinity_OnMouseButtonDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Inventory_C::Vicinity_OnMouseButtonDown(const struct FKey& Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Inventory_C", "Vicinity_OnMouseButtonDown");

	Params::BP_Inventory_C_Vicinity_OnMouseButtonDown Parms{};

	Parms.Button = std::move(Button);

	UObject::ProcessEvent(Func, &Parms);
}

}


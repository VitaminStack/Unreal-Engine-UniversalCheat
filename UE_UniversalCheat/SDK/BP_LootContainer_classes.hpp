#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootContainer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_InvWeight_structs.hpp"
#include "Enum_ContainerLootTables_structs.hpp"
#include "S_ReplicatedContainerInfo_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LootContainer.BP_LootContainer_C
// 0x01A0 (0x0440 - 0x02A0)
class ABP_LootContainer_C : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	Enum_ContainerLootTables                      LootTable;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UniqueLootSets;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible)
	class FText                                   ContainerName;                                     // 0x02D8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Skip_Save_;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0xF];                                      // 0x02F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MagnifierTransform;                                // 0x0300(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckForNoLootArea;                                // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InteractingActorLoc;                               // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              SetCustomDepth_True;                               // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SetCustomDepth_False;                              // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        RefillTimer;                                       // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OutlineTimer;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerClose_;                                      // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeld;                                            // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DurationToHold;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HoldToInteractTimer;                               // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ChanceToProduceNoise;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultChanceToProduceNoise;                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SearchSoundComp;                                   // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          MarkedAsStorageContainer;                          // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_ReplicatedContainerInfo>     MainJigContainers;                                 // 0x03F0(0x0010)(Edit, BlueprintVisible, SaveGame, ContainsInstancedReference)
	TArray<struct FGuid>                          MainUIDs;                                          // 0x0400(0x0010)(Edit, BlueprintVisible, SaveGame)
	TArray<struct FS_InvWeight>                   Weights;                                           // 0x0410(0x0010)(Edit, BlueprintVisible, SaveGame)
	bool                                          ContainerLooted;                                   // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Looted;                                            // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWidgetComponent*                       W_MagnifierUI;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ActorLoaded();
	void ActorPreLoad();
	void ActorPreSave();
	void ActorSaved();
	void Bind_Refill();
	void BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void CheckDistanceFromActor();
	void ComponentsToSave(TArray<class UActorComponent*>* Components);
	void DistanceOutline();
	void Event_HoldToInteract();
	void Event_MagnifierUI(bool Spawn);
	void Event_Outline();
	void ExecuteUbergraph_BP_LootContainer(int32 EntryPoint);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetSettings(double* ChanceToProduceNoise_0, double* Default_ChanceToProduceNoise, double* DurationToHold_0);
	void HoldToInteract();
	void IsHeld_(bool* Held_);
	void JigCanInteract(bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName_0, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName_0, class AActor** ActorRef);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void NoiseEvent();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void OnEndInteract();
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteractEnded();
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OpenContainer();
	void PauseInteract();
	void PickupBuildFromGround();
	void ReceiveBeginPlay();
	void SearchSound(bool Spawn_);
	void SetInspected(const class FText& InText);
	void SetInteractDistance(class AActor* Target);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetPickupCount(int32 NewCount, bool* Result);
	void TraceToPlayer(bool* HitObject_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LootContainer_C">();
	}
	static class ABP_LootContainer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LootContainer_C>();
	}
};
static_assert(alignof(ABP_LootContainer_C) == 0x000010, "Wrong alignment on ABP_LootContainer_C");
static_assert(sizeof(ABP_LootContainer_C) == 0x000440, "Wrong size on ABP_LootContainer_C");
static_assert(offsetof(ABP_LootContainer_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_LootContainer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, AIOSubject) == 0x0002A8, "Member 'ABP_LootContainer_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, BP_JigMultiplayer) == 0x0002B0, "Member 'ABP_LootContainer_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, StaticMesh) == 0x0002B8, "Member 'ABP_LootContainer_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, LootTable) == 0x0002C0, "Member 'ABP_LootContainer_C::LootTable' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, UniqueLootSets) == 0x0002C8, "Member 'ABP_LootContainer_C::UniqueLootSets' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, ContainerName) == 0x0002D8, "Member 'ABP_LootContainer_C::ContainerName' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, Skip_Save_) == 0x0002F0, "Member 'ABP_LootContainer_C::Skip_Save_' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, MagnifierTransform) == 0x000300, "Member 'ABP_LootContainer_C::MagnifierTransform' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, CurrentActor) == 0x000360, "Member 'ABP_LootContainer_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, CheckForNoLootArea) == 0x000368, "Member 'ABP_LootContainer_C::CheckForNoLootArea' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, InteractingActorLoc) == 0x000370, "Member 'ABP_LootContainer_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, SetCustomDepth_True) == 0x000388, "Member 'ABP_LootContainer_C::SetCustomDepth_True' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, SetCustomDepth_False) == 0x000398, "Member 'ABP_LootContainer_C::SetCustomDepth_False' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, RefillTimer) == 0x0003A8, "Member 'ABP_LootContainer_C::RefillTimer' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, OutlineTimer) == 0x0003B0, "Member 'ABP_LootContainer_C::OutlineTimer' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, PlayerClose_) == 0x0003B8, "Member 'ABP_LootContainer_C::PlayerClose_' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, IsHeld) == 0x0003B9, "Member 'ABP_LootContainer_C::IsHeld' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, DurationToHold) == 0x0003C0, "Member 'ABP_LootContainer_C::DurationToHold' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, HoldToInteractTimer) == 0x0003C8, "Member 'ABP_LootContainer_C::HoldToInteractTimer' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, ChanceToProduceNoise) == 0x0003D0, "Member 'ABP_LootContainer_C::ChanceToProduceNoise' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, DefaultChanceToProduceNoise) == 0x0003D8, "Member 'ABP_LootContainer_C::DefaultChanceToProduceNoise' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, SearchSoundComp) == 0x0003E0, "Member 'ABP_LootContainer_C::SearchSoundComp' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, MarkedAsStorageContainer) == 0x0003E8, "Member 'ABP_LootContainer_C::MarkedAsStorageContainer' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, MainJigContainers) == 0x0003F0, "Member 'ABP_LootContainer_C::MainJigContainers' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, MainUIDs) == 0x000400, "Member 'ABP_LootContainer_C::MainUIDs' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, Weights) == 0x000410, "Member 'ABP_LootContainer_C::Weights' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, ContainerLooted) == 0x000420, "Member 'ABP_LootContainer_C::ContainerLooted' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, Looted) == 0x000428, "Member 'ABP_LootContainer_C::Looted' has a wrong offset!");
static_assert(offsetof(ABP_LootContainer_C, W_MagnifierUI) == 0x000438, "Member 'ABP_LootContainer_C::W_MagnifierUI' has a wrong offset!");

}


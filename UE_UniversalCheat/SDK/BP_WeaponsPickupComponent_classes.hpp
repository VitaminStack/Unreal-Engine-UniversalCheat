#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponsPickupComponent

#include "Basic.hpp"

#include "Recoil_Struct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_Firearms_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeaponsPickupComponent.BP_WeaponsPickupComponent_C
// 0x0208 (0x02A8 - 0x00A0)
class UBP_WeaponsPickupComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UJigsawItem_DataAsset_C*>        Sights;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UJigsawItem_DataAsset_C*>        Scopes;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UJigsawItem_DataAsset_C*                CurrentSight;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SightAttached_;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CurrentSuppressor;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SuppressorAttached_;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MuzzleBrakeAttached_;                              // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                CurrentMuzzleBrake;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UJigsawItem_DataAsset_C*>        Suppressors;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UJigsawItem_DataAsset_C*>        MuzzleBrakes;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                StartTraceLoc;                                     // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndTraceLoc;                                       // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeHasPushback_;                                 // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DelayBetweenSwings;                                // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageTree_;                                    // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageRock_;                                    // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageTrashObjects_;                            // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_153[0x5];                                      // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HitActors;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        SwingSpeed;                                        // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   NormalMeleeAttackMontages;                         // 0x0170(0x0010)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   PowerMeleeAttackMontages;                          // 0x0180(0x0010)(Edit, BlueprintVisible)
	class UAnimMontage*                           CrouchedMeleeAttackMontage;                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         BlendSpace;                                        // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           EquipMontage;                                      // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           UnequipMontage;                                    // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ShoveMontage;                                      // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShake;                                       // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ReloadMontage;                                     // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReloadBaseSpeed;                                   // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChamberFirearmMontage;                             // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ChamberBaseSpeed;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRecoil_Struct                         RecoilData;                                        // 0x01E0(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResetRecoilDivider;                                // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilRate;                                        // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShotgunSpread_;                                 // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShotgunMinSpread;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShotgunMaxSpread;                                  // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeaponAutomatic_;                                // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJigsawItem_DataAsset_C*>        Ammo;                                              // 0x0230(0x0010)(Edit, BlueprintVisible)
	bool                                          HasInternalMag_;                                   // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoesWeaponUseAProjectile_;                         // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ProjectileClass;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultSoundRadius;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FirearmSound;                                      // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FirearmSuppressedSound;                            // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FirearmChamberSound;                               // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        MuzzleFlash;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SuppressedMuzzleFlash;                             // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        BrassType;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        BrassFXDelay;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FireRateIfNoRPM;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotgunPellets;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Firearms                                 FirearmType;                                       // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxActorsToHitInSwing_;                            // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Event_SetTraceLoc();
	void ExecuteUbergraph_BP_WeaponsPickupComponent(int32 EntryPoint);
	void GetMuzzleBrake(bool* MuzzleBrakeAttached__0);
	void GetSight(bool* Sight, bool* LongRange_, class UJigsawItem_DataAsset_C** ID);
	void GetSuppressor(bool* SuppressorAttached__0);
	void ScopeFunction();
	void SetCurrentMuzzleBrake(class UJigsawItem_DataAsset_C* CurrentCompensator, bool Compensator_);
	void SetCurrentSight(class UJigsawItem_DataAsset_C* CurrentSight_0, bool Sight_);
	void SetCurrentSuppressor(class UJigsawItem_DataAsset_C* CurrentSuppressor_0, bool Suppressor_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponsPickupComponent_C">();
	}
	static class UBP_WeaponsPickupComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WeaponsPickupComponent_C>();
	}
};
static_assert(alignof(UBP_WeaponsPickupComponent_C) == 0x000008, "Wrong alignment on UBP_WeaponsPickupComponent_C");
static_assert(sizeof(UBP_WeaponsPickupComponent_C) == 0x0002A8, "Wrong size on UBP_WeaponsPickupComponent_C");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_WeaponsPickupComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, Sights) == 0x0000A8, "Member 'UBP_WeaponsPickupComponent_C::Sights' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, Scopes) == 0x0000B8, "Member 'UBP_WeaponsPickupComponent_C::Scopes' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CurrentSight) == 0x0000C8, "Member 'UBP_WeaponsPickupComponent_C::CurrentSight' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, SightAttached_) == 0x0000D0, "Member 'UBP_WeaponsPickupComponent_C::SightAttached_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CurrentSuppressor) == 0x0000D8, "Member 'UBP_WeaponsPickupComponent_C::CurrentSuppressor' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, SuppressorAttached_) == 0x0000E0, "Member 'UBP_WeaponsPickupComponent_C::SuppressorAttached_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, MuzzleBrakeAttached_) == 0x0000E1, "Member 'UBP_WeaponsPickupComponent_C::MuzzleBrakeAttached_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CurrentMuzzleBrake) == 0x0000E8, "Member 'UBP_WeaponsPickupComponent_C::CurrentMuzzleBrake' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, Suppressors) == 0x0000F0, "Member 'UBP_WeaponsPickupComponent_C::Suppressors' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, MuzzleBrakes) == 0x000100, "Member 'UBP_WeaponsPickupComponent_C::MuzzleBrakes' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, StartTraceLoc) == 0x000110, "Member 'UBP_WeaponsPickupComponent_C::StartTraceLoc' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, EndTraceLoc) == 0x000128, "Member 'UBP_WeaponsPickupComponent_C::EndTraceLoc' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, MeleeHasPushback_) == 0x000140, "Member 'UBP_WeaponsPickupComponent_C::MeleeHasPushback_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, DelayBetweenSwings) == 0x000148, "Member 'UBP_WeaponsPickupComponent_C::DelayBetweenSwings' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CanDamageTree_) == 0x000150, "Member 'UBP_WeaponsPickupComponent_C::CanDamageTree_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CanDamageRock_) == 0x000151, "Member 'UBP_WeaponsPickupComponent_C::CanDamageRock_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CanDamageTrashObjects_) == 0x000152, "Member 'UBP_WeaponsPickupComponent_C::CanDamageTrashObjects_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, HitActors) == 0x000158, "Member 'UBP_WeaponsPickupComponent_C::HitActors' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, SwingSpeed) == 0x000168, "Member 'UBP_WeaponsPickupComponent_C::SwingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, NormalMeleeAttackMontages) == 0x000170, "Member 'UBP_WeaponsPickupComponent_C::NormalMeleeAttackMontages' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, PowerMeleeAttackMontages) == 0x000180, "Member 'UBP_WeaponsPickupComponent_C::PowerMeleeAttackMontages' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CrouchedMeleeAttackMontage) == 0x000190, "Member 'UBP_WeaponsPickupComponent_C::CrouchedMeleeAttackMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, BlendSpace) == 0x000198, "Member 'UBP_WeaponsPickupComponent_C::BlendSpace' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, EquipMontage) == 0x0001A0, "Member 'UBP_WeaponsPickupComponent_C::EquipMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, UnequipMontage) == 0x0001A8, "Member 'UBP_WeaponsPickupComponent_C::UnequipMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ShoveMontage) == 0x0001B0, "Member 'UBP_WeaponsPickupComponent_C::ShoveMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, CameraShake) == 0x0001B8, "Member 'UBP_WeaponsPickupComponent_C::CameraShake' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ReloadMontage) == 0x0001C0, "Member 'UBP_WeaponsPickupComponent_C::ReloadMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ReloadBaseSpeed) == 0x0001C8, "Member 'UBP_WeaponsPickupComponent_C::ReloadBaseSpeed' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ChamberFirearmMontage) == 0x0001D0, "Member 'UBP_WeaponsPickupComponent_C::ChamberFirearmMontage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ChamberBaseSpeed) == 0x0001D8, "Member 'UBP_WeaponsPickupComponent_C::ChamberBaseSpeed' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, RecoilData) == 0x0001E0, "Member 'UBP_WeaponsPickupComponent_C::RecoilData' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ResetRecoilDivider) == 0x000200, "Member 'UBP_WeaponsPickupComponent_C::ResetRecoilDivider' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, RecoilRate) == 0x000208, "Member 'UBP_WeaponsPickupComponent_C::RecoilRate' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, UseShotgunSpread_) == 0x000210, "Member 'UBP_WeaponsPickupComponent_C::UseShotgunSpread_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ShotgunMinSpread) == 0x000218, "Member 'UBP_WeaponsPickupComponent_C::ShotgunMinSpread' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ShotgunMaxSpread) == 0x000220, "Member 'UBP_WeaponsPickupComponent_C::ShotgunMaxSpread' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, IsWeaponAutomatic_) == 0x000228, "Member 'UBP_WeaponsPickupComponent_C::IsWeaponAutomatic_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, Ammo) == 0x000230, "Member 'UBP_WeaponsPickupComponent_C::Ammo' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, HasInternalMag_) == 0x000240, "Member 'UBP_WeaponsPickupComponent_C::HasInternalMag_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, DoesWeaponUseAProjectile_) == 0x000241, "Member 'UBP_WeaponsPickupComponent_C::DoesWeaponUseAProjectile_' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ProjectileClass) == 0x000248, "Member 'UBP_WeaponsPickupComponent_C::ProjectileClass' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, DefaultSoundRadius) == 0x000250, "Member 'UBP_WeaponsPickupComponent_C::DefaultSoundRadius' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, FirearmSound) == 0x000258, "Member 'UBP_WeaponsPickupComponent_C::FirearmSound' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, FirearmSuppressedSound) == 0x000260, "Member 'UBP_WeaponsPickupComponent_C::FirearmSuppressedSound' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, FirearmChamberSound) == 0x000268, "Member 'UBP_WeaponsPickupComponent_C::FirearmChamberSound' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, MuzzleFlash) == 0x000270, "Member 'UBP_WeaponsPickupComponent_C::MuzzleFlash' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, SuppressedMuzzleFlash) == 0x000278, "Member 'UBP_WeaponsPickupComponent_C::SuppressedMuzzleFlash' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, BrassType) == 0x000280, "Member 'UBP_WeaponsPickupComponent_C::BrassType' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, BrassFXDelay) == 0x000288, "Member 'UBP_WeaponsPickupComponent_C::BrassFXDelay' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, FireRateIfNoRPM) == 0x000290, "Member 'UBP_WeaponsPickupComponent_C::FireRateIfNoRPM' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, ShotgunPellets) == 0x000298, "Member 'UBP_WeaponsPickupComponent_C::ShotgunPellets' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, FirearmType) == 0x00029C, "Member 'UBP_WeaponsPickupComponent_C::FirearmType' has a wrong offset!");
static_assert(offsetof(UBP_WeaponsPickupComponent_C, MaxActorsToHitInSwing_) == 0x0002A0, "Member 'UBP_WeaponsPickupComponent_C::MaxActorsToHitInSwing_' has a wrong offset!");

}


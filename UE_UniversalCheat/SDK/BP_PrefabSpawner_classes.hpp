#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PrefabSpawner

#include "Basic.hpp"

#include "Enum_PrefabType_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PrefabSpawner.BP_PrefabSpawner_C
// 0x00B8 (0x0358 - 0x02A0)
class ABP_PrefabSpawner_C : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x02B8(0x0018)(Edit, BlueprintVisible)
	bool                                          RandomPossibilityToSpawn_;                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chance;                                            // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Prefab;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DebugOffset;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicEvent_;                                     // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BypassSpawnChecks_;                                // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayStart;                                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_PrefabType                               PrefabType;                                        // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SoundOnSpawn;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawned_;                                          // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Marker_;                                           // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Marker_Texture;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Marker_Title;                                      // 0x0318(0x0018)(Edit, BlueprintVisible)
	class FText                                   Marker_Description;                                // 0x0330(0x0018)(Edit, BlueprintVisible)
	class ABP_Marker_C*                           Marker;                                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToRemoveMarker;                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckSurroundingArea(bool* Spawn_);
	void ExecuteUbergraph_BP_PrefabSpawner(int32 EntryPoint);
	void GetDistanceToMarker();
	void IsDynamicEvent_(bool* Dynamic_);
	void IsEventSpawned_(bool* Spawned__0);
	void PrefabTypeChanceMulitplier(double* Chance_0);
	void Random_Check(bool* Spawn);
	void ReceiveBeginPlay();
	void SpawnMarker();
	void SpawnRandomEvent();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PrefabSpawner_C">();
	}
	static class ABP_PrefabSpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PrefabSpawner_C>();
	}
};
static_assert(alignof(ABP_PrefabSpawner_C) == 0x000008, "Wrong alignment on ABP_PrefabSpawner_C");
static_assert(sizeof(ABP_PrefabSpawner_C) == 0x000358, "Wrong size on ABP_PrefabSpawner_C");
static_assert(offsetof(ABP_PrefabSpawner_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_PrefabSpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, TextRender) == 0x0002A8, "Member 'ABP_PrefabSpawner_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Billboard) == 0x0002B0, "Member 'ABP_PrefabSpawner_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Text) == 0x0002B8, "Member 'ABP_PrefabSpawner_C::Text' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, RandomPossibilityToSpawn_) == 0x0002D0, "Member 'ABP_PrefabSpawner_C::RandomPossibilityToSpawn_' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Chance) == 0x0002D8, "Member 'ABP_PrefabSpawner_C::Chance' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Prefab) == 0x0002E0, "Member 'ABP_PrefabSpawner_C::Prefab' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, DebugOffset) == 0x0002E8, "Member 'ABP_PrefabSpawner_C::DebugOffset' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, DynamicEvent_) == 0x0002F0, "Member 'ABP_PrefabSpawner_C::DynamicEvent_' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, BypassSpawnChecks_) == 0x0002F1, "Member 'ABP_PrefabSpawner_C::BypassSpawnChecks_' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, DelayStart) == 0x0002F4, "Member 'ABP_PrefabSpawner_C::DelayStart' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, PrefabType) == 0x0002F8, "Member 'ABP_PrefabSpawner_C::PrefabType' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, SoundOnSpawn) == 0x000300, "Member 'ABP_PrefabSpawner_C::SoundOnSpawn' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Spawned_) == 0x000308, "Member 'ABP_PrefabSpawner_C::Spawned_' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Marker_) == 0x000309, "Member 'ABP_PrefabSpawner_C::Marker_' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Marker_Texture) == 0x000310, "Member 'ABP_PrefabSpawner_C::Marker_Texture' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Marker_Title) == 0x000318, "Member 'ABP_PrefabSpawner_C::Marker_Title' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Marker_Description) == 0x000330, "Member 'ABP_PrefabSpawner_C::Marker_Description' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, Marker) == 0x000348, "Member 'ABP_PrefabSpawner_C::Marker' has a wrong offset!");
static_assert(offsetof(ABP_PrefabSpawner_C, DistanceToRemoveMarker) == 0x000350, "Member 'ABP_PrefabSpawner_C::DistanceToRemoveMarker' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_LootType_structs.hpp"
#include "Enum_Difficulty_structs.hpp"
#include "Enum_RadiationLevel_structs.hpp"
#include "Enum_ContainerLootTables_structs.hpp"
#include "Enum_AILootTables_structs.hpp"
#include "Enum_VendorTypes_structs.hpp"
#include "Enum_CraftingTableTypes_structs.hpp"
#include "Enum_LootDifficulties_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GameFunctionLibrary.GameFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UGameFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddUniqueLoot(TArray<class FName>& UnqiueItemsSet, class UBP_JigMultiplayer_C* JigComp, int32 Container, class UObject* __WorldContext);
	static void ApplyMedicalEffect(class AActor* Actor, TArray<class FName>& Medical_Effects, double ChanceForBleed, double ChanceForHeavyBleed, double ChanceForBrokenBone, class UObject* __WorldContext);
	static void ApplyRadiationDamage(class AActor* Actor, double ChanceForRadDamage, double RadDamage, bool CanMaskProtect_, class UObject* __WorldContext);
	static void CastToCharacter(class UObject* __WorldContext, class ABP_PlayerCharacter_C** Character);
	static void CastToController(class UObject* __WorldContext, class ABP_PlayerController_C** Controller);
	static void Centre_Cursor(class UObject* __WorldContext);
	static void ChangeDifficulty(Enum_Difficulty Difficulty, class UObject* __WorldContext);
	static void CreateNotificationUI(const class FText& Message, class UTexture2D* Icon, const struct FLinearColor& Icon_Colour, double Delay, bool Force_Notification_, class UObject* __WorldContext);
	static void CreateZoneAreaUI(bool Entering_Area_, const class FText& Area_Name, class UTexture* Texture, const struct FLinearColor& Color, class UObject* __WorldContext);
	static void DestroyAllActors(class UObject* __WorldContext);
	static void DestroyMainMenuActors(class UObject* __WorldContext);
	static void GetBehindObject_(class AActor* Actor, class AActor* Interactor, const struct FVector& Location, class UObject* __WorldContext, bool* BehindObject_);
	static void GetCharacterFromController(class AController* Object, class UObject* __WorldContext, class ABP_PlayerCharacter_C** Character);
	static void GetGameDirectory(class UObject* __WorldContext, class FString* Path);
	static void GetGameHUD(class UObject* __WorldContext, class AHUD_Game_C** HUD);
	static void GetGameInstance(class UObject* __WorldContext, class USD_GameInstance_C** Instance);
	static void GetGameMode(class UObject* __WorldContext, class ABP_SurroundeadGameMode_C** GameMode);
	static void GetHUD(class UObject* __WorldContext, class AHUD_Game_C** HUD);
	static void GetKey(const class UInputAction* Action, class UObject* __WorldContext, struct FKey* Key);
	static void GetLevellingComponent(class UObject* __WorldContext, class ULevellingComponent_C** LevellingComponent);
	static void GetLockPickingComponent(class UObject* __WorldContext, class ULockPickingComponent_C** LevellingComponent);
	static void GetLootTableName(Enum_ContainerLootTables Selection, class UObject* __WorldContext, class FText* Text);
	static void GetPassiveSkillsComponent(class UObject* __WorldContext, class UPassiveSkillsComponent_C** SkillsComponent);
	static void GetRadiationLevel(Enum_RadiationLevel Level, class UObject* __WorldContext, double* Value);
	static void GetRandomActorOfClass(TSubclassOf<class AActor> ActorClass, class UObject* __WorldContext, class AActor** Actor);
	static void GetSkillTreeManager(class UObject* __WorldContext, class UTechTreeComponent_C** TechTree);
	static void GetUDS(class UObject* __WorldContext, class AUltra_Dynamic_Sky_C** UDS);
	static void GetUDW(class UObject* __WorldContext, class AUltra_Dynamic_Weather_C** UDW);
	static void isKeyDown(const class UInputAction* Action, class UObject* __WorldContext, bool* Down);
	static void IsOutsideOfPlayerView_(const struct FVector& Loc, class AActor* Actor, class UObject* __WorldContext, bool* NotInPlayerView_);
	static void LookForMapping(struct FKeyEvent& Key, const class FText& Mapping, const class UInputAction* Action, class UObject* __WorldContext, bool* Found);
	static void LootDegredationMultiplier(double Chance, class UObject* __WorldContext, double* NewChance);
	static void LootDifficultySetting(class FName CVar, Enum_LootDifficulties Selection1, class UObject* __WorldContext);
	static void LootTypeMultiplier(Enum_LootType Selection, double Chance, class UObject* __WorldContext, double* Multiplier);
	static void ResetPlayerStats(class UObject* __WorldContext);
	static void ScalingDamageMultiplier(double Dmg, class UObject* __WorldContext, double* NewDmg);
	static void ScalingHealthMultiplier(double MaxHealth, class UObject* __WorldContext, double* NewMaxHealth);
	static void SetItemsToCraft(Enum_CraftingTableTypes Table, class UBP_JigMultiplayer_C* JigComp, class UObject* __WorldContext);
	static void SetItemsToSell(Enum_VendorTypes Table, class UBP_JigMultiplayer_C* JigComp, class UObject* __WorldContext);
	static void SetLootTable_AI_DA(Enum_AILootTables Table, class UBP_JigMultiplayer_C* JigComp, int32 Container, class UObject* __WorldContext);
	static void SetLootTable_Container_DA(Enum_ContainerLootTables Table, class UBP_JigMultiplayer_C* JigComp, int32 Container, class UObject* __WorldContext);
	static double XpMultiplierCalc(double Min, double Max, class UObject* __WorldContext);

	void SetDifficulty(const struct FStruct_Difficulty& Settings, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GameFunctionLibrary_C">();
	}
	static class UGameFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameFunctionLibrary_C>();
	}
};
static_assert(alignof(UGameFunctionLibrary_C) == 0x000008, "Wrong alignment on UGameFunctionLibrary_C");
static_assert(sizeof(UGameFunctionLibrary_C) == 0x000028, "Wrong size on UGameFunctionLibrary_C");

}


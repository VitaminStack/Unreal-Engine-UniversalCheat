#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_AIOptimization_structs.hpp"
#include "S_AISpawner_structs.hpp"
#include "S_AIRespawn_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIManager.BP_AIManager_C
// 0x00E8 (0x0380 - 0x0298)
class ABP_AIManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FS_AIOptimization                      AI_Optimization;                                   // 0x02B0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Spawn_AI;                                   // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_AISpawner>                   Spawn_AI;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible)
	double                                        Overlap_Check;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Time;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Time_Variation;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Random_Rotations;                                  // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AI_Rotation;                                       // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Spawn_Retries;                                     // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Respawn_AI;                                        // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Respawn_Time;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Respawn_Time_Variation;                            // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_AIRespawn>                   Respawn_Timers;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class APawn*>                          Spawned_AI;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ANavMeshBoundsVolume*                   Nav_Bounds;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_AISpawner                           Spawn_Element;                                     // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Spawn_Collision_Trace;                             // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_AISpawner>                   Current_Spawning_AI;                               // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_MasterWayPoint_C*>           WayPoints;                                         // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void Add_AI_Respawn_Timer(class ACharacter* AI_Character);
	void AI_Respawn_Timer_Finished(class ACharacter* AI_Pawn);
	void ExecuteUbergraph_BP_AIManager(int32 EntryPoint);
	void Find_Respawn_Location(bool* Location_Found, struct FVector* OutHit);
	void Next_Spawn_AI();
	void ReceiveBeginPlay();
	void Reset_Respawn();
	void Respawn_AI_At_Location(const struct FVector& Location, class APawn* Pawn);
	void Respawn_Timer();
	void RespawnAI(class APawn* Pawn);
	void Return_AI_Manager(class ABP_AIManager_C** AI_Manager);
	void Return_AI_Manager_Settings(struct FS_AIOptimization* AI_Settings);
	void Spawn_AI_At_Location();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIManager_C">();
	}
	static class ABP_AIManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AIManager_C>();
	}
};
static_assert(alignof(ABP_AIManager_C) == 0x000008, "Wrong alignment on ABP_AIManager_C");
static_assert(sizeof(ABP_AIManager_C) == 0x000380, "Wrong size on ABP_AIManager_C");
static_assert(offsetof(ABP_AIManager_C, UberGraphFrame) == 0x000298, "Member 'ABP_AIManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Box) == 0x0002A0, "Member 'ABP_AIManager_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_AIManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, AI_Optimization) == 0x0002B0, "Member 'ABP_AIManager_C::AI_Optimization' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Enable_Spawn_AI) == 0x0002BC, "Member 'ABP_AIManager_C::Enable_Spawn_AI' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_AI) == 0x0002C0, "Member 'ABP_AIManager_C::Spawn_AI' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Overlap_Check) == 0x0002D0, "Member 'ABP_AIManager_C::Overlap_Check' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_Time) == 0x0002D8, "Member 'ABP_AIManager_C::Spawn_Time' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_Time_Variation) == 0x0002E0, "Member 'ABP_AIManager_C::Spawn_Time_Variation' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Random_Rotations) == 0x0002E8, "Member 'ABP_AIManager_C::Random_Rotations' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, AI_Rotation) == 0x0002F0, "Member 'ABP_AIManager_C::AI_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_Retries) == 0x000308, "Member 'ABP_AIManager_C::Spawn_Retries' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Respawn_AI) == 0x00030C, "Member 'ABP_AIManager_C::Respawn_AI' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Respawn_Time) == 0x000310, "Member 'ABP_AIManager_C::Respawn_Time' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Respawn_Time_Variation) == 0x000318, "Member 'ABP_AIManager_C::Respawn_Time_Variation' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Respawn_Timers) == 0x000320, "Member 'ABP_AIManager_C::Respawn_Timers' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawned_AI) == 0x000330, "Member 'ABP_AIManager_C::Spawned_AI' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Nav_Bounds) == 0x000340, "Member 'ABP_AIManager_C::Nav_Bounds' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_Element) == 0x000348, "Member 'ABP_AIManager_C::Spawn_Element' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Spawn_Collision_Trace) == 0x000358, "Member 'ABP_AIManager_C::Spawn_Collision_Trace' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, Current_Spawning_AI) == 0x000360, "Member 'ABP_AIManager_C::Current_Spawning_AI' has a wrong offset!");
static_assert(offsetof(ABP_AIManager_C, WayPoints) == 0x000370, "Member 'ABP_AIManager_C::WayPoints' has a wrong offset!");

}


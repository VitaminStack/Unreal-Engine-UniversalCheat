#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildingComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_BuildingSnapTypes_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"


namespace SDK::Params
{

// Function BuildingComponent.BuildingComponent_C.BoundsCheck
// 0x03A0 (0x03A0 - 0x0000)
struct BuildingComponent_C_BoundsCheck final
{
public:
	float                                         DivideScale;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertBool;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoundsOverlapOffset;                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0100(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakBoxSphereBounds_Origin;              // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakBoxSphereBounds_BoxExtent;           // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakBoxSphereBounds_SphereRadius;        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x01D0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB[0x1];                                      // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0338(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaceableOnLandscape_ReturnValue;       // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_BoundsCheck) == 0x000010, "Wrong alignment on BuildingComponent_C_BoundsCheck");
static_assert(sizeof(BuildingComponent_C_BoundsCheck) == 0x0003A0, "Wrong size on BuildingComponent_C_BoundsCheck");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, DivideScale) == 0x000000, "Member 'BuildingComponent_C_BoundsCheck::DivideScale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, InvertBool) == 0x000004, "Member 'BuildingComponent_C_BoundsCheck::InvertBool' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, BoundsOverlapOffset) == 0x000008, "Member 'BuildingComponent_C_BoundsCheck::BoundsOverlapOffset' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, Hit) == 0x000020, "Member 'BuildingComponent_C_BoundsCheck::Hit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, Temp_object_Variable) == 0x000028, "Member 'BuildingComponent_C_BoundsCheck::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000038, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakTransform_Rotation) == 0x000068, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakTransform_Scale) == 0x000080, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000A0, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_GetBounds_ReturnValue) == 0x000100, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakBoxSphereBounds_Origin) == 0x000138, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakBoxSphereBounds_Origin' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakBoxSphereBounds_BoxExtent) == 0x000150, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakBoxSphereBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakBoxSphereBounds_SphereRadius) == 0x000168, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakBoxSphereBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x000170, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_Divide_VectorVector_ReturnValue) == 0x000188, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_TransformLocation_ReturnValue) == 0x0001A0, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_SelectVector_ReturnValue) == 0x0001B8, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BoxTraceSingle_OutHit) == 0x0001D0, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BoxTraceSingle_ReturnValue) == 0x0002B8, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x0002B9, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002BA, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_Time) == 0x0002BC, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_Distance) == 0x0002C0, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_Location) == 0x0002C8, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x0002E0, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_Normal) == 0x0002F8, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x000310, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_PhysMat) == 0x000328, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_HitActor) == 0x000330, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_HitComponent) == 0x000338, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000340, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_BoneName) == 0x000348, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_HitItem) == 0x000350, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_ElementIndex) == 0x000354, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_FaceIndex) == 0x000358, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_TraceStart) == 0x000360, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_BreakHitResult_TraceEnd) == 0x000378, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_IsPlaceableOnLandscape_ReturnValue) == 0x000390, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_IsPlaceableOnLandscape_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BoundsCheck, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x000398, "Member 'BuildingComponent_C_BoundsCheck::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.BuildCycle
// 0x06B0 (0x06B0 - 0x0000)
struct BuildingComponent_C_BuildCycle final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BoundsCheck_Hit;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoundsCheck_Hit_1;                        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerCharacter_C*                  CallFunc_GetPlayerRef_Player;                      // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x01C8(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0208(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0318(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0330(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0370(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0398(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x03D0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x04B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BA[0x6];                                      // 0x04BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x04D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0580(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x059C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x05E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0640(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BoundsCheck_DivideScale_ImplicitCast;     // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BoundsCheck_DivideScale_ImplicitCast_1;   // 0x06A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_BuildCycle) == 0x000010, "Wrong alignment on BuildingComponent_C_BuildCycle");
static_assert(sizeof(BuildingComponent_C_BuildCycle) == 0x0006B0, "Wrong size on BuildingComponent_C_BuildCycle");
static_assert(offsetof(BuildingComponent_C_BuildCycle, Temp_object_Variable) == 0x000000, "Member 'BuildingComponent_C_BuildCycle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BoundsCheck_Hit) == 0x000010, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BoundsCheck_Hit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BoundsCheck_Hit_1) == 0x000011, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BoundsCheck_Hit_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_bBlockingHit) == 0x000012, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_bInitialOverlap) == 0x000013, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Time) == 0x000014, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Distance) == 0x000018, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Location) == 0x000020, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ImpactPoint) == 0x000038, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Normal) == 0x000050, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ImpactNormal) == 0x000068, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_PhysMat) == 0x000080, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitActor) == 0x000088, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitComponent) == 0x000090, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitBoneName) == 0x000098, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_BoneName) == 0x0000A0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitItem) == 0x0000A8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ElementIndex) == 0x0000AC, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_FaceIndex) == 0x0000B0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_TraceStart) == 0x0000B8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_TraceEnd) == 0x0000D0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetOwner_ReturnValue) == 0x0000F0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, K2Node_DynamicCast_AsBPI_Player) == 0x0000F8, "Member 'BuildingComponent_C_BuildCycle::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BuildingComponent_C_BuildCycle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetPlayerRef_Player) == 0x000110, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetPlayerRef_Player' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_IsValid_ReturnValue_1) == 0x000118, "Member 'BuildingComponent_C_BuildCycle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_SelectFloat_ReturnValue) == 0x000120, "Member 'BuildingComponent_C_BuildCycle::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Location) == 0x000128, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Rotation) == 0x000140, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Scale) == 0x000158, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000170, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, Temp_bool_Variable) == 0x000178, "Member 'BuildingComponent_C_BuildCycle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetCameraRotation_ReturnValue) == 0x000180, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetCameraLocation_ReturnValue) == 0x000198, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_GetForwardVector_ReturnValue) == 0x0001B0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, Temp_object_Variable_1) == 0x0001C8, "Member 'BuildingComponent_C_BuildCycle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001D8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_LineTraceSingle_OutHit) == 0x000208, "Member 'BuildingComponent_C_BuildCycle::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_LineTraceSingle_ReturnValue) == 0x0002F0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_IsValid_ReturnValue_2) == 0x0002F1, "Member 'BuildingComponent_C_BuildCycle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002F2, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002F3, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Time_1) == 0x0002F4, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Distance_1) == 0x0002F8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Location_1) == 0x000300, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000318, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_Normal_1) == 0x000330, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000348, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_PhysMat_1) == 0x000360, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitActor_1) == 0x000368, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitComponent_1) == 0x000370, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitBoneName_1) == 0x000378, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_BoneName_1) == 0x000380, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_HitItem_1) == 0x000388, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_ElementIndex_1) == 0x00038C, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_FaceIndex_1) == 0x000390, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_TraceStart_1) == 0x000398, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakHitResult_TraceEnd_1) == 0x0003B0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_ActorHasTag_ReturnValue) == 0x0003C8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_LineTraceSingle_OutHit_1) == 0x0003D0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_LineTraceSingle_ReturnValue_1) == 0x0004B8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_IsValid_ReturnValue_3) == 0x0004B9, "Member 'BuildingComponent_C_BuildCycle::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, K2Node_Select_Default) == 0x0004C0, "Member 'BuildingComponent_C_BuildCycle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0004D8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeTransform_ReturnValue) == 0x0004F0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Location_1) == 0x000550, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Rotation_1) == 0x000568, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakTransform_Scale_1) == 0x000580, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakRotator_Roll) == 0x000598, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakRotator_Pitch) == 0x00059C, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BreakRotator_Yaw) == 0x0005A0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeRotator_ReturnValue) == 0x0005A8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeRotator_ReturnValue_1) == 0x0005C0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeTransform_ReturnValue_1) == 0x0005E0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeTransform_ReturnValue_2) == 0x000640, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BoundsCheck_DivideScale_ImplicitCast) == 0x0006A0, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BoundsCheck_DivideScale_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_BoundsCheck_DivideScale_ImplicitCast_1) == 0x0006A4, "Member 'BuildingComponent_C_BuildCycle::CallFunc_BoundsCheck_DivideScale_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0006A8, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_BuildCycle, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x0006AC, "Member 'BuildingComponent_C_BuildCycle::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.ChangeRotationZ
// 0x0050 (0x0050 - 0x0000)
struct BuildingComponent_C_ChangeRotationZ final
{
public:
	bool                                          Increase_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_ChangeRotationZ) == 0x000008, "Wrong alignment on BuildingComponent_C_ChangeRotationZ");
static_assert(sizeof(BuildingComponent_C_ChangeRotationZ) == 0x000050, "Wrong size on BuildingComponent_C_ChangeRotationZ");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, Increase_) == 0x000000, "Member 'BuildingComponent_C_ChangeRotationZ::Increase_' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, Value) == 0x000008, "Member 'BuildingComponent_C_ChangeRotationZ::Value' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, Success) == 0x000010, "Member 'BuildingComponent_C_ChangeRotationZ::Success' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000030, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ChangeRotationZ, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'BuildingComponent_C_ChangeRotationZ::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.CheckForSnap
// 0x0300 (0x0300 - 0x0000)
struct BuildingComponent_C_CheckForSnap final
{
public:
	Enum_BuildingSnapTypes                        Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetNearestTransform_ResultTransform;      // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotateSnap_Rotator;                       // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABuildable_MASTER_C*                    K2Node_DynamicCast_AsBuildable_MASTER;             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UChildActorComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0250(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UChildActorComponent*                   CallFunc_Array_Get_Item;                           // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26E[0x2];                                      // 0x026E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x0274(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0290(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_CheckForSnap) == 0x000010, "Wrong alignment on BuildingComponent_C_CheckForSnap");
static_assert(sizeof(BuildingComponent_C_CheckForSnap) == 0x000300, "Wrong size on BuildingComponent_C_CheckForSnap");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, Type) == 0x000000, "Member 'BuildingComponent_C_CheckForSnap::Type' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BuildingComponent_C_CheckForSnap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000008, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Conv_StringToName_ReturnValue) == 0x00001C, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BuildingComponent_C_CheckForSnap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, Temp_int_Array_Index_Variable_1) == 0x000028, "Member 'BuildingComponent_C_CheckForSnap::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'BuildingComponent_C_CheckForSnap::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_bBlockingHit) == 0x000034, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_bInitialOverlap) == 0x000035, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_Time) == 0x000038, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_Distance) == 0x00003C, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_Location) == 0x000040, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_ImpactPoint) == 0x000058, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_Normal) == 0x000070, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_ImpactNormal) == 0x000088, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_PhysMat) == 0x0000A0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_HitActor) == 0x0000A8, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_HitComponent) == 0x0000B0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_HitBoneName) == 0x0000B8, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_BoneName) == 0x0000C0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_HitItem) == 0x0000C8, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_ElementIndex) == 0x0000CC, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_FaceIndex) == 0x0000D0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_TraceStart) == 0x0000D8, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakHitResult_TraceEnd) == 0x0000F0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_GetNearestTransform_ResultTransform) == 0x000110, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_GetNearestTransform_ResultTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_IsValid_ReturnValue) == 0x000170, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakTransform_Location) == 0x000178, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakTransform_Rotation) == 0x000190, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_BreakTransform_Scale) == 0x0001A8, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_RotateSnap_Rotator) == 0x0001C0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_RotateSnap_Rotator' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, K2Node_DynamicCast_AsBuildable_MASTER) == 0x0001D8, "Member 'BuildingComponent_C_CheckForSnap::K2Node_DynamicCast_AsBuildable_MASTER' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, K2Node_DynamicCast_bSuccess) == 0x0001E0, "Member 'BuildingComponent_C_CheckForSnap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000250, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Array_Get_Item) == 0x000260, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Array_Length_ReturnValue) == 0x000268, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_IsValid_ReturnValue_1) == 0x00026C, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Less_IntInt_ReturnValue) == 0x00026D, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Array_Length_ReturnValue_1) == 0x000270, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Array_Get_Item_1) == 0x000274, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Less_IntInt_ReturnValue_1) == 0x00027C, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00027D, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Conv_NameToString_ReturnValue) == 0x000280, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_GetSocketTransform_ReturnValue) == 0x000290, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_CheckForSnap, CallFunc_Array_AddUnique_ReturnValue) == 0x0002F0, "Member 'BuildingComponent_C_CheckForSnap::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.Event_LaunchBuildMode
// 0x0018 (0x0018 - 0x0000)
struct BuildingComponent_C_Event_LaunchBuildMode final
{
public:
	class UJigsawItem_DataAsset_C*                DA;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Replacing_;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReplacingActor_0;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_Event_LaunchBuildMode) == 0x000008, "Wrong alignment on BuildingComponent_C_Event_LaunchBuildMode");
static_assert(sizeof(BuildingComponent_C_Event_LaunchBuildMode) == 0x000018, "Wrong size on BuildingComponent_C_Event_LaunchBuildMode");
static_assert(offsetof(BuildingComponent_C_Event_LaunchBuildMode, DA) == 0x000000, "Member 'BuildingComponent_C_Event_LaunchBuildMode::DA' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_Event_LaunchBuildMode, Replacing_) == 0x000008, "Member 'BuildingComponent_C_Event_LaunchBuildMode::Replacing_' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_Event_LaunchBuildMode, ReplacingActor_0) == 0x000010, "Member 'BuildingComponent_C_Event_LaunchBuildMode::ReplacingActor_0' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.ExecuteUbergraph_BuildingComponent
// 0x0110 (0x0110 - 0x0000)
struct BuildingComponent_C_ExecuteUbergraph_BuildingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigsawItem_DataAsset_C*                K2Node_CustomEvent_DA;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Replacing_;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_ReplacingActor;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_SpawnTransform;                 // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x00A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ingame_C*                           CallFunc_GetInGameUI_UI;                           // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player_1;                 // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerCharacter_C*                  CallFunc_GetPlayerRef_Player;                      // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent) == 0x000010, "Wrong alignment on BuildingComponent_C_ExecuteUbergraph_BuildingComponent");
static_assert(sizeof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent) == 0x000110, "Wrong size on BuildingComponent_C_ExecuteUbergraph_BuildingComponent");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, EntryPoint) == 0x000000, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_CustomEvent_DA) == 0x000008, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_CustomEvent_DA' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_CustomEvent_Replacing_) == 0x000010, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_CustomEvent_Replacing_' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_CustomEvent_ReplacingActor) == 0x000018, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_CustomEvent_ReplacingActor' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_CustomEvent_SpawnTransform) == 0x000020, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_CustomEvent_SpawnTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_HasAuthority_ReturnValue) == 0x000088, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000090, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_AsCharacter) == 0x000098, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_K2_SetTimer_ReturnValue) == 0x0000A8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetOwner_ReturnValue_2) == 0x0000B0, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_AsBPI_Player) == 0x0000B8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetInGameUI_UI) == 0x0000D0, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetInGameUI_UI' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_IsValid_ReturnValue_1) == 0x0000D9, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetOwner_ReturnValue_3) == 0x0000E0, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_AsBPI_Player_1) == 0x0000E8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_AsBPI_Player_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_GetPlayerRef_Player) == 0x000100, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_GetPlayerRef_Player' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_ExecuteUbergraph_BuildingComponent, CallFunc_IsValid_ReturnValue_2) == 0x000108, "Member 'BuildingComponent_C_ExecuteUbergraph_BuildingComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.GetNearestTransform
// 0x02F0 (0x02F0 - 0x0000)
struct BuildingComponent_C_GetNearestTransform final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Transforms;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ResultTransform;                                   // 0x0030(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LocalSelectedTransform;                            // 0x0090(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocalSelectedLength;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     LocalTransforms;                                   // 0x00F8(0x0010)(Edit, BlueprintVisible)
	struct FVector                                LocalLocation;                                     // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x0210(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_GetNearestTransform) == 0x000010, "Wrong alignment on BuildingComponent_C_GetNearestTransform");
static_assert(sizeof(BuildingComponent_C_GetNearestTransform) == 0x0002F0, "Wrong size on BuildingComponent_C_GetNearestTransform");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, Location) == 0x000000, "Member 'BuildingComponent_C_GetNearestTransform::Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, Transforms) == 0x000018, "Member 'BuildingComponent_C_GetNearestTransform::Transforms' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, ResultTransform) == 0x000030, "Member 'BuildingComponent_C_GetNearestTransform::ResultTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, LocalSelectedTransform) == 0x000090, "Member 'BuildingComponent_C_GetNearestTransform::LocalSelectedTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, LocalSelectedLength) == 0x0000F0, "Member 'BuildingComponent_C_GetNearestTransform::LocalSelectedLength' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, LocalTransforms) == 0x0000F8, "Member 'BuildingComponent_C_GetNearestTransform::LocalTransforms' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, LocalLocation) == 0x000108, "Member 'BuildingComponent_C_GetNearestTransform::LocalLocation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, Temp_int_Array_Index_Variable) == 0x000120, "Member 'BuildingComponent_C_GetNearestTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, Temp_int_Loop_Counter_Variable) == 0x000124, "Member 'BuildingComponent_C_GetNearestTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Array_Get_Item) == 0x000130, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Location) == 0x000190, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Rotation) == 0x0001A8, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Scale) == 0x0001C0, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Add_IntInt_ReturnValue) == 0x0001D8, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001E0, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_VSize_ReturnValue) == 0x0001F8, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000200, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Array_Length_ReturnValue) == 0x000204, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Array_Get_Item_1) == 0x000210, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000270, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Location_1) == 0x000278, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Rotation_1) == 0x000290, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_BreakTransform_Scale_1) == 0x0002A8, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0002C0, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_VSize_ReturnValue_1) == 0x0002D8, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GetNearestTransform, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0002E0, "Member 'BuildingComponent_C_GetNearestTransform::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.GiveBuildColour
// 0x0108 (0x0108 - 0x0000)
struct BuildingComponent_C_GiveBuildColour final
{
public:
	bool                                          IsGreen_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0008(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_GiveBuildColour) == 0x000008, "Wrong alignment on BuildingComponent_C_GiveBuildColour");
static_assert(sizeof(BuildingComponent_C_GiveBuildColour) == 0x000108, "Wrong size on BuildingComponent_C_GiveBuildColour");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, IsGreen_) == 0x000000, "Member 'BuildingComponent_C_GiveBuildColour::IsGreen_' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, Temp_int_Variable) == 0x000004, "Member 'BuildingComponent_C_GiveBuildColour::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000008, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_Add_IntInt_ReturnValue) == 0x0000F0, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_IsValid_ReturnValue) == 0x0000F4, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_GetNumMaterials_ReturnValue) == 0x0000F8, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000FC, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_GiveBuildColour, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000100, "Member 'BuildingComponent_C_GiveBuildColour::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.IsPlaceableOnLandscape
// 0x0028 (0x0028 - 0x0000)
struct BuildingComponent_C_IsPlaceableOnLandscape final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_IsPlaceableOnLandscape) == 0x000008, "Wrong alignment on BuildingComponent_C_IsPlaceableOnLandscape");
static_assert(sizeof(BuildingComponent_C_IsPlaceableOnLandscape) == 0x000028, "Wrong size on BuildingComponent_C_IsPlaceableOnLandscape");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, Object) == 0x000000, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::Object' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, ReturnValue) == 0x000008, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000018, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001A, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00001B, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00001C, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00001D, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00001E, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00001F, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue_1) == 0x000021, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue_2) == 0x000022, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue_3) == 0x000023, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue_4) == 0x000024, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_IsPlaceableOnLandscape, CallFunc_BooleanOR_ReturnValue_5) == 0x000025, "Member 'BuildingComponent_C_IsPlaceableOnLandscape::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.RotateSnap
// 0x0340 (0x0340 - 0x0000)
struct BuildingComponent_C_RotateSnap final
{
public:
	struct FTransform                             SocketTransform;                                   // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_BuildingSnapTypes                        LocalType;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Buildables_C>     K2Node_DynamicCast_AsBPI_Buildables;               // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BuildingSnapTypes                        CallFunc_GetBuildType_Type;                        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Percent_FloatFloat_ReturnValue_1;         // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Percent_FloatFloat_ReturnValue_2;         // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_2;            // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_2;           // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_RotateSnap) == 0x000010, "Wrong alignment on BuildingComponent_C_RotateSnap");
static_assert(sizeof(BuildingComponent_C_RotateSnap) == 0x000340, "Wrong size on BuildingComponent_C_RotateSnap");
static_assert(offsetof(BuildingComponent_C_RotateSnap, SocketTransform) == 0x000000, "Member 'BuildingComponent_C_RotateSnap::SocketTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, Actor) == 0x000060, "Member 'BuildingComponent_C_RotateSnap::Actor' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, Rotator) == 0x000068, "Member 'BuildingComponent_C_RotateSnap::Rotator' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, LocalType) == 0x000080, "Member 'BuildingComponent_C_RotateSnap::LocalType' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, K2Node_DynamicCast_AsBPI_Buildables) == 0x000088, "Member 'BuildingComponent_C_RotateSnap::K2Node_DynamicCast_AsBPI_Buildables' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BuildingComponent_C_RotateSnap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_GetBuildType_Type) == 0x0000E8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_GetBuildType_Type' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Location_1) == 0x0000F0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Rotation_1) == 0x000108, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Scale_1) == 0x000120, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Location_2) == 0x000138, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Rotation_2) == 0x000150, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Scale_2) == 0x000168, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Location_3) == 0x000180, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Rotation_3) == 0x000198, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Scale_3) == 0x0001B0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Location_4) == 0x0001C8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Rotation_4) == 0x0001E0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BreakTransform_Scale_4) == 0x0001F8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000210, "Member 'BuildingComponent_C_RotateSnap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000211, "Member 'BuildingComponent_C_RotateSnap::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000212, "Member 'BuildingComponent_C_RotateSnap::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000213, "Member 'BuildingComponent_C_RotateSnap::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000218, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BooleanOR_ReturnValue) == 0x000220, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000228, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BooleanOR_ReturnValue_1) == 0x000230, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000238, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_BooleanOR_ReturnValue_2) == 0x000240, "Member 'BuildingComponent_C_RotateSnap::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000248, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_ReturnValue) == 0x000250, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_ComposeRotators_ReturnValue) == 0x000268, "Member 'BuildingComponent_C_RotateSnap::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000280, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Percent_FloatFloat_ReturnValue_1) == 0x000288, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Percent_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000290, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000298, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, K2Node_SwitchEnum_CmpSuccess) == 0x0002A0, "Member 'BuildingComponent_C_RotateSnap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_ReturnValue_1) == 0x0002A8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_ComposeRotators_ReturnValue_1) == 0x0002C0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x0002D8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Percent_FloatFloat_ReturnValue_2) == 0x0002E0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Percent_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0002E8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0002F0, "Member 'BuildingComponent_C_RotateSnap::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_ReturnValue_2) == 0x0002F8, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_ComposeRotators_ReturnValue_2) == 0x000310, "Member 'BuildingComponent_C_RotateSnap::CallFunc_ComposeRotators_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000328, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x00032C, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_RotateSnap, CallFunc_MakeRotator_Yaw_ImplicitCast_2) == 0x000330, "Member 'BuildingComponent_C_RotateSnap::CallFunc_MakeRotator_Yaw_ImplicitCast_2' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.SpawnBuild
// 0x0390 (0x0390 - 0x0000)
struct BuildingComponent_C_SpawnBuild final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                ItemId;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   LocalID;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0078(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_MpInteractInterface_C> K2Node_DynamicCast_AsBP_Mp_Interact_Interface;     // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                CallFunc_GetItemInfo_Info;                         // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemInfo_Count;                        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   CallFunc_GetItemInfo_RandomStatsConfig;            // 0x01A0(0x0018)(HasGetValueTypeHash)
	TMap<class FString, class FString>            CallFunc_GetItemInfo_CustomData;                   // 0x01B8(0x0050)()
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   CallFunc_GetComponentByClass_ReturnValue;          // 0x0218(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FContainerPickupsInfo                  CallFunc_GetItemByUID_Item;                        // 0x0228(0x00D8)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemByUID_Found;                       // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemByUID_InMainContainer_;            // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_JigMultiplayer_C*                   CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0308(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindJigItemByDA_Result;                   // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_FindJigItemByDA_Found;                    // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_MpInteractInterface_C> K2Node_DynamicCast_AsBP_Mp_Interact_Interface_1;   // 0x0330(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJigContextMenuComp_C*                  CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0348(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   K2Node_DynamicCast_AsBP_Jig_Multiplayer;           // 0x0350(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_JigMultiplayer_C*                   K2Node_DynamicCast_AsBP_Jig_Multiplayer_1;         // 0x0360(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue;                   // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue;               // 0x038A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_SpawnBuild) == 0x000010, "Wrong alignment on BuildingComponent_C_SpawnBuild");
static_assert(sizeof(BuildingComponent_C_SpawnBuild) == 0x000390, "Wrong size on BuildingComponent_C_SpawnBuild");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, SpawnTransform) == 0x000000, "Member 'BuildingComponent_C_SpawnBuild::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, ItemId) == 0x000060, "Member 'BuildingComponent_C_SpawnBuild::ItemId' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, LocalID) == 0x000068, "Member 'BuildingComponent_C_SpawnBuild::LocalID' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000078, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000160, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000168, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_AsBP_Mp_Interact_Interface) == 0x000170, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_AsBP_Mp_Interact_Interface' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_bSuccess) == 0x000180, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_FinishSpawningActor_ReturnValue) == 0x000188, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemInfo_Info) == 0x000190, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemInfo_Info' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemInfo_Count) == 0x000198, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemInfo_Count' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemInfo_RandomStatsConfig) == 0x0001A0, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemInfo_RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemInfo_CustomData) == 0x0001B8, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemInfo_CustomData' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_IsValid_ReturnValue_1) == 0x000208, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000210, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetComponentByClass_ReturnValue) == 0x000218, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000220, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemByUID_Item) == 0x000228, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemByUID_Item' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemByUID_Found) == 0x000300, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemByUID_Found' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetItemByUID_InMainContainer_) == 0x000301, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetItemByUID_InMainContainer_' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000308, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_FindJigItemByDA_Result) == 0x000310, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_FindJigItemByDA_Result' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_FindJigItemByDA_Found) == 0x000318, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_FindJigItemByDA_Found' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_IsValid_ReturnValue_2) == 0x000320, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetOwner_ReturnValue) == 0x000328, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_AsBP_Mp_Interact_Interface_1) == 0x000330, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_AsBP_Mp_Interact_Interface_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_bSuccess_1) == 0x000340, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000348, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_AsBP_Jig_Multiplayer) == 0x000350, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_AsBP_Jig_Multiplayer' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_bSuccess_2) == 0x000358, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_AsBP_Jig_Multiplayer_1) == 0x000360, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_AsBP_Jig_Multiplayer_1' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, K2Node_DynamicCast_bSuccess_3) == 0x000368, "Member 'BuildingComponent_C_SpawnBuild::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_IsLocallyControlled_ReturnValue) == 0x000369, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000370, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_IsValid_ReturnValue_3) == 0x000388, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_StoreStats_ReturnValue) == 0x000389, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_StoreStats_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuild, CallFunc_SetAchievement_ReturnValue) == 0x00038A, "Member 'BuildingComponent_C_SpawnBuild::CallFunc_SetAchievement_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.SpawnBuildGhost
// 0x0030 (0x0030 - 0x0000)
struct BuildingComponent_C_SpawnBuildGhost final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_AddComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_SpawnBuildGhost) == 0x000008, "Wrong alignment on BuildingComponent_C_SpawnBuildGhost");
static_assert(sizeof(BuildingComponent_C_SpawnBuildGhost) == 0x000030, "Wrong size on BuildingComponent_C_SpawnBuildGhost");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, Mesh) == 0x000000, "Member 'BuildingComponent_C_SpawnBuildGhost::Mesh' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BuildingComponent_C_SpawnBuildGhost::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, K2Node_DynamicCast_AsBP_Player_Character) == 0x000010, "Member 'BuildingComponent_C_SpawnBuildGhost::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BuildingComponent_C_SpawnBuildGhost::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, CallFunc_AddComponentByClass_ReturnValue) == 0x000020, "Member 'BuildingComponent_C_SpawnBuildGhost::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BuildingComponent_C_SpawnBuildGhost, CallFunc_SetStaticMesh_ReturnValue) == 0x000028, "Member 'BuildingComponent_C_SpawnBuildGhost::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BuildingComponent.BuildingComponent_C.Svr_SpawnBuild
// 0x0060 (0x0060 - 0x0000)
struct BuildingComponent_C_Svr_SpawnBuild final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BuildingComponent_C_Svr_SpawnBuild) == 0x000010, "Wrong alignment on BuildingComponent_C_Svr_SpawnBuild");
static_assert(sizeof(BuildingComponent_C_Svr_SpawnBuild) == 0x000060, "Wrong size on BuildingComponent_C_Svr_SpawnBuild");
static_assert(offsetof(BuildingComponent_C_Svr_SpawnBuild, SpawnTransform) == 0x000000, "Member 'BuildingComponent_C_Svr_SpawnBuild::SpawnTransform' has a wrong offset!");

}


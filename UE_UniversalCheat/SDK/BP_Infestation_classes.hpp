#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Infestation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_WaveInfo_structs.hpp"
#include "Enum_ContainerLootTables_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Infestation.BP_Infestation_C
// 0x0178 (0x0418 - 0x02A0)
class ABP_Infestation_C : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_InfestationDust;                                // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ARMOR;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExplosionLoc;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Flies;                                             // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PurpleLight;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   RedLight;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            NormalMesh;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            DestroyedMesh;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PrimaryInfestation_;                               // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Marker_C*                           MarkerRef;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDestroyed_;                                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentActor;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0350(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          ShowMarker_;                                       // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessRadius;                                 // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ContainerLootTables                      LootTable;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UniqueLootSets;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<struct FTransform>                     AISpawningTransforms;                              // 0x0388(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	double                                        SpawnZOffset;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_WaveInfo                       WavesOfEnemies;                                    // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CurrentWave;                                       // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Infestation_C*>              SecondaryInfestations;                             // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMulticastInlineDelegate<void(class AActor* Causer, bool CalledFromGameLoad_)> InfestationDestroyed;                              // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanDamagePrimary_;                                 // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     DecorationTransforms;                              // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<class UStaticMesh*>                    DecorationMeshes;                                  // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_InfestationSpline_C*>        Splines;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          ForceLock_;                                        // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomInfestation_;                                // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void TestSpawns();
	void SpawnWave();
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetInteractDistance(class AActor* Target);
	void SetBurning(bool Burning_, double Dmg, class AActor* Actor);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void PickupBuildFromGround();
	void OverrideName(const class FString& Param_Name_0);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnCompleted_65AED6CA4B50BD98E50AE693BFCF19E5();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void LocToSpawn(struct FTransform* Loc);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigCanInteract(bool* Result);
	void IsObjectDamageable_(bool* Damageable_);
	void IsAIBurning_(bool* IsBurning_);
	void HitByVehicle(double Speed, const struct FVector& Direction);
	void GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed);
	void GetMesh(class USkeletalMeshComponent** Mesh);
	void GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetInfestationName(class FText* Param_Name_0);
	void ExecuteUbergraph_BP_Infestation(int32 EntryPoint);
	void Event_SecondaryDestroyed(class AActor* Causer, bool CalledFromGameLoad_);
	void Event_OnDestroyed(class AActor* Causer, bool CalledFromGameLoad_);
	void Damage_Shoved(bool Anim, double Force);
	void Damage_Object(double Damage, class AActor* Damage_Causer, class AController* Event_Instigator);
	void ComponentsToSave(TArray<class UActorComponent*>* Components);
	void CheckDistanceFromActor();
	void CanStompAI_(bool* Stomp_);
	void CanAddMarkerToAI_(bool* CanAdd_);
	void BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature(double Dmg, class AActor* DmgCauser);
	void BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature(class AActor* DmgCauser, bool Headshot);
	void AreSecondariesDestroyed_(bool* Destroyed);
	void AIHealthBarInfo(bool* Visible_, class FString* Param_Name_0, bool* Boss_);
	void AddMarker(class UWidgetComponent* Marker);
	void ActorSaved();
	void ActorPreSave();
	void ActorPreLoad();
	void ActorLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Infestation_C">();
	}
	static class ABP_Infestation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Infestation_C>();
	}
};
static_assert(alignof(ABP_Infestation_C) == 0x000008, "Wrong alignment on ABP_Infestation_C");
static_assert(sizeof(ABP_Infestation_C) == 0x000418, "Wrong size on ABP_Infestation_C");
static_assert(offsetof(ABP_Infestation_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_Infestation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, NS_InfestationDust) == 0x0002A8, "Member 'ABP_Infestation_C::NS_InfestationDust' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, PostProcess) == 0x0002B0, "Member 'ABP_Infestation_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, Sphere) == 0x0002B8, "Member 'ABP_Infestation_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, BP_JigMultiplayer) == 0x0002C0, "Member 'ABP_Infestation_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, DamageComponent) == 0x0002C8, "Member 'ABP_Infestation_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, ARMOR) == 0x0002D0, "Member 'ABP_Infestation_C::ARMOR' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, ExplosionLoc) == 0x0002D8, "Member 'ABP_Infestation_C::ExplosionLoc' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, AIOSubject) == 0x0002E0, "Member 'ABP_Infestation_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, Flies) == 0x0002E8, "Member 'ABP_Infestation_C::Flies' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, PurpleLight) == 0x0002F0, "Member 'ABP_Infestation_C::PurpleLight' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, RedLight) == 0x0002F8, "Member 'ABP_Infestation_C::RedLight' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, StaticMesh) == 0x000300, "Member 'ABP_Infestation_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, NormalMesh) == 0x000308, "Member 'ABP_Infestation_C::NormalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, DestroyedMesh) == 0x000310, "Member 'ABP_Infestation_C::DestroyedMesh' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, PrimaryInfestation_) == 0x000318, "Member 'ABP_Infestation_C::PrimaryInfestation_' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, MarkerRef) == 0x000320, "Member 'ABP_Infestation_C::MarkerRef' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, IsDestroyed_) == 0x000328, "Member 'ABP_Infestation_C::IsDestroyed_' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, CurrentActor) == 0x000330, "Member 'ABP_Infestation_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, InteractingActorLoc) == 0x000338, "Member 'ABP_Infestation_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, Name_0) == 0x000350, "Member 'ABP_Infestation_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, ShowMarker_) == 0x000368, "Member 'ABP_Infestation_C::ShowMarker_' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, PostProcessRadius) == 0x00036C, "Member 'ABP_Infestation_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, LootTable) == 0x000370, "Member 'ABP_Infestation_C::LootTable' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, UniqueLootSets) == 0x000378, "Member 'ABP_Infestation_C::UniqueLootSets' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, AISpawningTransforms) == 0x000388, "Member 'ABP_Infestation_C::AISpawningTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, SpawnZOffset) == 0x000398, "Member 'ABP_Infestation_C::SpawnZOffset' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, WavesOfEnemies) == 0x0003A0, "Member 'ABP_Infestation_C::WavesOfEnemies' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, CurrentWave) == 0x0003B0, "Member 'ABP_Infestation_C::CurrentWave' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, SecondaryInfestations) == 0x0003B8, "Member 'ABP_Infestation_C::SecondaryInfestations' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, InfestationDestroyed) == 0x0003C8, "Member 'ABP_Infestation_C::InfestationDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, CanDamagePrimary_) == 0x0003D8, "Member 'ABP_Infestation_C::CanDamagePrimary_' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, DecorationTransforms) == 0x0003E0, "Member 'ABP_Infestation_C::DecorationTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, DecorationMeshes) == 0x0003F0, "Member 'ABP_Infestation_C::DecorationMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, Splines) == 0x000400, "Member 'ABP_Infestation_C::Splines' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, ForceLock_) == 0x000410, "Member 'ABP_Infestation_C::ForceLock_' has a wrong offset!");
static_assert(offsetof(ABP_Infestation_C, RandomInfestation_) == 0x000411, "Member 'ABP_Infestation_C::RandomInfestation_' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDS_PlayerOcclusion

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UDS_PlayerOcclusion.UDS_PlayerOcclusion_C
// 0x00B0 (0x0350 - 0x02A0)
class UUDS_PlayerOcclusion_C final : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUDS_OcclusionSettings_C*               Occlusion_Settings;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Full_Occlusion;                              // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Calculate_Directional_Occlusion;                   // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Ignored_Actors;                                    // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Hard_Update;                                       // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Tick_Period;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sample_Location;                                   // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Hard_Occlusion_Change;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUDS_OcclusionState_C*                  State;                                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UUDS_Occlusion_Portal_C*>        Portal_Components;                                 // 0x0308(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	class UNiagaraComponent*                      DF_Occlusion_System;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          DF_Occlusion_System_Asset;                         // 0x0320(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Apply_Directional_Occlusion_Modifiers(const struct FLinearColor& In, struct FLinearColor* Out);
	void Check_For_Portal_Components();
	void Custom_Global_Occlusion_Sample(const struct FVector& Location, double* Global_Occlusion);
	void Delayed_Startup();
	void Editor_Tick(const struct FVector& Occlusion_Location);
	void ExecuteUbergraph_UDS_PlayerOcclusion(int32 EntryPoint);
	void Get_Sample_Location();
	void Incremental_Occlusion_Traces();
	void Initialize();
	void Periodic_Context_Checks();
	void Portal_Direction_Mask(const struct FVector& Direction, struct FLinearColor* Mask);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveParticleData(const TArray<struct FBasicParticleData>& Data, class UNiagaraSystem* NiagaraSystem, const struct FVector& SimulationPositionOffset);
	void Runtime_Tick();
	void Start_Up_GPU_Distance_Field_System();
	void Test_Point_for_Occlusion_Volumes(const struct FVector& Location, double* Final_Multiplier);
	EDrawDebugTrace Trace_Debugs();
	void Update_Current_Occlusion();
	void Update_Ignored_Actors();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UDS_PlayerOcclusion_C">();
	}
	static class UUDS_PlayerOcclusion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUDS_PlayerOcclusion_C>();
	}
};
static_assert(alignof(UUDS_PlayerOcclusion_C) == 0x000010, "Wrong alignment on UUDS_PlayerOcclusion_C");
static_assert(sizeof(UUDS_PlayerOcclusion_C) == 0x000350, "Wrong size on UUDS_PlayerOcclusion_C");
static_assert(offsetof(UUDS_PlayerOcclusion_C, UberGraphFrame) == 0x0002A0, "Member 'UUDS_PlayerOcclusion_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Occlusion_Settings) == 0x0002A8, "Member 'UUDS_PlayerOcclusion_C::Occlusion_Settings' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Force_Full_Occlusion) == 0x0002B0, "Member 'UUDS_PlayerOcclusion_C::Force_Full_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Calculate_Directional_Occlusion) == 0x0002B1, "Member 'UUDS_PlayerOcclusion_C::Calculate_Directional_Occlusion' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Ignored_Actors) == 0x0002B8, "Member 'UUDS_PlayerOcclusion_C::Ignored_Actors' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Hard_Update) == 0x0002C8, "Member 'UUDS_PlayerOcclusion_C::Hard_Update' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Tick_Period) == 0x0002D0, "Member 'UUDS_PlayerOcclusion_C::Tick_Period' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Sample_Location) == 0x0002D8, "Member 'UUDS_PlayerOcclusion_C::Sample_Location' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Hard_Occlusion_Change) == 0x0002F0, "Member 'UUDS_PlayerOcclusion_C::Hard_Occlusion_Change' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, State) == 0x000300, "Member 'UUDS_PlayerOcclusion_C::State' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, Portal_Components) == 0x000308, "Member 'UUDS_PlayerOcclusion_C::Portal_Components' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, DF_Occlusion_System) == 0x000318, "Member 'UUDS_PlayerOcclusion_C::DF_Occlusion_System' has a wrong offset!");
static_assert(offsetof(UUDS_PlayerOcclusion_C, DF_Occlusion_System_Asset) == 0x000320, "Member 'UUDS_PlayerOcclusion_C::DF_Occlusion_System_Asset' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TechTreeComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function TechTreeComponent.TechTreeComponent_C.Add Skill Points
// 0x0010 (0x0010 - 0x0000)
struct TechTreeComponent_C_Add_Skill_Points final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_Add_Skill_Points) == 0x000004, "Wrong alignment on TechTreeComponent_C_Add_Skill_Points");
static_assert(sizeof(TechTreeComponent_C_Add_Skill_Points) == 0x000010, "Wrong size on TechTreeComponent_C_Add_Skill_Points");
static_assert(offsetof(TechTreeComponent_C_Add_Skill_Points, Temp_int_Variable) == 0x000000, "Member 'TechTreeComponent_C_Add_Skill_Points::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_Add_Skill_Points, Temp_int_Variable_1) == 0x000004, "Member 'TechTreeComponent_C_Add_Skill_Points::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_Add_Skill_Points, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'TechTreeComponent_C_Add_Skill_Points::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_Add_Skill_Points, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'TechTreeComponent_C_Add_Skill_Points::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.CheckUnlockCost
// 0x0020 (0x0020 - 0x0000)
struct TechTreeComponent_C_CheckUnlockCost final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUnlock;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SkillTreeAsset_C*                   K2Node_DynamicCast_AsBP_Skill_Tree_Asset;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryPayTechnologyCost_Success;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_CheckUnlockCost) == 0x000008, "Wrong alignment on TechTreeComponent_C_CheckUnlockCost");
static_assert(sizeof(TechTreeComponent_C_CheckUnlockCost) == 0x000020, "Wrong size on TechTreeComponent_C_CheckUnlockCost");
static_assert(offsetof(TechTreeComponent_C_CheckUnlockCost, Technology) == 0x000000, "Member 'TechTreeComponent_C_CheckUnlockCost::Technology' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_CheckUnlockCost, CanUnlock) == 0x000008, "Member 'TechTreeComponent_C_CheckUnlockCost::CanUnlock' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_CheckUnlockCost, K2Node_DynamicCast_AsBP_Skill_Tree_Asset) == 0x000010, "Member 'TechTreeComponent_C_CheckUnlockCost::K2Node_DynamicCast_AsBP_Skill_Tree_Asset' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_CheckUnlockCost, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TechTreeComponent_C_CheckUnlockCost::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_CheckUnlockCost, CallFunc_TryPayTechnologyCost_Success) == 0x000019, "Member 'TechTreeComponent_C_CheckUnlockCost::CallFunc_TryPayTechnologyCost_Success' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.ExecuteUbergraph_TechTreeComponent
// 0x0018 (0x0018 - 0x0000)
struct TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTechnologyAsset*                       K2Node_CustomEvent_Technology;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUnlockCost_CanUnlock;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUnlockedParents_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTechnologyUnlocked_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent) == 0x000008, "Wrong alignment on TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent");
static_assert(sizeof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent) == 0x000018, "Wrong size on TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent");
static_assert(offsetof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent, EntryPoint) == 0x000000, "Member 'TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent, K2Node_CustomEvent_Technology) == 0x000008, "Member 'TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent::K2Node_CustomEvent_Technology' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent, CallFunc_CheckUnlockCost_CanUnlock) == 0x000010, "Member 'TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent::CallFunc_CheckUnlockCost_CanUnlock' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent, CallFunc_HasUnlockedParents_ReturnValue) == 0x000011, "Member 'TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent::CallFunc_HasUnlockedParents_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent, CallFunc_IsTechnologyUnlocked_ReturnValue) == 0x000012, "Member 'TechTreeComponent_C_ExecuteUbergraph_TechTreeComponent::CallFunc_IsTechnologyUnlocked_ReturnValue' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.HasEnoughResources
// 0x0008 (0x0008 - 0x0000)
struct TechTreeComponent_C_HasEnoughResources final
{
public:
	int32                                         TechnologyCost;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnoughResources;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_HasEnoughResources) == 0x000004, "Wrong alignment on TechTreeComponent_C_HasEnoughResources");
static_assert(sizeof(TechTreeComponent_C_HasEnoughResources) == 0x000008, "Wrong size on TechTreeComponent_C_HasEnoughResources");
static_assert(offsetof(TechTreeComponent_C_HasEnoughResources, TechnologyCost) == 0x000000, "Member 'TechTreeComponent_C_HasEnoughResources::TechnologyCost' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_HasEnoughResources, EnoughResources) == 0x000004, "Member 'TechTreeComponent_C_HasEnoughResources::EnoughResources' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_HasEnoughResources, CallFunc_Less_IntInt_ReturnValue) == 0x000005, "Member 'TechTreeComponent_C_HasEnoughResources::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.PayCost
// 0x0008 (0x0008 - 0x0000)
struct TechTreeComponent_C_PayCost final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_PayCost) == 0x000004, "Wrong alignment on TechTreeComponent_C_PayCost");
static_assert(sizeof(TechTreeComponent_C_PayCost) == 0x000008, "Wrong size on TechTreeComponent_C_PayCost");
static_assert(offsetof(TechTreeComponent_C_PayCost, Cost) == 0x000000, "Member 'TechTreeComponent_C_PayCost::Cost' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_PayCost, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'TechTreeComponent_C_PayCost::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.ResetTree
// 0x0030 (0x0030 - 0x0000)
struct TechTreeComponent_C_ResetTree final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_ResetTree) == 0x000008, "Wrong alignment on TechTreeComponent_C_ResetTree");
static_assert(sizeof(TechTreeComponent_C_ResetTree) == 0x000030, "Wrong size on TechTreeComponent_C_ResetTree");
static_assert(offsetof(TechTreeComponent_C_ResetTree, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'TechTreeComponent_C_ResetTree::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTree, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000008, "Member 'TechTreeComponent_C_ResetTree::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTree, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'TechTreeComponent_C_ResetTree::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTree, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'TechTreeComponent_C_ResetTree::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTree, K2Node_DynamicCast_AsBP_Player_Character) == 0x000020, "Member 'TechTreeComponent_C_ResetTree::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTree, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'TechTreeComponent_C_ResetTree::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.ResetTreeComplete
// 0x0030 (0x0030 - 0x0000)
struct TechTreeComponent_C_ResetTreeComplete final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_ResetTreeComplete) == 0x000008, "Wrong alignment on TechTreeComponent_C_ResetTreeComplete");
static_assert(sizeof(TechTreeComponent_C_ResetTreeComplete) == 0x000030, "Wrong size on TechTreeComponent_C_ResetTreeComplete");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'TechTreeComponent_C_ResetTreeComplete::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000008, "Member 'TechTreeComponent_C_ResetTreeComplete::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'TechTreeComponent_C_ResetTreeComplete::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'TechTreeComponent_C_ResetTreeComplete::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, K2Node_DynamicCast_AsBP_Player_Character) == 0x000020, "Member 'TechTreeComponent_C_ResetTreeComplete::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_ResetTreeComplete, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'TechTreeComponent_C_ResetTreeComplete::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.TryPayTechnologyCost
// 0x0008 (0x0008 - 0x0000)
struct TechTreeComponent_C_TryPayTechnologyCost final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasEnoughResources_EnoughResources;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_TryPayTechnologyCost) == 0x000004, "Wrong alignment on TechTreeComponent_C_TryPayTechnologyCost");
static_assert(sizeof(TechTreeComponent_C_TryPayTechnologyCost) == 0x000008, "Wrong size on TechTreeComponent_C_TryPayTechnologyCost");
static_assert(offsetof(TechTreeComponent_C_TryPayTechnologyCost, Cost) == 0x000000, "Member 'TechTreeComponent_C_TryPayTechnologyCost::Cost' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_TryPayTechnologyCost, Success) == 0x000004, "Member 'TechTreeComponent_C_TryPayTechnologyCost::Success' has a wrong offset!");
static_assert(offsetof(TechTreeComponent_C_TryPayTechnologyCost, CallFunc_HasEnoughResources_EnoughResources) == 0x000005, "Member 'TechTreeComponent_C_TryPayTechnologyCost::CallFunc_HasEnoughResources_EnoughResources' has a wrong offset!");

// Function TechTreeComponent.TechTreeComponent_C.TryToUnlockTechnology
// 0x0008 (0x0008 - 0x0000)
struct TechTreeComponent_C_TryToUnlockTechnology final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TechTreeComponent_C_TryToUnlockTechnology) == 0x000008, "Wrong alignment on TechTreeComponent_C_TryToUnlockTechnology");
static_assert(sizeof(TechTreeComponent_C_TryToUnlockTechnology) == 0x000008, "Wrong size on TechTreeComponent_C_TryToUnlockTechnology");
static_assert(offsetof(TechTreeComponent_C_TryToUnlockTechnology, Technology) == 0x000000, "Member 'TechTreeComponent_C_TryToUnlockTechnology::Technology' has a wrong offset!");

}


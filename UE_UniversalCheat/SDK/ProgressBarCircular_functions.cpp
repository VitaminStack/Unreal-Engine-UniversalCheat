#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressBarCircular

#include "Basic.hpp"

#include "ProgressBarCircular_classes.hpp"
#include "ProgressBarCircular_parameters.hpp"


namespace SDK
{

// Function ProgressBarCircular.ProgressBarCircular_C.AddEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Effects                       Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::AddEffect(const struct FS_Effects& Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "AddEffect");

	Params::ProgressBarCircular_C_AddEffect Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.AddEntry
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewPercent_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::AddEntry(double NewPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "AddEntry");

	Params::ProgressBarCircular_C_AddEntry Parms{};

	Parms.NewPercent_0 = NewPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.ClearEffectLayers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEffectLayer                            EffectLayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::ClearEffectLayers(EEffectLayer EffectLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "ClearEffectLayers");

	Params::ProgressBarCircular_C_ClearEffectLayers Parms{};

	Parms.EffectLayer = EffectLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UProgressBarCircular_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Count_Percent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Count_Percent(double Time, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Count_Percent");

	Params::ProgressBarCircular_C_Count_Percent Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarCircular.ProgressBarCircular_C.Count_TargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Count_TargetPercent(double Time, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Count_TargetPercent");

	Params::ProgressBarCircular_C_Count_TargetPercent Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarCircular.ProgressBarCircular_C.CreateEffects
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::CreateEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "CreateEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.ExecuteEntry
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::ExecuteEntry(double CurrentEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "ExecuteEntry");

	Params::ProgressBarCircular_C_ExecuteEntry Parms{};

	Parms.CurrentEntry = CurrentEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.ExecuteUbergraph_ProgressBarCircular
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::ExecuteUbergraph_ProgressBarCircular(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "ExecuteUbergraph_ProgressBarCircular");

	Params::ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.FindEffectOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EEffectLayer                            EffectLayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UOverlay*                         Overlay                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::FindEffectOverlay(EEffectLayer EffectLayer, class UOverlay** Overlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "FindEffectOverlay");

	Params::ProgressBarCircular_C_FindEffectOverlay Parms{};

	Parms.EffectLayer = EffectLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Overlay != nullptr)
		*Overlay = Parms.Overlay;
}


// Function ProgressBarCircular.ProgressBarCircular_C.GetEntryIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::GetEntryIndex(int32 Index_0, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "GetEntryIndex");

	Params::ProgressBarCircular_C_GetEntryIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarCircular.ProgressBarCircular_C.GetInterpolationTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UProgressBarCircular_C::GetInterpolationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "GetInterpolationTime");

	Params::ProgressBarCircular_C_GetInterpolationTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarCircular.ProgressBarCircular_C.HandlePausedQueue
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::HandlePausedQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "HandlePausedQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.InitNextEntry
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::InitNextEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "InitNextEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.IsEffectProgressChangeColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_Effects                       Effect                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarCircular_C::IsEffectProgressChangeColor(const struct FS_Effects& Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "IsEffectProgressChangeColor");

	Params::ProgressBarCircular_C_IsEffectProgressChangeColor Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarCircular.ProgressBarCircular_C.IsProgressMethodInterpolated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarCircular_C::IsProgressMethodInterpolated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "IsProgressMethodInterpolated");

	Params::ProgressBarCircular_C_IsProgressMethodInterpolated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarCircular.ProgressBarCircular_C.IsProgressMethodStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarCircular_C::IsProgressMethodStatic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "IsProgressMethodStatic");

	Params::ProgressBarCircular_C_IsProgressMethodStatic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarCircular.ProgressBarCircular_C.IsValidEntryIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   IndexToTest                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarCircular_C::IsValidEntryIndex(int32 IndexToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "IsValidEntryIndex");

	Params::ProgressBarCircular_C_IsValidEntryIndex Parms{};

	Parms.IndexToTest = IndexToTest;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_AddEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Effects                       Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_AddEffect(const struct FS_Effects& Effect, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_AddEffect");

	Params::ProgressBarCircular_C_PB_AddEffect Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Effects>               Effects_0                                              (Parm, OutParm)

void UProgressBarCircular_C::PB_GetEffects(TArray<struct FS_Effects>* Effects_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetEffects");

	Params::ProgressBarCircular_C_PB_GetEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Effects_0 != nullptr)
		*Effects_0 = std::move(Parms.Effects_0);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetFillColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetFillColor(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetFillColor");

	Params::ProgressBarCircular_C_PB_GetFillColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetInterpTimeCurrent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentInterpTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetInterpTimeCurrent(double* CurrentInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetInterpTimeCurrent");

	Params::ProgressBarCircular_C_PB_GetInterpTimeCurrent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentInterpTime != nullptr)
		*CurrentInterpTime = Parms.CurrentInterpTime;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetInterpTimeTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetInterpTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetInterpTimeTarget(double* TargetInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetInterpTimeTarget");

	Params::ProgressBarCircular_C_PB_GetInterpTimeTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetInterpTime != nullptr)
		*TargetInterpTime = Parms.TargetInterpTime;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetIsMarquee
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetIsMarquee(bool* IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetIsMarquee");

	Params::ProgressBarCircular_C_PB_GetIsMarquee Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMarquee != nullptr)
		*IsMarquee = Parms.IsMarquee;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetPercent(double* Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetPercent");

	Params::ProgressBarCircular_C_PB_GetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetProgressMethod
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         EProgressMethod                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetProgressMethod(EProgressMethod* EProgressMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetProgressMethod");

	Params::ProgressBarCircular_C_PB_GetProgressMethod Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EProgressMethod != nullptr)
		*EProgressMethod = Parms.EProgressMethod;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetSeparationSteps
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Steps                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetSeparationSteps(int32* Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetSeparationSteps");

	Params::ProgressBarCircular_C_PB_GetSeparationSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Steps != nullptr)
		*Steps = Parms.Steps;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetSize(struct FVector2D* Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetSize");

	Params::ProgressBarCircular_C_PB_GetSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Size_0 != nullptr)
		*Size_0 = std::move(Parms.Size_0);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetFillColor_Negative
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetTargetFillColor_Negative(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetTargetFillColor_Negative");

	Params::ProgressBarCircular_C_PB_GetTargetFillColor_Negative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetFillColor_Positive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetTargetFillColor_Positive(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetTargetFillColor_Positive");

	Params::ProgressBarCircular_C_PB_GetTargetFillColor_Positive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetTargetPercent(double* TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetTargetPercent");

	Params::ProgressBarCircular_C_PB_GetTargetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetPercent_0 != nullptr)
		*TargetPercent_0 = Parms.TargetPercent_0;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetUseGradientFillColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradientFillColor                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetUseGradientFillColor(bool* UseGradientFillColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetUseGradientFillColor");

	Params::ProgressBarCircular_C_PB_GetUseGradientFillColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseGradientFillColor != nullptr)
		*UseGradientFillColor = Parms.UseGradientFillColor;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetUseTargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_GetUseTargetPercent(bool* UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_GetUseTargetPercent");

	Params::ProgressBarCircular_C_PB_GetUseTargetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseTargetPercent_0 != nullptr)
		*UseTargetPercent_0 = Parms.UseTargetPercent_0;
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_RemoveEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_RemoveEffect(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_RemoveEffect");

	Params::ProgressBarCircular_C_PB_RemoveEffect Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetAllEffectsEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetAllEffectsEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetAllEffectsEnabled");

	Params::ProgressBarCircular_C_PB_SetAllEffectsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBackgroundColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetBackgroundColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetBackgroundColor");

	Params::ProgressBarCircular_C_PB_SetBackgroundColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBackgroundColorMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Mask                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetBackgroundColorMask(class UTexture2D* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetBackgroundColorMask");

	Params::ProgressBarCircular_C_PB_SetBackgroundColorMask Parms{};

	Parms.Mask = Mask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBlendMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BlendMask_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetBlendMask(class UTexture2D* BlendMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetBlendMask");

	Params::ProgressBarCircular_C_PB_SetBlendMask Parms{};

	Parms.BlendMask_0 = BlendMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetCustomMarqueeImage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetCustomMarqueeImage(class UTexture2D* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetCustomMarqueeImage");

	Params::ProgressBarCircular_C_PB_SetCustomMarqueeImage Parms{};

	Parms.Image = Image;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetCustomMarqueeMaskType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarqueeMask                            MaskType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetCustomMarqueeMaskType(EMarqueeMask MaskType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetCustomMarqueeMaskType");

	Params::ProgressBarCircular_C_PB_SetCustomMarqueeMaskType Parms{};

	Parms.MaskType = MaskType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetEffectEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetEffectEnabled(int32 Index_0, bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetEffectEnabled");

	Params::ProgressBarCircular_C_PB_SetEffectEnabled Parms{};

	Parms.Index_0 = Index_0;
	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Effects>               Effects_0                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UProgressBarCircular_C::PB_SetEffects(const TArray<struct FS_Effects>& Effects_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetEffects");

	Params::ProgressBarCircular_C_PB_SetEffects Parms{};

	Parms.Effects_0 = std::move(Effects_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetFillColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetFillColor");

	Params::ProgressBarCircular_C_PB_SetFillColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorGradientPower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GradientPower                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetFillColorGradientPower(double GradientPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetFillColorGradientPower");

	Params::ProgressBarCircular_C_PB_SetFillColorGradientPower Parms{};

	Parms.GradientPower = GradientPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorGradientType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGradientTypes                          GradientType_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetFillColorGradientType(EGradientTypes GradientType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetFillColorGradientType");

	Params::ProgressBarCircular_C_PB_SetFillColorGradientType Parms{};

	Parms.GradientType_0 = GradientType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Mask                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetFillColorMask(class UObject* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetFillColorMask");

	Params::ProgressBarCircular_C_PB_SetFillColorMask Parms{};

	Parms.Mask = Mask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetInterpTimeCurrent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentInterpTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetInterpTimeCurrent(double CurrentInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetInterpTimeCurrent");

	Params::ProgressBarCircular_C_PB_SetInterpTimeCurrent Parms{};

	Parms.CurrentInterpTime = CurrentInterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetInterpTimeTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetInterpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetInterpTimeTarget(double TargetInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetInterpTimeTarget");

	Params::ProgressBarCircular_C_PB_SetInterpTimeTarget Parms{};

	Parms.TargetInterpTime = TargetInterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetIsMarquee
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetIsMarquee(bool IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetIsMarquee");

	Params::ProgressBarCircular_C_PB_SetIsMarquee Parms{};

	Parms.IsMarquee = IsMarquee;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetPercent(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetPercent");

	Params::ProgressBarCircular_C_PB_SetPercent Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetProgressMethod
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         EProgressMethod                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetProgressMethod(EProgressMethod EProgressMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetProgressMethod");

	Params::ProgressBarCircular_C_PB_SetProgressMethod Parms{};

	Parms.EProgressMethod = EProgressMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationAbsoluteFill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AbsoluteFillMethod                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetSeparationAbsoluteFill(bool AbsoluteFillMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetSeparationAbsoluteFill");

	Params::ProgressBarCircular_C_PB_SetSeparationAbsoluteFill Parms{};

	Parms.AbsoluteFillMethod = AbsoluteFillMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationSteps
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Steps                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetSeparationSteps(int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetSeparationSteps");

	Params::ProgressBarCircular_C_PB_SetSeparationSteps Parms{};

	Parms.Steps = Steps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationStepsSpacing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Spacing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetSeparationStepsSpacing(double Spacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetSeparationStepsSpacing");

	Params::ProgressBarCircular_C_PB_SetSeparationStepsSpacing Parms{};

	Parms.Spacing = Spacing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetSize(const struct FVector2D& Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetSize");

	Params::ProgressBarCircular_C_PB_SetSize Parms{};

	Parms.Size_0 = std::move(Size_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetFillColor_Negative
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetTargetFillColor_Negative(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetTargetFillColor_Negative");

	Params::ProgressBarCircular_C_PB_SetTargetFillColor_Negative Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetFillColor_Positive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetTargetFillColor_Positive(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetTargetFillColor_Positive");

	Params::ProgressBarCircular_C_PB_SetTargetFillColor_Positive Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetTargetPercent(double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetTargetPercent");

	Params::ProgressBarCircular_C_PB_SetTargetPercent Parms{};

	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetThickness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Thickness_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetThickness(double Thickness_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetThickness");

	Params::ProgressBarCircular_C_PB_SetThickness Parms{};

	Parms.Thickness_0 = Thickness_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetUseGradientFillColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradientFillColor                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetUseGradientFillColor(bool UseGradientFillColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetUseGradientFillColor");

	Params::ProgressBarCircular_C_PB_SetUseGradientFillColor Parms{};

	Parms.UseGradientFillColor = UseGradientFillColor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetUseTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PB_SetUseTargetPercent(bool UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PB_SetUseTargetPercent");

	Params::ProgressBarCircular_C_PB_SetUseTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "PreConstruct");

	Params::ProgressBarCircular_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Reconstruct
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::Reconstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Reconstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.RemoveEntryIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::RemoveEntryIndex(int32 IndexToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "RemoveEntryIndex");

	Params::ProgressBarCircular_C_RemoveEntryIndex Parms{};

	Parms.IndexToRemove = IndexToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Reset
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetBackgroundColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     BackgroundColor_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       BackgroundMask_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetBackgroundColor(const struct FLinearColor& BackgroundColor_0, class UTexture2D* BackgroundMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetBackgroundColor");

	Params::ProgressBarCircular_C_SetBackgroundColor Parms{};

	Parms.BackgroundColor_0 = std::move(BackgroundColor_0);
	Parms.BackgroundMask_0 = BackgroundMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetBlendMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetBlendMask(class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetBlendMask");

	Params::ProgressBarCircular_C_SetBlendMask Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetDensity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Density_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetDensity(double Density_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetDensity");

	Params::ProgressBarCircular_C_SetDensity Parms{};

	Parms.Density_0 = Density_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetFillColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     FillColorCurrent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GradientPower                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetFillColor(const struct FLinearColor& FillColorCurrent_0, double GradientPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetFillColor");

	Params::ProgressBarCircular_C_SetFillColor Parms{};

	Parms.FillColorCurrent_0 = std::move(FillColorCurrent_0);
	Parms.GradientPower = GradientPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetFillColorMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetFillColorMask(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetFillColorMask");

	Params::ProgressBarCircular_C_SetFillColorMask Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetMarqueeMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarqueeMask                            MarqueeMask_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       CustomMarqueeMask_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetMarqueeMask(EMarqueeMask MarqueeMask_0, class UTexture2D* CustomMarqueeMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetMarqueeMask");

	Params::ProgressBarCircular_C_SetMarqueeMask Parms{};

	Parms.MarqueeMask_0 = MarqueeMask_0;
	Parms.CustomMarqueeMask_0 = CustomMarqueeMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetMarqueeTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetMarqueeTime(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetMarqueeTime");

	Params::ProgressBarCircular_C_SetMarqueeTime Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetOverallBlendMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BlendMask_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetOverallBlendMask(class UTexture2D* BlendMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetOverallBlendMask");

	Params::ProgressBarCircular_C_SetOverallBlendMask Parms{};

	Parms.BlendMask_0 = BlendMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetPercentInterpolated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewPercent_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetPercentInterpolated(double NewPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetPercentInterpolated");

	Params::ProgressBarCircular_C_SetPercentInterpolated Parms{};

	Parms.NewPercent_0 = NewPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetProgressMethod
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         ProgressMethod_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetProgressMethod(EProgressMethod ProgressMethod_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetProgressMethod");

	Params::ProgressBarCircular_C_SetProgressMethod Parms{};

	Parms.ProgressMethod_0 = ProgressMethod_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetSize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetSize(double Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetSize");

	Params::ProgressBarCircular_C_SetSize Parms{};

	Parms.Size_0 = Size_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetSpacing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Spacing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetSpacing(double Spacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetSpacing");

	Params::ProgressBarCircular_C_SetSpacing Parms{};

	Parms.Spacing = Spacing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetStepDensity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HardStepBorder                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetStepDensity(double HardStepBorder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetStepDensity");

	Params::ProgressBarCircular_C_SetStepDensity Parms{};

	Parms.HardStepBorder = HardStepBorder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetSteps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Separation_Steps_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetSteps(int32 Separation_Steps_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetSteps");

	Params::ProgressBarCircular_C_SetSteps Parms{};

	Parms.Separation_Steps_0 = Separation_Steps_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetFillColorNegative
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetTargetFillColorNegative(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetTargetFillColorNegative");

	Params::ProgressBarCircular_C_SetTargetFillColorNegative Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetFillColorPositive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetTargetFillColorPositive(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetTargetFillColorPositive");

	Params::ProgressBarCircular_C_SetTargetFillColorPositive Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetPercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetTargetPercent(bool UseTargetPercent_0, double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetTargetPercent");

	Params::ProgressBarCircular_C_SetTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;
	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetThickness
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Thickness_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetThickness(double Thickness_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetThickness");

	Params::ProgressBarCircular_C_SetThickness Parms{};

	Parms.Thickness_0 = Thickness_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetupMarquee
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseMarquee                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     MarqueeColor_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     MarqueeBackgroundColor                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetupMarquee(bool UseMarquee, const struct FLinearColor& MarqueeColor_0, const struct FLinearColor& MarqueeBackgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetupMarquee");

	Params::ProgressBarCircular_C_SetupMarquee Parms{};

	Parms.UseMarquee = UseMarquee;
	Parms.MarqueeColor_0 = std::move(MarqueeColor_0);
	Parms.MarqueeBackgroundColor = std::move(MarqueeBackgroundColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.SetUseGradient
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradient_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GradientOpacity_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGradientTypes                          GradientType_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::SetUseGradient(bool UseGradient_0, double GradientOpacity_0, EGradientTypes GradientType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "SetUseGradient");

	Params::ProgressBarCircular_C_SetUseGradient Parms{};

	Parms.UseGradient_0 = UseGradient_0;
	Parms.GradientOpacity_0 = GradientOpacity_0;
	Parms.GradientType_0 = GradientType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.StartTriggerProgressChangeColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::StartTriggerProgressChangeColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "StartTriggerProgressChangeColor");

	Params::ProgressBarCircular_C_StartTriggerProgressChangeColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.StopTriggerProgressChangeColor
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::StopTriggerProgressChangeColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "StopTriggerProgressChangeColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Tick");

	Params::ProgressBarCircular_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_CurrentPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Transfer_CurrentPercent(double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Transfer_CurrentPercent");

	Params::ProgressBarCircular_C_Transfer_CurrentPercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_TargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Transfer_TargetPercent(double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Transfer_TargetPercent");

	Params::ProgressBarCircular_C_Transfer_TargetPercent Parms{};

	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_UseTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::Transfer_UseTargetPercent(bool UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "Transfer_UseTargetPercent");

	Params::ProgressBarCircular_C_Transfer_UseTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.UpdateInterpolation
// (BlueprintCallable, BlueprintEvent)

void UProgressBarCircular_C::UpdateInterpolation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "UpdateInterpolation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarCircular.ProgressBarCircular_C.UpdatePercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::UpdatePercent(double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "UpdatePercent");

	Params::ProgressBarCircular_C_UpdatePercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarCircular.ProgressBarCircular_C.UseAbsoluteFillMethod
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AbsoluteFillMethod                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarCircular_C::UseAbsoluteFillMethod(bool AbsoluteFillMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarCircular_C", "UseAbsoluteFillMethod");

	Params::ProgressBarCircular_C_UseAbsoluteFillMethod Parms{};

	Parms.AbsoluteFillMethod = AbsoluteFillMethod;

	UObject::ProcessEvent(Func, &Parms);
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BuildableTurretAIComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_HitboxTypeAI_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BuildableTurretAIComponent.BP_BuildableTurretAIComponent_C
// 0x0328 (0x03C8 - 0x00A0)
class UBP_BuildableTurretAIComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Reloading;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attacking;                                         // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildable_TurretMASTER_C*              AI_Turret;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attack_Target;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Attack_Targets;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Current_Ammo;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Health;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Ammo;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Reload;                                        // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Starting_Ammo;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Magazine_Size;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Reload_Speed;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Attack;                                        // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Reaction_Tags;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible)
	TMap<E_HitboxTypeAI, double>                  Damage;                                            // 0x0108(0x0050)(Edit, BlueprintVisible)
	double                                        Detection_Range;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Mode;                                        // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Turret_Rotation_Speed;                             // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weapon_Range;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spread;                                            // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Down_Rotation;                                     // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Range_Attack_Particle_Effect;                      // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Projectile;                                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Starting_Health;                                   // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Health;                                        // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Muzzle_Effect;                                     // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Effect_Hit;                                        // 0x01A8(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TMap<EPhysicalSurface, class UParticleSystem*> Surface_Emitters__Trace_;                          // 0x0290(0x0050)(Edit, BlueprintVisible)
	struct FVector                                Surface_Decal_Size__Trace_;                        // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_Life_Span__Trace_;                           // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_Fade_Distance__Trace_;                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class UMaterialInterface*> Surface_Decal__Trace_;                             // 0x0308(0x0050)(Edit, BlueprintVisible)
	bool                                          Alert_AI;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Alert_Radius;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Alert_Actors;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FName>                           Alert_Tags;                                        // 0x0378(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         Reacted_Actors;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Track_Target;                                      // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Activate_Actors;                                   // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class USoundBase*                             FireSound;                                         // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        AttackSpeed;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               AttackTraceChannel;                                // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Target_Actors(bool Activate_0);
	void Check_Tags(TArray<class FName>& Tags_1, TArray<class FName>& Tags_2, bool* Return_value, class FName* Found_Tag);
	void ComponentLoaded();
	void ComponentPreSave();
	void Debug_Text(const class FString& In_String, const struct FLinearColor& Text_Color);
	void Deduct_Ammo();
	void Deduct_Health(double Damage_0);
	void ExecuteUbergraph_BP_BuildableTurretAIComponent(int32 EntryPoint);
	void Multicast_Muzzle_Effect(const struct FHitResult& Effect_Hit_0);
	void Multicast_Projectile(const struct FVector& Velocity);
	void Perception_Check();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Reload();
	void Server_Turret_Damaged(double Damage_0);
	void Turret_Fire();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BuildableTurretAIComponent_C">();
	}
	static class UBP_BuildableTurretAIComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BuildableTurretAIComponent_C>();
	}
};
static_assert(alignof(UBP_BuildableTurretAIComponent_C) == 0x000008, "Wrong alignment on UBP_BuildableTurretAIComponent_C");
static_assert(sizeof(UBP_BuildableTurretAIComponent_C) == 0x0003C8, "Wrong size on UBP_BuildableTurretAIComponent_C");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_BuildableTurretAIComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Reloading) == 0x0000A8, "Member 'UBP_BuildableTurretAIComponent_C::Reloading' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Attacking) == 0x0000A9, "Member 'UBP_BuildableTurretAIComponent_C::Attacking' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, AI_Turret) == 0x0000B0, "Member 'UBP_BuildableTurretAIComponent_C::AI_Turret' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Attack_Target) == 0x0000B8, "Member 'UBP_BuildableTurretAIComponent_C::Attack_Target' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Attack_Targets) == 0x0000C0, "Member 'UBP_BuildableTurretAIComponent_C::Attack_Targets' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Current_Ammo) == 0x0000D0, "Member 'UBP_BuildableTurretAIComponent_C::Current_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Current_Health) == 0x0000D4, "Member 'UBP_BuildableTurretAIComponent_C::Current_Health' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Use_Ammo) == 0x0000D8, "Member 'UBP_BuildableTurretAIComponent_C::Use_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Can_Reload) == 0x0000D9, "Member 'UBP_BuildableTurretAIComponent_C::Can_Reload' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Starting_Ammo) == 0x0000DC, "Member 'UBP_BuildableTurretAIComponent_C::Starting_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Magazine_Size) == 0x0000E0, "Member 'UBP_BuildableTurretAIComponent_C::Magazine_Size' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Reload_Speed) == 0x0000E8, "Member 'UBP_BuildableTurretAIComponent_C::Reload_Speed' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Dead) == 0x0000F0, "Member 'UBP_BuildableTurretAIComponent_C::Dead' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Can_Attack) == 0x0000F1, "Member 'UBP_BuildableTurretAIComponent_C::Can_Attack' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Reaction_Tags) == 0x0000F8, "Member 'UBP_BuildableTurretAIComponent_C::Reaction_Tags' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Damage) == 0x000108, "Member 'UBP_BuildableTurretAIComponent_C::Damage' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Detection_Range) == 0x000158, "Member 'UBP_BuildableTurretAIComponent_C::Detection_Range' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Debug_Mode) == 0x000160, "Member 'UBP_BuildableTurretAIComponent_C::Debug_Mode' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Turret_Rotation_Speed) == 0x000168, "Member 'UBP_BuildableTurretAIComponent_C::Turret_Rotation_Speed' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Weapon_Range) == 0x000170, "Member 'UBP_BuildableTurretAIComponent_C::Weapon_Range' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Spread) == 0x000178, "Member 'UBP_BuildableTurretAIComponent_C::Spread' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Down_Rotation) == 0x000180, "Member 'UBP_BuildableTurretAIComponent_C::Down_Rotation' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Range_Attack_Particle_Effect) == 0x000188, "Member 'UBP_BuildableTurretAIComponent_C::Range_Attack_Particle_Effect' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Projectile) == 0x000190, "Member 'UBP_BuildableTurretAIComponent_C::Projectile' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Starting_Health) == 0x000198, "Member 'UBP_BuildableTurretAIComponent_C::Starting_Health' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Max_Health) == 0x00019C, "Member 'UBP_BuildableTurretAIComponent_C::Max_Health' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Muzzle_Effect) == 0x0001A0, "Member 'UBP_BuildableTurretAIComponent_C::Muzzle_Effect' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Effect_Hit) == 0x0001A8, "Member 'UBP_BuildableTurretAIComponent_C::Effect_Hit' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Surface_Emitters__Trace_) == 0x000290, "Member 'UBP_BuildableTurretAIComponent_C::Surface_Emitters__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Surface_Decal_Size__Trace_) == 0x0002E0, "Member 'UBP_BuildableTurretAIComponent_C::Surface_Decal_Size__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Decal_Life_Span__Trace_) == 0x0002F8, "Member 'UBP_BuildableTurretAIComponent_C::Decal_Life_Span__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Decal_Fade_Distance__Trace_) == 0x000300, "Member 'UBP_BuildableTurretAIComponent_C::Decal_Fade_Distance__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Surface_Decal__Trace_) == 0x000308, "Member 'UBP_BuildableTurretAIComponent_C::Surface_Decal__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Alert_AI) == 0x000358, "Member 'UBP_BuildableTurretAIComponent_C::Alert_AI' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Alert_Radius) == 0x000360, "Member 'UBP_BuildableTurretAIComponent_C::Alert_Radius' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Alert_Actors) == 0x000368, "Member 'UBP_BuildableTurretAIComponent_C::Alert_Actors' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Alert_Tags) == 0x000378, "Member 'UBP_BuildableTurretAIComponent_C::Alert_Tags' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Reacted_Actors) == 0x000388, "Member 'UBP_BuildableTurretAIComponent_C::Reacted_Actors' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Track_Target) == 0x000398, "Member 'UBP_BuildableTurretAIComponent_C::Track_Target' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, Activate_Actors) == 0x0003A0, "Member 'UBP_BuildableTurretAIComponent_C::Activate_Actors' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, FireSound) == 0x0003B0, "Member 'UBP_BuildableTurretAIComponent_C::FireSound' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, AttackSpeed) == 0x0003B8, "Member 'UBP_BuildableTurretAIComponent_C::AttackSpeed' has a wrong offset!");
static_assert(offsetof(UBP_BuildableTurretAIComponent_C, AttackTraceChannel) == 0x0003C0, "Member 'UBP_BuildableTurretAIComponent_C::AttackTraceChannel' has a wrong offset!");

}


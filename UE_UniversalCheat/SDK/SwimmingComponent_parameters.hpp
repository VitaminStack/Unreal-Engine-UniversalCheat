#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwimmingComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SwimmingComponent.SwimmingComponent_C.DealDamage
// 0x0028 (0x0028 - 0x0000)
struct SwimmingComponent_C_DealDamage final
{
public:
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast;      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_DealDamage) == 0x000008, "Wrong alignment on SwimmingComponent_C_DealDamage");
static_assert(sizeof(SwimmingComponent_C_DealDamage) == 0x000028, "Wrong size on SwimmingComponent_C_DealDamage");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'SwimmingComponent_C_DealDamage::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'SwimmingComponent_C_DealDamage::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_RandomFloatInRange_ReturnValue) == 0x000010, "Member 'SwimmingComponent_C_DealDamage::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_DealDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_ApplyDamage_ReturnValue) == 0x000020, "Member 'SwimmingComponent_C_DealDamage::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_DealDamage, CallFunc_ApplyDamage_BaseDamage_ImplicitCast) == 0x000024, "Member 'SwimmingComponent_C_DealDamage::CallFunc_ApplyDamage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.ExecuteUbergraph_SwimmingComponent
// 0x0038 (0x0038 - 0x0000)
struct SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent) == 0x000008, "Wrong alignment on SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent");
static_assert(sizeof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent) == 0x000038, "Wrong size on SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, EntryPoint) == 0x000000, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, CallFunc_K2_SetTimer_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, CallFunc_K2_SetTimer_ReturnValue_1) == 0x000020, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, K2Node_DynamicCast_AsBP_Player_Character) == 0x000028, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'SwimmingComponent_C_ExecuteUbergraph_SwimmingComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.OnRep_IsSwimming?
// 0x0038 (0x0038 - 0x0000)
struct SwimmingComponent_C_OnRep_IsSwimming_ final
{
public:
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APhysicsVolume*                         CallFunc_GetPhysicsVolume_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APhysicsVolume*                         CallFunc_GetPhysicsVolume_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_OnRep_IsSwimming_) == 0x000008, "Wrong alignment on SwimmingComponent_C_OnRep_IsSwimming_");
static_assert(sizeof(SwimmingComponent_C_OnRep_IsSwimming_) == 0x000038, "Wrong size on SwimmingComponent_C_OnRep_IsSwimming_");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, K2Node_DynamicCast_AsBPI_Player) == 0x000000, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_GetPhysicsVolume_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_GetPhysicsVolume_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_IsFalling_ReturnValue) == 0x000021, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_IsFlying_ReturnValue) == 0x000022, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_GetPhysicsVolume_ReturnValue_1) == 0x000028, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_GetPhysicsVolume_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_IsSwimming_, CallFunc_BooleanOR_ReturnValue) == 0x000030, "Member 'SwimmingComponent_C_OnRep_IsSwimming_::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.OnRep_UnderWater?
// 0x0048 (0x0048 - 0x0000)
struct SwimmingComponent_C_OnRep_UnderWater_ final
{
public:
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue_1;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_OnRep_UnderWater_) == 0x000008, "Wrong alignment on SwimmingComponent_C_OnRep_UnderWater_");
static_assert(sizeof(SwimmingComponent_C_OnRep_UnderWater_) == 0x000048, "Wrong size on SwimmingComponent_C_OnRep_UnderWater_");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, Temp_bool_IsClosed_Variable) == 0x000000, "Member 'SwimmingComponent_C_OnRep_UnderWater_::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, Temp_bool_Has_Been_Initd_Variable) == 0x000001, "Member 'SwimmingComponent_C_OnRep_UnderWater_::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_GetRenderOpacity_ReturnValue) == 0x000004, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_K2_SetTimer_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_PlayAnimationForward_ReturnValue) == 0x000028, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_GetRenderOpacity_ReturnValue_1) == 0x000030, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_GetRenderOpacity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000034, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OnRep_UnderWater_, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'SwimmingComponent_C_OnRep_UnderWater_::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.OxygenTimer
// 0x0080 (0x0080 - 0x0000)
struct SwimmingComponent_C_OxygenTimer final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_1;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player_1;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_OxygenTimer) == 0x000008, "Wrong alignment on SwimmingComponent_C_OxygenTimer");
static_assert(sizeof(SwimmingComponent_C_OxygenTimer) == 0x000080, "Wrong size on SwimmingComponent_C_OxygenTimer");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_GetRenderOpacity_ReturnValue) == 0x000014, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_NotEqual_DoubleDouble_ReturnValue_1) == 0x000021, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_NotEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, K2Node_DynamicCast_AsBPI_Player) == 0x000030, "Member 'SwimmingComponent_C_OxygenTimer::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'SwimmingComponent_C_OxygenTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, K2Node_DynamicCast_AsBPI_Player_1) == 0x000058, "Member 'SwimmingComponent_C_OxygenTimer::K2Node_DynamicCast_AsBPI_Player_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'SwimmingComponent_C_OxygenTimer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_FClamp_ReturnValue_1) == 0x000070, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_OxygenTimer, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'SwimmingComponent_C_OxygenTimer::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.WaterDetection
// 0x01D0 (0x01D0 - 0x0000)
struct SwimmingComponent_C_WaterDetection final
{
public:
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_WaterTrace_Deepness;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WaterTrace_ImpactPoint;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00E0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_WaterDetection) == 0x000008, "Wrong alignment on SwimmingComponent_C_WaterDetection");
static_assert(sizeof(SwimmingComponent_C_WaterDetection) == 0x0001D0, "Wrong size on SwimmingComponent_C_WaterDetection");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000030, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_X) == 0x000048, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Y) == 0x000050, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Z) == 0x000058, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_X_1) == 0x000060, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_WaterTrace_Deepness) == 0x000078, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_WaterTrace_Deepness' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_WaterTrace_ImpactPoint) == 0x000080, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_WaterTrace_ImpactPoint' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_X_2) == 0x000098, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Y_2) == 0x0000A0, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_BreakVector_Z_2) == 0x0000A8, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_FInterpTo_Constant_ReturnValue) == 0x0000B8, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000E0, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterDetection, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001C8, "Member 'SwimmingComponent_C_WaterDetection::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function SwimmingComponent.SwimmingComponent_C.WaterTrace
// 0x02D0 (0x02D0 - 0x0000)
struct SwimmingComponent_C_WaterTrace final
{
public:
	double                                        Deepness_0;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D3[0x1];                                      // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingComponent_C_WaterTrace) == 0x000008, "Wrong alignment on SwimmingComponent_C_WaterTrace");
static_assert(sizeof(SwimmingComponent_C_WaterTrace) == 0x0002D0, "Wrong size on SwimmingComponent_C_WaterTrace");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, Deepness_0) == 0x000000, "Member 'SwimmingComponent_C_WaterTrace::Deepness_0' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, ImpactPoint) == 0x000008, "Member 'SwimmingComponent_C_WaterTrace::ImpactPoint' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, Temp_bool_Variable) == 0x000020, "Member 'SwimmingComponent_C_WaterTrace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_X) == 0x000040, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_Y) == 0x000048, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_Z) == 0x000050, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, Temp_real_Variable) == 0x000058, "Member 'SwimmingComponent_C_WaterTrace::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, Temp_object_Variable) == 0x000068, "Member 'SwimmingComponent_C_WaterTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000088, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_Y_1) == 0x0000A8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakVector_Z_1) == 0x0000B0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_MakeVector_ReturnValue_1) == 0x0000D0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_LineTraceSingle_OutHit) == 0x0000E8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x0001D0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D1, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001D2, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_Time) == 0x0001D4, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_Distance) == 0x0001D8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_Location) == 0x0001E0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_Normal) == 0x000210, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000228, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_PhysMat) == 0x000240, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_HitActor) == 0x000248, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_HitComponent) == 0x000250, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000258, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_BoneName) == 0x000260, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_HitItem) == 0x000268, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_ElementIndex) == 0x00026C, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_FaceIndex) == 0x000270, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_TraceStart) == 0x000278, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_BreakHitResult_TraceEnd) == 0x000290, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0002A8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0002B0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, K2Node_Select_Default) == 0x0002B8, "Member 'SwimmingComponent_C_WaterTrace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0002C0, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SwimmingComponent_C_WaterTrace, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0002C8, "Member 'SwimmingComponent_C_WaterTrace::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");

}


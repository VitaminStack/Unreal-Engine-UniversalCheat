#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapData

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapData.BP_MapData_C
// 0x0090 (0x0328 - 0x0298)
class ABP_MapData_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Map_Texture;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             Minimap_Mask_Texture;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        World_Size;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              World_Middle_Coordinations;                        // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynamic_Minimap_Material;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynamic_Bigmap_Material;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Minimap_Zoom;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Enable_Fog_Of_War;                                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Fog_Of_War_Mask_Resolution;                        // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Fog_Of_War_Mask;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Fog_Of_War_Texture;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Minimap_Fog_Of_War_Material;                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Vision_Radius;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Fog_Of_War_Update_Time;                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Bigmap_Fog_Of_War_Material;                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zone_Color;                                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Construct_Minimap();
	void Set_Settings_For_Gameplay();
	void Set_Settings_For_Picture();
	void Update_Player_Vision();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapData_C">();
	}
	static class ABP_MapData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapData_C>();
	}
};
static_assert(alignof(ABP_MapData_C) == 0x000008, "Wrong alignment on ABP_MapData_C");
static_assert(sizeof(ABP_MapData_C) == 0x000328, "Wrong size on ABP_MapData_C");
static_assert(offsetof(ABP_MapData_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_MapData_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Map_Texture) == 0x0002A0, "Member 'ABP_MapData_C::Map_Texture' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Minimap_Mask_Texture) == 0x0002A8, "Member 'ABP_MapData_C::Minimap_Mask_Texture' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, World_Size) == 0x0002B0, "Member 'ABP_MapData_C::World_Size' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, World_Middle_Coordinations) == 0x0002B8, "Member 'ABP_MapData_C::World_Middle_Coordinations' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Dynamic_Minimap_Material) == 0x0002C8, "Member 'ABP_MapData_C::Dynamic_Minimap_Material' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Dynamic_Bigmap_Material) == 0x0002D0, "Member 'ABP_MapData_C::Dynamic_Bigmap_Material' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Minimap_Zoom) == 0x0002D8, "Member 'ABP_MapData_C::Minimap_Zoom' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Enable_Fog_Of_War) == 0x0002E0, "Member 'ABP_MapData_C::Enable_Fog_Of_War' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Fog_Of_War_Mask_Resolution) == 0x0002E4, "Member 'ABP_MapData_C::Fog_Of_War_Mask_Resolution' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Fog_Of_War_Mask) == 0x0002E8, "Member 'ABP_MapData_C::Fog_Of_War_Mask' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Fog_Of_War_Texture) == 0x0002F0, "Member 'ABP_MapData_C::Fog_Of_War_Texture' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Minimap_Fog_Of_War_Material) == 0x0002F8, "Member 'ABP_MapData_C::Minimap_Fog_Of_War_Material' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Vision_Radius) == 0x000300, "Member 'ABP_MapData_C::Vision_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Fog_Of_War_Update_Time) == 0x000308, "Member 'ABP_MapData_C::Fog_Of_War_Update_Time' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Bigmap_Fog_Of_War_Material) == 0x000310, "Member 'ABP_MapData_C::Bigmap_Fog_Of_War_Material' has a wrong offset!");
static_assert(offsetof(ABP_MapData_C, Zone_Color) == 0x000318, "Member 'ABP_MapData_C::Zone_Color' has a wrong offset!");

}


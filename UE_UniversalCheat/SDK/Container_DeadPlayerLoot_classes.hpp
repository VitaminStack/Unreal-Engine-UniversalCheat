#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Container_DeadPlayerLoot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Container_DeadPlayerLoot.Container_DeadPlayerLoot_C
// 0x00A8 (0x0348 - 0x02A0)
class AContainer_DeadPlayerLoot_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       magnifier;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       DeathWidget;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   ContainerName;                                     // 0x02D0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class AActor*                                 CurrentActor;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              SetCustomDepth_True;                               // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SetCustomDepth_False;                              // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           OutlineTimer;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerClose_;                                      // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Marker_C*                           DeathMarker;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Looted_;                                           // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void CheckDistanceFromActor();
	void DistanceOutline();
	void Event_Outline();
	void ExecuteUbergraph_Container_DeadPlayerLoot(int32 EntryPoint);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetMainSceneComp(class USceneComponent** Comp);
	void JigCanInteract(bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName_0, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName_0, class AActor** ActorRef);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void OnEndInteract();
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteractEnded();
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void PickupBuildFromGround();
	void ReceiveBeginPlay();
	void SetInspected(const class FText& InText);
	void SetInteractDistance(class AActor* Target);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetPickupCount(int32 NewCount, bool* Result);
	void TraceForFloor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Container_DeadPlayerLoot_C">();
	}
	static class AContainer_DeadPlayerLoot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AContainer_DeadPlayerLoot_C>();
	}
};
static_assert(alignof(AContainer_DeadPlayerLoot_C) == 0x000008, "Wrong alignment on AContainer_DeadPlayerLoot_C");
static_assert(sizeof(AContainer_DeadPlayerLoot_C) == 0x000348, "Wrong size on AContainer_DeadPlayerLoot_C");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, UberGraphFrame) == 0x0002A0, "Member 'AContainer_DeadPlayerLoot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, magnifier) == 0x0002A8, "Member 'AContainer_DeadPlayerLoot_C::magnifier' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, DeathWidget) == 0x0002B0, "Member 'AContainer_DeadPlayerLoot_C::DeathWidget' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, AIOSubject) == 0x0002B8, "Member 'AContainer_DeadPlayerLoot_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, BP_JigMultiplayer) == 0x0002C0, "Member 'AContainer_DeadPlayerLoot_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, StaticMesh) == 0x0002C8, "Member 'AContainer_DeadPlayerLoot_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, ContainerName) == 0x0002D0, "Member 'AContainer_DeadPlayerLoot_C::ContainerName' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, CurrentActor) == 0x0002E8, "Member 'AContainer_DeadPlayerLoot_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, InteractingActorLoc) == 0x0002F0, "Member 'AContainer_DeadPlayerLoot_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, SetCustomDepth_True) == 0x000308, "Member 'AContainer_DeadPlayerLoot_C::SetCustomDepth_True' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, SetCustomDepth_False) == 0x000318, "Member 'AContainer_DeadPlayerLoot_C::SetCustomDepth_False' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, OutlineTimer) == 0x000328, "Member 'AContainer_DeadPlayerLoot_C::OutlineTimer' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, PlayerClose_) == 0x000330, "Member 'AContainer_DeadPlayerLoot_C::PlayerClose_' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, DeathMarker) == 0x000338, "Member 'AContainer_DeadPlayerLoot_C::DeathMarker' has a wrong offset!");
static_assert(offsetof(AContainer_DeadPlayerLoot_C, Looted_) == 0x000340, "Member 'AContainer_DeadPlayerLoot_C::Looted_' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadiationComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RadiationComponent.RadiationComponent_C
// 0x0050 (0x0108 - 0x00B8)
class URadiationComponent_C final : public UBaseComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_RadiationComponent_C;               // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        MaxRadiation;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentRadiation;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RadiationHandle;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ReduceRadiationAmount;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RadiationDamageHandle;                             // 0x00E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RadDeduction;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRadArea;                                         // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Geiger;                                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FilterHandle;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyRadiationDamage();
	void CheckStats();
	void ComponentLoaded();
	void ComponentPreSave();
	void DecreaseRadiation(double ReduceAmount);
	void ExecuteUbergraph_RadiationComponent(int32 EntryPoint);
	void FilterStoppedWorking();
	void GetRespirator(bool* Found_, struct FContainerPickupsInfo* ItemInfo);
	void GetRespiratorFilter(bool* Found_, struct FContainerPickupsInfo* ItemInfo);
	void GetRespiratorStat(const struct FGameplayTag& Stat, double* MinValue, double* MaxValue);
	void IncreaseRadiation(double Amount);
	void Mask_Filter();
	void RadiationTimer();
	void SetFilterUI(bool Show_);
	void StopRadiation();
	void UpdateFilter();
	void UpdateGeiger();
	void UpdateRadiation(float Time);
	void UseFilter(double MinusDur, double* NewDur, bool* Successful_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RadiationComponent_C">();
	}
	static class URadiationComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadiationComponent_C>();
	}
};
static_assert(alignof(URadiationComponent_C) == 0x000008, "Wrong alignment on URadiationComponent_C");
static_assert(sizeof(URadiationComponent_C) == 0x000108, "Wrong size on URadiationComponent_C");
static_assert(offsetof(URadiationComponent_C, UberGraphFrame_RadiationComponent_C) == 0x0000B8, "Member 'URadiationComponent_C::UberGraphFrame_RadiationComponent_C' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, MaxRadiation) == 0x0000C0, "Member 'URadiationComponent_C::MaxRadiation' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, CurrentRadiation) == 0x0000C8, "Member 'URadiationComponent_C::CurrentRadiation' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, RadiationHandle) == 0x0000D0, "Member 'URadiationComponent_C::RadiationHandle' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, ReduceRadiationAmount) == 0x0000D8, "Member 'URadiationComponent_C::ReduceRadiationAmount' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, RadiationDamageHandle) == 0x0000E0, "Member 'URadiationComponent_C::RadiationDamageHandle' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, RadDeduction) == 0x0000E8, "Member 'URadiationComponent_C::RadDeduction' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, InRadArea) == 0x0000F0, "Member 'URadiationComponent_C::InRadArea' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, Geiger) == 0x0000F8, "Member 'URadiationComponent_C::Geiger' has a wrong offset!");
static_assert(offsetof(URadiationComponent_C, FilterHandle) == 0x000100, "Member 'URadiationComponent_C::FilterHandle' has a wrong offset!");

}


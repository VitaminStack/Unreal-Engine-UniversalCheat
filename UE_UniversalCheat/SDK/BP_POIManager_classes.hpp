#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_POIManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_POI_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_POIManager.BP_POIManager_C
// 0x01C0 (0x0460 - 0x02A0)
class ABP_POIManager_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        BossLoc;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DiscoveryOverlap;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Crate;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LootOverlap;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LootRadius;                                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SphereOffset;                                      // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_POI                            POI;                                               // 0x02E8(0x0070)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          PreAddMarker_;                                     // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Explored_;                                         // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueContainerLooted_;                            // 0x035A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35B[0x5];                                      // 0x035B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BossOffset;                                        // 0x0360(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExploredCheckRadius;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ContainerLocation;                                 // 0x0380(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_POIMarker_C*                         Marker;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Names;                                             // 0x03E8(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         BossToSpawn;                                       // 0x03F8(0x0010)(Edit, BlueprintVisible)
	int32                                         SpawnAmount;                                       // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_CheckSpawnRadius;                      // 0x0410(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InitialSpawnDelay;                                 // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RandomSpawnRadius;                                 // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BossesDefeated;                                    // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawned;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InsidePOI_;                                        // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Entered_)> EnteringPOI;                                       // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AContainer_POICrate_C*                  Container;                                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActorLoaded();
	void ActorPreLoad();
	void ActorPreSave();
	void ActorSaved();
	void BossDeath();
	void BossSpawnCheckDebug();
	bool CheckLoc();
	void CheckRadius();
	void ComponentsToSave(TArray<class UActorComponent*>* Components);
	void DistanceCheck();
	void Event_Looted();
	void ExecuteUbergraph_BP_POIManager(int32 EntryPoint);
	void IsAnyInvokerInRadius(double Radius, bool* Result);
	void OnCompleted_DE194BCB4F4F1980C26078A8AEC5DE86();
	void RandomiseSpawn(class USceneComponent* SceneComp, struct FTransform* Transform);
	void ReceiveBeginPlay();
	void RespawnMarker();
	void SpawnBosses();
	void SpawnBossOnRadius();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_POIManager_C">();
	}
	static class ABP_POIManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_POIManager_C>();
	}
};
static_assert(alignof(ABP_POIManager_C) == 0x000010, "Wrong alignment on ABP_POIManager_C");
static_assert(sizeof(ABP_POIManager_C) == 0x000460, "Wrong size on ABP_POIManager_C");
static_assert(offsetof(ABP_POIManager_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_POIManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, BossLoc) == 0x0002A8, "Member 'ABP_POIManager_C::BossLoc' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, DiscoveryOverlap) == 0x0002B0, "Member 'ABP_POIManager_C::DiscoveryOverlap' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, Crate) == 0x0002B8, "Member 'ABP_POIManager_C::Crate' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, LootOverlap) == 0x0002C0, "Member 'ABP_POIManager_C::LootOverlap' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, LootRadius) == 0x0002C8, "Member 'ABP_POIManager_C::LootRadius' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, SphereOffset) == 0x0002D0, "Member 'ABP_POIManager_C::SphereOffset' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, POI) == 0x0002E8, "Member 'ABP_POIManager_C::POI' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, PreAddMarker_) == 0x000358, "Member 'ABP_POIManager_C::PreAddMarker_' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, Explored_) == 0x000359, "Member 'ABP_POIManager_C::Explored_' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, UniqueContainerLooted_) == 0x00035A, "Member 'ABP_POIManager_C::UniqueContainerLooted_' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, BossOffset) == 0x000360, "Member 'ABP_POIManager_C::BossOffset' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, ExploredCheckRadius) == 0x000378, "Member 'ABP_POIManager_C::ExploredCheckRadius' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, ContainerLocation) == 0x000380, "Member 'ABP_POIManager_C::ContainerLocation' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, Marker) == 0x0003E0, "Member 'ABP_POIManager_C::Marker' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, Names) == 0x0003E8, "Member 'ABP_POIManager_C::Names' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, BossToSpawn) == 0x0003F8, "Member 'ABP_POIManager_C::BossToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, SpawnAmount) == 0x000408, "Member 'ABP_POIManager_C::SpawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, TimerHandle_CheckSpawnRadius) == 0x000410, "Member 'ABP_POIManager_C::TimerHandle_CheckSpawnRadius' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, InitialSpawnDelay) == 0x000418, "Member 'ABP_POIManager_C::InitialSpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, RandomSpawnRadius) == 0x000420, "Member 'ABP_POIManager_C::RandomSpawnRadius' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, BossesDefeated) == 0x000428, "Member 'ABP_POIManager_C::BossesDefeated' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, OnActorSpawned) == 0x000430, "Member 'ABP_POIManager_C::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, InsidePOI_) == 0x000440, "Member 'ABP_POIManager_C::InsidePOI_' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, EnteringPOI) == 0x000448, "Member 'ABP_POIManager_C::EnteringPOI' has a wrong offset!");
static_assert(offsetof(ABP_POIManager_C, Container) == 0x000458, "Member 'ABP_POIManager_C::Container' has a wrong offset!");

}


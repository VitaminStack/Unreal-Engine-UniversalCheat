#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_JigCompInfo

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_JigCompInfo.BPI_JigCompInfo_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_JigCompInfo_C final : public IInterface
{
public:
	void JigCom_GetType(struct FGameplayTag* Type);
	void JigCom_IsLootContainer(bool* Result);
	void JigCom_IsMainCharacter(bool* Result);
	void JigCom_IsPickup(bool* Result);
	void JigCom_IsVendor(bool* Result);
	void JigComp_AddNewPendingRequest(class UJSI_Slot_C* NewItem, bool* Result);
	void JigComp_CallRequestChamberUID(const struct FGuid& ChamberContainerUID, bool* Result);
	void JigComp_CallRequestReload(const struct FGuid& UnloadUID, const struct FGuid& UnloadToContainerUID, int32 ToIndex, bool FinalRot, const struct FGuid& ReloadUID, const struct FGuid& ReloadToContainerUID, class AActor* WeaponRef, bool* Result);
	void JigComp_CallRequestReloadInternal(const struct FGuid& MagContainerUID, const struct FGuid& AmmoToAdd, int32 MaxCap, bool* Result);
	void JigComp_CallServerChamberWeapon(const struct FGuid& ChamberContainerUID, const struct FGuid& MagContainerUID, const struct FGuid& BulletToChamberUID, int32 ChamberContainerIndex, bool SendChamberUID_, bool* Result);
	void JigComp_CallServerConsumeRequest(class UActorComponent* TargetComp, const struct FGuid& ItemUID, int32 Amount, const class FString& CustomData, bool* Result);
	void JigComp_ContextTryEquip(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result);
	void JigComp_ContextTryUnequip(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result);
	void JigComp_ContextTryUnloadAmmo(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result);
	void JigComp_GetInventoryWidgetRef(class UUserWidget** UserWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_JigCompInfo_C">();
	}
	static class IBPI_JigCompInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_JigCompInfo_C>();
	}
};
static_assert(alignof(IBPI_JigCompInfo_C) == 0x000008, "Wrong alignment on IBPI_JigCompInfo_C");
static_assert(sizeof(IBPI_JigCompInfo_C) == 0x000028, "Wrong size on IBPI_JigCompInfo_C");

}


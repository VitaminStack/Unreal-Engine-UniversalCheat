#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AviatorsPickup

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_RepAttachmentInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.ExecuteUbergraph_BP_AviatorsPickup
// 0x0038 (0x0038 - 0x0000)
struct BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          K2Node_Event_UID;                                  // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FGameplayTag                           K2Node_Event_NewState;                             // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PreExecuteClientSide_;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_NotifyName;                           // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Value;                                // 0x002C(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup");
static_assert(sizeof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup) == 0x000038, "Wrong size on BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, EntryPoint) == 0x000000, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, K2Node_Event_UID) == 0x000008, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::K2Node_Event_UID' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, K2Node_Event_NewState) == 0x000018, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, K2Node_Event_PreExecuteClientSide_) == 0x000020, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::K2Node_Event_PreExecuteClientSide_' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, K2Node_Event_NotifyName) == 0x000024, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::K2Node_Event_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup, K2Node_Event_Value) == 0x00002C, "Member 'BP_AviatorsPickup_C_ExecuteUbergraph_BP_AviatorsPickup::K2Node_Event_Value' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_AttachmentInstalled
// 0x0030 (0x0030 - 0x0000)
struct BP_AviatorsPickup_C_Jig_AttachmentInstalled final
{
public:
	struct FGuid                                  MainUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_RepAttachmentInfo>           Attachments;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AttachmentType;                                    // 0x0024(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_AttachmentInstalled) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_AttachmentInstalled");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_AttachmentInstalled) == 0x000030, "Wrong size on BP_AviatorsPickup_C_Jig_AttachmentInstalled");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentInstalled, MainUID) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_AttachmentInstalled::MainUID' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentInstalled, Attachments) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_AttachmentInstalled::Attachments' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentInstalled, Result) == 0x000020, "Member 'BP_AviatorsPickup_C_Jig_AttachmentInstalled::Result' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentInstalled, AttachmentType) == 0x000024, "Member 'BP_AviatorsPickup_C_Jig_AttachmentInstalled::AttachmentType' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_AttachmentRemoved
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_AttachmentRemoved final
{
public:
	TArray<struct FS_RepAttachmentInfo>           Attachments;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AttachmentType;                                    // 0x0014(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_AttachmentRemoved) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_AttachmentRemoved");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_AttachmentRemoved) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_AttachmentRemoved");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentRemoved, Attachments) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_AttachmentRemoved::Attachments' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentRemoved, Result) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_AttachmentRemoved::Result' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_AttachmentRemoved, AttachmentType) == 0x000014, "Member 'BP_AviatorsPickup_C_Jig_AttachmentRemoved::AttachmentType' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_CanChamberWeapon
// 0x0018 (0x0018 - 0x0000)
struct BP_AviatorsPickup_C_Jig_CanChamberWeapon final
{
public:
	class UActorComponent*                        MPComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PlayerSlots;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_CanChamberWeapon) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_CanChamberWeapon");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_CanChamberWeapon) == 0x000018, "Wrong size on BP_AviatorsPickup_C_Jig_CanChamberWeapon");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CanChamberWeapon, MPComp) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_CanChamberWeapon::MPComp' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CanChamberWeapon, PlayerSlots) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_CanChamberWeapon::PlayerSlots' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CanChamberWeapon, Result) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_CanChamberWeapon::Result' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_CheckCanReload
// 0x0040 (0x0040 - 0x0000)
struct BP_AviatorsPickup_C_Jig_CheckCanReload final
{
public:
	class UActorComponent*                        MPComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PlayerSlots;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ContainerMag;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ReloadMontage;                                     // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasInternalMag;                                    // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChamber_;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ReloadWith;                                        // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LoopReloadAnim;                                    // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_CheckCanReload) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_CheckCanReload");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_CheckCanReload) == 0x000040, "Wrong size on BP_AviatorsPickup_C_Jig_CheckCanReload");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, MPComp) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::MPComp' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, PlayerSlots) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::PlayerSlots' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, Result) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::Result' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, ContainerMag) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::ContainerMag' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, ReloadMontage) == 0x000020, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::ReloadMontage' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, HasInternalMag) == 0x000028, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::HasInternalMag' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, CanChamber_) == 0x000029, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::CanChamber_' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, ReloadWith) == 0x000030, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::ReloadWith' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_CheckCanReload, LoopReloadAnim) == 0x000038, "Member 'BP_AviatorsPickup_C_Jig_CheckCanReload::LoopReloadAnim' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_ExecuteChamberWeapon
// 0x0028 (0x0028 - 0x0000)
struct BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon final
{
public:
	class UActorComponent*                        MPComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PlayerSlots;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ChamberMontage;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon) == 0x000028, "Wrong size on BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon, MPComp) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon::MPComp' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon, PlayerSlots) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon::PlayerSlots' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon, Result) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon::Result' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon, ChamberMontage) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon::ChamberMontage' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon, Speed) == 0x000020, "Member 'BP_AviatorsPickup_C_Jig_ExecuteChamberWeapon::Speed' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetADSSocketLocation
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetADSSocketLocation final
{
public:
	struct FVector                                SocketLoc;                                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SocketFound;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetADSSocketLocation) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetADSSocketLocation");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetADSSocketLocation) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_GetADSSocketLocation");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetADSSocketLocation, SocketLoc) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetADSSocketLocation::SocketLoc' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetADSSocketLocation, SocketFound) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_GetADSSocketLocation::SocketFound' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetAttachmentActiveState
// 0x0008 (0x0008 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetAttachmentActiveState final
{
public:
	struct FGameplayTag                           Result;                                            // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetAttachmentActiveState) == 0x000004, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetAttachmentActiveState");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetAttachmentActiveState) == 0x000008, "Wrong size on BP_AviatorsPickup_C_Jig_GetAttachmentActiveState");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentActiveState, Result) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentActiveState::Result' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetAttachmentArrayByType
// 0x0038 (0x0038 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AMainLocalAttachment_C*>     Attachment;                                        // 0x0008(0x0010)(Parm, OutParm)
	bool                                          Found;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AMainLocalAttachment_C*>     CallFunc_FindAttachmentActorByTypeArr_Attachment;  // 0x0020(0x0010)(ReferenceParm)
	bool                                          CallFunc_FindAttachmentActorByTypeArr_Found;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType) == 0x000038, "Wrong size on BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType, Type) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType::Type' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType, Attachment) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType::Attachment' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType, Found) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType::Found' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType, CallFunc_FindAttachmentActorByTypeArr_Attachment) == 0x000020, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType::CallFunc_FindAttachmentActorByTypeArr_Attachment' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType, CallFunc_FindAttachmentActorByTypeArr_Found) == 0x000030, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentArrayByType::CallFunc_FindAttachmentActorByTypeArr_Found' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetAttachmentByType
// 0x0028 (0x0028 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetAttachmentByType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class ABP_AMainLocalAttachment_C*             Attachment;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AMainLocalAttachment_C*             CallFunc_FindAttachmentActorByType_Attachment;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindAttachmentActorByType_Found;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetAttachmentByType) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetAttachmentByType");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetAttachmentByType) == 0x000028, "Wrong size on BP_AviatorsPickup_C_Jig_GetAttachmentByType");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentByType, Type) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentByType::Type' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentByType, Attachment) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentByType::Attachment' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentByType, Found) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentByType::Found' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentByType, CallFunc_FindAttachmentActorByType_Attachment) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentByType::CallFunc_FindAttachmentActorByType_Attachment' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentByType, CallFunc_FindAttachmentActorByType_Found) == 0x000020, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentByType::CallFunc_FindAttachmentActorByType_Found' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetAttachmentInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetAttachmentInfo final
{
public:
	struct FGuid                                  UID;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                AttachmentInfo;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetAttachmentInfo) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetAttachmentInfo");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetAttachmentInfo) == 0x000018, "Wrong size on BP_AviatorsPickup_C_Jig_GetAttachmentInfo");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentInfo, UID) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentInfo::UID' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAttachmentInfo, AttachmentInfo) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_GetAttachmentInfo::AttachmentInfo' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetAvailableAttachmentStates
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates final
{
public:
	struct FGameplayTagContainer                  States;                                            // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates, States) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetAvailableAttachmentStates::States' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetEquipMontage final
{
public:
	bool                                          CanChamber_;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           EquipMontage;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetEquipMontage) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetEquipMontage");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetEquipMontage) == 0x000010, "Wrong size on BP_AviatorsPickup_C_Jig_GetEquipMontage");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetEquipMontage, CanChamber_) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetEquipMontage::CanChamber_' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetEquipMontage, EquipMontage) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_GetEquipMontage::EquipMontage' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetPendingMag
// 0x0010 (0x0010 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetPendingMag final
{
public:
	bool                                          FindMagIfNoPending_;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AMainLocalAttachment_C*             MagRef;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetPendingMag) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetPendingMag");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetPendingMag) == 0x000010, "Wrong size on BP_AviatorsPickup_C_Jig_GetPendingMag");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetPendingMag, FindMagIfNoPending_) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetPendingMag::FindMagIfNoPending_' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetPendingMag, MagRef) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_GetPendingMag::MagRef' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_GetPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_AviatorsPickup_C_Jig_GetPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_GetPrimitiveComponent) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_GetPrimitiveComponent");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_GetPrimitiveComponent) == 0x000008, "Wrong size on BP_AviatorsPickup_C_Jig_GetPrimitiveComponent");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_GetPrimitiveComponent, Comp) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_GetPrimitiveComponent::Comp' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_OnMontageNotify
// 0x0008 (0x0008 - 0x0000)
struct BP_AviatorsPickup_C_Jig_OnMontageNotify final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_OnMontageNotify) == 0x000004, "Wrong alignment on BP_AviatorsPickup_C_Jig_OnMontageNotify");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_OnMontageNotify) == 0x000008, "Wrong size on BP_AviatorsPickup_C_Jig_OnMontageNotify");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_OnMontageNotify, NotifyName) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_OnMontageNotify::NotifyName' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_SetAttachmentActiveState
// 0x0008 (0x0008 - 0x0000)
struct BP_AviatorsPickup_C_Jig_SetAttachmentActiveState final
{
public:
	struct FGameplayTag                           Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_SetAttachmentActiveState) == 0x000004, "Wrong alignment on BP_AviatorsPickup_C_Jig_SetAttachmentActiveState");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_SetAttachmentActiveState) == 0x000008, "Wrong size on BP_AviatorsPickup_C_Jig_SetAttachmentActiveState");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentActiveState, Value) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentActiveState::Value' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_SetAttachmentInfo
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_SetAttachmentInfo final
{
public:
	struct FGuid                                  UID;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                AttachmentInfo;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_SetAttachmentInfo) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_SetAttachmentInfo");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_SetAttachmentInfo) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_SetAttachmentInfo");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentInfo, UID) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentInfo::UID' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentInfo, AttachmentInfo) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentInfo::AttachmentInfo' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentInfo, Result) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentInfo::Result' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_SetAttachmentState
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_SetAttachmentState final
{
public:
	TArray<struct FGuid>                          UID;                                               // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           NewState;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          PreExecuteClientSide_;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_SetAttachmentState) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_SetAttachmentState");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_SetAttachmentState) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_SetAttachmentState");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentState, UID) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentState::UID' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentState, NewState) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentState::NewState' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetAttachmentState, PreExecuteClientSide_) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_SetAttachmentState::PreExecuteClientSide_' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_SetPendingMag
// 0x0018 (0x0018 - 0x0000)
struct BP_AviatorsPickup_C_Jig_SetPendingMag final
{
public:
	class ABP_AMainLocalAttachment_C*             MagRef;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigsawItem_DataAsset_C*                DA;                                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_SetPendingMag) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_SetPendingMag");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_SetPendingMag) == 0x000018, "Wrong size on BP_AviatorsPickup_C_Jig_SetPendingMag");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetPendingMag, MagRef) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_SetPendingMag::MagRef' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetPendingMag, DA) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_SetPendingMag::DA' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_SetPendingMag, Result) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_SetPendingMag::Result' has a wrong offset!");

// Function BP_AviatorsPickup.BP_AviatorsPickup_C.Jig_StartReloading
// 0x0020 (0x0020 - 0x0000)
struct BP_AviatorsPickup_C_Jig_StartReloading final
{
public:
	class UActorComponent*                        MPCom;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        MagContainer;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            WithMag;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AviatorsPickup_C_Jig_StartReloading) == 0x000008, "Wrong alignment on BP_AviatorsPickup_C_Jig_StartReloading");
static_assert(sizeof(BP_AviatorsPickup_C_Jig_StartReloading) == 0x000020, "Wrong size on BP_AviatorsPickup_C_Jig_StartReloading");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_StartReloading, MPCom) == 0x000000, "Member 'BP_AviatorsPickup_C_Jig_StartReloading::MPCom' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_StartReloading, MagContainer) == 0x000008, "Member 'BP_AviatorsPickup_C_Jig_StartReloading::MagContainer' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_StartReloading, WithMag) == 0x000010, "Member 'BP_AviatorsPickup_C_Jig_StartReloading::WithMag' has a wrong offset!");
static_assert(offsetof(BP_AviatorsPickup_C_Jig_StartReloading, Result) == 0x000018, "Member 'BP_AviatorsPickup_C_Jig_StartReloading::Result' has a wrong offset!");

}


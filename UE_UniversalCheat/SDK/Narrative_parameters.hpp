#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Narrative

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Narrative_structs.hpp"


namespace SDK::Params
{

// Function Narrative.Dialogue.DestroySpeakerAvatar
// 0x00C0 (0x00C0 - 0x0000)
struct Dialogue_DestroySpeakerAvatar final
{
public:
	struct FSpeakerInfo                           Info;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 SpeakerAvatar;                                     // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Dialogue_DestroySpeakerAvatar) == 0x000010, "Wrong alignment on Dialogue_DestroySpeakerAvatar");
static_assert(sizeof(Dialogue_DestroySpeakerAvatar) == 0x0000C0, "Wrong size on Dialogue_DestroySpeakerAvatar");
static_assert(offsetof(Dialogue_DestroySpeakerAvatar, Info) == 0x000000, "Member 'Dialogue_DestroySpeakerAvatar::Info' has a wrong offset!");
static_assert(offsetof(Dialogue_DestroySpeakerAvatar, SpeakerAvatar) == 0x0000B0, "Member 'Dialogue_DestroySpeakerAvatar::SpeakerAvatar' has a wrong offset!");

// Function Narrative.Dialogue.FinishDialogueNode
// 0x0110 (0x0110 - 0x0000)
struct Dialogue_FinishDialogueNode final
{
public:
	class UDialogueNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeakerInfo                           Speaker;                                           // 0x0050(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 SpeakerActor;                                      // 0x0100(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ListenerActor;                                     // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_FinishDialogueNode) == 0x000010, "Wrong alignment on Dialogue_FinishDialogueNode");
static_assert(sizeof(Dialogue_FinishDialogueNode) == 0x000110, "Wrong size on Dialogue_FinishDialogueNode");
static_assert(offsetof(Dialogue_FinishDialogueNode, Node) == 0x000000, "Member 'Dialogue_FinishDialogueNode::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_FinishDialogueNode, Line) == 0x000008, "Member 'Dialogue_FinishDialogueNode::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_FinishDialogueNode, Speaker) == 0x000050, "Member 'Dialogue_FinishDialogueNode::Speaker' has a wrong offset!");
static_assert(offsetof(Dialogue_FinishDialogueNode, SpeakerActor) == 0x000100, "Member 'Dialogue_FinishDialogueNode::SpeakerActor' has a wrong offset!");
static_assert(offsetof(Dialogue_FinishDialogueNode, ListenerActor) == 0x000108, "Member 'Dialogue_FinishDialogueNode::ListenerActor' has a wrong offset!");

// Function Narrative.Dialogue.GetLineDuration
// 0x0050 (0x0050 - 0x0000)
struct Dialogue_GetLineDuration final
{
public:
	class UDialogueNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Dialogue_GetLineDuration) == 0x000008, "Wrong alignment on Dialogue_GetLineDuration");
static_assert(sizeof(Dialogue_GetLineDuration) == 0x000050, "Wrong size on Dialogue_GetLineDuration");
static_assert(offsetof(Dialogue_GetLineDuration, Node) == 0x000000, "Member 'Dialogue_GetLineDuration::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_GetLineDuration, Line) == 0x000008, "Member 'Dialogue_GetLineDuration::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_GetLineDuration, ReturnValue) == 0x000048, "Member 'Dialogue_GetLineDuration::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetStringVariable
// 0x0068 (0x0068 - 0x0000)
struct Dialogue_GetStringVariable final
{
public:
	const class UDialogueNode*                    Node;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetStringVariable) == 0x000008, "Wrong alignment on Dialogue_GetStringVariable");
static_assert(sizeof(Dialogue_GetStringVariable) == 0x000068, "Wrong size on Dialogue_GetStringVariable");
static_assert(offsetof(Dialogue_GetStringVariable, Node) == 0x000000, "Member 'Dialogue_GetStringVariable::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_GetStringVariable, Line) == 0x000008, "Member 'Dialogue_GetStringVariable::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_GetStringVariable, VariableName) == 0x000048, "Member 'Dialogue_GetStringVariable::VariableName' has a wrong offset!");
static_assert(offsetof(Dialogue_GetStringVariable, ReturnValue) == 0x000058, "Member 'Dialogue_GetStringVariable::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.LinkSpeakerAvatar
// 0x00C0 (0x00C0 - 0x0000)
struct Dialogue_LinkSpeakerAvatar final
{
public:
	struct FSpeakerInfo                           Info;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Dialogue_LinkSpeakerAvatar) == 0x000010, "Wrong alignment on Dialogue_LinkSpeakerAvatar");
static_assert(sizeof(Dialogue_LinkSpeakerAvatar) == 0x0000C0, "Wrong size on Dialogue_LinkSpeakerAvatar");
static_assert(offsetof(Dialogue_LinkSpeakerAvatar, Info) == 0x000000, "Member 'Dialogue_LinkSpeakerAvatar::Info' has a wrong offset!");
static_assert(offsetof(Dialogue_LinkSpeakerAvatar, ReturnValue) == 0x0000B0, "Member 'Dialogue_LinkSpeakerAvatar::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.OnNPCDialogueLineFinished
// 0x0100 (0x0100 - 0x0000)
struct Dialogue_OnNPCDialogueLineFinished final
{
public:
	class UDialogueNode_NPC*                      Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeakerInfo                           Speaker;                                           // 0x0050(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_OnNPCDialogueLineFinished) == 0x000010, "Wrong alignment on Dialogue_OnNPCDialogueLineFinished");
static_assert(sizeof(Dialogue_OnNPCDialogueLineFinished) == 0x000100, "Wrong size on Dialogue_OnNPCDialogueLineFinished");
static_assert(offsetof(Dialogue_OnNPCDialogueLineFinished, Node) == 0x000000, "Member 'Dialogue_OnNPCDialogueLineFinished::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_OnNPCDialogueLineFinished, DialogueLine) == 0x000008, "Member 'Dialogue_OnNPCDialogueLineFinished::DialogueLine' has a wrong offset!");
static_assert(offsetof(Dialogue_OnNPCDialogueLineFinished, Speaker) == 0x000050, "Member 'Dialogue_OnNPCDialogueLineFinished::Speaker' has a wrong offset!");

// Function Narrative.Dialogue.OnNPCDialogueLineStarted
// 0x0100 (0x0100 - 0x0000)
struct Dialogue_OnNPCDialogueLineStarted final
{
public:
	class UDialogueNode_NPC*                      Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeakerInfo                           Speaker;                                           // 0x0050(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_OnNPCDialogueLineStarted) == 0x000010, "Wrong alignment on Dialogue_OnNPCDialogueLineStarted");
static_assert(sizeof(Dialogue_OnNPCDialogueLineStarted) == 0x000100, "Wrong size on Dialogue_OnNPCDialogueLineStarted");
static_assert(offsetof(Dialogue_OnNPCDialogueLineStarted, Node) == 0x000000, "Member 'Dialogue_OnNPCDialogueLineStarted::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_OnNPCDialogueLineStarted, DialogueLine) == 0x000008, "Member 'Dialogue_OnNPCDialogueLineStarted::DialogueLine' has a wrong offset!");
static_assert(offsetof(Dialogue_OnNPCDialogueLineStarted, Speaker) == 0x000050, "Member 'Dialogue_OnNPCDialogueLineStarted::Speaker' has a wrong offset!");

// Function Narrative.Dialogue.OnPlayerDialogueLineFinished
// 0x0048 (0x0048 - 0x0000)
struct Dialogue_OnPlayerDialogueLineFinished final
{
public:
	class UDialogueNode_Player*                   Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_OnPlayerDialogueLineFinished) == 0x000008, "Wrong alignment on Dialogue_OnPlayerDialogueLineFinished");
static_assert(sizeof(Dialogue_OnPlayerDialogueLineFinished) == 0x000048, "Wrong size on Dialogue_OnPlayerDialogueLineFinished");
static_assert(offsetof(Dialogue_OnPlayerDialogueLineFinished, Node) == 0x000000, "Member 'Dialogue_OnPlayerDialogueLineFinished::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_OnPlayerDialogueLineFinished, DialogueLine) == 0x000008, "Member 'Dialogue_OnPlayerDialogueLineFinished::DialogueLine' has a wrong offset!");

// Function Narrative.Dialogue.OnPlayerDialogueLineStarted
// 0x0048 (0x0048 - 0x0000)
struct Dialogue_OnPlayerDialogueLineStarted final
{
public:
	class UDialogueNode_Player*                   Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_OnPlayerDialogueLineStarted) == 0x000008, "Wrong alignment on Dialogue_OnPlayerDialogueLineStarted");
static_assert(sizeof(Dialogue_OnPlayerDialogueLineStarted) == 0x000048, "Wrong size on Dialogue_OnPlayerDialogueLineStarted");
static_assert(offsetof(Dialogue_OnPlayerDialogueLineStarted, Node) == 0x000000, "Member 'Dialogue_OnPlayerDialogueLineStarted::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_OnPlayerDialogueLineStarted, DialogueLine) == 0x000008, "Member 'Dialogue_OnPlayerDialogueLineStarted::DialogueLine' has a wrong offset!");

// Function Narrative.Dialogue.PlayDialogueAnimation
// 0x0058 (0x0058 - 0x0000)
struct Dialogue_PlayDialogueAnimation final
{
public:
	class UDialogueNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Speaker;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Listener;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayDialogueAnimation) == 0x000008, "Wrong alignment on Dialogue_PlayDialogueAnimation");
static_assert(sizeof(Dialogue_PlayDialogueAnimation) == 0x000058, "Wrong size on Dialogue_PlayDialogueAnimation");
static_assert(offsetof(Dialogue_PlayDialogueAnimation, Node) == 0x000000, "Member 'Dialogue_PlayDialogueAnimation::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueAnimation, Line) == 0x000008, "Member 'Dialogue_PlayDialogueAnimation::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueAnimation, Speaker) == 0x000048, "Member 'Dialogue_PlayDialogueAnimation::Speaker' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueAnimation, Listener) == 0x000050, "Member 'Dialogue_PlayDialogueAnimation::Listener' has a wrong offset!");

// Function Narrative.Dialogue.PlayDialogueNode
// 0x0110 (0x0110 - 0x0000)
struct Dialogue_PlayDialogueNode final
{
public:
	class UDialogueNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeakerInfo                           Speaker;                                           // 0x0050(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 SpeakerActor;                                      // 0x0100(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ListenerActor;                                     // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayDialogueNode) == 0x000010, "Wrong alignment on Dialogue_PlayDialogueNode");
static_assert(sizeof(Dialogue_PlayDialogueNode) == 0x000110, "Wrong size on Dialogue_PlayDialogueNode");
static_assert(offsetof(Dialogue_PlayDialogueNode, Node) == 0x000000, "Member 'Dialogue_PlayDialogueNode::Node' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueNode, Line) == 0x000008, "Member 'Dialogue_PlayDialogueNode::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueNode, Speaker) == 0x000050, "Member 'Dialogue_PlayDialogueNode::Speaker' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueNode, SpeakerActor) == 0x000100, "Member 'Dialogue_PlayDialogueNode::SpeakerActor' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueNode, ListenerActor) == 0x000108, "Member 'Dialogue_PlayDialogueNode::ListenerActor' has a wrong offset!");

// Function Narrative.Dialogue.PlayDialogueSequence
// 0x0018 (0x0018 - 0x0000)
struct Dialogue_PlayDialogueSequence final
{
public:
	class UNarrativeDialogueSequence*             Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Speaker;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Listener;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayDialogueSequence) == 0x000008, "Wrong alignment on Dialogue_PlayDialogueSequence");
static_assert(sizeof(Dialogue_PlayDialogueSequence) == 0x000018, "Wrong size on Dialogue_PlayDialogueSequence");
static_assert(offsetof(Dialogue_PlayDialogueSequence, Sequence) == 0x000000, "Member 'Dialogue_PlayDialogueSequence::Sequence' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueSequence, Speaker) == 0x000008, "Member 'Dialogue_PlayDialogueSequence::Speaker' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueSequence, Listener) == 0x000010, "Member 'Dialogue_PlayDialogueSequence::Listener' has a wrong offset!");

// Function Narrative.Dialogue.PlayDialogueSound
// 0x0050 (0x0050 - 0x0000)
struct Dialogue_PlayDialogueSound final
{
public:
	struct FDialogueLine                          Line;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Speaker;                                           // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Listener;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayDialogueSound) == 0x000008, "Wrong alignment on Dialogue_PlayDialogueSound");
static_assert(sizeof(Dialogue_PlayDialogueSound) == 0x000050, "Wrong size on Dialogue_PlayDialogueSound");
static_assert(offsetof(Dialogue_PlayDialogueSound, Line) == 0x000000, "Member 'Dialogue_PlayDialogueSound::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueSound, Speaker) == 0x000040, "Member 'Dialogue_PlayDialogueSound::Speaker' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayDialogueSound, Listener) == 0x000048, "Member 'Dialogue_PlayDialogueSound::Listener' has a wrong offset!");

// Function Narrative.Dialogue.PlayNPCDialogue
// 0x0100 (0x0100 - 0x0000)
struct Dialogue_PlayNPCDialogue final
{
public:
	class UDialogueNode_NPC*                      NPCReply;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeakerInfo                           Speaker;                                           // 0x0050(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayNPCDialogue) == 0x000010, "Wrong alignment on Dialogue_PlayNPCDialogue");
static_assert(sizeof(Dialogue_PlayNPCDialogue) == 0x000100, "Wrong size on Dialogue_PlayNPCDialogue");
static_assert(offsetof(Dialogue_PlayNPCDialogue, NPCReply) == 0x000000, "Member 'Dialogue_PlayNPCDialogue::NPCReply' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayNPCDialogue, Line) == 0x000008, "Member 'Dialogue_PlayNPCDialogue::Line' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayNPCDialogue, Speaker) == 0x000050, "Member 'Dialogue_PlayNPCDialogue::Speaker' has a wrong offset!");

// Function Narrative.Dialogue.PlayPlayerDialogue
// 0x0048 (0x0048 - 0x0000)
struct Dialogue_PlayPlayerDialogue final
{
public:
	class UDialogueNode_Player*                   PlayerReply;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          Line;                                              // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_PlayPlayerDialogue) == 0x000008, "Wrong alignment on Dialogue_PlayPlayerDialogue");
static_assert(sizeof(Dialogue_PlayPlayerDialogue) == 0x000048, "Wrong size on Dialogue_PlayPlayerDialogue");
static_assert(offsetof(Dialogue_PlayPlayerDialogue, PlayerReply) == 0x000000, "Member 'Dialogue_PlayPlayerDialogue::PlayerReply' has a wrong offset!");
static_assert(offsetof(Dialogue_PlayPlayerDialogue, Line) == 0x000008, "Member 'Dialogue_PlayPlayerDialogue::Line' has a wrong offset!");

// Function Narrative.Dialogue.SkipCurrentLine
// 0x0001 (0x0001 - 0x0000)
struct Dialogue_SkipCurrentLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_SkipCurrentLine) == 0x000001, "Wrong alignment on Dialogue_SkipCurrentLine");
static_assert(sizeof(Dialogue_SkipCurrentLine) == 0x000001, "Wrong size on Dialogue_SkipCurrentLine");
static_assert(offsetof(Dialogue_SkipCurrentLine, ReturnValue) == 0x000000, "Member 'Dialogue_SkipCurrentLine::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.TickDialogue
// 0x0004 (0x0004 - 0x0000)
struct Dialogue_TickDialogue final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_TickDialogue) == 0x000004, "Wrong alignment on Dialogue_TickDialogue");
static_assert(sizeof(Dialogue_TickDialogue) == 0x000004, "Wrong size on Dialogue_TickDialogue");
static_assert(offsetof(Dialogue_TickDialogue, DeltaTime) == 0x000000, "Member 'Dialogue_TickDialogue::DeltaTime' has a wrong offset!");

// Function Narrative.Dialogue.CanSkipCurrentLine
// 0x0001 (0x0001 - 0x0000)
struct Dialogue_CanSkipCurrentLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_CanSkipCurrentLine) == 0x000001, "Wrong alignment on Dialogue_CanSkipCurrentLine");
static_assert(sizeof(Dialogue_CanSkipCurrentLine) == 0x000001, "Wrong size on Dialogue_CanSkipCurrentLine");
static_assert(offsetof(Dialogue_CanSkipCurrentLine, ReturnValue) == 0x000000, "Member 'Dialogue_CanSkipCurrentLine::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetAvatar
// 0x0010 (0x0010 - 0x0000)
struct Dialogue_GetAvatar final
{
public:
	class FName                                   SpeakerID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetAvatar) == 0x000008, "Wrong alignment on Dialogue_GetAvatar");
static_assert(sizeof(Dialogue_GetAvatar) == 0x000010, "Wrong size on Dialogue_GetAvatar");
static_assert(offsetof(Dialogue_GetAvatar, SpeakerID) == 0x000000, "Member 'Dialogue_GetAvatar::SpeakerID' has a wrong offset!");
static_assert(offsetof(Dialogue_GetAvatar, ReturnValue) == 0x000008, "Member 'Dialogue_GetAvatar::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetConversationCenterPoint
// 0x0018 (0x0018 - 0x0000)
struct Dialogue_GetConversationCenterPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetConversationCenterPoint) == 0x000008, "Wrong alignment on Dialogue_GetConversationCenterPoint");
static_assert(sizeof(Dialogue_GetConversationCenterPoint) == 0x000018, "Wrong size on Dialogue_GetConversationCenterPoint");
static_assert(offsetof(Dialogue_GetConversationCenterPoint, ReturnValue) == 0x000000, "Member 'Dialogue_GetConversationCenterPoint::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetNodes
// 0x0010 (0x0010 - 0x0000)
struct Dialogue_GetNodes final
{
public:
	TArray<class UDialogueNode*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetNodes) == 0x000008, "Wrong alignment on Dialogue_GetNodes");
static_assert(sizeof(Dialogue_GetNodes) == 0x000010, "Wrong size on Dialogue_GetNodes");
static_assert(offsetof(Dialogue_GetNodes, ReturnValue) == 0x000000, "Member 'Dialogue_GetNodes::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetPlayerAvatar
// 0x0008 (0x0008 - 0x0000)
struct Dialogue_GetPlayerAvatar final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetPlayerAvatar) == 0x000008, "Wrong alignment on Dialogue_GetPlayerAvatar");
static_assert(sizeof(Dialogue_GetPlayerAvatar) == 0x000008, "Wrong size on Dialogue_GetPlayerAvatar");
static_assert(offsetof(Dialogue_GetPlayerAvatar, ReturnValue) == 0x000000, "Member 'Dialogue_GetPlayerAvatar::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.GetSpeakerHeadLocation
// 0x0020 (0x0020 - 0x0000)
struct Dialogue_GetSpeakerHeadLocation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_GetSpeakerHeadLocation) == 0x000008, "Wrong alignment on Dialogue_GetSpeakerHeadLocation");
static_assert(sizeof(Dialogue_GetSpeakerHeadLocation) == 0x000020, "Wrong size on Dialogue_GetSpeakerHeadLocation");
static_assert(offsetof(Dialogue_GetSpeakerHeadLocation, Actor) == 0x000000, "Member 'Dialogue_GetSpeakerHeadLocation::Actor' has a wrong offset!");
static_assert(offsetof(Dialogue_GetSpeakerHeadLocation, ReturnValue) == 0x000008, "Member 'Dialogue_GetSpeakerHeadLocation::ReturnValue' has a wrong offset!");

// Function Narrative.Dialogue.IsPartyDialogue
// 0x0001 (0x0001 - 0x0000)
struct Dialogue_IsPartyDialogue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dialogue_IsPartyDialogue) == 0x000001, "Wrong alignment on Dialogue_IsPartyDialogue");
static_assert(sizeof(Dialogue_IsPartyDialogue) == 0x000001, "Wrong size on Dialogue_IsPartyDialogue");
static_assert(offsetof(Dialogue_IsPartyDialogue, ReturnValue) == 0x000000, "Member 'Dialogue_IsPartyDialogue::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeNodeBase.AreConditionsMet
// 0x0020 (0x0020 - 0x0000)
struct NarrativeNodeBase_AreConditionsMet final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    NarrativeComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeNodeBase_AreConditionsMet) == 0x000008, "Wrong alignment on NarrativeNodeBase_AreConditionsMet");
static_assert(sizeof(NarrativeNodeBase_AreConditionsMet) == 0x000020, "Wrong size on NarrativeNodeBase_AreConditionsMet");
static_assert(offsetof(NarrativeNodeBase_AreConditionsMet, Pawn) == 0x000000, "Member 'NarrativeNodeBase_AreConditionsMet::Pawn' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_AreConditionsMet, Controller) == 0x000008, "Member 'NarrativeNodeBase_AreConditionsMet::Controller' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_AreConditionsMet, NarrativeComponent) == 0x000010, "Member 'NarrativeNodeBase_AreConditionsMet::NarrativeComponent' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_AreConditionsMet, ReturnValue) == 0x000018, "Member 'NarrativeNodeBase_AreConditionsMet::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeNodeBase.ProcessEvents
// 0x0020 (0x0020 - 0x0000)
struct NarrativeNodeBase_ProcessEvents final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    NarrativeComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventRuntime                                 Runtime;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeNodeBase_ProcessEvents) == 0x000008, "Wrong alignment on NarrativeNodeBase_ProcessEvents");
static_assert(sizeof(NarrativeNodeBase_ProcessEvents) == 0x000020, "Wrong size on NarrativeNodeBase_ProcessEvents");
static_assert(offsetof(NarrativeNodeBase_ProcessEvents, Pawn) == 0x000000, "Member 'NarrativeNodeBase_ProcessEvents::Pawn' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_ProcessEvents, Controller) == 0x000008, "Member 'NarrativeNodeBase_ProcessEvents::Controller' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_ProcessEvents, NarrativeComponent) == 0x000010, "Member 'NarrativeNodeBase_ProcessEvents::NarrativeComponent' has a wrong offset!");
static_assert(offsetof(NarrativeNodeBase_ProcessEvents, Runtime) == 0x000018, "Member 'NarrativeNodeBase_ProcessEvents::Runtime' has a wrong offset!");

// Function Narrative.DialogueNode_NPC.GetSpeakerID
// 0x0008 (0x0008 - 0x0000)
struct DialogueNode_NPC_GetSpeakerID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueNode_NPC_GetSpeakerID) == 0x000004, "Wrong alignment on DialogueNode_NPC_GetSpeakerID");
static_assert(sizeof(DialogueNode_NPC_GetSpeakerID) == 0x000008, "Wrong size on DialogueNode_NPC_GetSpeakerID");
static_assert(offsetof(DialogueNode_NPC_GetSpeakerID, ReturnValue) == 0x000000, "Member 'DialogueNode_NPC_GetSpeakerID::ReturnValue' has a wrong offset!");

// Function Narrative.DialogueNode_Player.GetHintText
// 0x0020 (0x0020 - 0x0000)
struct DialogueNode_Player_GetHintText final
{
public:
	class UDialogue*                              InDialogue;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueNode_Player_GetHintText) == 0x000008, "Wrong alignment on DialogueNode_Player_GetHintText");
static_assert(sizeof(DialogueNode_Player_GetHintText) == 0x000020, "Wrong size on DialogueNode_Player_GetHintText");
static_assert(offsetof(DialogueNode_Player_GetHintText, InDialogue) == 0x000000, "Member 'DialogueNode_Player_GetHintText::InDialogue' has a wrong offset!");
static_assert(offsetof(DialogueNode_Player_GetHintText, ReturnValue) == 0x000008, "Member 'DialogueNode_Player_GetHintText::ReturnValue' has a wrong offset!");

// Function Narrative.DialogueNode_Player.GetOptionText
// 0x0020 (0x0020 - 0x0000)
struct DialogueNode_Player_GetOptionText final
{
public:
	class UDialogue*                              InDialogue;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueNode_Player_GetOptionText) == 0x000008, "Wrong alignment on DialogueNode_Player_GetOptionText");
static_assert(sizeof(DialogueNode_Player_GetOptionText) == 0x000020, "Wrong size on DialogueNode_Player_GetOptionText");
static_assert(offsetof(DialogueNode_Player_GetOptionText, InDialogue) == 0x000000, "Member 'DialogueNode_Player_GetOptionText::InDialogue' has a wrong offset!");
static_assert(offsetof(DialogueNode_Player_GetOptionText, ReturnValue) == 0x000008, "Member 'DialogueNode_Player_GetOptionText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.BeginDialogue
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_BeginDialogue final
{
public:
	TSubclassOf<class UDialogue>                  Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialoguePlayParams                    PlayParams;                                        // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_BeginDialogue) == 0x000008, "Wrong alignment on NarrativeComponent_BeginDialogue");
static_assert(sizeof(NarrativeComponent_BeginDialogue) == 0x000018, "Wrong size on NarrativeComponent_BeginDialogue");
static_assert(offsetof(NarrativeComponent_BeginDialogue, Dialogue) == 0x000000, "Member 'NarrativeComponent_BeginDialogue::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_BeginDialogue, PlayParams) == 0x000008, "Member 'NarrativeComponent_BeginDialogue::PlayParams' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_BeginDialogue, ReturnValue) == 0x000014, "Member 'NarrativeComponent_BeginDialogue::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.BeginLoad
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_BeginLoad final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_BeginLoad) == 0x000008, "Wrong alignment on NarrativeComponent_BeginLoad");
static_assert(sizeof(NarrativeComponent_BeginLoad) == 0x000010, "Wrong size on NarrativeComponent_BeginLoad");
static_assert(offsetof(NarrativeComponent_BeginLoad, SaveName) == 0x000000, "Member 'NarrativeComponent_BeginLoad::SaveName' has a wrong offset!");

// Function Narrative.NarrativeComponent.BeginQuest
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_BeginQuest final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFromID;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuest*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_BeginQuest) == 0x000008, "Wrong alignment on NarrativeComponent_BeginQuest");
static_assert(sizeof(NarrativeComponent_BeginQuest) == 0x000018, "Wrong size on NarrativeComponent_BeginQuest");
static_assert(offsetof(NarrativeComponent_BeginQuest, QuestClass) == 0x000000, "Member 'NarrativeComponent_BeginQuest::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_BeginQuest, StartFromID) == 0x000008, "Member 'NarrativeComponent_BeginQuest::StartFromID' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_BeginQuest, ReturnValue) == 0x000010, "Member 'NarrativeComponent_BeginQuest::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.BeginSave
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_BeginSave final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_BeginSave) == 0x000008, "Wrong alignment on NarrativeComponent_BeginSave");
static_assert(sizeof(NarrativeComponent_BeginSave) == 0x000010, "Wrong size on NarrativeComponent_BeginSave");
static_assert(offsetof(NarrativeComponent_BeginSave, SaveName) == 0x000000, "Member 'NarrativeComponent_BeginSave::SaveName' has a wrong offset!");

// Function Narrative.NarrativeComponent.ClientBeginDialogue
// 0x0028 (0x0028 - 0x0000)
struct NarrativeComponent_ClientBeginDialogue final
{
public:
	TSubclassOf<class UDialogue>                  Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NPCReplyChainIDs;                                  // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           AvailableResponseIDs;                              // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ClientBeginDialogue) == 0x000008, "Wrong alignment on NarrativeComponent_ClientBeginDialogue");
static_assert(sizeof(NarrativeComponent_ClientBeginDialogue) == 0x000028, "Wrong size on NarrativeComponent_ClientBeginDialogue");
static_assert(offsetof(NarrativeComponent_ClientBeginDialogue, Dialogue) == 0x000000, "Member 'NarrativeComponent_ClientBeginDialogue::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientBeginDialogue, NPCReplyChainIDs) == 0x000008, "Member 'NarrativeComponent_ClientBeginDialogue::NPCReplyChainIDs' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientBeginDialogue, AvailableResponseIDs) == 0x000018, "Member 'NarrativeComponent_ClientBeginDialogue::AvailableResponseIDs' has a wrong offset!");

// Function Narrative.NarrativeComponent.ClientBeginPartyDialogue
// 0x0028 (0x0028 - 0x0000)
struct NarrativeComponent_ClientBeginPartyDialogue final
{
public:
	TSubclassOf<class UDialogue>                  Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NPCReplyChainIDs;                                  // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           AvailableResponseIDs;                              // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ClientBeginPartyDialogue) == 0x000008, "Wrong alignment on NarrativeComponent_ClientBeginPartyDialogue");
static_assert(sizeof(NarrativeComponent_ClientBeginPartyDialogue) == 0x000028, "Wrong size on NarrativeComponent_ClientBeginPartyDialogue");
static_assert(offsetof(NarrativeComponent_ClientBeginPartyDialogue, Dialogue) == 0x000000, "Member 'NarrativeComponent_ClientBeginPartyDialogue::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientBeginPartyDialogue, NPCReplyChainIDs) == 0x000008, "Member 'NarrativeComponent_ClientBeginPartyDialogue::NPCReplyChainIDs' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientBeginPartyDialogue, AvailableResponseIDs) == 0x000018, "Member 'NarrativeComponent_ClientBeginPartyDialogue::AvailableResponseIDs' has a wrong offset!");

// Function Narrative.NarrativeComponent.ClientReceiveSave
// 0x0030 (0x0030 - 0x0000)
struct NarrativeComponent_ClientReceiveSave final
{
public:
	TArray<struct FNarrativeSavedQuest>           SavedQuests;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tasks;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantities;                                        // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ClientReceiveSave) == 0x000008, "Wrong alignment on NarrativeComponent_ClientReceiveSave");
static_assert(sizeof(NarrativeComponent_ClientReceiveSave) == 0x000030, "Wrong size on NarrativeComponent_ClientReceiveSave");
static_assert(offsetof(NarrativeComponent_ClientReceiveSave, SavedQuests) == 0x000000, "Member 'NarrativeComponent_ClientReceiveSave::SavedQuests' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientReceiveSave, Tasks) == 0x000010, "Member 'NarrativeComponent_ClientReceiveSave::Tasks' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientReceiveSave, Quantities) == 0x000020, "Member 'NarrativeComponent_ClientReceiveSave::Quantities' has a wrong offset!");

// Function Narrative.NarrativeComponent.ClientRecieveDialogueChunk
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_ClientRecieveDialogueChunk final
{
public:
	TArray<class FName>                           NPCReplyChainIDs;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           AvailableResponseIDs;                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ClientRecieveDialogueChunk) == 0x000008, "Wrong alignment on NarrativeComponent_ClientRecieveDialogueChunk");
static_assert(sizeof(NarrativeComponent_ClientRecieveDialogueChunk) == 0x000020, "Wrong size on NarrativeComponent_ClientRecieveDialogueChunk");
static_assert(offsetof(NarrativeComponent_ClientRecieveDialogueChunk, NPCReplyChainIDs) == 0x000000, "Member 'NarrativeComponent_ClientRecieveDialogueChunk::NPCReplyChainIDs' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientRecieveDialogueChunk, AvailableResponseIDs) == 0x000010, "Member 'NarrativeComponent_ClientRecieveDialogueChunk::AvailableResponseIDs' has a wrong offset!");

// Function Narrative.NarrativeComponent.ClientSelectDialogueOption
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_ClientSelectDialogueOption final
{
public:
	class FName                                   OptionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Selector;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ClientSelectDialogueOption) == 0x000008, "Wrong alignment on NarrativeComponent_ClientSelectDialogueOption");
static_assert(sizeof(NarrativeComponent_ClientSelectDialogueOption) == 0x000010, "Wrong size on NarrativeComponent_ClientSelectDialogueOption");
static_assert(offsetof(NarrativeComponent_ClientSelectDialogueOption, OptionID) == 0x000000, "Member 'NarrativeComponent_ClientSelectDialogueOption::OptionID' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ClientSelectDialogueOption, Selector) == 0x000008, "Member 'NarrativeComponent_ClientSelectDialogueOption::Selector' has a wrong offset!");

// Function Narrative.NarrativeComponent.DeleteSave
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_DeleteSave final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_DeleteSave) == 0x000008, "Wrong alignment on NarrativeComponent_DeleteSave");
static_assert(sizeof(NarrativeComponent_DeleteSave) == 0x000018, "Wrong size on NarrativeComponent_DeleteSave");
static_assert(offsetof(NarrativeComponent_DeleteSave, SaveName) == 0x000000, "Member 'NarrativeComponent_DeleteSave::SaveName' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DeleteSave, Slot) == 0x000010, "Member 'NarrativeComponent_DeleteSave::Slot' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DeleteSave, ReturnValue) == 0x000014, "Member 'NarrativeComponent_DeleteSave::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.DialogueBegan
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_DialogueBegan final
{
public:
	class UDialogue*                              Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_DialogueBegan) == 0x000008, "Wrong alignment on NarrativeComponent_DialogueBegan");
static_assert(sizeof(NarrativeComponent_DialogueBegan) == 0x000008, "Wrong size on NarrativeComponent_DialogueBegan");
static_assert(offsetof(NarrativeComponent_DialogueBegan, Dialogue) == 0x000000, "Member 'NarrativeComponent_DialogueBegan::Dialogue' has a wrong offset!");

// Function Narrative.NarrativeComponent.DialogueFinished
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_DialogueFinished final
{
public:
	class UDialogue*                              Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartingNewDialogue;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_DialogueFinished) == 0x000008, "Wrong alignment on NarrativeComponent_DialogueFinished");
static_assert(sizeof(NarrativeComponent_DialogueFinished) == 0x000010, "Wrong size on NarrativeComponent_DialogueFinished");
static_assert(offsetof(NarrativeComponent_DialogueFinished, Dialogue) == 0x000000, "Member 'NarrativeComponent_DialogueFinished::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueFinished, bStartingNewDialogue) == 0x000008, "Member 'NarrativeComponent_DialogueFinished::bStartingNewDialogue' has a wrong offset!");

// Function Narrative.NarrativeComponent.DialogueLineFinished
// 0x0050 (0x0050 - 0x0000)
struct NarrativeComponent_DialogueLineFinished final
{
public:
	class UDialogue*                              Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueNode*                          Node;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_DialogueLineFinished) == 0x000008, "Wrong alignment on NarrativeComponent_DialogueLineFinished");
static_assert(sizeof(NarrativeComponent_DialogueLineFinished) == 0x000050, "Wrong size on NarrativeComponent_DialogueLineFinished");
static_assert(offsetof(NarrativeComponent_DialogueLineFinished, Dialogue) == 0x000000, "Member 'NarrativeComponent_DialogueLineFinished::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueLineFinished, Node) == 0x000008, "Member 'NarrativeComponent_DialogueLineFinished::Node' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueLineFinished, DialogueLine) == 0x000010, "Member 'NarrativeComponent_DialogueLineFinished::DialogueLine' has a wrong offset!");

// Function Narrative.NarrativeComponent.DialogueLineStarted
// 0x0050 (0x0050 - 0x0000)
struct NarrativeComponent_DialogueLineStarted final
{
public:
	class UDialogue*                              Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueNode*                          Node;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueLine                          DialogueLine;                                      // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_DialogueLineStarted) == 0x000008, "Wrong alignment on NarrativeComponent_DialogueLineStarted");
static_assert(sizeof(NarrativeComponent_DialogueLineStarted) == 0x000050, "Wrong size on NarrativeComponent_DialogueLineStarted");
static_assert(offsetof(NarrativeComponent_DialogueLineStarted, Dialogue) == 0x000000, "Member 'NarrativeComponent_DialogueLineStarted::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueLineStarted, Node) == 0x000008, "Member 'NarrativeComponent_DialogueLineStarted::Node' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueLineStarted, DialogueLine) == 0x000010, "Member 'NarrativeComponent_DialogueLineStarted::DialogueLine' has a wrong offset!");

// Function Narrative.NarrativeComponent.DialogueRepliesAvailable
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_DialogueRepliesAvailable final
{
public:
	class UDialogue*                              Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDialogueNode_Player*>           PlayerReplies;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_DialogueRepliesAvailable) == 0x000008, "Wrong alignment on NarrativeComponent_DialogueRepliesAvailable");
static_assert(sizeof(NarrativeComponent_DialogueRepliesAvailable) == 0x000018, "Wrong size on NarrativeComponent_DialogueRepliesAvailable");
static_assert(offsetof(NarrativeComponent_DialogueRepliesAvailable, Dialogue) == 0x000000, "Member 'NarrativeComponent_DialogueRepliesAvailable::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_DialogueRepliesAvailable, PlayerReplies) == 0x000008, "Member 'NarrativeComponent_DialogueRepliesAvailable::PlayerReplies' has a wrong offset!");

// Function Narrative.NarrativeComponent.ForgetQuest
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_ForgetQuest final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_ForgetQuest) == 0x000008, "Wrong alignment on NarrativeComponent_ForgetQuest");
static_assert(sizeof(NarrativeComponent_ForgetQuest) == 0x000010, "Wrong size on NarrativeComponent_ForgetQuest");
static_assert(offsetof(NarrativeComponent_ForgetQuest, QuestClass) == 0x000000, "Member 'NarrativeComponent_ForgetQuest::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_ForgetQuest, ReturnValue) == 0x000008, "Member 'NarrativeComponent_ForgetQuest::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetNumberOfTimesTaskWasCompleted
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_GetNumberOfTimesTaskWasCompleted final
{
public:
	const class UNarrativeDataTask*               Task;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_GetNumberOfTimesTaskWasCompleted) == 0x000008, "Wrong alignment on NarrativeComponent_GetNumberOfTimesTaskWasCompleted");
static_assert(sizeof(NarrativeComponent_GetNumberOfTimesTaskWasCompleted) == 0x000020, "Wrong size on NarrativeComponent_GetNumberOfTimesTaskWasCompleted");
static_assert(offsetof(NarrativeComponent_GetNumberOfTimesTaskWasCompleted, Task) == 0x000000, "Member 'NarrativeComponent_GetNumberOfTimesTaskWasCompleted::Task' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_GetNumberOfTimesTaskWasCompleted, Name_0) == 0x000008, "Member 'NarrativeComponent_GetNumberOfTimesTaskWasCompleted::Name_0' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_GetNumberOfTimesTaskWasCompleted, ReturnValue) == 0x000018, "Member 'NarrativeComponent_GetNumberOfTimesTaskWasCompleted::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.HasCompletedTask
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_HasCompletedTask final
{
public:
	const class UNarrativeDataTask*               Task;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_HasCompletedTask) == 0x000008, "Wrong alignment on NarrativeComponent_HasCompletedTask");
static_assert(sizeof(NarrativeComponent_HasCompletedTask) == 0x000020, "Wrong size on NarrativeComponent_HasCompletedTask");
static_assert(offsetof(NarrativeComponent_HasCompletedTask, Task) == 0x000000, "Member 'NarrativeComponent_HasCompletedTask::Task' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_HasCompletedTask, Name_0) == 0x000008, "Member 'NarrativeComponent_HasCompletedTask::Name_0' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_HasCompletedTask, Quantity) == 0x000018, "Member 'NarrativeComponent_HasCompletedTask::Quantity' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_HasCompletedTask, ReturnValue) == 0x00001C, "Member 'NarrativeComponent_HasCompletedTask::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.HasDialogueAvailable
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_HasDialogueAvailable final
{
public:
	TSubclassOf<class UDialogue>                  Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialoguePlayParams                    PlayParams;                                        // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_HasDialogueAvailable) == 0x000008, "Wrong alignment on NarrativeComponent_HasDialogueAvailable");
static_assert(sizeof(NarrativeComponent_HasDialogueAvailable) == 0x000018, "Wrong size on NarrativeComponent_HasDialogueAvailable");
static_assert(offsetof(NarrativeComponent_HasDialogueAvailable, Dialogue) == 0x000000, "Member 'NarrativeComponent_HasDialogueAvailable::Dialogue' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_HasDialogueAvailable, PlayParams) == 0x000008, "Member 'NarrativeComponent_HasDialogueAvailable::PlayParams' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_HasDialogueAvailable, ReturnValue) == 0x000014, "Member 'NarrativeComponent_HasDialogueAvailable::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsInDialogue
// 0x0001 (0x0001 - 0x0000)
struct NarrativeComponent_IsInDialogue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_IsInDialogue) == 0x000001, "Wrong alignment on NarrativeComponent_IsInDialogue");
static_assert(sizeof(NarrativeComponent_IsInDialogue) == 0x000001, "Wrong size on NarrativeComponent_IsInDialogue");
static_assert(offsetof(NarrativeComponent_IsInDialogue, ReturnValue) == 0x000000, "Member 'NarrativeComponent_IsInDialogue::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.Load
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_Load final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_Load) == 0x000008, "Wrong alignment on NarrativeComponent_Load");
static_assert(sizeof(NarrativeComponent_Load) == 0x000018, "Wrong size on NarrativeComponent_Load");
static_assert(offsetof(NarrativeComponent_Load, SaveName) == 0x000000, "Member 'NarrativeComponent_Load::SaveName' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_Load, Slot) == 0x000010, "Member 'NarrativeComponent_Load::Slot' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_Load, ReturnValue) == 0x000014, "Member 'NarrativeComponent_Load::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.LoadComplete
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_LoadComplete final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_LoadComplete) == 0x000008, "Wrong alignment on NarrativeComponent_LoadComplete");
static_assert(sizeof(NarrativeComponent_LoadComplete) == 0x000010, "Wrong size on NarrativeComponent_LoadComplete");
static_assert(offsetof(NarrativeComponent_LoadComplete, SaveName) == 0x000000, "Member 'NarrativeComponent_LoadComplete::SaveName' has a wrong offset!");

// Function Narrative.NarrativeComponent.NarrativeDataTaskCompleted
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_NarrativeDataTaskCompleted final
{
public:
	const class UNarrativeDataTask*               NarrativeTask;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_NarrativeDataTaskCompleted) == 0x000008, "Wrong alignment on NarrativeComponent_NarrativeDataTaskCompleted");
static_assert(sizeof(NarrativeComponent_NarrativeDataTaskCompleted) == 0x000018, "Wrong size on NarrativeComponent_NarrativeDataTaskCompleted");
static_assert(offsetof(NarrativeComponent_NarrativeDataTaskCompleted, NarrativeTask) == 0x000000, "Member 'NarrativeComponent_NarrativeDataTaskCompleted::NarrativeTask' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_NarrativeDataTaskCompleted, Name_0) == 0x000008, "Member 'NarrativeComponent_NarrativeDataTaskCompleted::Name_0' has a wrong offset!");

// Function Narrative.NarrativeComponent.OnRep_PartyComponent
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_OnRep_PartyComponent final
{
public:
	class UNarrativePartyComponent*               OldPartyComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_OnRep_PartyComponent) == 0x000008, "Wrong alignment on NarrativeComponent_OnRep_PartyComponent");
static_assert(sizeof(NarrativeComponent_OnRep_PartyComponent) == 0x000008, "Wrong size on NarrativeComponent_OnRep_PartyComponent");
static_assert(offsetof(NarrativeComponent_OnRep_PartyComponent, OldPartyComponent) == 0x000000, "Member 'NarrativeComponent_OnRep_PartyComponent::OldPartyComponent' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestBranchCompleted
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_QuestBranchCompleted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Branch;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestBranchCompleted) == 0x000008, "Wrong alignment on NarrativeComponent_QuestBranchCompleted");
static_assert(sizeof(NarrativeComponent_QuestBranchCompleted) == 0x000010, "Wrong size on NarrativeComponent_QuestBranchCompleted");
static_assert(offsetof(NarrativeComponent_QuestBranchCompleted, Quest) == 0x000000, "Member 'NarrativeComponent_QuestBranchCompleted::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestBranchCompleted, Branch) == 0x000008, "Member 'NarrativeComponent_QuestBranchCompleted::Branch' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestFailed
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_QuestFailed final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestFailedMessage;                                // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestFailed) == 0x000008, "Wrong alignment on NarrativeComponent_QuestFailed");
static_assert(sizeof(NarrativeComponent_QuestFailed) == 0x000020, "Wrong size on NarrativeComponent_QuestFailed");
static_assert(offsetof(NarrativeComponent_QuestFailed, Quest) == 0x000000, "Member 'NarrativeComponent_QuestFailed::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestFailed, QuestFailedMessage) == 0x000008, "Member 'NarrativeComponent_QuestFailed::QuestFailedMessage' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestForgotten
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_QuestForgotten final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestForgotten) == 0x000008, "Wrong alignment on NarrativeComponent_QuestForgotten");
static_assert(sizeof(NarrativeComponent_QuestForgotten) == 0x000008, "Wrong size on NarrativeComponent_QuestForgotten");
static_assert(offsetof(NarrativeComponent_QuestForgotten, Quest) == 0x000000, "Member 'NarrativeComponent_QuestForgotten::Quest' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestNewState
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_QuestNewState final
{
public:
	class UQuest*                                 Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestState*                      NewState;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestNewState) == 0x000008, "Wrong alignment on NarrativeComponent_QuestNewState");
static_assert(sizeof(NarrativeComponent_QuestNewState) == 0x000010, "Wrong size on NarrativeComponent_QuestNewState");
static_assert(offsetof(NarrativeComponent_QuestNewState, Quest) == 0x000000, "Member 'NarrativeComponent_QuestNewState::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestNewState, NewState) == 0x000008, "Member 'NarrativeComponent_QuestNewState::NewState' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestStarted
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_QuestStarted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestStarted) == 0x000008, "Wrong alignment on NarrativeComponent_QuestStarted");
static_assert(sizeof(NarrativeComponent_QuestStarted) == 0x000008, "Wrong size on NarrativeComponent_QuestStarted");
static_assert(offsetof(NarrativeComponent_QuestStarted, Quest) == 0x000000, "Member 'NarrativeComponent_QuestStarted::Quest' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestSucceeded
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_QuestSucceeded final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestSucceededMessage;                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestSucceeded) == 0x000008, "Wrong alignment on NarrativeComponent_QuestSucceeded");
static_assert(sizeof(NarrativeComponent_QuestSucceeded) == 0x000020, "Wrong size on NarrativeComponent_QuestSucceeded");
static_assert(offsetof(NarrativeComponent_QuestSucceeded, Quest) == 0x000000, "Member 'NarrativeComponent_QuestSucceeded::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestSucceeded, QuestSucceededMessage) == 0x000008, "Member 'NarrativeComponent_QuestSucceeded::QuestSucceededMessage' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestTaskCompleted
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_QuestTaskCompleted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UNarrativeTask*                   Task;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Branch;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestTaskCompleted) == 0x000008, "Wrong alignment on NarrativeComponent_QuestTaskCompleted");
static_assert(sizeof(NarrativeComponent_QuestTaskCompleted) == 0x000018, "Wrong size on NarrativeComponent_QuestTaskCompleted");
static_assert(offsetof(NarrativeComponent_QuestTaskCompleted, Quest) == 0x000000, "Member 'NarrativeComponent_QuestTaskCompleted::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskCompleted, Task) == 0x000008, "Member 'NarrativeComponent_QuestTaskCompleted::Task' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskCompleted, Branch) == 0x000010, "Member 'NarrativeComponent_QuestTaskCompleted::Branch' has a wrong offset!");

// Function Narrative.NarrativeComponent.QuestTaskProgressMade
// 0x0020 (0x0020 - 0x0000)
struct NarrativeComponent_QuestTaskProgressMade final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UNarrativeTask*                   Task;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Branch;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldProgress;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewProgress;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_QuestTaskProgressMade) == 0x000008, "Wrong alignment on NarrativeComponent_QuestTaskProgressMade");
static_assert(sizeof(NarrativeComponent_QuestTaskProgressMade) == 0x000020, "Wrong size on NarrativeComponent_QuestTaskProgressMade");
static_assert(offsetof(NarrativeComponent_QuestTaskProgressMade, Quest) == 0x000000, "Member 'NarrativeComponent_QuestTaskProgressMade::Quest' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskProgressMade, Task) == 0x000008, "Member 'NarrativeComponent_QuestTaskProgressMade::Task' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskProgressMade, Branch) == 0x000010, "Member 'NarrativeComponent_QuestTaskProgressMade::Branch' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskProgressMade, OldProgress) == 0x000018, "Member 'NarrativeComponent_QuestTaskProgressMade::OldProgress' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_QuestTaskProgressMade, NewProgress) == 0x00001C, "Member 'NarrativeComponent_QuestTaskProgressMade::NewProgress' has a wrong offset!");

// Function Narrative.NarrativeComponent.RestartQuest
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_RestartQuest final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFromID;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_RestartQuest) == 0x000008, "Wrong alignment on NarrativeComponent_RestartQuest");
static_assert(sizeof(NarrativeComponent_RestartQuest) == 0x000018, "Wrong size on NarrativeComponent_RestartQuest");
static_assert(offsetof(NarrativeComponent_RestartQuest, QuestClass) == 0x000000, "Member 'NarrativeComponent_RestartQuest::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_RestartQuest, StartFromID) == 0x000008, "Member 'NarrativeComponent_RestartQuest::StartFromID' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_RestartQuest, ReturnValue) == 0x000010, "Member 'NarrativeComponent_RestartQuest::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.Save
// 0x0018 (0x0018 - 0x0000)
struct NarrativeComponent_Save final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_Save) == 0x000008, "Wrong alignment on NarrativeComponent_Save");
static_assert(sizeof(NarrativeComponent_Save) == 0x000018, "Wrong size on NarrativeComponent_Save");
static_assert(offsetof(NarrativeComponent_Save, SaveName) == 0x000000, "Member 'NarrativeComponent_Save::SaveName' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_Save, Slot) == 0x000010, "Member 'NarrativeComponent_Save::Slot' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_Save, ReturnValue) == 0x000014, "Member 'NarrativeComponent_Save::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.SaveComplete
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_SaveComplete final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_SaveComplete) == 0x000008, "Wrong alignment on NarrativeComponent_SaveComplete");
static_assert(sizeof(NarrativeComponent_SaveComplete) == 0x000010, "Wrong size on NarrativeComponent_SaveComplete");
static_assert(offsetof(NarrativeComponent_SaveComplete, SaveName) == 0x000000, "Member 'NarrativeComponent_SaveComplete::SaveName' has a wrong offset!");

// Function Narrative.NarrativeComponent.ServerSelectDialogueOption
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_ServerSelectDialogueOption final
{
public:
	class FName                                   OptionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_ServerSelectDialogueOption) == 0x000004, "Wrong alignment on NarrativeComponent_ServerSelectDialogueOption");
static_assert(sizeof(NarrativeComponent_ServerSelectDialogueOption) == 0x000008, "Wrong size on NarrativeComponent_ServerSelectDialogueOption");
static_assert(offsetof(NarrativeComponent_ServerSelectDialogueOption, OptionID) == 0x000000, "Member 'NarrativeComponent_ServerSelectDialogueOption::OptionID' has a wrong offset!");

// Function Narrative.NarrativeComponent.TrySelectDialogueOption
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_TrySelectDialogueOption final
{
public:
	class UDialogueNode_Player*                   Option;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_TrySelectDialogueOption) == 0x000008, "Wrong alignment on NarrativeComponent_TrySelectDialogueOption");
static_assert(sizeof(NarrativeComponent_TrySelectDialogueOption) == 0x000008, "Wrong size on NarrativeComponent_TrySelectDialogueOption");
static_assert(offsetof(NarrativeComponent_TrySelectDialogueOption, Option) == 0x000000, "Member 'NarrativeComponent_TrySelectDialogueOption::Option' has a wrong offset!");

// Function Narrative.NarrativeComponent.TrySkipCurrentDialogueLine
// 0x0001 (0x0001 - 0x0000)
struct NarrativeComponent_TrySkipCurrentDialogueLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_TrySkipCurrentDialogueLine) == 0x000001, "Wrong alignment on NarrativeComponent_TrySkipCurrentDialogueLine");
static_assert(sizeof(NarrativeComponent_TrySkipCurrentDialogueLine) == 0x000001, "Wrong size on NarrativeComponent_TrySkipCurrentDialogueLine");
static_assert(offsetof(NarrativeComponent_TrySkipCurrentDialogueLine, ReturnValue) == 0x000000, "Member 'NarrativeComponent_TrySkipCurrentDialogueLine::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetAllQuests
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_GetAllQuests final
{
public:
	TArray<class UQuest*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetAllQuests) == 0x000008, "Wrong alignment on NarrativeComponent_GetAllQuests");
static_assert(sizeof(NarrativeComponent_GetAllQuests) == 0x000010, "Wrong size on NarrativeComponent_GetAllQuests");
static_assert(offsetof(NarrativeComponent_GetAllQuests, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetAllQuests::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetCurrentDialogue
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_GetCurrentDialogue final
{
public:
	class UDialogue*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetCurrentDialogue) == 0x000008, "Wrong alignment on NarrativeComponent_GetCurrentDialogue");
static_assert(sizeof(NarrativeComponent_GetCurrentDialogue) == 0x000008, "Wrong size on NarrativeComponent_GetCurrentDialogue");
static_assert(offsetof(NarrativeComponent_GetCurrentDialogue, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetCurrentDialogue::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetFailedQuests
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_GetFailedQuests final
{
public:
	TArray<class UQuest*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetFailedQuests) == 0x000008, "Wrong alignment on NarrativeComponent_GetFailedQuests");
static_assert(sizeof(NarrativeComponent_GetFailedQuests) == 0x000010, "Wrong size on NarrativeComponent_GetFailedQuests");
static_assert(offsetof(NarrativeComponent_GetFailedQuests, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetFailedQuests::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetInProgressQuests
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_GetInProgressQuests final
{
public:
	TArray<class UQuest*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetInProgressQuests) == 0x000008, "Wrong alignment on NarrativeComponent_GetInProgressQuests");
static_assert(sizeof(NarrativeComponent_GetInProgressQuests) == 0x000010, "Wrong size on NarrativeComponent_GetInProgressQuests");
static_assert(offsetof(NarrativeComponent_GetInProgressQuests, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetInProgressQuests::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_GetOwningController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetOwningController) == 0x000008, "Wrong alignment on NarrativeComponent_GetOwningController");
static_assert(sizeof(NarrativeComponent_GetOwningController) == 0x000008, "Wrong size on NarrativeComponent_GetOwningController");
static_assert(offsetof(NarrativeComponent_GetOwningController, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetOwningController::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_GetOwningPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetOwningPawn) == 0x000008, "Wrong alignment on NarrativeComponent_GetOwningPawn");
static_assert(sizeof(NarrativeComponent_GetOwningPawn) == 0x000008, "Wrong size on NarrativeComponent_GetOwningPawn");
static_assert(offsetof(NarrativeComponent_GetOwningPawn, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetParty
// 0x0008 (0x0008 - 0x0000)
struct NarrativeComponent_GetParty final
{
public:
	class UNarrativePartyComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetParty) == 0x000008, "Wrong alignment on NarrativeComponent_GetParty");
static_assert(sizeof(NarrativeComponent_GetParty) == 0x000008, "Wrong size on NarrativeComponent_GetParty");
static_assert(offsetof(NarrativeComponent_GetParty, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetParty::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetQuestInstance
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_GetQuestInstance final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuest*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetQuestInstance) == 0x000008, "Wrong alignment on NarrativeComponent_GetQuestInstance");
static_assert(sizeof(NarrativeComponent_GetQuestInstance) == 0x000010, "Wrong size on NarrativeComponent_GetQuestInstance");
static_assert(offsetof(NarrativeComponent_GetQuestInstance, QuestClass) == 0x000000, "Member 'NarrativeComponent_GetQuestInstance::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_GetQuestInstance, ReturnValue) == 0x000008, "Member 'NarrativeComponent_GetQuestInstance::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.GetSucceededQuests
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_GetSucceededQuests final
{
public:
	TArray<class UQuest*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeComponent_GetSucceededQuests) == 0x000008, "Wrong alignment on NarrativeComponent_GetSucceededQuests");
static_assert(sizeof(NarrativeComponent_GetSucceededQuests) == 0x000010, "Wrong size on NarrativeComponent_GetSucceededQuests");
static_assert(offsetof(NarrativeComponent_GetSucceededQuests, ReturnValue) == 0x000000, "Member 'NarrativeComponent_GetSucceededQuests::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsQuestFailed
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_IsQuestFailed final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_IsQuestFailed) == 0x000008, "Wrong alignment on NarrativeComponent_IsQuestFailed");
static_assert(sizeof(NarrativeComponent_IsQuestFailed) == 0x000010, "Wrong size on NarrativeComponent_IsQuestFailed");
static_assert(offsetof(NarrativeComponent_IsQuestFailed, QuestClass) == 0x000000, "Member 'NarrativeComponent_IsQuestFailed::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_IsQuestFailed, ReturnValue) == 0x000008, "Member 'NarrativeComponent_IsQuestFailed::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsQuestFinished
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_IsQuestFinished final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_IsQuestFinished) == 0x000008, "Wrong alignment on NarrativeComponent_IsQuestFinished");
static_assert(sizeof(NarrativeComponent_IsQuestFinished) == 0x000010, "Wrong size on NarrativeComponent_IsQuestFinished");
static_assert(offsetof(NarrativeComponent_IsQuestFinished, QuestClass) == 0x000000, "Member 'NarrativeComponent_IsQuestFinished::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_IsQuestFinished, ReturnValue) == 0x000008, "Member 'NarrativeComponent_IsQuestFinished::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsQuestInProgress
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_IsQuestInProgress final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_IsQuestInProgress) == 0x000008, "Wrong alignment on NarrativeComponent_IsQuestInProgress");
static_assert(sizeof(NarrativeComponent_IsQuestInProgress) == 0x000010, "Wrong size on NarrativeComponent_IsQuestInProgress");
static_assert(offsetof(NarrativeComponent_IsQuestInProgress, QuestClass) == 0x000000, "Member 'NarrativeComponent_IsQuestInProgress::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_IsQuestInProgress, ReturnValue) == 0x000008, "Member 'NarrativeComponent_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsQuestStartedOrFinished
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_IsQuestStartedOrFinished final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_IsQuestStartedOrFinished) == 0x000008, "Wrong alignment on NarrativeComponent_IsQuestStartedOrFinished");
static_assert(sizeof(NarrativeComponent_IsQuestStartedOrFinished) == 0x000010, "Wrong size on NarrativeComponent_IsQuestStartedOrFinished");
static_assert(offsetof(NarrativeComponent_IsQuestStartedOrFinished, QuestClass) == 0x000000, "Member 'NarrativeComponent_IsQuestStartedOrFinished::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_IsQuestStartedOrFinished, ReturnValue) == 0x000008, "Member 'NarrativeComponent_IsQuestStartedOrFinished::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeComponent.IsQuestSucceeded
// 0x0010 (0x0010 - 0x0000)
struct NarrativeComponent_IsQuestSucceeded final
{
public:
	TSubclassOf<class UQuest>                     QuestClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeComponent_IsQuestSucceeded) == 0x000008, "Wrong alignment on NarrativeComponent_IsQuestSucceeded");
static_assert(sizeof(NarrativeComponent_IsQuestSucceeded) == 0x000010, "Wrong size on NarrativeComponent_IsQuestSucceeded");
static_assert(offsetof(NarrativeComponent_IsQuestSucceeded, QuestClass) == 0x000000, "Member 'NarrativeComponent_IsQuestSucceeded::QuestClass' has a wrong offset!");
static_assert(offsetof(NarrativeComponent_IsQuestSucceeded, ReturnValue) == 0x000008, "Member 'NarrativeComponent_IsQuestSucceeded::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeCondition.CheckCondition
// 0x0020 (0x0020 - 0x0000)
struct NarrativeCondition_CheckCondition final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    NarrativeComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeCondition_CheckCondition) == 0x000008, "Wrong alignment on NarrativeCondition_CheckCondition");
static_assert(sizeof(NarrativeCondition_CheckCondition) == 0x000020, "Wrong size on NarrativeCondition_CheckCondition");
static_assert(offsetof(NarrativeCondition_CheckCondition, Pawn) == 0x000000, "Member 'NarrativeCondition_CheckCondition::Pawn' has a wrong offset!");
static_assert(offsetof(NarrativeCondition_CheckCondition, Controller) == 0x000008, "Member 'NarrativeCondition_CheckCondition::Controller' has a wrong offset!");
static_assert(offsetof(NarrativeCondition_CheckCondition, NarrativeComponent) == 0x000010, "Member 'NarrativeCondition_CheckCondition::NarrativeComponent' has a wrong offset!");
static_assert(offsetof(NarrativeCondition_CheckCondition, ReturnValue) == 0x000018, "Member 'NarrativeCondition_CheckCondition::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeCondition.GetGraphDisplayText
// 0x0010 (0x0010 - 0x0000)
struct NarrativeCondition_GetGraphDisplayText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeCondition_GetGraphDisplayText) == 0x000008, "Wrong alignment on NarrativeCondition_GetGraphDisplayText");
static_assert(sizeof(NarrativeCondition_GetGraphDisplayText) == 0x000010, "Wrong size on NarrativeCondition_GetGraphDisplayText");
static_assert(offsetof(NarrativeCondition_GetGraphDisplayText, ReturnValue) == 0x000000, "Member 'NarrativeCondition_GetGraphDisplayText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeDialogueSequence.GetGraphDisplayText
// 0x0018 (0x0018 - 0x0000)
struct NarrativeDialogueSequence_GetGraphDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeDialogueSequence_GetGraphDisplayText) == 0x000008, "Wrong alignment on NarrativeDialogueSequence_GetGraphDisplayText");
static_assert(sizeof(NarrativeDialogueSequence_GetGraphDisplayText) == 0x000018, "Wrong size on NarrativeDialogueSequence_GetGraphDisplayText");
static_assert(offsetof(NarrativeDialogueSequence_GetGraphDisplayText, ReturnValue) == 0x000000, "Member 'NarrativeDialogueSequence_GetGraphDisplayText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeDialogueSequence.GetShotAnchorTransform
// 0x0060 (0x0060 - 0x0000)
struct NarrativeDialogueSequence_GetShotAnchorTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeDialogueSequence_GetShotAnchorTransform) == 0x000010, "Wrong alignment on NarrativeDialogueSequence_GetShotAnchorTransform");
static_assert(sizeof(NarrativeDialogueSequence_GetShotAnchorTransform) == 0x000060, "Wrong size on NarrativeDialogueSequence_GetShotAnchorTransform");
static_assert(offsetof(NarrativeDialogueSequence_GetShotAnchorTransform, ReturnValue) == 0x000000, "Member 'NarrativeDialogueSequence_GetShotAnchorTransform::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeEvent.ExecuteEvent
// 0x0018 (0x0018 - 0x0000)
struct NarrativeEvent_ExecuteEvent final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    NarrativeComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeEvent_ExecuteEvent) == 0x000008, "Wrong alignment on NarrativeEvent_ExecuteEvent");
static_assert(sizeof(NarrativeEvent_ExecuteEvent) == 0x000018, "Wrong size on NarrativeEvent_ExecuteEvent");
static_assert(offsetof(NarrativeEvent_ExecuteEvent, Pawn) == 0x000000, "Member 'NarrativeEvent_ExecuteEvent::Pawn' has a wrong offset!");
static_assert(offsetof(NarrativeEvent_ExecuteEvent, Controller) == 0x000008, "Member 'NarrativeEvent_ExecuteEvent::Controller' has a wrong offset!");
static_assert(offsetof(NarrativeEvent_ExecuteEvent, NarrativeComponent) == 0x000010, "Member 'NarrativeEvent_ExecuteEvent::NarrativeComponent' has a wrong offset!");

// Function Narrative.NarrativeEvent.GetGraphDisplayText
// 0x0010 (0x0010 - 0x0000)
struct NarrativeEvent_GetGraphDisplayText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeEvent_GetGraphDisplayText) == 0x000008, "Wrong alignment on NarrativeEvent_GetGraphDisplayText");
static_assert(sizeof(NarrativeEvent_GetGraphDisplayText) == 0x000010, "Wrong size on NarrativeEvent_GetGraphDisplayText");
static_assert(offsetof(NarrativeEvent_GetGraphDisplayText, ReturnValue) == 0x000000, "Member 'NarrativeEvent_GetGraphDisplayText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeEvent.GetHintText
// 0x0018 (0x0018 - 0x0000)
struct NarrativeEvent_GetHintText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeEvent_GetHintText) == 0x000008, "Wrong alignment on NarrativeEvent_GetHintText");
static_assert(sizeof(NarrativeEvent_GetHintText) == 0x000018, "Wrong size on NarrativeEvent_GetHintText");
static_assert(offsetof(NarrativeEvent_GetHintText, ReturnValue) == 0x000000, "Member 'NarrativeEvent_GetHintText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.CompleteLooseNarrativeDataTask
// 0x0020 (0x0020 - 0x0000)
struct NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask final
{
public:
	class UNarrativeComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Argument;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask");
static_assert(sizeof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask) == 0x000020, "Wrong size on NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask, Target) == 0x000000, "Member 'NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask::Target' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask, Argument) == 0x000008, "Member 'NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask::Argument' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask, Quantity) == 0x000018, "Member 'NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask::Quantity' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask, ReturnValue) == 0x00001C, "Member 'NarrativeFunctionLibrary_CompleteLooseNarrativeDataTask::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.CompleteNarrativeDataTask
// 0x0028 (0x0028 - 0x0000)
struct NarrativeFunctionLibrary_CompleteNarrativeDataTask final
{
public:
	class UNarrativeComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UNarrativeDataTask*               Task;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Argument;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativeFunctionLibrary_CompleteNarrativeDataTask) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_CompleteNarrativeDataTask");
static_assert(sizeof(NarrativeFunctionLibrary_CompleteNarrativeDataTask) == 0x000028, "Wrong size on NarrativeFunctionLibrary_CompleteNarrativeDataTask");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteNarrativeDataTask, Target) == 0x000000, "Member 'NarrativeFunctionLibrary_CompleteNarrativeDataTask::Target' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteNarrativeDataTask, Task) == 0x000008, "Member 'NarrativeFunctionLibrary_CompleteNarrativeDataTask::Task' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteNarrativeDataTask, Argument) == 0x000010, "Member 'NarrativeFunctionLibrary_CompleteNarrativeDataTask::Argument' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteNarrativeDataTask, Quantity) == 0x000020, "Member 'NarrativeFunctionLibrary_CompleteNarrativeDataTask::Quantity' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_CompleteNarrativeDataTask, ReturnValue) == 0x000024, "Member 'NarrativeFunctionLibrary_CompleteNarrativeDataTask::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.GetNarrativeComponent
// 0x0010 (0x0010 - 0x0000)
struct NarrativeFunctionLibrary_GetNarrativeComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeFunctionLibrary_GetNarrativeComponent) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_GetNarrativeComponent");
static_assert(sizeof(NarrativeFunctionLibrary_GetNarrativeComponent) == 0x000010, "Wrong size on NarrativeFunctionLibrary_GetNarrativeComponent");
static_assert(offsetof(NarrativeFunctionLibrary_GetNarrativeComponent, WorldContextObject) == 0x000000, "Member 'NarrativeFunctionLibrary_GetNarrativeComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_GetNarrativeComponent, ReturnValue) == 0x000008, "Member 'NarrativeFunctionLibrary_GetNarrativeComponent::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.GetNarrativeComponentFromTarget
// 0x0010 (0x0010 - 0x0000)
struct NarrativeFunctionLibrary_GetNarrativeComponentFromTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeFunctionLibrary_GetNarrativeComponentFromTarget) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_GetNarrativeComponentFromTarget");
static_assert(sizeof(NarrativeFunctionLibrary_GetNarrativeComponentFromTarget) == 0x000010, "Wrong size on NarrativeFunctionLibrary_GetNarrativeComponentFromTarget");
static_assert(offsetof(NarrativeFunctionLibrary_GetNarrativeComponentFromTarget, Target) == 0x000000, "Member 'NarrativeFunctionLibrary_GetNarrativeComponentFromTarget::Target' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_GetNarrativeComponentFromTarget, ReturnValue) == 0x000008, "Member 'NarrativeFunctionLibrary_GetNarrativeComponentFromTarget::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.GetTaskByName
// 0x0020 (0x0020 - 0x0000)
struct NarrativeFunctionLibrary_GetTaskByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNarrativeDataTask*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeFunctionLibrary_GetTaskByName) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_GetTaskByName");
static_assert(sizeof(NarrativeFunctionLibrary_GetTaskByName) == 0x000020, "Wrong size on NarrativeFunctionLibrary_GetTaskByName");
static_assert(offsetof(NarrativeFunctionLibrary_GetTaskByName, WorldContextObject) == 0x000000, "Member 'NarrativeFunctionLibrary_GetTaskByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_GetTaskByName, EventName) == 0x000008, "Member 'NarrativeFunctionLibrary_GetTaskByName::EventName' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_GetTaskByName, ReturnValue) == 0x000018, "Member 'NarrativeFunctionLibrary_GetTaskByName::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeFunctionLibrary.MakeDisplayString
// 0x0020 (0x0020 - 0x0000)
struct NarrativeFunctionLibrary_MakeDisplayString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeFunctionLibrary_MakeDisplayString) == 0x000008, "Wrong alignment on NarrativeFunctionLibrary_MakeDisplayString");
static_assert(sizeof(NarrativeFunctionLibrary_MakeDisplayString) == 0x000020, "Wrong size on NarrativeFunctionLibrary_MakeDisplayString");
static_assert(offsetof(NarrativeFunctionLibrary_MakeDisplayString, String) == 0x000000, "Member 'NarrativeFunctionLibrary_MakeDisplayString::String' has a wrong offset!");
static_assert(offsetof(NarrativeFunctionLibrary_MakeDisplayString, ReturnValue) == 0x000010, "Member 'NarrativeFunctionLibrary_MakeDisplayString::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.AddPartyMember
// 0x0010 (0x0010 - 0x0000)
struct NarrativePartyComponent_AddPartyMember final
{
public:
	class UNarrativeComponent*                    Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativePartyComponent_AddPartyMember) == 0x000008, "Wrong alignment on NarrativePartyComponent_AddPartyMember");
static_assert(sizeof(NarrativePartyComponent_AddPartyMember) == 0x000010, "Wrong size on NarrativePartyComponent_AddPartyMember");
static_assert(offsetof(NarrativePartyComponent_AddPartyMember, Member) == 0x000000, "Member 'NarrativePartyComponent_AddPartyMember::Member' has a wrong offset!");
static_assert(offsetof(NarrativePartyComponent_AddPartyMember, ReturnValue) == 0x000008, "Member 'NarrativePartyComponent_AddPartyMember::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.IsPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct NarrativePartyComponent_IsPartyLeader final
{
public:
	class APlayerState*                           Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativePartyComponent_IsPartyLeader) == 0x000008, "Wrong alignment on NarrativePartyComponent_IsPartyLeader");
static_assert(sizeof(NarrativePartyComponent_IsPartyLeader) == 0x000010, "Wrong size on NarrativePartyComponent_IsPartyLeader");
static_assert(offsetof(NarrativePartyComponent_IsPartyLeader, Member) == 0x000000, "Member 'NarrativePartyComponent_IsPartyLeader::Member' has a wrong offset!");
static_assert(offsetof(NarrativePartyComponent_IsPartyLeader, ReturnValue) == 0x000008, "Member 'NarrativePartyComponent_IsPartyLeader::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.RemovePartyMember
// 0x0010 (0x0010 - 0x0000)
struct NarrativePartyComponent_RemovePartyMember final
{
public:
	class UNarrativeComponent*                    Member;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NarrativePartyComponent_RemovePartyMember) == 0x000008, "Wrong alignment on NarrativePartyComponent_RemovePartyMember");
static_assert(sizeof(NarrativePartyComponent_RemovePartyMember) == 0x000010, "Wrong size on NarrativePartyComponent_RemovePartyMember");
static_assert(offsetof(NarrativePartyComponent_RemovePartyMember, Member) == 0x000000, "Member 'NarrativePartyComponent_RemovePartyMember::Member' has a wrong offset!");
static_assert(offsetof(NarrativePartyComponent_RemovePartyMember, ReturnValue) == 0x000008, "Member 'NarrativePartyComponent_RemovePartyMember::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.GetPartyLeader
// 0x0008 (0x0008 - 0x0000)
struct NarrativePartyComponent_GetPartyLeader final
{
public:
	class UNarrativeComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativePartyComponent_GetPartyLeader) == 0x000008, "Wrong alignment on NarrativePartyComponent_GetPartyLeader");
static_assert(sizeof(NarrativePartyComponent_GetPartyLeader) == 0x000008, "Wrong size on NarrativePartyComponent_GetPartyLeader");
static_assert(offsetof(NarrativePartyComponent_GetPartyLeader, ReturnValue) == 0x000000, "Member 'NarrativePartyComponent_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct NarrativePartyComponent_GetPartyMembers final
{
public:
	TArray<class UNarrativeComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativePartyComponent_GetPartyMembers) == 0x000008, "Wrong alignment on NarrativePartyComponent_GetPartyMembers");
static_assert(sizeof(NarrativePartyComponent_GetPartyMembers) == 0x000010, "Wrong size on NarrativePartyComponent_GetPartyMembers");
static_assert(offsetof(NarrativePartyComponent_GetPartyMembers, ReturnValue) == 0x000000, "Member 'NarrativePartyComponent_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativePartyComponent.GetPartyMemberStates
// 0x0010 (0x0010 - 0x0000)
struct NarrativePartyComponent_GetPartyMemberStates final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativePartyComponent_GetPartyMemberStates) == 0x000008, "Wrong alignment on NarrativePartyComponent_GetPartyMemberStates");
static_assert(sizeof(NarrativePartyComponent_GetPartyMemberStates) == 0x000010, "Wrong size on NarrativePartyComponent_GetPartyMemberStates");
static_assert(offsetof(NarrativePartyComponent_GetPartyMemberStates, ReturnValue) == 0x000000, "Member 'NarrativePartyComponent_GetPartyMemberStates::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestBranchCompleted
// 0x0010 (0x0010 - 0x0000)
struct Quest_BPOnQuestBranchCompleted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Branch;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestBranchCompleted) == 0x000008, "Wrong alignment on Quest_BPOnQuestBranchCompleted");
static_assert(sizeof(Quest_BPOnQuestBranchCompleted) == 0x000010, "Wrong size on Quest_BPOnQuestBranchCompleted");
static_assert(offsetof(Quest_BPOnQuestBranchCompleted, Quest) == 0x000000, "Member 'Quest_BPOnQuestBranchCompleted::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestBranchCompleted, Branch) == 0x000008, "Member 'Quest_BPOnQuestBranchCompleted::Branch' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestFailed
// 0x0020 (0x0020 - 0x0000)
struct Quest_BPOnQuestFailed final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestFailedMessage;                                // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestFailed) == 0x000008, "Wrong alignment on Quest_BPOnQuestFailed");
static_assert(sizeof(Quest_BPOnQuestFailed) == 0x000020, "Wrong size on Quest_BPOnQuestFailed");
static_assert(offsetof(Quest_BPOnQuestFailed, Quest) == 0x000000, "Member 'Quest_BPOnQuestFailed::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestFailed, QuestFailedMessage) == 0x000008, "Member 'Quest_BPOnQuestFailed::QuestFailedMessage' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestNewState
// 0x0010 (0x0010 - 0x0000)
struct Quest_BPOnQuestNewState final
{
public:
	class UQuest*                                 Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestState*                      NewState;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestNewState) == 0x000008, "Wrong alignment on Quest_BPOnQuestNewState");
static_assert(sizeof(Quest_BPOnQuestNewState) == 0x000010, "Wrong size on Quest_BPOnQuestNewState");
static_assert(offsetof(Quest_BPOnQuestNewState, Quest) == 0x000000, "Member 'Quest_BPOnQuestNewState::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestNewState, NewState) == 0x000008, "Member 'Quest_BPOnQuestNewState::NewState' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestStarted
// 0x0008 (0x0008 - 0x0000)
struct Quest_BPOnQuestStarted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestStarted) == 0x000008, "Wrong alignment on Quest_BPOnQuestStarted");
static_assert(sizeof(Quest_BPOnQuestStarted) == 0x000008, "Wrong size on Quest_BPOnQuestStarted");
static_assert(offsetof(Quest_BPOnQuestStarted, Quest) == 0x000000, "Member 'Quest_BPOnQuestStarted::Quest' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestSucceeded
// 0x0020 (0x0020 - 0x0000)
struct Quest_BPOnQuestSucceeded final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestSucceededMessage;                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestSucceeded) == 0x000008, "Wrong alignment on Quest_BPOnQuestSucceeded");
static_assert(sizeof(Quest_BPOnQuestSucceeded) == 0x000020, "Wrong size on Quest_BPOnQuestSucceeded");
static_assert(offsetof(Quest_BPOnQuestSucceeded, Quest) == 0x000000, "Member 'Quest_BPOnQuestSucceeded::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestSucceeded, QuestSucceededMessage) == 0x000008, "Member 'Quest_BPOnQuestSucceeded::QuestSucceededMessage' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestTaskCompleted
// 0x0018 (0x0018 - 0x0000)
struct Quest_BPOnQuestTaskCompleted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UNarrativeTask*                   Task;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Step;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestTaskCompleted) == 0x000008, "Wrong alignment on Quest_BPOnQuestTaskCompleted");
static_assert(sizeof(Quest_BPOnQuestTaskCompleted) == 0x000018, "Wrong size on Quest_BPOnQuestTaskCompleted");
static_assert(offsetof(Quest_BPOnQuestTaskCompleted, Quest) == 0x000000, "Member 'Quest_BPOnQuestTaskCompleted::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskCompleted, Task) == 0x000008, "Member 'Quest_BPOnQuestTaskCompleted::Task' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskCompleted, Step) == 0x000010, "Member 'Quest_BPOnQuestTaskCompleted::Step' has a wrong offset!");

// Function Narrative.Quest.BPOnQuestTaskProgressChanged
// 0x0020 (0x0020 - 0x0000)
struct Quest_BPOnQuestTaskProgressChanged final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UNarrativeTask*                   Task;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Step;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredProgress;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPOnQuestTaskProgressChanged) == 0x000008, "Wrong alignment on Quest_BPOnQuestTaskProgressChanged");
static_assert(sizeof(Quest_BPOnQuestTaskProgressChanged) == 0x000020, "Wrong size on Quest_BPOnQuestTaskProgressChanged");
static_assert(offsetof(Quest_BPOnQuestTaskProgressChanged, Quest) == 0x000000, "Member 'Quest_BPOnQuestTaskProgressChanged::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskProgressChanged, Task) == 0x000008, "Member 'Quest_BPOnQuestTaskProgressChanged::Task' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskProgressChanged, Step) == 0x000010, "Member 'Quest_BPOnQuestTaskProgressChanged::Step' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskProgressChanged, CurrentProgress) == 0x000018, "Member 'Quest_BPOnQuestTaskProgressChanged::CurrentProgress' has a wrong offset!");
static_assert(offsetof(Quest_BPOnQuestTaskProgressChanged, RequiredProgress) == 0x00001C, "Member 'Quest_BPOnQuestTaskProgressChanged::RequiredProgress' has a wrong offset!");

// Function Narrative.Quest.BPOnTrackedChanged
// 0x0010 (0x0010 - 0x0000)
struct Quest_BPOnTrackedChanged final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewTracked;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_BPOnTrackedChanged) == 0x000008, "Wrong alignment on Quest_BPOnTrackedChanged");
static_assert(sizeof(Quest_BPOnTrackedChanged) == 0x000010, "Wrong size on Quest_BPOnTrackedChanged");
static_assert(offsetof(Quest_BPOnTrackedChanged, Quest) == 0x000000, "Member 'Quest_BPOnTrackedChanged::Quest' has a wrong offset!");
static_assert(offsetof(Quest_BPOnTrackedChanged, bNewTracked) == 0x000008, "Member 'Quest_BPOnTrackedChanged::bNewTracked' has a wrong offset!");

// Function Narrative.Quest.BPPreQuestStarted
// 0x0008 (0x0008 - 0x0000)
struct Quest_BPPreQuestStarted final
{
public:
	const class UQuest*                           Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_BPPreQuestStarted) == 0x000008, "Wrong alignment on Quest_BPPreQuestStarted");
static_assert(sizeof(Quest_BPPreQuestStarted) == 0x000008, "Wrong size on Quest_BPPreQuestStarted");
static_assert(offsetof(Quest_BPPreQuestStarted, Quest) == 0x000000, "Member 'Quest_BPPreQuestStarted::Quest' has a wrong offset!");

// Function Narrative.Quest.EnterState
// 0x0008 (0x0008 - 0x0000)
struct Quest_EnterState final
{
public:
	class UQuestState*                            NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_EnterState) == 0x000008, "Wrong alignment on Quest_EnterState");
static_assert(sizeof(Quest_EnterState) == 0x000008, "Wrong size on Quest_EnterState");
static_assert(offsetof(Quest_EnterState, NewState) == 0x000000, "Member 'Quest_EnterState::NewState' has a wrong offset!");

// Function Narrative.Quest.FailQuest
// 0x0018 (0x0018 - 0x0000)
struct Quest_FailQuest final
{
public:
	class FText                                   QuestFailedMessage;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_FailQuest) == 0x000008, "Wrong alignment on Quest_FailQuest");
static_assert(sizeof(Quest_FailQuest) == 0x000018, "Wrong size on Quest_FailQuest");
static_assert(offsetof(Quest_FailQuest, QuestFailedMessage) == 0x000000, "Member 'Quest_FailQuest::QuestFailedMessage' has a wrong offset!");

// Function Narrative.Quest.OnQuestBranchCompleted
// 0x0008 (0x0008 - 0x0000)
struct Quest_OnQuestBranchCompleted final
{
public:
	const class UQuestBranch*                     Branch;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_OnQuestBranchCompleted) == 0x000008, "Wrong alignment on Quest_OnQuestBranchCompleted");
static_assert(sizeof(Quest_OnQuestBranchCompleted) == 0x000008, "Wrong size on Quest_OnQuestBranchCompleted");
static_assert(offsetof(Quest_OnQuestBranchCompleted, Branch) == 0x000000, "Member 'Quest_OnQuestBranchCompleted::Branch' has a wrong offset!");

// Function Narrative.Quest.OnQuestTaskCompleted
// 0x0010 (0x0010 - 0x0000)
struct Quest_OnQuestTaskCompleted final
{
public:
	const class UNarrativeTask*                   Task;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Branch;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_OnQuestTaskCompleted) == 0x000008, "Wrong alignment on Quest_OnQuestTaskCompleted");
static_assert(sizeof(Quest_OnQuestTaskCompleted) == 0x000010, "Wrong size on Quest_OnQuestTaskCompleted");
static_assert(offsetof(Quest_OnQuestTaskCompleted, Task) == 0x000000, "Member 'Quest_OnQuestTaskCompleted::Task' has a wrong offset!");
static_assert(offsetof(Quest_OnQuestTaskCompleted, Branch) == 0x000008, "Member 'Quest_OnQuestTaskCompleted::Branch' has a wrong offset!");

// Function Narrative.Quest.OnQuestTaskProgressChanged
// 0x0018 (0x0018 - 0x0000)
struct Quest_OnQuestTaskProgressChanged final
{
public:
	const class UNarrativeTask*                   Task;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQuestBranch*                     Step;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredProgress;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_OnQuestTaskProgressChanged) == 0x000008, "Wrong alignment on Quest_OnQuestTaskProgressChanged");
static_assert(sizeof(Quest_OnQuestTaskProgressChanged) == 0x000018, "Wrong size on Quest_OnQuestTaskProgressChanged");
static_assert(offsetof(Quest_OnQuestTaskProgressChanged, Task) == 0x000000, "Member 'Quest_OnQuestTaskProgressChanged::Task' has a wrong offset!");
static_assert(offsetof(Quest_OnQuestTaskProgressChanged, Step) == 0x000008, "Member 'Quest_OnQuestTaskProgressChanged::Step' has a wrong offset!");
static_assert(offsetof(Quest_OnQuestTaskProgressChanged, CurrentProgress) == 0x000010, "Member 'Quest_OnQuestTaskProgressChanged::CurrentProgress' has a wrong offset!");
static_assert(offsetof(Quest_OnQuestTaskProgressChanged, RequiredProgress) == 0x000014, "Member 'Quest_OnQuestTaskProgressChanged::RequiredProgress' has a wrong offset!");

// Function Narrative.Quest.SetQuestDescription
// 0x0018 (0x0018 - 0x0000)
struct Quest_SetQuestDescription final
{
public:
	class FText                                   NewDescription;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_SetQuestDescription) == 0x000008, "Wrong alignment on Quest_SetQuestDescription");
static_assert(sizeof(Quest_SetQuestDescription) == 0x000018, "Wrong size on Quest_SetQuestDescription");
static_assert(offsetof(Quest_SetQuestDescription, NewDescription) == 0x000000, "Member 'Quest_SetQuestDescription::NewDescription' has a wrong offset!");

// Function Narrative.Quest.SetQuestName
// 0x0018 (0x0018 - 0x0000)
struct Quest_SetQuestName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_SetQuestName) == 0x000008, "Wrong alignment on Quest_SetQuestName");
static_assert(sizeof(Quest_SetQuestName) == 0x000018, "Wrong size on Quest_SetQuestName");
static_assert(offsetof(Quest_SetQuestName, NewName) == 0x000000, "Member 'Quest_SetQuestName::NewName' has a wrong offset!");

// Function Narrative.Quest.SetTracked
// 0x0001 (0x0001 - 0x0000)
struct Quest_SetTracked final
{
public:
	bool                                          bNewTracked;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_SetTracked) == 0x000001, "Wrong alignment on Quest_SetTracked");
static_assert(sizeof(Quest_SetTracked) == 0x000001, "Wrong size on Quest_SetTracked");
static_assert(offsetof(Quest_SetTracked, bNewTracked) == 0x000000, "Member 'Quest_SetTracked::bNewTracked' has a wrong offset!");

// Function Narrative.Quest.SpawnQuestActor
// 0x0080 (0x0080 - 0x0000)
struct Quest_SpawnQuestActor final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_SpawnQuestActor) == 0x000010, "Wrong alignment on Quest_SpawnQuestActor");
static_assert(sizeof(Quest_SpawnQuestActor) == 0x000080, "Wrong size on Quest_SpawnQuestActor");
static_assert(offsetof(Quest_SpawnQuestActor, ActorClass) == 0x000000, "Member 'Quest_SpawnQuestActor::ActorClass' has a wrong offset!");
static_assert(offsetof(Quest_SpawnQuestActor, ActorTransform) == 0x000010, "Member 'Quest_SpawnQuestActor::ActorTransform' has a wrong offset!");
static_assert(offsetof(Quest_SpawnQuestActor, ReturnValue) == 0x000070, "Member 'Quest_SpawnQuestActor::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.SucceedQuest
// 0x0018 (0x0018 - 0x0000)
struct Quest_SucceedQuest final
{
public:
	class FText                                   QuestSucceededMessage;                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_SucceedQuest) == 0x000008, "Wrong alignment on Quest_SucceedQuest");
static_assert(sizeof(Quest_SucceedQuest) == 0x000018, "Wrong size on Quest_SucceedQuest");
static_assert(offsetof(Quest_SucceedQuest, QuestSucceededMessage) == 0x000000, "Member 'Quest_SucceedQuest::QuestSucceededMessage' has a wrong offset!");

// Function Narrative.Quest.GetBranch
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetBranch final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuestBranch*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetBranch) == 0x000008, "Wrong alignment on Quest_GetBranch");
static_assert(sizeof(Quest_GetBranch) == 0x000010, "Wrong size on Quest_GetBranch");
static_assert(offsetof(Quest_GetBranch, ID) == 0x000000, "Member 'Quest_GetBranch::ID' has a wrong offset!");
static_assert(offsetof(Quest_GetBranch, ReturnValue) == 0x000008, "Member 'Quest_GetBranch::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetBranches
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetBranches final
{
public:
	TArray<class UQuestBranch*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetBranches) == 0x000008, "Wrong alignment on Quest_GetBranches");
static_assert(sizeof(Quest_GetBranches) == 0x000010, "Wrong size on Quest_GetBranches");
static_assert(offsetof(Quest_GetBranches, ReturnValue) == 0x000000, "Member 'Quest_GetBranches::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetGroupMembers
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetGroupMembers final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetGroupMembers) == 0x000008, "Wrong alignment on Quest_GetGroupMembers");
static_assert(sizeof(Quest_GetGroupMembers) == 0x000010, "Wrong size on Quest_GetGroupMembers");
static_assert(offsetof(Quest_GetGroupMembers, ReturnValue) == 0x000000, "Member 'Quest_GetGroupMembers::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetNodes
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetNodes final
{
public:
	TArray<class UQuestNode*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetNodes) == 0x000008, "Wrong alignment on Quest_GetNodes");
static_assert(sizeof(Quest_GetNodes) == 0x000010, "Wrong size on Quest_GetNodes");
static_assert(offsetof(Quest_GetNodes, ReturnValue) == 0x000000, "Member 'Quest_GetNodes::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetOwningComp
// 0x0008 (0x0008 - 0x0000)
struct Quest_GetOwningComp final
{
public:
	class UNarrativeComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetOwningComp) == 0x000008, "Wrong alignment on Quest_GetOwningComp");
static_assert(sizeof(Quest_GetOwningComp) == 0x000008, "Wrong size on Quest_GetOwningComp");
static_assert(offsetof(Quest_GetOwningComp, ReturnValue) == 0x000000, "Member 'Quest_GetOwningComp::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct Quest_GetOwningController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetOwningController) == 0x000008, "Wrong alignment on Quest_GetOwningController");
static_assert(sizeof(Quest_GetOwningController) == 0x000008, "Wrong size on Quest_GetOwningController");
static_assert(offsetof(Quest_GetOwningController, ReturnValue) == 0x000000, "Member 'Quest_GetOwningController::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct Quest_GetOwningPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetOwningPawn) == 0x000008, "Wrong alignment on Quest_GetOwningPawn");
static_assert(sizeof(Quest_GetOwningPawn) == 0x000008, "Wrong size on Quest_GetOwningPawn");
static_assert(offsetof(Quest_GetOwningPawn, ReturnValue) == 0x000000, "Member 'Quest_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetQuestCompletion
// 0x0001 (0x0001 - 0x0000)
struct Quest_GetQuestCompletion final
{
public:
	EQuestCompletion                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetQuestCompletion) == 0x000001, "Wrong alignment on Quest_GetQuestCompletion");
static_assert(sizeof(Quest_GetQuestCompletion) == 0x000001, "Wrong size on Quest_GetQuestCompletion");
static_assert(offsetof(Quest_GetQuestCompletion, ReturnValue) == 0x000000, "Member 'Quest_GetQuestCompletion::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetQuestDescription
// 0x0018 (0x0018 - 0x0000)
struct Quest_GetQuestDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetQuestDescription) == 0x000008, "Wrong alignment on Quest_GetQuestDescription");
static_assert(sizeof(Quest_GetQuestDescription) == 0x000018, "Wrong size on Quest_GetQuestDescription");
static_assert(offsetof(Quest_GetQuestDescription, ReturnValue) == 0x000000, "Member 'Quest_GetQuestDescription::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetQuestName
// 0x0018 (0x0018 - 0x0000)
struct Quest_GetQuestName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetQuestName) == 0x000008, "Wrong alignment on Quest_GetQuestName");
static_assert(sizeof(Quest_GetQuestName) == 0x000018, "Wrong size on Quest_GetQuestName");
static_assert(offsetof(Quest_GetQuestName, ReturnValue) == 0x000000, "Member 'Quest_GetQuestName::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetQuestStartState
// 0x0008 (0x0008 - 0x0000)
struct Quest_GetQuestStartState final
{
public:
	class UQuestState*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetQuestStartState) == 0x000008, "Wrong alignment on Quest_GetQuestStartState");
static_assert(sizeof(Quest_GetQuestStartState) == 0x000008, "Wrong size on Quest_GetQuestStartState");
static_assert(offsetof(Quest_GetQuestStartState, ReturnValue) == 0x000000, "Member 'Quest_GetQuestStartState::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetState
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetState final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuestState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetState) == 0x000008, "Wrong alignment on Quest_GetState");
static_assert(sizeof(Quest_GetState) == 0x000010, "Wrong size on Quest_GetState");
static_assert(offsetof(Quest_GetState, ID) == 0x000000, "Member 'Quest_GetState::ID' has a wrong offset!");
static_assert(offsetof(Quest_GetState, ReturnValue) == 0x000008, "Member 'Quest_GetState::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.GetStates
// 0x0010 (0x0010 - 0x0000)
struct Quest_GetStates final
{
public:
	TArray<class UQuestState*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_GetStates) == 0x000008, "Wrong alignment on Quest_GetStates");
static_assert(sizeof(Quest_GetStates) == 0x000010, "Wrong size on Quest_GetStates");
static_assert(offsetof(Quest_GetStates, ReturnValue) == 0x000000, "Member 'Quest_GetStates::ReturnValue' has a wrong offset!");

// Function Narrative.Quest.IsTracked
// 0x0001 (0x0001 - 0x0000)
struct Quest_IsTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_IsTracked) == 0x000001, "Wrong alignment on Quest_IsTracked");
static_assert(sizeof(Quest_IsTracked) == 0x000001, "Wrong size on Quest_IsTracked");
static_assert(offsetof(Quest_IsTracked, ReturnValue) == 0x000000, "Member 'Quest_IsTracked::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeTask.AddProgress
// 0x0004 (0x0004 - 0x0000)
struct NarrativeTask_AddProgress final
{
public:
	int32                                         ProgressToAdd;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_AddProgress) == 0x000004, "Wrong alignment on NarrativeTask_AddProgress");
static_assert(sizeof(NarrativeTask_AddProgress) == 0x000004, "Wrong size on NarrativeTask_AddProgress");
static_assert(offsetof(NarrativeTask_AddProgress, ProgressToAdd) == 0x000000, "Member 'NarrativeTask_AddProgress::ProgressToAdd' has a wrong offset!");

// Function Narrative.NarrativeTask.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct NarrativeTask_SetProgress final
{
public:
	int32                                         NewProgress;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_SetProgress) == 0x000004, "Wrong alignment on NarrativeTask_SetProgress");
static_assert(sizeof(NarrativeTask_SetProgress) == 0x000004, "Wrong size on NarrativeTask_SetProgress");
static_assert(offsetof(NarrativeTask_SetProgress, NewProgress) == 0x000000, "Member 'NarrativeTask_SetProgress::NewProgress' has a wrong offset!");

// Function Narrative.NarrativeTask.GetOwningBranch
// 0x0008 (0x0008 - 0x0000)
struct NarrativeTask_GetOwningBranch final
{
public:
	class UQuestBranch*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_GetOwningBranch) == 0x000008, "Wrong alignment on NarrativeTask_GetOwningBranch");
static_assert(sizeof(NarrativeTask_GetOwningBranch) == 0x000008, "Wrong size on NarrativeTask_GetOwningBranch");
static_assert(offsetof(NarrativeTask_GetOwningBranch, ReturnValue) == 0x000000, "Member 'NarrativeTask_GetOwningBranch::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeTask.GetTaskDescription
// 0x0018 (0x0018 - 0x0000)
struct NarrativeTask_GetTaskDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_GetTaskDescription) == 0x000008, "Wrong alignment on NarrativeTask_GetTaskDescription");
static_assert(sizeof(NarrativeTask_GetTaskDescription) == 0x000018, "Wrong size on NarrativeTask_GetTaskDescription");
static_assert(offsetof(NarrativeTask_GetTaskDescription, ReturnValue) == 0x000000, "Member 'NarrativeTask_GetTaskDescription::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeTask.GetTaskNodeDescription
// 0x0018 (0x0018 - 0x0000)
struct NarrativeTask_GetTaskNodeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_GetTaskNodeDescription) == 0x000008, "Wrong alignment on NarrativeTask_GetTaskNodeDescription");
static_assert(sizeof(NarrativeTask_GetTaskNodeDescription) == 0x000018, "Wrong size on NarrativeTask_GetTaskNodeDescription");
static_assert(offsetof(NarrativeTask_GetTaskNodeDescription, ReturnValue) == 0x000000, "Member 'NarrativeTask_GetTaskNodeDescription::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeTask.GetTaskProgressText
// 0x0018 (0x0018 - 0x0000)
struct NarrativeTask_GetTaskProgressText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_GetTaskProgressText) == 0x000008, "Wrong alignment on NarrativeTask_GetTaskProgressText");
static_assert(sizeof(NarrativeTask_GetTaskProgressText) == 0x000018, "Wrong size on NarrativeTask_GetTaskProgressText");
static_assert(offsetof(NarrativeTask_GetTaskProgressText, ReturnValue) == 0x000000, "Member 'NarrativeTask_GetTaskProgressText::ReturnValue' has a wrong offset!");

// Function Narrative.NarrativeTask.IsComplete
// 0x0001 (0x0001 - 0x0000)
struct NarrativeTask_IsComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NarrativeTask_IsComplete) == 0x000001, "Wrong alignment on NarrativeTask_IsComplete");
static_assert(sizeof(NarrativeTask_IsComplete) == 0x000001, "Wrong size on NarrativeTask_IsComplete");
static_assert(offsetof(NarrativeTask_IsComplete, ReturnValue) == 0x000000, "Member 'NarrativeTask_IsComplete::ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressBarLinear

#include "Basic.hpp"

#include "ProgressBarLinear_classes.hpp"
#include "ProgressBarLinear_parameters.hpp"


namespace SDK
{

// Function ProgressBarLinear.ProgressBarLinear_C.AddEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Effects                       Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::AddEffect(const struct FS_Effects& Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "AddEffect");

	Params::ProgressBarLinear_C_AddEffect Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.AddEntry
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewPercent_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::AddEntry(double NewPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "AddEntry");

	Params::ProgressBarLinear_C_AddEntry Parms{};

	Parms.NewPercent_0 = NewPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.ClearEffectLayers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEffectLayer                            EffectLayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::ClearEffectLayers(EEffectLayer EffectLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "ClearEffectLayers");

	Params::ProgressBarLinear_C_ClearEffectLayers Parms{};

	Parms.EffectLayer = EffectLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UProgressBarLinear_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Count_Percent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Count_Percent(double Time, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Count_Percent");

	Params::ProgressBarLinear_C_Count_Percent Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarLinear.ProgressBarLinear_C.Count_TargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Count_TargetPercent(double Time, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Count_TargetPercent");

	Params::ProgressBarLinear_C_Count_TargetPercent Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarLinear.ProgressBarLinear_C.CreateEffects
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::CreateEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "CreateEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.ExecuteEntry
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::ExecuteEntry(double CurrentEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "ExecuteEntry");

	Params::ProgressBarLinear_C_ExecuteEntry Parms{};

	Parms.CurrentEntry = CurrentEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.ExecuteUbergraph_ProgressBarLinear
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::ExecuteUbergraph_ProgressBarLinear(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "ExecuteUbergraph_ProgressBarLinear");

	Params::ProgressBarLinear_C_ExecuteUbergraph_ProgressBarLinear Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.FindEffectOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EEffectLayer                            EffectLayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UOverlay*                         Overlay                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::FindEffectOverlay(EEffectLayer EffectLayer, class UOverlay** Overlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "FindEffectOverlay");

	Params::ProgressBarLinear_C_FindEffectOverlay Parms{};

	Parms.EffectLayer = EffectLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Overlay != nullptr)
		*Overlay = Parms.Overlay;
}


// Function ProgressBarLinear.ProgressBarLinear_C.FindEffectOverlaysCentered
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EEffectLayer                            EffectLayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UOverlay*>                 Overlays                                               (Parm, OutParm, ContainsInstancedReference)

void UProgressBarLinear_C::FindEffectOverlaysCentered(EEffectLayer EffectLayer, TArray<class UOverlay*>* Overlays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "FindEffectOverlaysCentered");

	Params::ProgressBarLinear_C_FindEffectOverlaysCentered Parms{};

	Parms.EffectLayer = EffectLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Overlays != nullptr)
		*Overlays = std::move(Parms.Overlays);
}


// Function ProgressBarLinear.ProgressBarLinear_C.FindThicknessSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UProgressBarLinear_C::FindThicknessSize(double Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "FindThicknessSize");

	Params::ProgressBarLinear_C_FindThicknessSize Parms{};

	Parms.Thickness = Thickness;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.FindThicknessSizeCentered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UProgressBarLinear_C::FindThicknessSizeCentered(double Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "FindThicknessSizeCentered");

	Params::ProgressBarLinear_C_FindThicknessSizeCentered Parms{};

	Parms.Thickness = Thickness;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetCenterSpacingSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UProgressBarLinear_C::GetCenterSpacingSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetCenterSpacingSize");

	Params::ProgressBarLinear_C_GetCenterSpacingSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetChildren
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UWB_Container_Linear_C*>   Array                                                  (Parm, OutParm, ContainsInstancedReference)

void UProgressBarLinear_C::GetChildren(TArray<class UWB_Container_Linear_C*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetChildren");

	Params::ProgressBarLinear_C_GetChildren Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetEffectOverlays
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UOverlay*>                 Array                                                  (Parm, OutParm, ContainsInstancedReference)

void UProgressBarLinear_C::GetEffectOverlays(TArray<class UOverlay*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetEffectOverlays");

	Params::ProgressBarLinear_C_GetEffectOverlays Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetEntryIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::GetEntryIndex(int32 Index_0, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetEntryIndex");

	Params::ProgressBarLinear_C_GetEntryIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetFillFromCenterSpacing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UProgressBarLinear_C::GetFillFromCenterSpacing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetFillFromCenterSpacing");

	Params::ProgressBarLinear_C_GetFillFromCenterSpacing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.GetInterpolationTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UProgressBarLinear_C::GetInterpolationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "GetInterpolationTime");

	Params::ProgressBarLinear_C_GetInterpolationTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.HandlePausedQueue
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::HandlePausedQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "HandlePausedQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.HasAnyValueChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::HasAnyValueChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "HasAnyValueChanged");

	Params::ProgressBarLinear_C_HasAnyValueChanged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.HasEffectChanged
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::HasEffectChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "HasEffectChanged");

	Params::ProgressBarLinear_C_HasEffectChanged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.InitNextEntry
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::InitNextEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "InitNextEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsEffectProgressChangeColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_Effects                       Effect                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsEffectProgressChangeColor(const struct FS_Effects& Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsEffectProgressChangeColor");

	Params::ProgressBarLinear_C_IsEffectProgressChangeColor Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsFillTypeFillFromCenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsFillTypeFillFromCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsFillTypeFillFromCenter");

	Params::ProgressBarLinear_C_IsFillTypeFillFromCenter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsFillTypeTopOrBottom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsFillTypeTopOrBottom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsFillTypeTopOrBottom");

	Params::ProgressBarLinear_C_IsFillTypeTopOrBottom Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsProgressMethodInterpolated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsProgressMethodInterpolated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsProgressMethodInterpolated");

	Params::ProgressBarLinear_C_IsProgressMethodInterpolated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsProgressMethodStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsProgressMethodStatic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsProgressMethodStatic");

	Params::ProgressBarLinear_C_IsProgressMethodStatic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.IsValidEntryIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   IndexToTest                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::IsValidEntryIndex(int32 IndexToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "IsValidEntryIndex");

	Params::ProgressBarLinear_C_IsValidEntryIndex Parms{};

	Parms.IndexToTest = IndexToTest;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.NotEqualColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     A                                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     B                                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UProgressBarLinear_C::NotEqualColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "NotEqualColor");

	Params::ProgressBarLinear_C_NotEqualColor Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_AddEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Effects                       Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_AddEffect(const struct FS_Effects& Effect, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_AddEffect");

	Params::ProgressBarLinear_C_PB_AddEffect Parms{};

	Parms.Effect = std::move(Effect);

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Effects>               Effects_0                                              (Parm, OutParm)

void UProgressBarLinear_C::PB_GetEffects(TArray<struct FS_Effects>* Effects_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetEffects");

	Params::ProgressBarLinear_C_PB_GetEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Effects_0 != nullptr)
		*Effects_0 = std::move(Parms.Effects_0);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetFillColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetFillColor(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetFillColor");

	Params::ProgressBarLinear_C_PB_GetFillColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetInterpTimeCurrent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentInterpTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetInterpTimeCurrent(double* CurrentInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetInterpTimeCurrent");

	Params::ProgressBarLinear_C_PB_GetInterpTimeCurrent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentInterpTime != nullptr)
		*CurrentInterpTime = Parms.CurrentInterpTime;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetInterpTimeTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetInterpTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetInterpTimeTarget(double* TargetInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetInterpTimeTarget");

	Params::ProgressBarLinear_C_PB_GetInterpTimeTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetInterpTime != nullptr)
		*TargetInterpTime = Parms.TargetInterpTime;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetIsCustomMarquee
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetIsCustomMarquee(bool* IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetIsCustomMarquee");

	Params::ProgressBarLinear_C_PB_GetIsCustomMarquee Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMarquee != nullptr)
		*IsMarquee = Parms.IsMarquee;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetIsMarquee
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetIsMarquee(bool* IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetIsMarquee");

	Params::ProgressBarLinear_C_PB_GetIsMarquee Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMarquee != nullptr)
		*IsMarquee = Parms.IsMarquee;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetPercent(double* Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetPercent");

	Params::ProgressBarLinear_C_PB_GetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetProgressMethod
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         EProgressMethod                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetProgressMethod(EProgressMethod* EProgressMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetProgressMethod");

	Params::ProgressBarLinear_C_PB_GetProgressMethod Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EProgressMethod != nullptr)
		*EProgressMethod = Parms.EProgressMethod;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetSeparationSteps
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Steps                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetSeparationSteps(int32* Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetSeparationSteps");

	Params::ProgressBarLinear_C_PB_GetSeparationSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Steps != nullptr)
		*Steps = Parms.Steps;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetSize(struct FVector2D* Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetSize");

	Params::ProgressBarLinear_C_PB_GetSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Size_0 != nullptr)
		*Size_0 = std::move(Parms.Size_0);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetTargetFillColor_Negative
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetTargetFillColor_Negative(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetTargetFillColor_Negative");

	Params::ProgressBarLinear_C_PB_GetTargetFillColor_Negative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetTargetFillColor_Positive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetTargetFillColor_Positive(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetTargetFillColor_Positive");

	Params::ProgressBarLinear_C_PB_GetTargetFillColor_Positive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetTargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetTargetPercent(double* TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetTargetPercent");

	Params::ProgressBarLinear_C_PB_GetTargetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetPercent_0 != nullptr)
		*TargetPercent_0 = Parms.TargetPercent_0;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetUseGradientFillColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradientFillColor                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetUseGradientFillColor(bool* UseGradientFillColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetUseGradientFillColor");

	Params::ProgressBarLinear_C_PB_GetUseGradientFillColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseGradientFillColor != nullptr)
		*UseGradientFillColor = Parms.UseGradientFillColor;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_GetUseTargetPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_GetUseTargetPercent(bool* UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_GetUseTargetPercent");

	Params::ProgressBarLinear_C_PB_GetUseTargetPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseTargetPercent_0 != nullptr)
		*UseTargetPercent_0 = Parms.UseTargetPercent_0;
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_RemoveEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_RemoveEffect(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_RemoveEffect");

	Params::ProgressBarLinear_C_PB_RemoveEffect Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetAllEffectsEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetAllEffectsEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetAllEffectsEnabled");

	Params::ProgressBarLinear_C_PB_SetAllEffectsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetBackgroundBlurStrength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlurStrength                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetBackgroundBlurStrength(double BlurStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetBackgroundBlurStrength");

	Params::ProgressBarLinear_C_PB_SetBackgroundBlurStrength Parms{};

	Parms.BlurStrength = BlurStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetBackgroundBrushTiling
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateBrushTileType                     Tiling                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetBackgroundBrushTiling(ESlateBrushTileType Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetBackgroundBrushTiling");

	Params::ProgressBarLinear_C_PB_SetBackgroundBrushTiling Parms{};

	Parms.Tiling = Tiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetBackgroundColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetBackgroundColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetBackgroundColor");

	Params::ProgressBarLinear_C_PB_SetBackgroundColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetBackgroundColorMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Mask                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetBackgroundColorMask(class UTexture2D* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetBackgroundColorMask");

	Params::ProgressBarLinear_C_PB_SetBackgroundColorMask Parms{};

	Parms.Mask = Mask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetBlendMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BlendMask_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetBlendMask(class UTexture2D* BlendMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetBlendMask");

	Params::ProgressBarLinear_C_PB_SetBlendMask Parms{};

	Parms.BlendMask_0 = BlendMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetCustomMarqueeImage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetCustomMarqueeImage(class UTexture2D* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetCustomMarqueeImage");

	Params::ProgressBarLinear_C_PB_SetCustomMarqueeImage Parms{};

	Parms.Image = Image;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetCustomMarqueeMaskType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarqueeMask                            MaskType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetCustomMarqueeMaskType(EMarqueeMask MaskType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetCustomMarqueeMaskType");

	Params::ProgressBarLinear_C_PB_SetCustomMarqueeMaskType Parms{};

	Parms.MaskType = MaskType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetEffectEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetEffectEnabled(int32 Index_0, bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetEffectEnabled");

	Params::ProgressBarLinear_C_PB_SetEffectEnabled Parms{};

	Parms.Index_0 = Index_0;
	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Effects>               Effects_0                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UProgressBarLinear_C::PB_SetEffects(const TArray<struct FS_Effects>& Effects_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetEffects");

	Params::ProgressBarLinear_C_PB_SetEffects Parms{};

	Parms.Effects_0 = std::move(Effects_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillColor");

	Params::ProgressBarLinear_C_PB_SetFillColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillColorBrushTiling
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateBrushTileType                     Tiling                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillColorBrushTiling(ESlateBrushTileType Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillColorBrushTiling");

	Params::ProgressBarLinear_C_PB_SetFillColorBrushTiling Parms{};

	Parms.Tiling = Tiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillColorGradientPower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GradientPower                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillColorGradientPower(double GradientPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillColorGradientPower");

	Params::ProgressBarLinear_C_PB_SetFillColorGradientPower Parms{};

	Parms.GradientPower = GradientPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillColorGradientType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGradientTypes                          GradientType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillColorGradientType(EGradientTypes GradientType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillColorGradientType");

	Params::ProgressBarLinear_C_PB_SetFillColorGradientType Parms{};

	Parms.GradientType = GradientType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillColorMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Mask                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillColorMask(class UObject* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillColorMask");

	Params::ProgressBarLinear_C_PB_SetFillColorMask Parms{};

	Parms.Mask = Mask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillFromCenterSpacing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Spacing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillFromCenterSpacing(double Spacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillFromCenterSpacing");

	Params::ProgressBarLinear_C_PB_SetFillFromCenterSpacing Parms{};

	Parms.Spacing = Spacing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetFillType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressBarFillType                    FillType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetFillType(EProgressBarFillType FillType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetFillType");

	Params::ProgressBarLinear_C_PB_SetFillType Parms{};

	Parms.FillType_0 = FillType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetInterpTimeCurrent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentInterpTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetInterpTimeCurrent(double CurrentInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetInterpTimeCurrent");

	Params::ProgressBarLinear_C_PB_SetInterpTimeCurrent Parms{};

	Parms.CurrentInterpTime = CurrentInterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetInterpTimeTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetInterpTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetInterpTimeTarget(double TargetInterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetInterpTimeTarget");

	Params::ProgressBarLinear_C_PB_SetInterpTimeTarget Parms{};

	Parms.TargetInterpTime = TargetInterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetIsCustomMarquee
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetIsCustomMarquee(bool IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetIsCustomMarquee");

	Params::ProgressBarLinear_C_PB_SetIsCustomMarquee Parms{};

	Parms.IsMarquee = IsMarquee;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetIsMarquee
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetIsMarquee(bool IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetIsMarquee");

	Params::ProgressBarLinear_C_PB_SetIsMarquee Parms{};

	Parms.IsMarquee = IsMarquee;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetMarqueeImage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetMarqueeImage(class UTexture2D* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetMarqueeImage");

	Params::ProgressBarLinear_C_PB_SetMarqueeImage Parms{};

	Parms.Image = Image;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetPercent(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetPercent");

	Params::ProgressBarLinear_C_PB_SetPercent Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetProgressMethod
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         EProgressMethod                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetProgressMethod(EProgressMethod EProgressMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetProgressMethod");

	Params::ProgressBarLinear_C_PB_SetProgressMethod Parms{};

	Parms.EProgressMethod = EProgressMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetSeparationAbsoluteFill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AbsoluteFillMethod                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetSeparationAbsoluteFill(bool AbsoluteFillMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetSeparationAbsoluteFill");

	Params::ProgressBarLinear_C_PB_SetSeparationAbsoluteFill Parms{};

	Parms.AbsoluteFillMethod = AbsoluteFillMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetSeparationSteps
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Steps                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetSeparationSteps(int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetSeparationSteps");

	Params::ProgressBarLinear_C_PB_SetSeparationSteps Parms{};

	Parms.Steps = Steps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetSeparationStepsSpacing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Spacing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetSeparationStepsSpacing(double Spacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetSeparationStepsSpacing");

	Params::ProgressBarLinear_C_PB_SetSeparationStepsSpacing Parms{};

	Parms.Spacing = Spacing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetSize(const struct FVector2D& Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetSize");

	Params::ProgressBarLinear_C_PB_SetSize Parms{};

	Parms.Size_0 = std::move(Size_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetTargetFillColor_Negative
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetTargetFillColor_Negative(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetTargetFillColor_Negative");

	Params::ProgressBarLinear_C_PB_SetTargetFillColor_Negative Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetTargetFillColor_Positive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetTargetFillColor_Positive(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetTargetFillColor_Positive");

	Params::ProgressBarLinear_C_PB_SetTargetFillColor_Positive Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetTargetPercent(double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetTargetPercent");

	Params::ProgressBarLinear_C_PB_SetTargetPercent Parms{};

	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetThickness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetThickness(double Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetThickness");

	Params::ProgressBarLinear_C_PB_SetThickness Parms{};

	Parms.Thickness = Thickness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetUseGradientFillColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradientFillColor                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetUseGradientFillColor(bool UseGradientFillColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetUseGradientFillColor");

	Params::ProgressBarLinear_C_PB_SetUseGradientFillColor Parms{};

	Parms.UseGradientFillColor = UseGradientFillColor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PB_SetUseTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PB_SetUseTargetPercent(bool UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PB_SetUseTargetPercent");

	Params::ProgressBarLinear_C_PB_SetUseTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "PreConstruct");

	Params::ProgressBarLinear_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Reconstruct
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::Reconstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Reconstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.RemoveEntryIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::RemoveEntryIndex(int32 IndexToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "RemoveEntryIndex");

	Params::ProgressBarLinear_C_RemoveEntryIndex Parms{};

	Parms.IndexToRemove = IndexToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Reset
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SendPercentToEffects
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOverlay*                         EffectsOverlay                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SendPercentToEffects(class UOverlay* EffectsOverlay, double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SendPercentToEffects");

	Params::ProgressBarLinear_C_SendPercentToEffects Parms{};

	Parms.EffectsOverlay = EffectsOverlay;
	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Separation_AddBackground
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Separation_AddBackground(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Separation_AddBackground");

	Params::ProgressBarLinear_C_Separation_AddBackground Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Separation_AddSegments
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumSegments                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spacing                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     FillColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EProgressBarFillType                    FillType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Separation_AddSegments(int32 NumSegments, double Spacing, const struct FVector2D& Size_0, const struct FLinearColor& FillColor, EProgressBarFillType FillType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Separation_AddSegments");

	Params::ProgressBarLinear_C_Separation_AddSegments Parms{};

	Parms.NumSegments = NumSegments;
	Parms.Spacing = Spacing;
	Parms.Size_0 = std::move(Size_0);
	Parms.FillColor = std::move(FillColor);
	Parms.FillType_0 = FillType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Separation_SetUseAbsoluteFillValue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAbsoluteFill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Separation_SetUseAbsoluteFillValue(bool bAbsoluteFill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Separation_SetUseAbsoluteFillValue");

	Params::ProgressBarLinear_C_Separation_SetUseAbsoluteFillValue Parms{};

	Parms.bAbsoluteFill = bAbsoluteFill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBackgroundBlur
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseBackgroundBlur                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BackgroundBlurStrength_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBackgroundBlur(bool UseBackgroundBlur, double BackgroundBlurStrength_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBackgroundBlur");

	Params::ProgressBarLinear_C_SetBackgroundBlur Parms{};

	Parms.UseBackgroundBlur = UseBackgroundBlur;
	Parms.BackgroundBlurStrength_0 = BackgroundBlurStrength_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBackgroundColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BackgroundColorMask                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESlateBrushTileType                     In_Brush_Tiling                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBackgroundColor(class UTexture2D* BackgroundColorMask, ESlateBrushTileType In_Brush_Tiling, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBackgroundColor");

	Params::ProgressBarLinear_C_SetBackgroundColor Parms{};

	Parms.BackgroundColorMask = BackgroundColorMask;
	Parms.In_Brush_Tiling = In_Brush_Tiling;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBackgroundColorMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Brush                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESlateBrushTileType                     In_Brush_Tiling                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBackgroundColorMask(class UTexture2D* Brush, ESlateBrushTileType In_Brush_Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBackgroundColorMask");

	Params::ProgressBarLinear_C_SetBackgroundColorMask Parms{};

	Parms.Brush = Brush;
	Parms.In_Brush_Tiling = In_Brush_Tiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBarFillType
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressBarFillType                    FillType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUseShader                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBarFillType(EProgressBarFillType FillType_0, bool bUseShader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBarFillType");

	Params::ProgressBarLinear_C_SetBarFillType Parms{};

	Parms.FillType_0 = FillType_0;
	Parms.bUseShader = bUseShader;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBlendMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBlendMask(class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBlendMask");

	Params::ProgressBarLinear_C_SetBlendMask Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBlurEnabledCentered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInIsEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBlurEnabledCentered(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBlurEnabledCentered");

	Params::ProgressBarLinear_C_SetBlurEnabledCentered Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBlurEnabledDefault
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInIsEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBlurEnabledDefault(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBlurEnabledDefault");

	Params::ProgressBarLinear_C_SetBlurEnabledDefault Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBlurStrengthCentered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStrength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBlurStrengthCentered(double InStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBlurStrengthCentered");

	Params::ProgressBarLinear_C_SetBlurStrengthCentered Parms{};

	Parms.InStrength = InStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetBlurStrengthDefault
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InStrength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetBlurStrengthDefault(double InStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetBlurStrengthDefault");

	Params::ProgressBarLinear_C_SetBlurStrengthDefault Parms{};

	Parms.InStrength = InStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetCenterSpacing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PaddingValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetCenterSpacing(double PaddingValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetCenterSpacing");

	Params::ProgressBarLinear_C_SetCenterSpacing Parms{};

	Parms.PaddingValue = PaddingValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetCenterSpacing_BG
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PaddingValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetCenterSpacing_BG(double PaddingValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetCenterSpacing_BG");

	Params::ProgressBarLinear_C_SetCenterSpacing_BG Parms{};

	Parms.PaddingValue = PaddingValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetCenterSpacing_Effects
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PaddingValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetCenterSpacing_Effects(double PaddingValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetCenterSpacing_Effects");

	Params::ProgressBarLinear_C_SetCenterSpacing_Effects Parms{};

	Parms.PaddingValue = PaddingValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetCurrentCustomMarqueePercent
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::SetCurrentCustomMarqueePercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetCurrentCustomMarqueePercent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_DrawAs
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateBrushDrawType                     Draw_As                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_DrawAs(ESlateBrushDrawType Draw_As)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_DrawAs");

	Params::ProgressBarLinear_C_SetDefaultMarquee_DrawAs Parms{};

	Parms.Draw_As = Draw_As;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_Image
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_Image(class UTexture2D* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_Image");

	Params::ProgressBarLinear_C_SetDefaultMarquee_Image Parms{};

	Parms.Image = Image;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_ImageSize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Image_Size                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_ImageSize(const struct FVector2D& Image_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_ImageSize");

	Params::ProgressBarLinear_C_SetDefaultMarquee_ImageSize Parms{};

	Parms.Image_Size = std::move(Image_Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_IsMarquee
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMarquee                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_IsMarquee(bool IsMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_IsMarquee");

	Params::ProgressBarLinear_C_SetDefaultMarquee_IsMarquee Parms{};

	Parms.IsMarquee = IsMarquee;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_Tiling
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateBrushTileType                     Tiling                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_Tiling(ESlateBrushTileType Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_Tiling");

	Params::ProgressBarLinear_C_SetDefaultMarquee_Tiling Parms{};

	Parms.Tiling = Tiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetDefaultMarquee_Tint
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Tint                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetDefaultMarquee_Tint(const struct FLinearColor& Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetDefaultMarquee_Tint");

	Params::ProgressBarLinear_C_SetDefaultMarquee_Tint Parms{};

	Parms.Tint = std::move(Tint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetFillColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GradientPower                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESlateBrushTileType                     Tiling                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetFillColor(const struct FLinearColor& Color, double GradientPower, ESlateBrushTileType Tiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetFillColor");

	Params::ProgressBarLinear_C_SetFillColor Parms{};

	Parms.Color = std::move(Color);
	Parms.GradientPower = GradientPower;
	Parms.Tiling = Tiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetFillColorMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetFillColorMask(class UObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetFillColorMask");

	Params::ProgressBarLinear_C_SetFillColorMask Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetGradientMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGradientTypes                          GradientType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetGradientMask(EGradientTypes GradientType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetGradientMask");

	Params::ProgressBarLinear_C_SetGradientMask Parms{};

	Parms.GradientType = GradientType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetLocalVariables
// (Public, BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::SetLocalVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetLocalVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetOverallBlendMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BlendMask_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetOverallBlendMask(class UTexture2D* BlendMask_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetOverallBlendMask");

	Params::ProgressBarLinear_C_SetOverallBlendMask Parms{};

	Parms.BlendMask_0 = BlendMask_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetPercentInterpolated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewPercent_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetPercentInterpolated(double NewPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetPercentInterpolated");

	Params::ProgressBarLinear_C_SetPercentInterpolated Parms{};

	Parms.NewPercent_0 = NewPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetProgressMethod
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EProgressMethod                         ProgressMethod_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetProgressMethod(EProgressMethod ProgressMethod_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetProgressMethod");

	Params::ProgressBarLinear_C_SetProgressMethod Parms{};

	Parms.ProgressMethod_0 = ProgressMethod_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetSize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetSize(const struct FVector2D& Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetSize");

	Params::ProgressBarLinear_C_SetSize Parms{};

	Parms.Size_0 = std::move(Size_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetSize_BGBrushLeftRight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetSize_BGBrushLeftRight(const struct FVector2D& Size_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetSize_BGBrushLeftRight");

	Params::ProgressBarLinear_C_SetSize_BGBrushLeftRight Parms{};

	Parms.Size_0 = std::move(Size_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetTargetFillColorNegative
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetTargetFillColorNegative(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetTargetFillColorNegative");

	Params::ProgressBarLinear_C_SetTargetFillColorNegative Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetTargetFillColorPositive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetTargetFillColorPositive(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetTargetFillColorPositive");

	Params::ProgressBarLinear_C_SetTargetFillColorPositive Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetTargetPercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetTargetPercent(bool UseTargetPercent_0, double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetTargetPercent");

	Params::ProgressBarLinear_C_SetTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;
	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.SetUseGradient
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGradient                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::SetUseGradient(bool UseGradient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "SetUseGradient");

	Params::ProgressBarLinear_C_SetUseGradient Parms{};

	Parms.UseGradient = UseGradient;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.StartTriggerProgressChangeColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::StartTriggerProgressChangeColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "StartTriggerProgressChangeColor");

	Params::ProgressBarLinear_C_StartTriggerProgressChangeColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.StopTriggerProgressChangeColor
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::StopTriggerProgressChangeColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "StopTriggerProgressChangeColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Tick");

	Params::ProgressBarLinear_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Transfer_CurrentPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Transfer_CurrentPercent(double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Transfer_CurrentPercent");

	Params::ProgressBarLinear_C_Transfer_CurrentPercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Transfer_TargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetPercent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Transfer_TargetPercent(double TargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Transfer_TargetPercent");

	Params::ProgressBarLinear_C_Transfer_TargetPercent Parms{};

	Parms.TargetPercent_0 = TargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.Transfer_UseTargetPercent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTargetPercent_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::Transfer_UseTargetPercent(bool UseTargetPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "Transfer_UseTargetPercent");

	Params::ProgressBarLinear_C_Transfer_UseTargetPercent Parms{};

	Parms.UseTargetPercent_0 = UseTargetPercent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdateCustomMarquee
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsMarquee                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarqueeMethod                          MarqueeMethod                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::UpdateCustomMarquee(bool bIsMarquee, EMarqueeMethod MarqueeMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdateCustomMarquee");

	Params::ProgressBarLinear_C_UpdateCustomMarquee Parms{};

	Parms.bIsMarquee = bIsMarquee;
	Parms.MarqueeMethod = MarqueeMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdateCustomMarqueeColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     InColorAndOpacity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::UpdateCustomMarqueeColor(const struct FLinearColor& InColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdateCustomMarqueeColor");

	Params::ProgressBarLinear_C_UpdateCustomMarqueeColor Parms{};

	Parms.InColorAndOpacity = std::move(InColorAndOpacity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdateCustomMarqueeMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarqueeMask                            MaskType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Mask                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESlateBrushTileType                     MaskTiling                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::UpdateCustomMarqueeMask(EMarqueeMask MaskType, class UTexture2D* Mask, ESlateBrushTileType MaskTiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdateCustomMarqueeMask");

	Params::ProgressBarLinear_C_UpdateCustomMarqueeMask Parms{};

	Parms.MaskType = MaskType;
	Parms.Mask = Mask;
	Parms.MaskTiling = MaskTiling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdateCustomMarqueeSpeed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::UpdateCustomMarqueeSpeed(double Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdateCustomMarqueeSpeed");

	Params::ProgressBarLinear_C_UpdateCustomMarqueeSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdateInterpolation
// (BlueprintCallable, BlueprintEvent)

void UProgressBarLinear_C::UpdateInterpolation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdateInterpolation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProgressBarLinear.ProgressBarLinear_C.UpdatePercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProgressBarLinear_C::UpdatePercent(double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProgressBarLinear_C", "UpdatePercent");

	Params::ProgressBarLinear_C_UpdatePercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}

}


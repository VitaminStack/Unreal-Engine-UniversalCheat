#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LockPickObject

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_LockpickDifficulty_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LockPickObject.BP_LockPickObject_C
// 0x0020 (0x02C0 - 0x02A0)
class ABP_LockPickObject_C : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	Enum_LockpickDifficulty                       Difficulty;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked_;                                         // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                LockpickRange;                                     // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_LockPickObject(int32 EntryPoint);
	void LockpickSuccessful();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LockPickObject_C">();
	}
	static class ABP_LockPickObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LockPickObject_C>();
	}
};
static_assert(alignof(ABP_LockPickObject_C) == 0x000008, "Wrong alignment on ABP_LockPickObject_C");
static_assert(sizeof(ABP_LockPickObject_C) == 0x0002C0, "Wrong size on ABP_LockPickObject_C");
static_assert(offsetof(ABP_LockPickObject_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_LockPickObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LockPickObject_C, Difficulty) == 0x0002A8, "Member 'ABP_LockPickObject_C::Difficulty' has a wrong offset!");
static_assert(offsetof(ABP_LockPickObject_C, IsLocked_) == 0x0002A9, "Member 'ABP_LockPickObject_C::IsLocked_' has a wrong offset!");
static_assert(offsetof(ABP_LockPickObject_C, LockpickRange) == 0x0002B0, "Member 'ABP_LockPickObject_C::LockpickRange' has a wrong offset!");

}


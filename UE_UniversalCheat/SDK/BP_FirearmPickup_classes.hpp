#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FirearmPickup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_SkeletalMeshPickup_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FirearmPickup.BP_FirearmPickup_C
// 0x0090 (0x0410 - 0x0380)
class ABP_FirearmPickup_C : public ABP_SkeletalMeshPickup_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FirearmPickup_C;                 // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_WeaponsPickupComponent_C*           BP_WeaponsPickupComponent;                         // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ResetRecoilTL_Reset_0A95F0FE40AECD2F428F87B705900F3B; // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ResetRecoilTL__Direction_0A95F0FE40AECD2F428F87B705900F3B; // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ResetRecoilTL;                                     // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilTL_Recoil_297C066B40C93F9CB632DC9EE7ECC8B0;  // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RecoilTL__Direction_297C066B40C93F9CB632DC9EE7ECC8B0; // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RecoilTL;                                          // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              PassiveSkillsComponent;                            // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FiringAutomatically_;                              // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ChamberContainer;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CurrentMag;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_AMainLocalAttachment_C*             PendingMag;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayingFX;                                         // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x3];                                      // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotDistance;                                      // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HipFire_;                                          // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FireReady;                                         // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x2];                                      // 0x03E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PlayerActiveWeapon;                                // 0x03E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        GPlayerMPComp;                                     // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentlyFiring_;                                  // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempPitch;                                         // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempYaw;                                           // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DamageMaterialInstance;                            // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& ActiveWeapons, bool FromFireFunction, bool* Result, class FName* BulletID);
	void CheckAttachments();
	void Client_HitUI(double Damage, const struct FLinearColor& Colour);
	void CriticalHit(double Damage, double* NewDamage, struct FLinearColor* FloatingDmgColour);
	void DamageMultiplier(bool Headshot_, double* Damage);
	void EffectiveDamage(double Damage, double* NewDamage);
	void Event_FireRate();
	void ExecuteUbergraph_BP_FirearmPickup(int32 EntryPoint);
	void FindAttachmentStats(const struct FGameplayTag& Stat, bool* Found, double* StatValue);
	void FindSpecificAttachmentStat(const struct FGameplayTag& Attachment, const struct FGameplayTag& Stat, bool* Found_, double* StatValue);
	void FindStat(const struct FGameplayTag& StatTag, bool* Found, float* MinValue, double* MaxValue);
	void FirearmTypeMultiplier(bool Headshot_, double* Multiplier);
	void FireBullet();
	void FireSurfaceHit(const struct FVector& ImpactPoint, class AActor* HitActor, const struct FRotator& Rotation, EPhysicalSurface Surface);
	void FireTrace(double Spread);
	void GetHorizontalRecoilStrength(double* Strength);
	void GetNewMagInfo(class UJSI_Slot_C* NewMag, double* Multiplier);
	void GetVerticalRecoilStrength(double* Strength);
	void Jig_AttachmentInstalled(const struct FGuid& MainUID, TArray<struct FS_RepAttachmentInfo>& Attachments, bool* Result, struct FGameplayTag* AttachmentType);
	void Jig_AttachmentRemoved(TArray<struct FS_RepAttachmentInfo>& Attachments, bool* Result, struct FGameplayTag* AttachmentType);
	void Jig_CanChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result);
	void Jig_CheckCanReload(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result, class UJSIContainer_C** ContainerMag, class UAnimMontage** ReloadMontage, bool* HasInternalMag, bool* CanChamber_, class UJSI_Slot_C** ReloadWith, class UAnimMontage** LoopReloadAnim);
	void Jig_ExecuteChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result, class UAnimMontage** ChamberMontage, double* Speed);
	void Jig_GetADSSocketLocation(struct FVector* SocketLoc, bool* SocketFound);
	void Jig_GetAttachmentActiveState(struct FGameplayTag* Result);
	void Jig_GetAttachmentArrayByType(const struct FGameplayTag& Type, TArray<class ABP_AMainLocalAttachment_C*>* Attachment, bool* Found);
	void Jig_GetAttachmentByType(const struct FGameplayTag& Type, class ABP_AMainLocalAttachment_C** Attachment, bool* Found);
	void Jig_GetAttachmentInfo(struct FGuid* UID, class UJigsawItem_DataAsset_C** AttachmentInfo);
	void Jig_GetAvailableAttachmentStates(struct FGameplayTagContainer* States);
	void Jig_GetEquipMontage(bool CanChamber_, class UAnimMontage** EquipMontage);
	void Jig_GetPendingMag(bool FindMagIfNoPending_, class ABP_AMainLocalAttachment_C** MagRef);
	void Jig_GetPrimitiveComponent(class UPrimitiveComponent** Comp);
	void Jig_OnAttachmentSnapInspector();
	void Jig_OnMontageNotify(class FName NotifyName);
	void Jig_SetAttachmentActiveState(const struct FGameplayTag& Value);
	void Jig_SetAttachmentInfo(const struct FGuid& UID, class UJigsawItem_DataAsset_C* AttachmentInfo, bool* Result);
	void Jig_SetAttachmentState(const TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool PreExecuteClientSide_);
	void Jig_SetPendingMag(class ABP_AMainLocalAttachment_C* MagRef, class UJigsawItem_DataAsset_C* DA, bool* Result);
	void Jig_StartReloading(class UActorComponent* MPCom, class UJSIContainer_C* MagContainer, class UJSI_Slot_C* WithMag, bool* Result);
	void Jig_ToggleAttachmentActiveState();
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void Local_CheckCanReload(class UActorComponent* PlayerComp, const struct FGameplayTag& ActiveSlot, bool* Result, class UJSIContainer_C** ContainerMag, bool* CanChamber_, class UJSI_Slot_C** ReloadWith);
	void Local_CheckCanReloadInternal(class UActorComponent* PlayerComp, const struct FGameplayTag& ActiveSlot, bool* Result, class UJSIContainer_C** ContainerMag, bool* CanChamber, class UJSI_Slot_C** ReloadWith);
	void Local_StartShooting(class UBP_JigMultiplayer_C* PlayerMPComp, const struct FGameplayTag& ActiveWeapon, bool HipFire__0);
	void Local_StopShooting(bool DontSendRPC_);
	void LocalStartReload(class UActorComponent* PlayerComp, class UJSIContainer_C* ContainerMag, class UJSI_Slot_C* WithMag, bool* Result);
	void LocalStartReloadInternal(class UActorComponent* PlayerComp, class UJSIContainer_C* ContainerMag, bool* Result);
	void MC_SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation);
	void MC_WeaponEffects(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName);
	void MC_WeaponShot(bool Started_);
	void MuzzleDurability(bool* AttachmentFound_);
	void MuzzleEffects();
	void OnAttachmentsUpdated();
	void OnBlendOut_336AF8914848A4799421D89C590F8176(class FName NotifyName);
	void OnCompleted_336AF8914848A4799421D89C590F8176(class FName NotifyName);
	void OnInterrupted_336AF8914848A4799421D89C590F8176(class FName NotifyName);
	void OnNotifyBegin_336AF8914848A4799421D89C590F8176(class FName NotifyName);
	void OnNotifyEnd_336AF8914848A4799421D89C590F8176(class FName NotifyName);
	void ProjectileTraceFromCamera(struct FTransform* Transform);
	void RecoilTL__FinishedFunc();
	void RecoilTL__UpdateFunc();
	void ReduceDurability(bool* Reduced_);
	void ResetRecoilTL__FinishedFunc();
	void ResetRecoilTL__UpdateFunc();
	void SERVER_DamageEvent(bool Headshot, class AActor* DamagedActor);
	void SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation);
	void StartRecoil();
	void Svr_SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation);
	void Svr_WeaponEffects(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName);
	void Svr_WeaponShot(bool Started_);
	void Trace_BodyImpact(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor);
	void Trace_Headshot(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor);
	void Trace_Impact(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor);
	void Trace_ImpactBulletHole(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor);
	void UpdatePlayerPitch_Yaw(double Pitch, double Yaw);
	void UpdateStat(const struct FGameplayTag& StatTag, double NewStatValue, bool* Updated, double* StatValue);
	void WeaponRecoilValues(double* Vertical, double* Horizontal);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FirearmPickup_C">();
	}
	static class ABP_FirearmPickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FirearmPickup_C>();
	}
};
static_assert(alignof(ABP_FirearmPickup_C) == 0x000008, "Wrong alignment on ABP_FirearmPickup_C");
static_assert(sizeof(ABP_FirearmPickup_C) == 0x000410, "Wrong size on ABP_FirearmPickup_C");
static_assert(offsetof(ABP_FirearmPickup_C, UberGraphFrame_BP_FirearmPickup_C) == 0x000380, "Member 'ABP_FirearmPickup_C::UberGraphFrame_BP_FirearmPickup_C' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, BP_WeaponsPickupComponent) == 0x000388, "Member 'ABP_FirearmPickup_C::BP_WeaponsPickupComponent' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, ResetRecoilTL_Reset_0A95F0FE40AECD2F428F87B705900F3B) == 0x000390, "Member 'ABP_FirearmPickup_C::ResetRecoilTL_Reset_0A95F0FE40AECD2F428F87B705900F3B' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, ResetRecoilTL__Direction_0A95F0FE40AECD2F428F87B705900F3B) == 0x000394, "Member 'ABP_FirearmPickup_C::ResetRecoilTL__Direction_0A95F0FE40AECD2F428F87B705900F3B' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, ResetRecoilTL) == 0x000398, "Member 'ABP_FirearmPickup_C::ResetRecoilTL' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, RecoilTL_Recoil_297C066B40C93F9CB632DC9EE7ECC8B0) == 0x0003A0, "Member 'ABP_FirearmPickup_C::RecoilTL_Recoil_297C066B40C93F9CB632DC9EE7ECC8B0' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, RecoilTL__Direction_297C066B40C93F9CB632DC9EE7ECC8B0) == 0x0003A4, "Member 'ABP_FirearmPickup_C::RecoilTL__Direction_297C066B40C93F9CB632DC9EE7ECC8B0' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, RecoilTL) == 0x0003A8, "Member 'ABP_FirearmPickup_C::RecoilTL' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, PassiveSkillsComponent) == 0x0003B0, "Member 'ABP_FirearmPickup_C::PassiveSkillsComponent' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, FiringAutomatically_) == 0x0003B8, "Member 'ABP_FirearmPickup_C::FiringAutomatically_' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, ChamberContainer) == 0x0003C0, "Member 'ABP_FirearmPickup_C::ChamberContainer' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, CurrentMag) == 0x0003C8, "Member 'ABP_FirearmPickup_C::CurrentMag' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, PendingMag) == 0x0003D0, "Member 'ABP_FirearmPickup_C::PendingMag' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, PlayingFX) == 0x0003D8, "Member 'ABP_FirearmPickup_C::PlayingFX' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, ShotDistance) == 0x0003DC, "Member 'ABP_FirearmPickup_C::ShotDistance' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, HipFire_) == 0x0003E0, "Member 'ABP_FirearmPickup_C::HipFire_' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, FireReady) == 0x0003E1, "Member 'ABP_FirearmPickup_C::FireReady' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, PlayerActiveWeapon) == 0x0003E4, "Member 'ABP_FirearmPickup_C::PlayerActiveWeapon' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, GPlayerMPComp) == 0x0003F0, "Member 'ABP_FirearmPickup_C::GPlayerMPComp' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, CurrentlyFiring_) == 0x0003F8, "Member 'ABP_FirearmPickup_C::CurrentlyFiring_' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, TempPitch) == 0x0003FC, "Member 'ABP_FirearmPickup_C::TempPitch' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, TempYaw) == 0x000400, "Member 'ABP_FirearmPickup_C::TempYaw' has a wrong offset!");
static_assert(offsetof(ABP_FirearmPickup_C, DamageMaterialInstance) == 0x000408, "Member 'ABP_FirearmPickup_C::DamageMaterialInstance' has a wrong offset!");

}


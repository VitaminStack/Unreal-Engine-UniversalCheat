#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TechTree

#include "Basic.hpp"

#include "TechTree_structs.hpp"


namespace SDK::Params
{

// Function TechTree.TechnologyTree.GetTechAssetName
// 0x0010 (0x0010 - 0x0000)
struct TechnologyTree_GetTechAssetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechnologyTree_GetTechAssetName) == 0x000008, "Wrong alignment on TechnologyTree_GetTechAssetName");
static_assert(sizeof(TechnologyTree_GetTechAssetName) == 0x000010, "Wrong size on TechnologyTree_GetTechAssetName");
static_assert(offsetof(TechnologyTree_GetTechAssetName, ReturnValue) == 0x000000, "Member 'TechnologyTree_GetTechAssetName::ReturnValue' has a wrong offset!");

// Function TechTree.TechnologyTree.HasUnlockedParents
// 0x0010 (0x0010 - 0x0000)
struct TechnologyTree_HasUnlockedParents final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechnologyTree_HasUnlockedParents) == 0x000008, "Wrong alignment on TechnologyTree_HasUnlockedParents");
static_assert(sizeof(TechnologyTree_HasUnlockedParents) == 0x000010, "Wrong size on TechnologyTree_HasUnlockedParents");
static_assert(offsetof(TechnologyTree_HasUnlockedParents, Technology) == 0x000000, "Member 'TechnologyTree_HasUnlockedParents::Technology' has a wrong offset!");
static_assert(offsetof(TechnologyTree_HasUnlockedParents, ReturnValue) == 0x000008, "Member 'TechnologyTree_HasUnlockedParents::ReturnValue' has a wrong offset!");

// Function TechTree.TechnologyTree.IsTechnologyUnlocked
// 0x0010 (0x0010 - 0x0000)
struct TechnologyTree_IsTechnologyUnlocked final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechnologyTree_IsTechnologyUnlocked) == 0x000008, "Wrong alignment on TechnologyTree_IsTechnologyUnlocked");
static_assert(sizeof(TechnologyTree_IsTechnologyUnlocked) == 0x000010, "Wrong size on TechnologyTree_IsTechnologyUnlocked");
static_assert(offsetof(TechnologyTree_IsTechnologyUnlocked, Technology) == 0x000000, "Member 'TechnologyTree_IsTechnologyUnlocked::Technology' has a wrong offset!");
static_assert(offsetof(TechnologyTree_IsTechnologyUnlocked, ReturnValue) == 0x000008, "Member 'TechnologyTree_IsTechnologyUnlocked::ReturnValue' has a wrong offset!");

// Function TechTree.TechnologyTree.FilterConnections
// 0x0040 (0x0040 - 0x0000)
struct TechnologyTree_FilterConnections final
{
public:
	TArray<struct FTechNodeLink>                  ConnectionsIn;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UTechnologyAsset*>               IgnoredParentTechnologies;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UTechnologyAsset*>               IgnoredChildTechnologies;                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTechNodeLink>                  ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechnologyTree_FilterConnections) == 0x000008, "Wrong alignment on TechnologyTree_FilterConnections");
static_assert(sizeof(TechnologyTree_FilterConnections) == 0x000040, "Wrong size on TechnologyTree_FilterConnections");
static_assert(offsetof(TechnologyTree_FilterConnections, ConnectionsIn) == 0x000000, "Member 'TechnologyTree_FilterConnections::ConnectionsIn' has a wrong offset!");
static_assert(offsetof(TechnologyTree_FilterConnections, IgnoredParentTechnologies) == 0x000010, "Member 'TechnologyTree_FilterConnections::IgnoredParentTechnologies' has a wrong offset!");
static_assert(offsetof(TechnologyTree_FilterConnections, IgnoredChildTechnologies) == 0x000020, "Member 'TechnologyTree_FilterConnections::IgnoredChildTechnologies' has a wrong offset!");
static_assert(offsetof(TechnologyTree_FilterConnections, ReturnValue) == 0x000030, "Member 'TechnologyTree_FilterConnections::ReturnValue' has a wrong offset!");

// Function TechTree.TechnologyTree.GetConnections
// 0x0010 (0x0010 - 0x0000)
struct TechnologyTree_GetConnections final
{
public:
	TArray<struct FTechNodeLink>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechnologyTree_GetConnections) == 0x000008, "Wrong alignment on TechnologyTree_GetConnections");
static_assert(sizeof(TechnologyTree_GetConnections) == 0x000010, "Wrong size on TechnologyTree_GetConnections");
static_assert(offsetof(TechnologyTree_GetConnections, ReturnValue) == 0x000000, "Member 'TechnologyTree_GetConnections::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.AssignTechTree
// 0x0010 (0x0010 - 0x0000)
struct TechTreeManager_AssignTechTree final
{
public:
	class UTechnologyTree*                        TechTree;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTechTreeWidget*                        TechTreeWidget_0;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_AssignTechTree) == 0x000008, "Wrong alignment on TechTreeManager_AssignTechTree");
static_assert(sizeof(TechTreeManager_AssignTechTree) == 0x000010, "Wrong size on TechTreeManager_AssignTechTree");
static_assert(offsetof(TechTreeManager_AssignTechTree, TechTree) == 0x000000, "Member 'TechTreeManager_AssignTechTree::TechTree' has a wrong offset!");
static_assert(offsetof(TechTreeManager_AssignTechTree, TechTreeWidget_0) == 0x000008, "Member 'TechTreeManager_AssignTechTree::TechTreeWidget_0' has a wrong offset!");

// Function TechTree.TechTreeManager.GetAssignedTechTree
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_GetAssignedTechTree final
{
public:
	class UTechnologyTree*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_GetAssignedTechTree) == 0x000008, "Wrong alignment on TechTreeManager_GetAssignedTechTree");
static_assert(sizeof(TechTreeManager_GetAssignedTechTree) == 0x000008, "Wrong size on TechTreeManager_GetAssignedTechTree");
static_assert(offsetof(TechTreeManager_GetAssignedTechTree, ReturnValue) == 0x000000, "Member 'TechTreeManager_GetAssignedTechTree::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.GetNodeFromTechAsset
// 0x0010 (0x0010 - 0x0000)
struct TechTreeManager_GetNodeFromTechAsset final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTTTechNode*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_GetNodeFromTechAsset) == 0x000008, "Wrong alignment on TechTreeManager_GetNodeFromTechAsset");
static_assert(sizeof(TechTreeManager_GetNodeFromTechAsset) == 0x000010, "Wrong size on TechTreeManager_GetNodeFromTechAsset");
static_assert(offsetof(TechTreeManager_GetNodeFromTechAsset, Technology) == 0x000000, "Member 'TechTreeManager_GetNodeFromTechAsset::Technology' has a wrong offset!");
static_assert(offsetof(TechTreeManager_GetNodeFromTechAsset, ReturnValue) == 0x000008, "Member 'TechTreeManager_GetNodeFromTechAsset::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.GetNumberTreesAssigned
// 0x0004 (0x0004 - 0x0000)
struct TechTreeManager_GetNumberTreesAssigned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_GetNumberTreesAssigned) == 0x000004, "Wrong alignment on TechTreeManager_GetNumberTreesAssigned");
static_assert(sizeof(TechTreeManager_GetNumberTreesAssigned) == 0x000004, "Wrong size on TechTreeManager_GetNumberTreesAssigned");
static_assert(offsetof(TechTreeManager_GetNumberTreesAssigned, ReturnValue) == 0x000000, "Member 'TechTreeManager_GetNumberTreesAssigned::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.GetSavegameTechObject
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_GetSavegameTechObject final
{
public:
	class USaveGame*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_GetSavegameTechObject) == 0x000008, "Wrong alignment on TechTreeManager_GetSavegameTechObject");
static_assert(sizeof(TechTreeManager_GetSavegameTechObject) == 0x000008, "Wrong size on TechTreeManager_GetSavegameTechObject");
static_assert(offsetof(TechTreeManager_GetSavegameTechObject, ReturnValue) == 0x000000, "Member 'TechTreeManager_GetSavegameTechObject::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.GetTechTreeWidget
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_GetTechTreeWidget final
{
public:
	class UTechTreeWidget*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_GetTechTreeWidget) == 0x000008, "Wrong alignment on TechTreeManager_GetTechTreeWidget");
static_assert(sizeof(TechTreeManager_GetTechTreeWidget) == 0x000008, "Wrong size on TechTreeManager_GetTechTreeWidget");
static_assert(offsetof(TechTreeManager_GetTechTreeWidget, ReturnValue) == 0x000000, "Member 'TechTreeManager_GetTechTreeWidget::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.HandleTechnologyStateChanged
// 0x0010 (0x0010 - 0x0000)
struct TechTreeManager_HandleTechnologyStateChanged final
{
public:
	class UTTTechNode*                            TechNode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_HandleTechnologyStateChanged) == 0x000008, "Wrong alignment on TechTreeManager_HandleTechnologyStateChanged");
static_assert(sizeof(TechTreeManager_HandleTechnologyStateChanged) == 0x000010, "Wrong size on TechTreeManager_HandleTechnologyStateChanged");
static_assert(offsetof(TechTreeManager_HandleTechnologyStateChanged, TechNode) == 0x000000, "Member 'TechTreeManager_HandleTechnologyStateChanged::TechNode' has a wrong offset!");
static_assert(offsetof(TechTreeManager_HandleTechnologyStateChanged, IsUnlocked) == 0x000008, "Member 'TechTreeManager_HandleTechnologyStateChanged::IsUnlocked' has a wrong offset!");

// Function TechTree.TechTreeManager.HasUnlockedParents
// 0x0010 (0x0010 - 0x0000)
struct TechTreeManager_HasUnlockedParents final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_HasUnlockedParents) == 0x000008, "Wrong alignment on TechTreeManager_HasUnlockedParents");
static_assert(sizeof(TechTreeManager_HasUnlockedParents) == 0x000010, "Wrong size on TechTreeManager_HasUnlockedParents");
static_assert(offsetof(TechTreeManager_HasUnlockedParents, Technology) == 0x000000, "Member 'TechTreeManager_HasUnlockedParents::Technology' has a wrong offset!");
static_assert(offsetof(TechTreeManager_HasUnlockedParents, ReturnValue) == 0x000008, "Member 'TechTreeManager_HasUnlockedParents::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.IsChildTechnology
// 0x0018 (0x0018 - 0x0000)
struct TechTreeManager_IsChildTechnology final
{
public:
	class UTTTechNode*                            ParentNode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTechnologyAsset*                       ChildNodeTechnology;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_IsChildTechnology) == 0x000008, "Wrong alignment on TechTreeManager_IsChildTechnology");
static_assert(sizeof(TechTreeManager_IsChildTechnology) == 0x000018, "Wrong size on TechTreeManager_IsChildTechnology");
static_assert(offsetof(TechTreeManager_IsChildTechnology, ParentNode) == 0x000000, "Member 'TechTreeManager_IsChildTechnology::ParentNode' has a wrong offset!");
static_assert(offsetof(TechTreeManager_IsChildTechnology, ChildNodeTechnology) == 0x000008, "Member 'TechTreeManager_IsChildTechnology::ChildNodeTechnology' has a wrong offset!");
static_assert(offsetof(TechTreeManager_IsChildTechnology, ReturnValue) == 0x000010, "Member 'TechTreeManager_IsChildTechnology::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.IsTechnologyUnlocked
// 0x0010 (0x0010 - 0x0000)
struct TechTreeManager_IsTechnologyUnlocked final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_IsTechnologyUnlocked) == 0x000008, "Wrong alignment on TechTreeManager_IsTechnologyUnlocked");
static_assert(sizeof(TechTreeManager_IsTechnologyUnlocked) == 0x000010, "Wrong size on TechTreeManager_IsTechnologyUnlocked");
static_assert(offsetof(TechTreeManager_IsTechnologyUnlocked, Technology) == 0x000000, "Member 'TechTreeManager_IsTechnologyUnlocked::Technology' has a wrong offset!");
static_assert(offsetof(TechTreeManager_IsTechnologyUnlocked, ReturnValue) == 0x000008, "Member 'TechTreeManager_IsTechnologyUnlocked::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeManager.LoadTechFromObject
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_LoadTechFromObject final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_LoadTechFromObject) == 0x000008, "Wrong alignment on TechTreeManager_LoadTechFromObject");
static_assert(sizeof(TechTreeManager_LoadTechFromObject) == 0x000008, "Wrong size on TechTreeManager_LoadTechFromObject");
static_assert(offsetof(TechTreeManager_LoadTechFromObject, SaveGameObject) == 0x000000, "Member 'TechTreeManager_LoadTechFromObject::SaveGameObject' has a wrong offset!");

// Function TechTree.TechTreeManager.LoadTechStateFromSlot
// 0x0018 (0x0018 - 0x0000)
struct TechTreeManager_LoadTechStateFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_LoadTechStateFromSlot) == 0x000008, "Wrong alignment on TechTreeManager_LoadTechStateFromSlot");
static_assert(sizeof(TechTreeManager_LoadTechStateFromSlot) == 0x000018, "Wrong size on TechTreeManager_LoadTechStateFromSlot");
static_assert(offsetof(TechTreeManager_LoadTechStateFromSlot, SlotName) == 0x000000, "Member 'TechTreeManager_LoadTechStateFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TechTreeManager_LoadTechStateFromSlot, UserIndex) == 0x000010, "Member 'TechTreeManager_LoadTechStateFromSlot::UserIndex' has a wrong offset!");

// Function TechTree.TechTreeManager.LockTechnology
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_LockTechnology final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_LockTechnology) == 0x000008, "Wrong alignment on TechTreeManager_LockTechnology");
static_assert(sizeof(TechTreeManager_LockTechnology) == 0x000008, "Wrong size on TechTreeManager_LockTechnology");
static_assert(offsetof(TechTreeManager_LockTechnology, Technology) == 0x000000, "Member 'TechTreeManager_LockTechnology::Technology' has a wrong offset!");

// Function TechTree.TechTreeManager.SaveTechStateFromSlot
// 0x0018 (0x0018 - 0x0000)
struct TechTreeManager_SaveTechStateFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TechTreeManager_SaveTechStateFromSlot) == 0x000008, "Wrong alignment on TechTreeManager_SaveTechStateFromSlot");
static_assert(sizeof(TechTreeManager_SaveTechStateFromSlot) == 0x000018, "Wrong size on TechTreeManager_SaveTechStateFromSlot");
static_assert(offsetof(TechTreeManager_SaveTechStateFromSlot, SlotName) == 0x000000, "Member 'TechTreeManager_SaveTechStateFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TechTreeManager_SaveTechStateFromSlot, UserIndex) == 0x000010, "Member 'TechTreeManager_SaveTechStateFromSlot::UserIndex' has a wrong offset!");

// Function TechTree.TechTreeManager.SaveTechToObject
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_SaveTechToObject final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_SaveTechToObject) == 0x000008, "Wrong alignment on TechTreeManager_SaveTechToObject");
static_assert(sizeof(TechTreeManager_SaveTechToObject) == 0x000008, "Wrong size on TechTreeManager_SaveTechToObject");
static_assert(offsetof(TechTreeManager_SaveTechToObject, SaveGameObject) == 0x000000, "Member 'TechTreeManager_SaveTechToObject::SaveGameObject' has a wrong offset!");

// Function TechTree.TechTreeManager.SelectTechTree
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_SelectTechTree final
{
public:
	class UTechnologyTree*                        TechTree;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_SelectTechTree) == 0x000008, "Wrong alignment on TechTreeManager_SelectTechTree");
static_assert(sizeof(TechTreeManager_SelectTechTree) == 0x000008, "Wrong size on TechTreeManager_SelectTechTree");
static_assert(offsetof(TechTreeManager_SelectTechTree, TechTree) == 0x000000, "Member 'TechTreeManager_SelectTechTree::TechTree' has a wrong offset!");

// Function TechTree.TechTreeManager.UnlockTechnology
// 0x0008 (0x0008 - 0x0000)
struct TechTreeManager_UnlockTechnology final
{
public:
	class UTechnologyAsset*                       Technology;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeManager_UnlockTechnology) == 0x000008, "Wrong alignment on TechTreeManager_UnlockTechnology");
static_assert(sizeof(TechTreeManager_UnlockTechnology) == 0x000008, "Wrong size on TechTreeManager_UnlockTechnology");
static_assert(offsetof(TechTreeManager_UnlockTechnology, Technology) == 0x000000, "Member 'TechTreeManager_UnlockTechnology::Technology' has a wrong offset!");

// Function TechTree.TechTreeWidget.GetArrowWidgets
// 0x0010 (0x0010 - 0x0000)
struct TechTreeWidget_GetArrowWidgets final
{
public:
	TArray<class UTechNodeArrowWidget*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeWidget_GetArrowWidgets) == 0x000008, "Wrong alignment on TechTreeWidget_GetArrowWidgets");
static_assert(sizeof(TechTreeWidget_GetArrowWidgets) == 0x000010, "Wrong size on TechTreeWidget_GetArrowWidgets");
static_assert(offsetof(TechTreeWidget_GetArrowWidgets, ReturnValue) == 0x000000, "Member 'TechTreeWidget_GetArrowWidgets::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeWidget.GetTechNode
// 0x0010 (0x0010 - 0x0000)
struct TechTreeWidget_GetTechNode final
{
public:
	class UTechnologyAsset*                       TechnologyAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTechNodeWidget*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeWidget_GetTechNode) == 0x000008, "Wrong alignment on TechTreeWidget_GetTechNode");
static_assert(sizeof(TechTreeWidget_GetTechNode) == 0x000010, "Wrong size on TechTreeWidget_GetTechNode");
static_assert(offsetof(TechTreeWidget_GetTechNode, TechnologyAsset) == 0x000000, "Member 'TechTreeWidget_GetTechNode::TechnologyAsset' has a wrong offset!");
static_assert(offsetof(TechTreeWidget_GetTechNode, ReturnValue) == 0x000008, "Member 'TechTreeWidget_GetTechNode::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeWidget.GetTechNodeWidgets
// 0x0010 (0x0010 - 0x0000)
struct TechTreeWidget_GetTechNodeWidgets final
{
public:
	TArray<class UTechNodeWidget*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeWidget_GetTechNodeWidgets) == 0x000008, "Wrong alignment on TechTreeWidget_GetTechNodeWidgets");
static_assert(sizeof(TechTreeWidget_GetTechNodeWidgets) == 0x000010, "Wrong size on TechTreeWidget_GetTechNodeWidgets");
static_assert(offsetof(TechTreeWidget_GetTechNodeWidgets, ReturnValue) == 0x000000, "Member 'TechTreeWidget_GetTechNodeWidgets::ReturnValue' has a wrong offset!");

// Function TechTree.TechTreeWidget.UpdateConnections
// 0x0010 (0x0010 - 0x0000)
struct TechTreeWidget_UpdateConnections final
{
public:
	TArray<struct FTechNodeLink>                  Connections;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TechTreeWidget_UpdateConnections) == 0x000008, "Wrong alignment on TechTreeWidget_UpdateConnections");
static_assert(sizeof(TechTreeWidget_UpdateConnections) == 0x000010, "Wrong size on TechTreeWidget_UpdateConnections");
static_assert(offsetof(TechTreeWidget_UpdateConnections, Connections) == 0x000000, "Member 'TechTreeWidget_UpdateConnections::Connections' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MedicalComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MedicalComponent.MedicalComponent_C
// 0x0058 (0x0110 - 0x00B8)
class UMedicalComponent_C final : public UBaseComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MedicalComponent_C;                 // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Bleed_;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          HeavyBleed_;                                       // 0x00C1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenBone_;                                       // 0x00C2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerCharacter_C*                  Character;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Health;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealth;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BleedTimer;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HeavyBleedTimer;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BleedStopTimer;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HeavyBleedStopTimer;                               // 0x00F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BrokenBoneStopTimer;                               // 0x0100(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RadiationSickness_;                                // 0x0108(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void Bleed();
	void Client_CreateMedUI(class FName MedicalEffect, bool Adding_);
	void Client_RemoveEffect(TArray<class FName>& Array);
	void ComponentLoaded();
	void ComponentPreSave();
	void CreateNotificationUI(const class FText& Text, class UTexture2D* Image, const struct FLinearColor& Color, double UI_Delay);
	void Event_TimeToStopBleed();
	void Event_TimeToStopBrokenBone();
	void Event_TimeToStopHeavyBleed();
	void ExecuteUbergraph_MedicalComponent(int32 EntryPoint);
	void GetInGameUI(class UBP_Ingame_C** UI);
	void GetPlayerRef(class ABP_PlayerCharacter_C** Player_0);
	void HeavyBleed();
	void IncreaseHealth(double Amount);
	void IsBurning_(bool* Burning_);
	void IsGPSEquipped_(bool* GPS_);
	void IsPlayerInVehicle_(bool* InVehicle);
	void LoadComponent();
	void OnRep_Bleed_();
	void OnRep_BrokenBone_();
	void OnRep_HeavyBleed_();
	void OnRep_RadiationSickness_();
	void PlayerDeath();
	void PlayMontage(class UAnimMontage* Montage, double Play_Rate);
	void SendHealthToClient(double NewHealth);
	void SendHungerToClient(double NewHunger);
	void SendOxygenToClient(double NewOxygen);
	void SendRadiationToClient(double NewRadiation);
	void SendStaminaToClient(double NewStamina);
	void SendThirstToClient(double NewThirst);
	void SetBurning(bool Burning, double Damage);
	void SetPostProcessHealth(bool Damage);
	void SetTraceToWorld(bool Set_);
	void StopMontage(class UAnimMontage* Montage);
	void Svr_Damage(class AActor* DamagedActor, float BaseDamage);
	void Time_Bleed();
	void Time_BrokenBone();
	void Time_HeavyBleed();
	void UpdatePlayerSpeed(double NewSpeed);
	void VehicleInteraction(bool Enter_, const class ABP_VehicleMaster_C*& VehicleRef);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MedicalComponent_C">();
	}
	static class UMedicalComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMedicalComponent_C>();
	}
};
static_assert(alignof(UMedicalComponent_C) == 0x000008, "Wrong alignment on UMedicalComponent_C");
static_assert(sizeof(UMedicalComponent_C) == 0x000110, "Wrong size on UMedicalComponent_C");
static_assert(offsetof(UMedicalComponent_C, UberGraphFrame_MedicalComponent_C) == 0x0000B8, "Member 'UMedicalComponent_C::UberGraphFrame_MedicalComponent_C' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, Bleed_) == 0x0000C0, "Member 'UMedicalComponent_C::Bleed_' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, HeavyBleed_) == 0x0000C1, "Member 'UMedicalComponent_C::HeavyBleed_' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, BrokenBone_) == 0x0000C2, "Member 'UMedicalComponent_C::BrokenBone_' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, Character) == 0x0000C8, "Member 'UMedicalComponent_C::Character' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, Health) == 0x0000D0, "Member 'UMedicalComponent_C::Health' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, MaxHealth) == 0x0000D8, "Member 'UMedicalComponent_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, BleedTimer) == 0x0000E0, "Member 'UMedicalComponent_C::BleedTimer' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, HeavyBleedTimer) == 0x0000E8, "Member 'UMedicalComponent_C::HeavyBleedTimer' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, BleedStopTimer) == 0x0000F0, "Member 'UMedicalComponent_C::BleedStopTimer' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, HeavyBleedStopTimer) == 0x0000F8, "Member 'UMedicalComponent_C::HeavyBleedStopTimer' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, BrokenBoneStopTimer) == 0x000100, "Member 'UMedicalComponent_C::BrokenBoneStopTimer' has a wrong offset!");
static_assert(offsetof(UMedicalComponent_C, RadiationSickness_) == 0x000108, "Member 'UMedicalComponent_C::RadiationSickness_' has a wrong offset!");

}


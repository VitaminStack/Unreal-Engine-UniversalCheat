#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterTrader

#include "Basic.hpp"

#include "AIOptimizer_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_JigPayload_structs.hpp"
#include "S_AttachedHoldables_structs.hpp"
#include "RepItemInfo_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK::Params
{

// Function BP_MasterTrader.BP_MasterTrader_C.SetWeapons
// 0x0058 (0x0058 - 0x0000)
struct BP_MasterTrader_C_SetWeapons final
{
public:
	int32                                         RandomRanged;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Random_OutItem;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Random_OutItem_1;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Random_OutItem_2;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_2;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Random_OutItem_3;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_3;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetWeapons) == 0x000008, "Wrong alignment on BP_MasterTrader_C_SetWeapons");
static_assert(sizeof(BP_MasterTrader_C_SetWeapons) == 0x000058, "Wrong size on BP_MasterTrader_C_SetWeapons");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, RandomRanged) == 0x000000, "Member 'BP_MasterTrader_C_SetWeapons::RandomRanged' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutItem) == 0x000008, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutIndex) == 0x000010, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutItem_1) == 0x000018, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutItem_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutIndex_1) == 0x000020, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutIndex_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutItem_2) == 0x000038, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutItem_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutIndex_2) == 0x000040, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutIndex_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutItem_3) == 0x000048, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutItem_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetWeapons, CallFunc_Array_Random_OutIndex_3) == 0x000050, "Member 'BP_MasterTrader_C_SetWeapons::CallFunc_Array_Random_OutIndex_3' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.SetPickupCount
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_SetPickupCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetPickupCount) == 0x000004, "Wrong alignment on BP_MasterTrader_C_SetPickupCount");
static_assert(sizeof(BP_MasterTrader_C_SetPickupCount) == 0x000008, "Wrong size on BP_MasterTrader_C_SetPickupCount");
static_assert(offsetof(BP_MasterTrader_C_SetPickupCount, NewCount) == 0x000000, "Member 'BP_MasterTrader_C_SetPickupCount::NewCount' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetPickupCount, Result) == 0x000004, "Member 'BP_MasterTrader_C_SetPickupCount::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.SetMeshAndMaterial
// 0x0230 (0x0230 - 0x0000)
struct BP_MasterTrader_C_SetMeshAndMaterial final
{
public:
	int32                                         BackpackMap;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_11;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_12;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     CallFunc_Map_Values_Values;                        // 0x0070(0x0010)(ReferenceParm)
	TArray<class UStaticMesh*>                    CallFunc_Map_Keys_Keys;                            // 0x0080(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Random_OutItem;                     // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Array_Random_OutItem_1;                   // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_1;                  // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          CallFunc_Array_Random_OutItem_2;                   // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_2;                  // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetMeshAndMaterial) == 0x000010, "Wrong alignment on BP_MasterTrader_C_SetMeshAndMaterial");
static_assert(sizeof(BP_MasterTrader_C_SetMeshAndMaterial) == 0x000230, "Wrong size on BP_MasterTrader_C_SetMeshAndMaterial");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, BackpackMap) == 0x000000, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::BackpackMap' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_int_Variable) == 0x000004, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable) == 0x000008, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_1) == 0x000010, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_2) == 0x000018, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_3) == 0x000020, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_4) == 0x000028, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_5) == 0x000030, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_6) == 0x000038, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_7) == 0x000040, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_8) == 0x000048, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_9) == 0x000050, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_10) == 0x000058, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_11) == 0x000060, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, Temp_object_Variable_12) == 0x000068, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Map_Values_Values) == 0x000070, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Map_Keys_Keys) == 0x000080, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000F8, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue) == 0x0001E0, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Length_ReturnValue) == 0x0001E4, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0001E8, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001EC, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x0001F0, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, K2Node_Select_Default) == 0x0001F8, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem) == 0x000200, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex) == 0x000208, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00020C, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem_1) == 0x000210, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex_1) == 0x000218, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue_2) == 0x00021C, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem_2) == 0x000220, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex_2) == 0x000228, "Member 'BP_MasterTrader_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex_2' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.SetInteractOption
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_SetInteractOption final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetInteractOption) == 0x000004, "Wrong alignment on BP_MasterTrader_C_SetInteractOption");
static_assert(sizeof(BP_MasterTrader_C_SetInteractOption) == 0x000008, "Wrong size on BP_MasterTrader_C_SetInteractOption");
static_assert(offsetof(BP_MasterTrader_C_SetInteractOption, Option) == 0x000000, "Member 'BP_MasterTrader_C_SetInteractOption::Option' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.SetInteractDistance
// 0x0020 (0x0020 - 0x0000)
struct BP_MasterTrader_C_SetInteractDistance final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetInteractDistance) == 0x000008, "Wrong alignment on BP_MasterTrader_C_SetInteractDistance");
static_assert(sizeof(BP_MasterTrader_C_SetInteractDistance) == 0x000020, "Wrong size on BP_MasterTrader_C_SetInteractDistance");
static_assert(offsetof(BP_MasterTrader_C_SetInteractDistance, Target) == 0x000000, "Member 'BP_MasterTrader_C_SetInteractDistance::Target' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetInteractDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_MasterTrader_C_SetInteractDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.SetBurning
// 0x0018 (0x0018 - 0x0000)
struct BP_MasterTrader_C_SetBurning final
{
public:
	bool                                          Burning_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dmg;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_SetBurning) == 0x000008, "Wrong alignment on BP_MasterTrader_C_SetBurning");
static_assert(sizeof(BP_MasterTrader_C_SetBurning) == 0x000018, "Wrong size on BP_MasterTrader_C_SetBurning");
static_assert(offsetof(BP_MasterTrader_C_SetBurning, Burning_) == 0x000000, "Member 'BP_MasterTrader_C_SetBurning::Burning_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetBurning, Dmg) == 0x000008, "Member 'BP_MasterTrader_C_SetBurning::Dmg' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_SetBurning, Actor) == 0x000010, "Member 'BP_MasterTrader_C_SetBurning::Actor' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.ReceiveAnyDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_MasterTrader_C_ReceiveAnyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_ReceiveAnyDamage) == 0x000008, "Wrong alignment on BP_MasterTrader_C_ReceiveAnyDamage");
static_assert(sizeof(BP_MasterTrader_C_ReceiveAnyDamage) == 0x000020, "Wrong size on BP_MasterTrader_C_ReceiveAnyDamage");
static_assert(offsetof(BP_MasterTrader_C_ReceiveAnyDamage, Damage) == 0x000000, "Member 'BP_MasterTrader_C_ReceiveAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ReceiveAnyDamage, DamageType) == 0x000008, "Member 'BP_MasterTrader_C_ReceiveAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ReceiveAnyDamage, InstigatedBy) == 0x000010, "Member 'BP_MasterTrader_C_ReceiveAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ReceiveAnyDamage, DamageCauser) == 0x000018, "Member 'BP_MasterTrader_C_ReceiveAnyDamage::DamageCauser' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OverrideName
// 0x0010 (0x0010 - 0x0000)
struct BP_MasterTrader_C_OverrideName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OverrideName) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OverrideName");
static_assert(sizeof(BP_MasterTrader_C_OverrideName) == 0x000010, "Wrong size on BP_MasterTrader_C_OverrideName");
static_assert(offsetof(BP_MasterTrader_C_OverrideName, Name_0) == 0x000000, "Member 'BP_MasterTrader_C_OverrideName::Name_0' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnStopExecuteInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_OnStopExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OnStopExecuteInteract) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnStopExecuteInteract");
static_assert(sizeof(BP_MasterTrader_C_OnStopExecuteInteract) == 0x000008, "Wrong size on BP_MasterTrader_C_OnStopExecuteInteract");
static_assert(offsetof(BP_MasterTrader_C_OnStopExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_MasterTrader_C_OnStopExecuteInteract::InteractingActor' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnServerExecuteInteract
// 0x0040 (0x0040 - 0x0000)
struct BP_MasterTrader_C_OnServerExecuteInteract final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ByActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OnServerExecuteInteract) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnServerExecuteInteract");
static_assert(sizeof(BP_MasterTrader_C_OnServerExecuteInteract) == 0x000040, "Wrong size on BP_MasterTrader_C_OnServerExecuteInteract");
static_assert(offsetof(BP_MasterTrader_C_OnServerExecuteInteract, Option) == 0x000000, "Member 'BP_MasterTrader_C_OnServerExecuteInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnServerExecuteInteract, ByActor) == 0x000008, "Member 'BP_MasterTrader_C_OnServerExecuteInteract::ByActor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnServerExecuteInteract, Payload) == 0x000010, "Member 'BP_MasterTrader_C_OnServerExecuteInteract::Payload' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnRequestServerInteract
// 0x0048 (0x0048 - 0x0000)
struct BP_MasterTrader_C_OnRequestServerInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OnRequestServerInteract) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnRequestServerInteract");
static_assert(sizeof(BP_MasterTrader_C_OnRequestServerInteract) == 0x000048, "Wrong size on BP_MasterTrader_C_OnRequestServerInteract");
static_assert(offsetof(BP_MasterTrader_C_OnRequestServerInteract, Actor) == 0x000000, "Member 'BP_MasterTrader_C_OnRequestServerInteract::Actor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnRequestServerInteract, Option) == 0x000008, "Member 'BP_MasterTrader_C_OnRequestServerInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnRequestServerInteract, Payload) == 0x000010, "Member 'BP_MasterTrader_C_OnRequestServerInteract::Payload' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnRequestServerInteract, Result) == 0x000040, "Member 'BP_MasterTrader_C_OnRequestServerInteract::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnExecuteInteractDialogue
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_OnExecuteInteractDialogue final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OnExecuteInteractDialogue) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnExecuteInteractDialogue");
static_assert(sizeof(BP_MasterTrader_C_OnExecuteInteractDialogue) == 0x000008, "Wrong size on BP_MasterTrader_C_OnExecuteInteractDialogue");
static_assert(offsetof(BP_MasterTrader_C_OnExecuteInteractDialogue, InteractingActor) == 0x000000, "Member 'BP_MasterTrader_C_OnExecuteInteractDialogue::InteractingActor' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnExecuteInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_MasterTrader_C_OnExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_OnExecuteInteract) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnExecuteInteract");
static_assert(sizeof(BP_MasterTrader_C_OnExecuteInteract) == 0x000010, "Wrong size on BP_MasterTrader_C_OnExecuteInteract");
static_assert(offsetof(BP_MasterTrader_C_OnExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_MasterTrader_C_OnExecuteInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnExecuteInteract, Option) == 0x000008, "Member 'BP_MasterTrader_C_OnExecuteInteract::Option' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.OnBeginInteract
// 0x0058 (0x0058 - 0x0000)
struct BP_MasterTrader_C_OnBeginInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_MasterTrader_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_MasterTrader_C_OnBeginInteract");
static_assert(sizeof(BP_MasterTrader_C_OnBeginInteract) == 0x000058, "Wrong size on BP_MasterTrader_C_OnBeginInteract");
static_assert(offsetof(BP_MasterTrader_C_OnBeginInteract, InteractingActor) == 0x000000, "Member 'BP_MasterTrader_C_OnBeginInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_OnBeginInteract, Options) == 0x000008, "Member 'BP_MasterTrader_C_OnBeginInteract::Options' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigSetCanInteract
// 0x0003 (0x0003 - 0x0000)
struct BP_MasterTrader_C_JigSetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePhysics;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigSetCanInteract) == 0x000001, "Wrong alignment on BP_MasterTrader_C_JigSetCanInteract");
static_assert(sizeof(BP_MasterTrader_C_JigSetCanInteract) == 0x000003, "Wrong size on BP_MasterTrader_C_JigSetCanInteract");
static_assert(offsetof(BP_MasterTrader_C_JigSetCanInteract, CanInteract) == 0x000000, "Member 'BP_MasterTrader_C_JigSetCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigSetCanInteract, EnablePhysics) == 0x000001, "Member 'BP_MasterTrader_C_JigSetCanInteract::EnablePhysics' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigSetCanInteract, Result) == 0x000002, "Member 'BP_MasterTrader_C_JigSetCanInteract::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnUpdateChamberUID
// 0x0014 (0x0014 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnUpdateChamberUID final
{
public:
	struct FGuid                                  NewUID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnUpdateChamberUID) == 0x000004, "Wrong alignment on BP_MasterTrader_C_JigMP_OnUpdateChamberUID");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnUpdateChamberUID) == 0x000014, "Wrong size on BP_MasterTrader_C_JigMP_OnUpdateChamberUID");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnUpdateChamberUID, NewUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnUpdateChamberUID::NewUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnUpdateChamberUID, Result) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnUpdateChamberUID::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnTwoContainersSwap
// 0x0014 (0x0014 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnTwoContainersSwap final
{
public:
	class FName                                   FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnTwoContainersSwap) == 0x000004, "Wrong alignment on BP_MasterTrader_C_JigMP_OnTwoContainersSwap");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnTwoContainersSwap) == 0x000014, "Wrong size on BP_MasterTrader_C_JigMP_OnTwoContainersSwap");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnTwoContainersSwap, FromContainer) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnTwoContainersSwap::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnTwoContainersSwap, ToContainer) == 0x000008, "Member 'BP_MasterTrader_C_JigMP_OnTwoContainersSwap::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnTwoContainersSwap, Result) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnTwoContainersSwap::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnRequestDropItem
// 0x01D0 (0x01D0 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnRequestDropItem final
{
public:
	struct FRepItemInfo                           ItemInfo;                                          // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnRequestDropItem) == 0x000010, "Wrong alignment on BP_MasterTrader_C_JigMP_OnRequestDropItem");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnRequestDropItem) == 0x0001D0, "Wrong size on BP_MasterTrader_C_JigMP_OnRequestDropItem");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, ItemInfo) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, ContainerName) == 0x000078, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, ActorRef) == 0x000080, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_RandomFloatInRange_ReturnValue) == 0x000088, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_ReturnValue) == 0x000090, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000A8, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0000B0, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000B8, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E8, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000100, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_Add_VectorVector_ReturnValue) == 0x000118, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000130, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001B0, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001B8, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0001C0, "Member 'BP_MasterTrader_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnPickupEquipped
// 0x00B8 (0x00B8 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnPickupEquipped final
{
public:
	class AActor*                                 ActorRef;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  UID;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           Info;                                              // 0x0030(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverrideActor;                                     // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnPickupEquipped) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnPickupEquipped");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnPickupEquipped) == 0x0000B8, "Wrong size on BP_MasterTrader_C_JigMP_OnPickupEquipped");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, ActorRef) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, ToContainerName) == 0x000008, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, UID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::UID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, ToContainerUID) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, Info) == 0x000030, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::Info' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, Result) == 0x0000A8, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupEquipped, OverrideActor) == 0x0000B0, "Member 'BP_MasterTrader_C_JigMP_OnPickupEquipped::OverrideActor' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnPickupAdded
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnPickupAdded final
{
public:
	struct FRepItemInfo                           Info;                                              // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnPickupAdded) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnPickupAdded");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnPickupAdded) == 0x0000A8, "Wrong size on BP_MasterTrader_C_JigMP_OnPickupAdded");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupAdded, Info) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnPickupAdded::Info' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupAdded, ItemUID) == 0x000078, "Member 'BP_MasterTrader_C_JigMP_OnPickupAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupAdded, ToContainerUID) == 0x000088, "Member 'BP_MasterTrader_C_JigMP_OnPickupAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupAdded, ToContainer) == 0x000098, "Member 'BP_MasterTrader_C_JigMP_OnPickupAdded::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnPickupAdded, Result) == 0x0000A0, "Member 'BP_MasterTrader_C_JigMP_OnPickupAdded::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnMainContainerItemRemoved
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved final
{
public:
	struct FGuid                                  FromContainerUID;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemRemovedInfo;                                   // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved) == 0x0000A8, "Wrong size on BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved, FromContainerUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved, ItemUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved, ContainerName) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved, ItemRemovedInfo) == 0x000028, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved::ItemRemovedInfo' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved, Result) == 0x0000A0, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemRemoved::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnMainContainerItemAdded
// 0x00B8 (0x00B8 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnMainContainerItemAdded final
{
public:
	struct FGuid                                  ToContainerUID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemInfo;                                          // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromMain;                                          // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorRef;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnMainContainerItemAdded");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded) == 0x0000B8, "Wrong size on BP_MasterTrader_C_JigMP_OnMainContainerItemAdded");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, ToContainerUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, ItemUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, ToContainerName) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, ItemInfo) == 0x000028, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, FromMain) == 0x0000A0, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::FromMain' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, Result) == 0x0000A8, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnMainContainerItemAdded, ActorRef) == 0x0000B0, "Member 'BP_MasterTrader_C_JigMP_OnMainContainerItemAdded::ActorRef' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnItemRemoved
// 0x0040 (0x0040 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnItemRemoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ToComponent;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnItemRemoved) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnItemRemoved");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnItemRemoved) == 0x000040, "Wrong size on BP_MasterTrader_C_JigMP_OnItemRemoved");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemRemoved, ItemUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemRemoved, FromContainerUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemRemoved, ToContainerUID) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnItemRemoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemRemoved, ToComponent) == 0x000030, "Member 'BP_MasterTrader_C_JigMP_OnItemRemoved::ToComponent' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemRemoved, Result) == 0x000038, "Member 'BP_MasterTrader_C_JigMP_OnItemRemoved::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnItemMoved
// 0x0034 (0x0034 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnItemMoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnItemMoved) == 0x000004, "Wrong alignment on BP_MasterTrader_C_JigMP_OnItemMoved");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnItemMoved) == 0x000034, "Wrong size on BP_MasterTrader_C_JigMP_OnItemMoved");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemMoved, ItemUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnItemMoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemMoved, FromContainerUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnItemMoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemMoved, ToContainerUID) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnItemMoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemMoved, Result) == 0x000030, "Member 'BP_MasterTrader_C_JigMP_OnItemMoved::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnItemDropped
// 0x0030 (0x0030 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnItemDropped final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnItemDropped) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnItemDropped");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnItemDropped) == 0x000030, "Wrong size on BP_MasterTrader_C_JigMP_OnItemDropped");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemDropped, ItemUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnItemDropped::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemDropped, FromContainerUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnItemDropped::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemDropped, ActorRef) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnItemDropped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemDropped, Result) == 0x000028, "Member 'BP_MasterTrader_C_JigMP_OnItemDropped::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnItemConsumed
// 0x0118 (0x0118 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnItemConsumed final
{
public:
	struct FRepItemInfo                           ConsumedItem;                                      // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Remaining;                                         // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           InsideOf;                                          // 0x0080(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromContainer;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomData;                                        // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallbackToPlayer_;                                 // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0111(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnItemConsumed) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnItemConsumed");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnItemConsumed) == 0x000118, "Wrong size on BP_MasterTrader_C_JigMP_OnItemConsumed");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, ConsumedItem) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::ConsumedItem' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, Amount) == 0x000078, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::Amount' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, Remaining) == 0x00007C, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::Remaining' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, InsideOf) == 0x000080, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::InsideOf' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, FromContainer) == 0x0000F8, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, CustomData) == 0x000100, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::CustomData' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, CallbackToPlayer_) == 0x000110, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::CallbackToPlayer_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemConsumed, Result) == 0x000111, "Member 'BP_MasterTrader_C_JigMP_OnItemConsumed::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnItemAdded
// 0x0040 (0x0040 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnItemAdded final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        FromComponent;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnItemAdded) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnItemAdded");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnItemAdded) == 0x000040, "Wrong size on BP_MasterTrader_C_JigMP_OnItemAdded");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemAdded, ItemUID) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemAdded, FromContainerUID) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnItemAdded::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemAdded, ToContainerUID) == 0x000020, "Member 'BP_MasterTrader_C_JigMP_OnItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemAdded, FromComponent) == 0x000030, "Member 'BP_MasterTrader_C_JigMP_OnItemAdded::FromComponent' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnItemAdded, Result) == 0x000038, "Member 'BP_MasterTrader_C_JigMP_OnItemAdded::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_OnContainersSwap
// 0x0018 (0x0018 - 0x0000)
struct BP_MasterTrader_C_JigMP_OnContainersSwap final
{
public:
	class UJSIContainer_C*                        Container1;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container2;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_OnContainersSwap) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_OnContainersSwap");
static_assert(sizeof(BP_MasterTrader_C_JigMP_OnContainersSwap) == 0x000018, "Wrong size on BP_MasterTrader_C_JigMP_OnContainersSwap");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnContainersSwap, Container1) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_OnContainersSwap::Container1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnContainersSwap, Container2) == 0x000008, "Member 'BP_MasterTrader_C_JigMP_OnContainersSwap::Container2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_OnContainersSwap, Result) == 0x000010, "Member 'BP_MasterTrader_C_JigMP_OnContainersSwap::Result' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigMP_GetLootWidget
// 0x0010 (0x0010 - 0x0000)
struct BP_MasterTrader_C_JigMP_GetLootWidget final
{
public:
	class UWidget*                                Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigMP_GetLootWidget) == 0x000008, "Wrong alignment on BP_MasterTrader_C_JigMP_GetLootWidget");
static_assert(sizeof(BP_MasterTrader_C_JigMP_GetLootWidget) == 0x000010, "Wrong size on BP_MasterTrader_C_JigMP_GetLootWidget");
static_assert(offsetof(BP_MasterTrader_C_JigMP_GetLootWidget, Result) == 0x000000, "Member 'BP_MasterTrader_C_JigMP_GetLootWidget::Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigMP_GetLootWidget, Valid_) == 0x000008, "Member 'BP_MasterTrader_C_JigMP_GetLootWidget::Valid_' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.JigCanInteract
// 0x0006 (0x0006 - 0x0000)
struct BP_MasterTrader_C_JigCanInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_JigCanInteract) == 0x000001, "Wrong alignment on BP_MasterTrader_C_JigCanInteract");
static_assert(sizeof(BP_MasterTrader_C_JigCanInteract) == 0x000006, "Wrong size on BP_MasterTrader_C_JigCanInteract");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, Result) == 0x000000, "Member 'BP_MasterTrader_C_JigCanInteract::Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MasterTrader_C_JigCanInteract::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_MasterTrader_C_JigCanInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'BP_MasterTrader_C_JigCanInteract::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_MasterTrader_C_JigCanInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_JigCanInteract, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'BP_MasterTrader_C_JigCanInteract::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.IsAIBurning?
// 0x0001 (0x0001 - 0x0000)
struct BP_MasterTrader_C_IsAIBurning_ final
{
public:
	bool                                          IsBurning_;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_IsAIBurning_) == 0x000001, "Wrong alignment on BP_MasterTrader_C_IsAIBurning_");
static_assert(sizeof(BP_MasterTrader_C_IsAIBurning_) == 0x000001, "Wrong size on BP_MasterTrader_C_IsAIBurning_");
static_assert(offsetof(BP_MasterTrader_C_IsAIBurning_, IsBurning_) == 0x000000, "Member 'BP_MasterTrader_C_IsAIBurning_::IsBurning_' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.HitByVehicle
// 0x0020 (0x0020 - 0x0000)
struct BP_MasterTrader_C_HitByVehicle final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_HitByVehicle) == 0x000008, "Wrong alignment on BP_MasterTrader_C_HitByVehicle");
static_assert(sizeof(BP_MasterTrader_C_HitByVehicle) == 0x000020, "Wrong size on BP_MasterTrader_C_HitByVehicle");
static_assert(offsetof(BP_MasterTrader_C_HitByVehicle, Speed) == 0x000000, "Member 'BP_MasterTrader_C_HitByVehicle::Speed' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_HitByVehicle, Direction) == 0x000008, "Member 'BP_MasterTrader_C_HitByVehicle::Direction' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.HealthMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BP_MasterTrader_C_HealthMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_HealthMultiplier) == 0x000004, "Wrong alignment on BP_MasterTrader_C_HealthMultiplier");
static_assert(sizeof(BP_MasterTrader_C_HealthMultiplier) == 0x000004, "Wrong size on BP_MasterTrader_C_HealthMultiplier");
static_assert(offsetof(BP_MasterTrader_C_HealthMultiplier, NewValue) == 0x000000, "Member 'BP_MasterTrader_C_HealthMultiplier::NewValue' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetMovementSpeeds
// 0x0018 (0x0018 - 0x0000)
struct BP_MasterTrader_C_GetMovementSpeeds final
{
public:
	double                                        RoamingSpeed;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSpeed;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_GetMovementSpeeds) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetMovementSpeeds");
static_assert(sizeof(BP_MasterTrader_C_GetMovementSpeeds) == 0x000018, "Wrong size on BP_MasterTrader_C_GetMovementSpeeds");
static_assert(offsetof(BP_MasterTrader_C_GetMovementSpeeds, RoamingSpeed) == 0x000000, "Member 'BP_MasterTrader_C_GetMovementSpeeds::RoamingSpeed' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetMovementSpeeds, AlertSpeed) == 0x000008, "Member 'BP_MasterTrader_C_GetMovementSpeeds::AlertSpeed' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetMovementSpeeds, AttackSpeed) == 0x000010, "Member 'BP_MasterTrader_C_GetMovementSpeeds::AttackSpeed' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_GetMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh_0;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_GetMesh) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetMesh");
static_assert(sizeof(BP_MasterTrader_C_GetMesh) == 0x000008, "Wrong size on BP_MasterTrader_C_GetMesh");
static_assert(offsetof(BP_MasterTrader_C_GetMesh, Mesh_0) == 0x000000, "Member 'BP_MasterTrader_C_GetMesh::Mesh_0' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetMarker
// 0x0020 (0x0020 - 0x0000)
struct BP_MasterTrader_C_GetMarker final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarkerOffset;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_GetMarker) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetMarker");
static_assert(sizeof(BP_MasterTrader_C_GetMarker) == 0x000020, "Wrong size on BP_MasterTrader_C_GetMarker");
static_assert(offsetof(BP_MasterTrader_C_GetMarker, Texture) == 0x000000, "Member 'BP_MasterTrader_C_GetMarker::Texture' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetMarker, Color) == 0x000008, "Member 'BP_MasterTrader_C_GetMarker::Color' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetMarker, MarkerOffset) == 0x000018, "Member 'BP_MasterTrader_C_GetMarker::MarkerOffset' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetMainSceneComp
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_GetMainSceneComp final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_GetMainSceneComp) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetMainSceneComp");
static_assert(sizeof(BP_MasterTrader_C_GetMainSceneComp) == 0x000008, "Wrong size on BP_MasterTrader_C_GetMainSceneComp");
static_assert(offsetof(BP_MasterTrader_C_GetMainSceneComp, Comp) == 0x000000, "Member 'BP_MasterTrader_C_GetMainSceneComp::Comp' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetJigMultiplayerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_GetJigMultiplayerComponent final
{
public:
	class UActorComponent*                        JigComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_GetJigMultiplayerComponent) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetJigMultiplayerComponent");
static_assert(sizeof(BP_MasterTrader_C_GetJigMultiplayerComponent) == 0x000008, "Wrong size on BP_MasterTrader_C_GetJigMultiplayerComponent");
static_assert(offsetof(BP_MasterTrader_C_GetJigMultiplayerComponent, JigComp) == 0x000000, "Member 'BP_MasterTrader_C_GetJigMultiplayerComponent::JigComp' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetItemInfo
// 0x0078 (0x0078 - 0x0000)
struct BP_MasterTrader_C_GetItemInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatsConfig;                                 // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TMap<class FString, class FString>            CustomData;                                        // 0x0028(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_MasterTrader_C_GetItemInfo) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetItemInfo");
static_assert(sizeof(BP_MasterTrader_C_GetItemInfo) == 0x000078, "Wrong size on BP_MasterTrader_C_GetItemInfo");
static_assert(offsetof(BP_MasterTrader_C_GetItemInfo, Info) == 0x000000, "Member 'BP_MasterTrader_C_GetItemInfo::Info' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetItemInfo, Count) == 0x000008, "Member 'BP_MasterTrader_C_GetItemInfo::Count' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetItemInfo, RandomStatsConfig) == 0x000010, "Member 'BP_MasterTrader_C_GetItemInfo::RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetItemInfo, CustomData) == 0x000028, "Member 'BP_MasterTrader_C_GetItemInfo::CustomData' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.GetInteractOptions
// 0x00A0 (0x00A0 - 0x0000)
struct BP_MasterTrader_C_GetInteractOptions final
{
public:
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0000(0x0050)(Parm, OutParm)
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map;                                // 0x0050(0x0050)()
};
static_assert(alignof(BP_MasterTrader_C_GetInteractOptions) == 0x000008, "Wrong alignment on BP_MasterTrader_C_GetInteractOptions");
static_assert(sizeof(BP_MasterTrader_C_GetInteractOptions) == 0x0000A0, "Wrong size on BP_MasterTrader_C_GetInteractOptions");
static_assert(offsetof(BP_MasterTrader_C_GetInteractOptions, Options) == 0x000000, "Member 'BP_MasterTrader_C_GetInteractOptions::Options' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_GetInteractOptions, K2Node_MakeMap_Map) == 0x000050, "Member 'BP_MasterTrader_C_GetInteractOptions::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.ExecuteUbergraph_BP_MasterTrader
// 0x0620 (0x0620 - 0x0000)
struct BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsBeyondLastLayer;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_LayerIndex;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsSeen;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIOptimizerSubsystem*                  CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Speed;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction;                            // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Name;                                 // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_2;                             // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ByActor;                              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          K2Node_Event_Payload;                              // 0x0070(0x0030)(HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_1;                             // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Damage;                               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x00B0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	class UWidgetComponent*                       K2Node_Event_Marker;                               // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LineOfSightTo_ReturnValue;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Burning_;                             // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Dmg;                                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Actor;                                // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float NewValue)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0108(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0128(0x0018)()
	TArray<double>                                CallFunc_Map_Values_Values;                        // 0x0140(0x0010)(ReferenceParm)
	double                                        CallFunc_Array_Get_Item;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_AIBehaviour, double>                   K2Node_MakeMap_Map;                                // 0x0190(0x0050)()
	TArray<double>                                CallFunc_Map_Values_Values_1;                      // 0x01E0(0x0010)(ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_4;                         // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_5;                         // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_6;                         // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_7;                         // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_AIBehaviour, double>                   K2Node_MakeMap_Map_1;                              // 0x0238(0x0050)()
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0290(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x02A8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x02F8(0x0010)(ReferenceParm)
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0310(0x0018)()
	TMap<class FName, class FText>                K2Node_MakeMap_Map_2;                              // 0x0328(0x0050)()
	class FText                                   K2Node_Select_Default;                             // 0x0378(0x0018)()
	TMap<class FName, class FText>                K2Node_MakeMap_Map_3;                              // 0x0390(0x0050)()
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map_4;                              // 0x03E0(0x0050)(ConstParm)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_1;                             // 0x0440(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget;                // 0x0448(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNarrativeComponent*                    CallFunc_GetNarrativeComponent_ReturnValue;        // 0x0458(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginDialogue_ReturnValue;                // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_Event_Options;                              // 0x0470(0x0050)(ConstParm)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option;                               // 0x04C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget_1;              // 0x04D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface_1; // 0x04F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0508(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x0510(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestServerData_Result;                 // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_SetupInventoryWidget_InventoryWidgetRef;  // 0x0520(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddJigWidgetToContent_Result;             // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x052C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0540(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x05A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x05A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue;                       // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ScalingHealthMultiplier_NewMaxHealth;     // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAIOSubjectHandle                      CallFunc_K2_DespawnSubject_SubjectHandle;          // 0x05D4(0x0004)(NoDestructor)
	bool                                          CallFunc_K2_DespawnSubject_ReturnValue;            // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x05DC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x05F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FS_AttachedHoldables                   CallFunc_Array_Get_Item_8;                         // 0x05F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x060C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60D[0x3];                                      // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast;      // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader) == 0x000010, "Wrong alignment on BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader");
static_assert(sizeof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader) == 0x000620, "Wrong size on BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, EntryPoint) == 0x000000, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_ComponentBoundEvent_bIsBeyondLastLayer) == 0x000004, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_ComponentBoundEvent_bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_ComponentBoundEvent_LayerIndex) == 0x000008, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_ComponentBoundEvent_LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_ComponentBoundEvent_bIsSeen) == 0x00000C, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_ComponentBoundEvent_bIsSeen' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_SwitchInteger_CmpSuccess) == 0x00000D, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_bool_IsClosed_Variable) == 0x000019, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_bool_Has_Been_Initd_Variable_1) == 0x00001A, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Speed) == 0x000028, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Speed' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Direction) == 0x000030, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Name) == 0x000048, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_InteractingActor_3) == 0x000058, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Option_2) == 0x000060, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Option_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_ByActor) == 0x000068, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_ByActor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Payload) == 0x000070, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Option_1) == 0x0000A0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Option_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Damage) == 0x0000A8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_DamageType) == 0x0000B0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_InstigatedBy) == 0x0000B8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_DamageCauser) == 0x0000C0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeArray_Array) == 0x0000C8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Marker) == 0x0000D8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Marker' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetPlayerController_ReturnValue) == 0x0000E0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetAIController_ReturnValue) == 0x0000E8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_LineOfSightTo_ReturnValue) == 0x0000F0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_LineOfSightTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Burning_) == 0x0000F1, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Burning_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Dmg) == 0x0000F8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Dmg' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Actor) == 0x000100, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Actor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_CreateDelegate_OutputDelegate) == 0x000108, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_RandomFloatInRange_ReturnValue) == 0x000120, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_text_Variable) == 0x000128, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Map_Values_Values) == 0x000140, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item) == 0x000150, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_1) == 0x000158, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000160, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000168, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_2) == 0x000170, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_3) == 0x000178, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000180, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000188, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeMap_Map) == 0x000190, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Map_Values_Values_1) == 0x0001E0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Map_Values_Values_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_bool_Variable) == 0x0001F0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_4) == 0x0001F8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_5) == 0x000200, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000208, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000210, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_6) == 0x000218, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_7) == 0x000220, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000228, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000230, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeMap_Map_1) == 0x000238, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_ApplyDamage_ReturnValue) == 0x000288, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_MakeLiteralText_ReturnValue) == 0x000290, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeStruct_FormatArgumentData) == 0x0002A8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeArray_Array_1) == 0x0002F8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_InteractingActor_2) == 0x000308, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Format_ReturnValue) == 0x000310, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeMap_Map_2) == 0x000328, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeMap_Map_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Select_Default) == 0x000378, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeMap_Map_3) == 0x000390, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeMap_Map_3' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_MakeMap_Map_4) == 0x0003E0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_MakeMap_Map_4' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetBoolCVar_ReturnValue) == 0x000430, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Not_PreBool_ReturnValue) == 0x000431, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Not_PreBool_ReturnValue_1) == 0x000432, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetHUD_HUD) == 0x000438, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetHUD_HUD_1) == 0x000440, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetHUD_HUD_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_ShowInteractWidget_Widget) == 0x000448, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_ShowInteractWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_bool_IsClosed_Variable_1) == 0x000450, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_GetNarrativeComponent_ReturnValue) == 0x000458, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_GetNarrativeComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_BeginDialogue_ReturnValue) == 0x000460, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_BeginDialogue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_InteractingActor_1) == 0x000468, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Options) == 0x000470, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Options' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_InteractingActor) == 0x0004C0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_Event_Option) == 0x0004C8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_Event_Option' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_ShowInteractWidget_Widget_1) == 0x0004D0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_ShowInteractWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x0004D8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_DynamicCast_bSuccess) == 0x0004E8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_DynamicCast_AsBP_Jig_Character_Interface_1) == 0x0004F0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_DynamicCast_AsBP_Jig_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_DynamicCast_bSuccess_1) == 0x000500, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_SetTimer_ReturnValue) == 0x000508, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_SetTimer_ReturnValue_1) == 0x000510, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_RequestServerData_Result) == 0x000518, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_RequestServerData_Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_SetupInventoryWidget_InventoryWidgetRef) == 0x000520, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_SetupInventoryWidget_InventoryWidgetRef' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_AddJigWidgetToContent_Result) == 0x000528, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_AddJigWidgetToContent_Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_CreateDelegate_OutputDelegate_1) == 0x00052C, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, Temp_struct_Variable) == 0x000540, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0005A0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_AddComponent_ReturnValue) == 0x0005A8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0005B0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_CustomEvent_NewValue) == 0x0005B8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0005C0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_ScalingHealthMultiplier_NewMaxHealth) == 0x0005C8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_ScalingHealthMultiplier_NewMaxHealth' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_FTrunc_ReturnValue) == 0x0005D0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_DespawnSubject_SubjectHandle) == 0x0005D4, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_DespawnSubject_SubjectHandle' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_DespawnSubject_ReturnValue) == 0x0005D8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_DespawnSubject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, K2Node_CreateDelegate_OutputDelegate_2) == 0x0005DC, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0005F0, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Get_Item_8) == 0x0005F8, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Array_Length_ReturnValue) == 0x000608, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Less_IntInt_ReturnValue) == 0x00060C, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_ApplyDamage_BaseDamage_ImplicitCast) == 0x000610, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_ApplyDamage_BaseDamage_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Delay_Duration_ImplicitCast) == 0x000614, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000618, "Member 'BP_MasterTrader_C_ExecuteUbergraph_BP_MasterTrader::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.Death
// 0x0100 (0x0100 - 0x0000)
struct BP_MasterTrader_C_Death final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue_1;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevellingComponent_C*                  CallFunc_GetLevellingComponent_LevellingComponent; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_AddXP_XPOutput;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 CallFunc_CastToController_Controller;              // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JigTryAddItemSomewhere_Added_;            // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CallFunc_JigTryAddItemSomewhere_UID;               // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue;                   // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue;               // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue_1;                 // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue_1;             // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_Death) == 0x000008, "Wrong alignment on BP_MasterTrader_C_Death");
static_assert(sizeof(BP_MasterTrader_C_Death) == 0x000100, "Wrong size on BP_MasterTrader_C_Death");
static_assert(offsetof(BP_MasterTrader_C_Death, Player) == 0x000000, "Member 'BP_MasterTrader_C_Death::Player' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'BP_MasterTrader_C_Death::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_ActorHasTag_ReturnValue) == 0x000010, "Member 'BP_MasterTrader_C_Death::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_ActorHasTag_ReturnValue_1) == 0x000011, "Member 'BP_MasterTrader_C_Death::CallFunc_ActorHasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_GetLevellingComponent_LevellingComponent) == 0x000018, "Member 'BP_MasterTrader_C_Death::CallFunc_GetLevellingComponent_LevellingComponent' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'BP_MasterTrader_C_Death::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, Temp_int_Variable) == 0x000024, "Member 'BP_MasterTrader_C_Death::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000028, "Member 'BP_MasterTrader_C_Death::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_MasterTrader_C_Death::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_MasterTrader_C_Death::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_AddXP_XPOutput) == 0x000040, "Member 'BP_MasterTrader_C_Death::CallFunc_AddXP_XPOutput' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_FTrunc_ReturnValue) == 0x000048, "Member 'BP_MasterTrader_C_Death::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000050, "Member 'BP_MasterTrader_C_Death::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'BP_MasterTrader_C_Death::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, K2Node_MakeArray_Array) == 0x0000A8, "Member 'BP_MasterTrader_C_Death::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'BP_MasterTrader_C_Death::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'BP_MasterTrader_C_Death::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_CastToController_Controller) == 0x0000D8, "Member 'BP_MasterTrader_C_Death::CallFunc_CastToController_Controller' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0000E0, "Member 'BP_MasterTrader_C_Death::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_JigTryAddItemSomewhere_Added_) == 0x0000E4, "Member 'BP_MasterTrader_C_Death::CallFunc_JigTryAddItemSomewhere_Added_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_JigTryAddItemSomewhere_UID) == 0x0000E8, "Member 'BP_MasterTrader_C_Death::CallFunc_JigTryAddItemSomewhere_UID' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'BP_MasterTrader_C_Death::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_StoreStats_ReturnValue) == 0x0000FC, "Member 'BP_MasterTrader_C_Death::CallFunc_StoreStats_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_SetAchievement_ReturnValue) == 0x0000FD, "Member 'BP_MasterTrader_C_Death::CallFunc_SetAchievement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_StoreStats_ReturnValue_1) == 0x0000FE, "Member 'BP_MasterTrader_C_Death::CallFunc_StoreStats_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_Death, CallFunc_SetAchievement_ReturnValue_1) == 0x0000FF, "Member 'BP_MasterTrader_C_Death::CallFunc_SetAchievement_ReturnValue_1' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.CheckDistanceFromActor
// 0x0058 (0x0058 - 0x0000)
struct BP_MasterTrader_C_CheckDistanceFromActor final
{
public:
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnInteractActorOverDistance_Result;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_CheckDistanceFromActor) == 0x000008, "Wrong alignment on BP_MasterTrader_C_CheckDistanceFromActor");
static_assert(sizeof(BP_MasterTrader_C_CheckDistanceFromActor) == 0x000058, "Wrong size on BP_MasterTrader_C_CheckDistanceFromActor");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x000000, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_OnInteractActorOverDistance_Result) == 0x000011, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_OnInteractActorOverDistance_Result' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_CheckDistanceFromActor, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_MasterTrader_C_CheckDistanceFromActor::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.CanStompAI?
// 0x0001 (0x0001 - 0x0000)
struct BP_MasterTrader_C_CanStompAI_ final
{
public:
	bool                                          Stomp_;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_CanStompAI_) == 0x000001, "Wrong alignment on BP_MasterTrader_C_CanStompAI_");
static_assert(sizeof(BP_MasterTrader_C_CanStompAI_) == 0x000001, "Wrong size on BP_MasterTrader_C_CanStompAI_");
static_assert(offsetof(BP_MasterTrader_C_CanStompAI_, Stomp_) == 0x000000, "Member 'BP_MasterTrader_C_CanStompAI_::Stomp_' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.CanAddMarkerToAI?
// 0x0001 (0x0001 - 0x0000)
struct BP_MasterTrader_C_CanAddMarkerToAI_ final
{
public:
	bool                                          CanAdd_;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_CanAddMarkerToAI_) == 0x000001, "Wrong alignment on BP_MasterTrader_C_CanAddMarkerToAI_");
static_assert(sizeof(BP_MasterTrader_C_CanAddMarkerToAI_) == 0x000001, "Wrong size on BP_MasterTrader_C_CanAddMarkerToAI_");
static_assert(offsetof(BP_MasterTrader_C_CanAddMarkerToAI_, CanAdd_) == 0x000000, "Member 'BP_MasterTrader_C_CanAddMarkerToAI_::CanAdd_' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature final
{
public:
	bool                                          bIsBeyondLastLayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeen;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(sizeof(BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x00000C, "Wrong size on BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(offsetof(BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsBeyondLastLayer) == 0x000000, "Member 'BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, LayerIndex) == 0x000004, "Member 'BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsSeen) == 0x000008, "Member 'BP_MasterTrader_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsSeen' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.AIHealthBarInfo
// 0x0038 (0x0038 - 0x0000)
struct BP_MasterTrader_C_AIHealthBarInfo final
{
public:
	bool                                          Visible_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Boss_;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_AIHealthBarInfo) == 0x000008, "Wrong alignment on BP_MasterTrader_C_AIHealthBarInfo");
static_assert(sizeof(BP_MasterTrader_C_AIHealthBarInfo) == 0x000038, "Wrong size on BP_MasterTrader_C_AIHealthBarInfo");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, Visible_) == 0x000000, "Member 'BP_MasterTrader_C_AIHealthBarInfo::Visible_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, Name_0) == 0x000008, "Member 'BP_MasterTrader_C_AIHealthBarInfo::Name_0' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, Boss_) == 0x000018, "Member 'BP_MasterTrader_C_AIHealthBarInfo::Boss_' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_MasterTrader_C_AIHealthBarInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'BP_MasterTrader_C_AIHealthBarInfo::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, CallFunc_GetHUD_HUD) == 0x000028, "Member 'BP_MasterTrader_C_AIHealthBarInfo::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_MasterTrader_C_AIHealthBarInfo, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000030, "Member 'BP_MasterTrader_C_AIHealthBarInfo::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.AddMarker
// 0x0008 (0x0008 - 0x0000)
struct BP_MasterTrader_C_AddMarker final
{
public:
	class UWidgetComponent*                       Marker_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_AddMarker) == 0x000008, "Wrong alignment on BP_MasterTrader_C_AddMarker");
static_assert(sizeof(BP_MasterTrader_C_AddMarker) == 0x000008, "Wrong size on BP_MasterTrader_C_AddMarker");
static_assert(offsetof(BP_MasterTrader_C_AddMarker, Marker_0) == 0x000000, "Member 'BP_MasterTrader_C_AddMarker::Marker_0' has a wrong offset!");

// Function BP_MasterTrader.BP_MasterTrader_C.AI Is Dead?
// 0x0001 (0x0001 - 0x0000)
struct BP_MasterTrader_C_AI_Is_Dead_ final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MasterTrader_C_AI_Is_Dead_) == 0x000001, "Wrong alignment on BP_MasterTrader_C_AI_Is_Dead_");
static_assert(sizeof(BP_MasterTrader_C_AI_Is_Dead_) == 0x000001, "Wrong size on BP_MasterTrader_C_AI_Is_Dead_");
static_assert(offsetof(BP_MasterTrader_C_AI_Is_Dead_, Dead) == 0x000000, "Member 'BP_MasterTrader_C_AI_Is_Dead_::Dead' has a wrong offset!");

}


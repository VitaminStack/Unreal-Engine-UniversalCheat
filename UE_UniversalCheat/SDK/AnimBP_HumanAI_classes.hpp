#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_HumanAI

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "S_AIAnims_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_AIBehaviour_structs.hpp"
#include "AnimBP_HumanAI_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_HumanAI.AnimBP_HumanAI_C
// 0x2380 (0x26D0 - 0x0350)
class UAnimBP_HumanAI_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct AnimBP_HumanAI::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0080)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03D8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E0(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03E8(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0458(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0480(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x04A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x04D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x04F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0520(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0548(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0570(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0598(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x05E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0610(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0638(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_24;                   // 0x0660(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_28;                  // 0x06A8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_23;                   // 0x06F0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_22;                   // 0x0738(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_27;                  // 0x0780(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_26;                  // 0x07C8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_21;                   // 0x0810(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_20;                   // 0x0858(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_25;                  // 0x08A0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x08E8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_19;                   // 0x0908(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_24;                  // 0x0950(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_18;                   // 0x0998(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_17;                   // 0x09E0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_23;                  // 0x0A28(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_22;                  // 0x0A70(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_16;                   // 0x0AB8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_15;                   // 0x0B00(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_21;                  // 0x0B48(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0B90(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_9;                  // 0x0BB0(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_20;                  // 0x0C20(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_8;                  // 0x0C68(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_19;                  // 0x0CD8(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_7;                  // 0x0D20(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_18;                  // 0x0D90(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_6;                  // 0x0DD8(0x0070)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_5;                  // 0x0E48(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_17;                  // 0x0EB8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0F00(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_16;                  // 0x0F20(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x0F68(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x0FB0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x0FF8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_15;                  // 0x1040(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_14;                  // 0x1088(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x10D0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x1118(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_13;                  // 0x1160(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x11A8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x11C8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_12;                  // 0x1210(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1258(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x12A0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_11;                  // 0x12E8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_10;                  // 0x1330(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x1378(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x13C0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_9;                   // 0x1408(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1450(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_8;                   // 0x1470(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x14B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x1500(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x1548(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_7;                   // 0x1590(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_6;                   // 0x15D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1620(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1668(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x16B0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x16F8(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_4;                  // 0x1718(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x1788(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x17D0(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x1840(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x1888(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x18F8(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x1940(0x0070)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x19B0(0x0070)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1A20(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1A68(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1A88(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x1B50(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1B98(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x1BE0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x1C60(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x1C88(0x00F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x1D78(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x1DF8(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x1E78(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x1EA0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x1EC8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x1EF0(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1F18(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x1F60(0x00F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x2050(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x20D0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x2118(0x00F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x2208(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x2288(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x22B0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x22D8(0x0028)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x2300(0x0118)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x2418(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2460(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x2488(0x0048)()
	bool                                          Use_Aim_Offset;                                    // 0x24D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24D1[0x7];                                     // 0x24D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AIWeapon_Master_C*                  Holdable_Actor;                                    // 0x24D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 One_Behaviour;                                     // 0x24E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24E1[0x7];                                     // 0x24E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace1D*                 Aim_Offset;                                        // 0x24E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Two_Behaviour;                                     // 0x24F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Anims_1;                                           // 0x24F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24F2[0x6];                                     // 0x24F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AIAnims                             Holdable_Anims_2;                                  // 0x24F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UBP_SmartAIComponent_C*                 AI_Component;                                      // 0x2548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_AIAnims                             Holdable_Anims_1;                                  // 0x2550(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Combat_Stance;                                     // 0x25A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Combat_Stance;                               // 0x25A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A2[0x6];                                     // 0x25A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AIAnims                             Combat_Stance_Anims;                               // 0x25A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_MasterAICharacter_C*                AI_Character;                                      // 0x25F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Aim_Yaw;                                           // 0x2600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jump_Start_End;                                    // 0x2608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jump_Land_End;                                     // 0x2609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_260A[0x6];                                     // 0x260A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Direction;                                         // 0x2610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Falling;                                        // 0x2618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Crouching;                                      // 0x2619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x261A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261B[0x5];                                     // 0x261B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x2620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_AIAnims                             Smart_AI_Anims_1;                                  // 0x2628(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_AIAnims                             Smart_AI_Anims_2;                                  // 0x2678(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Holdable;                                          // 0x26C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Turret_Start_Reload();
	void Turret_Idle_Stop();
	void Turret_Idle_Start();
	void Turret_End_Reload();
	void Turret_Destroyed_Effect();
	void Return_Current_Behaviour(E_AIBehaviour* New_Behaviour);
	void Return_Combat_Stance_Anims(bool* Use_Combat_Stance, struct FS_AIAnims* AI_Animation);
	void Return_Behaviour_Anims(const struct FS_AllAIAnims& All_Anims, E_AIBehaviour Behaviour, struct FS_AIAnims* Anims);
	void Reinitialize_Animation();
	void ExecuteUbergraph_AnimBP_HumanAI(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_HumanAI_AnimGraphNode_TransitionResult_F0094C7C43F15B319ED260959E1B4A7C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_HumanAI_AnimGraphNode_TransitionResult_7AC93CA44BE45736943A119F86DC7E8F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_HumanAI_AnimGraphNode_TransitionResult_2EE49843442290541D8742905481113F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_HumanAI_AnimGraphNode_TransitionResult_2B5D318843ED3E0BD0AC2EA5A115C27C();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void AnimNotify_Unequip();
	void AnimNotify_Unblock_Attack();
	void AnimNotify_Jump_End();
	void AnimNotify_JogStart();
	void AnimNotify_IdleStart();
	void AnimNotify_Footstep();
	void AnimNotify_Equip();
	void AnimNotify_DeactiveMeleeDetect();
	void AnimNotify_Block_Attack();
	void AnimNotify_Begin_Jump_End();
	void AnimNotify_AI_Reload();
	void AnimNotify_ActiveMeleeDetect();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void AI_End_Alert();
	void AI_Dead();
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Camera_Activate(bool Activate);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Alert(class AActor* Alert_Actor);
	void Actor_Attack_Target(class AActor** Attack_Target);
	void Actor_Aim_Focus(class AActor* Instigator);

	void AI_Is_Dead_(bool* Dead) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_HumanAI_C">();
	}
	static class UAnimBP_HumanAI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_HumanAI_C>();
	}
};
static_assert(alignof(UAnimBP_HumanAI_C) == 0x000010, "Wrong alignment on UAnimBP_HumanAI_C");
static_assert(sizeof(UAnimBP_HumanAI_C) == 0x0026D0, "Wrong size on UAnimBP_HumanAI_C");
static_assert(offsetof(UAnimBP_HumanAI_C, UberGraphFrame) == 0x000350, "Member 'UAnimBP_HumanAI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, __AnimBlueprintMutables) == 0x000358, "Member 'UAnimBP_HumanAI_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimBlueprintExtension_PropertyAccess) == 0x0003D8, "Member 'UAnimBP_HumanAI_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimBlueprintExtension_Base) == 0x0003E0, "Member 'UAnimBP_HumanAI_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Root) == 0x0003E8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_14) == 0x000408, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_13) == 0x000430, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_12) == 0x000458, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_11) == 0x000480, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_10) == 0x0004A8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_9) == 0x0004D0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_8) == 0x0004F8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_7) == 0x000520, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_6) == 0x000548, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_5) == 0x000570, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_4) == 0x000598, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_3) == 0x0005C0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_2) == 0x0005E8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult_1) == 0x000610, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_TransitionResult) == 0x000638, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_24) == 0x000660, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_24' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_28) == 0x0006A8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_28' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_23) == 0x0006F0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_23' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_22) == 0x000738, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_22' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_27) == 0x000780, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_27' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_26) == 0x0007C8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_26' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_21) == 0x000810, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_21' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_20) == 0x000858, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_20' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_25) == 0x0008A0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_25' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_6) == 0x0008E8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_19) == 0x000908, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_19' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_24) == 0x000950, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_24' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_18) == 0x000998, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_18' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_17) == 0x0009E0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_17' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_23) == 0x000A28, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_23' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_22) == 0x000A70, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_22' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_16) == 0x000AB8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_16' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_15) == 0x000B00, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_15' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_21) == 0x000B48, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_21' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_5) == 0x000B90, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_9) == 0x000BB0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_9' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_20) == 0x000C20, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_20' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_8) == 0x000C68, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_8' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_19) == 0x000CD8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_19' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_7) == 0x000D20, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_18) == 0x000D90, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_18' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_6) == 0x000DD8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_5) == 0x000E48, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_17) == 0x000EB8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_17' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_4) == 0x000F00, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_16) == 0x000F20, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_16' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_14) == 0x000F68, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_13) == 0x000FB0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_12) == 0x000FF8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_15) == 0x001040, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_15' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_14) == 0x001088, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_14' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_11) == 0x0010D0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_10) == 0x001118, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_13) == 0x001160, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_13' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_3) == 0x0011A8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_9) == 0x0011C8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_12) == 0x001210, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_12' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_8) == 0x001258, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_7) == 0x0012A0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_11) == 0x0012E8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_11' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_10) == 0x001330, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_10' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_6) == 0x001378, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_5) == 0x0013C0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_9) == 0x001408, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_9' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_2) == 0x001450, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_8) == 0x001470, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_8' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_4) == 0x0014B8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_3) == 0x001500, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_2) == 0x001548, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_7) == 0x001590, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_6) == 0x0015D8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer_1) == 0x001620, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SequencePlayer) == 0x001668, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_5) == 0x0016B0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult_1) == 0x0016F8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_4) == 0x001718, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_4) == 0x001788, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_3) == 0x0017D0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_3) == 0x001840, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_2) == 0x001888, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_2) == 0x0018F8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer_1) == 0x001940, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendSpacePlayer) == 0x0019B0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool_1) == 0x001A20, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateResult) == 0x001A68, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_StateMachine) == 0x001A88, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Slot_4) == 0x001B50, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Slot_3) == 0x001B98, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SaveCachedPose_4) == 0x001BE0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_8) == 0x001C60, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_LayeredBoneBlend_2) == 0x001C88, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SaveCachedPose_3) == 0x001D78, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SaveCachedPose_2) == 0x001DF8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_7) == 0x001E78, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_6) == 0x001EA0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_5) == 0x001EC8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_4) == 0x001EF0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Slot_2) == 0x001F18, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_LayeredBoneBlend_1) == 0x001F60, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SaveCachedPose_1) == 0x002050, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Slot_1) == 0x0020D0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_LayeredBoneBlend) == 0x002118, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_SaveCachedPose) == 0x002208, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_3) == 0x002288, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_2) == 0x0022B0, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose_1) == 0x0022D8, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x002300, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_BlendListByBool) == 0x002418, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_UseCachedPose) == 0x002460, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AnimGraphNode_Slot) == 0x002488, "Member 'UAnimBP_HumanAI_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Use_Aim_Offset) == 0x0024D0, "Member 'UAnimBP_HumanAI_C::Use_Aim_Offset' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Holdable_Actor) == 0x0024D8, "Member 'UAnimBP_HumanAI_C::Holdable_Actor' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, One_Behaviour) == 0x0024E0, "Member 'UAnimBP_HumanAI_C::One_Behaviour' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Aim_Offset) == 0x0024E8, "Member 'UAnimBP_HumanAI_C::Aim_Offset' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Two_Behaviour) == 0x0024F0, "Member 'UAnimBP_HumanAI_C::Two_Behaviour' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Anims_1) == 0x0024F1, "Member 'UAnimBP_HumanAI_C::Anims_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Holdable_Anims_2) == 0x0024F8, "Member 'UAnimBP_HumanAI_C::Holdable_Anims_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AI_Component) == 0x002548, "Member 'UAnimBP_HumanAI_C::AI_Component' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Holdable_Anims_1) == 0x002550, "Member 'UAnimBP_HumanAI_C::Holdable_Anims_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Combat_Stance) == 0x0025A0, "Member 'UAnimBP_HumanAI_C::Combat_Stance' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Allow_Combat_Stance) == 0x0025A1, "Member 'UAnimBP_HumanAI_C::Allow_Combat_Stance' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Combat_Stance_Anims) == 0x0025A8, "Member 'UAnimBP_HumanAI_C::Combat_Stance_Anims' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, AI_Character) == 0x0025F8, "Member 'UAnimBP_HumanAI_C::AI_Character' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Aim_Yaw) == 0x002600, "Member 'UAnimBP_HumanAI_C::Aim_Yaw' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Jump_Start_End) == 0x002608, "Member 'UAnimBP_HumanAI_C::Jump_Start_End' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Jump_Land_End) == 0x002609, "Member 'UAnimBP_HumanAI_C::Jump_Land_End' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Direction) == 0x002610, "Member 'UAnimBP_HumanAI_C::Direction' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Is_Falling) == 0x002618, "Member 'UAnimBP_HumanAI_C::Is_Falling' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Is_Crouching) == 0x002619, "Member 'UAnimBP_HumanAI_C::Is_Crouching' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Moving) == 0x00261A, "Member 'UAnimBP_HumanAI_C::Moving' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Speed) == 0x002620, "Member 'UAnimBP_HumanAI_C::Speed' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Smart_AI_Anims_1) == 0x002628, "Member 'UAnimBP_HumanAI_C::Smart_AI_Anims_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Smart_AI_Anims_2) == 0x002678, "Member 'UAnimBP_HumanAI_C::Smart_AI_Anims_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_HumanAI_C, Holdable) == 0x0026C8, "Member 'UAnimBP_HumanAI_C::Holdable' has a wrong offset!");

}


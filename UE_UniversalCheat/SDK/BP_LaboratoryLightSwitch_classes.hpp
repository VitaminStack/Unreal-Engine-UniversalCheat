#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LaboratoryLightSwitch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_LaboratoryMaster_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LaboratoryLightSwitch.BP_LaboratoryLightSwitch_C
// 0x0038 (0x02E0 - 0x02A8)
class ABP_LaboratoryLightSwitch_C final : public ABP_LaboratoryMaster_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_LaboratoryLight_C*>          Lights;                                            // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_LaboratoryLightSwitch_C*>    Switches;                                          // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          On_;                                               // 0x02D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Off_;                                              // 0x02D9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Warning_;                                          // 0x02DA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetPower_Warning(bool SetWarning);
	void SetPower_TurnedOn(bool TurnOn);
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetInteractOption(const struct FGameplayTag& Option);
	void PickupBuildFromGround();
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnRep_Warning_();
	void OnRep_On_();
	void OnRep_Off_();
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigCanInteract(bool* Result);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void ExecuteUbergraph_BP_LaboratoryLightSwitch(int32 EntryPoint);
	void Event_LightSwitch();
	void CallInteractOnObject();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LaboratoryLightSwitch_C">();
	}
	static class ABP_LaboratoryLightSwitch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LaboratoryLightSwitch_C>();
	}
};
static_assert(alignof(ABP_LaboratoryLightSwitch_C) == 0x000008, "Wrong alignment on ABP_LaboratoryLightSwitch_C");
static_assert(sizeof(ABP_LaboratoryLightSwitch_C) == 0x0002E0, "Wrong size on ABP_LaboratoryLightSwitch_C");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_LaboratoryLightSwitch_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, StaticMesh) == 0x0002B0, "Member 'ABP_LaboratoryLightSwitch_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, Lights) == 0x0002B8, "Member 'ABP_LaboratoryLightSwitch_C::Lights' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, Switches) == 0x0002C8, "Member 'ABP_LaboratoryLightSwitch_C::Switches' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, On_) == 0x0002D8, "Member 'ABP_LaboratoryLightSwitch_C::On_' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, Off_) == 0x0002D9, "Member 'ABP_LaboratoryLightSwitch_C::Off_' has a wrong offset!");
static_assert(offsetof(ABP_LaboratoryLightSwitch_C, Warning_) == 0x0002DA, "Member 'ABP_LaboratoryLightSwitch_C::Warning_' has a wrong offset!");

}


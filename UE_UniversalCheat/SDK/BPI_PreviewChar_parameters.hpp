#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PreviewChar

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_PreviewChar.BPI_PreviewChar_C.Preview Set Equipped Primitive By Slot
// 0x0020 (0x0020 - 0x0000)
struct BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProcessAttachments_;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot");
static_assert(sizeof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot) == 0x000020, "Wrong size on BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot");
static_assert(offsetof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot, Tag) == 0x000000, "Member 'BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot::Tag' has a wrong offset!");
static_assert(offsetof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot, Item) == 0x000008, "Member 'BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot::Item' has a wrong offset!");
static_assert(offsetof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot, Socket) == 0x000010, "Member 'BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot::Socket' has a wrong offset!");
static_assert(offsetof(BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot, ProcessAttachments_) == 0x000018, "Member 'BPI_PreviewChar_C_Preview_Set_Equipped_Primitive_By_Slot::ProcessAttachments_' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.PreviewAttachmentUpdated
// 0x0010 (0x0010 - 0x0000)
struct BPI_PreviewChar_C_PreviewAttachmentUpdated final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_PreviewAttachmentUpdated) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_PreviewAttachmentUpdated");
static_assert(sizeof(BPI_PreviewChar_C_PreviewAttachmentUpdated) == 0x000010, "Wrong size on BPI_PreviewChar_C_PreviewAttachmentUpdated");
static_assert(offsetof(BPI_PreviewChar_C_PreviewAttachmentUpdated, Tag) == 0x000000, "Member 'BPI_PreviewChar_C_PreviewAttachmentUpdated::Tag' has a wrong offset!");
static_assert(offsetof(BPI_PreviewChar_C_PreviewAttachmentUpdated, Item) == 0x000008, "Member 'BPI_PreviewChar_C_PreviewAttachmentUpdated::Item' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.PreviewOnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct BPI_PreviewChar_C_PreviewOnWeaponEquipped final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_PreviewOnWeaponEquipped) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_PreviewOnWeaponEquipped");
static_assert(sizeof(BPI_PreviewChar_C_PreviewOnWeaponEquipped) == 0x000010, "Wrong size on BPI_PreviewChar_C_PreviewOnWeaponEquipped");
static_assert(offsetof(BPI_PreviewChar_C_PreviewOnWeaponEquipped, Tag) == 0x000000, "Member 'BPI_PreviewChar_C_PreviewOnWeaponEquipped::Tag' has a wrong offset!");
static_assert(offsetof(BPI_PreviewChar_C_PreviewOnWeaponEquipped, Item) == 0x000008, "Member 'BPI_PreviewChar_C_PreviewOnWeaponEquipped::Item' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.SetCaptureActivate
// 0x0001 (0x0001 - 0x0000)
struct BPI_PreviewChar_C_SetCaptureActivate final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_SetCaptureActivate) == 0x000001, "Wrong alignment on BPI_PreviewChar_C_SetCaptureActivate");
static_assert(sizeof(BPI_PreviewChar_C_SetCaptureActivate) == 0x000001, "Wrong size on BPI_PreviewChar_C_SetCaptureActivate");
static_assert(offsetof(BPI_PreviewChar_C_SetCaptureActivate, Value) == 0x000000, "Member 'BPI_PreviewChar_C_SetCaptureActivate::Value' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.SetPreviewMeshRotation
// 0x0010 (0x0010 - 0x0000)
struct BPI_PreviewChar_C_SetPreviewMeshRotation final
{
public:
	struct FVector2D                              Rot;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_SetPreviewMeshRotation) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_SetPreviewMeshRotation");
static_assert(sizeof(BPI_PreviewChar_C_SetPreviewMeshRotation) == 0x000010, "Wrong size on BPI_PreviewChar_C_SetPreviewMeshRotation");
static_assert(offsetof(BPI_PreviewChar_C_SetPreviewMeshRotation, Rot) == 0x000000, "Member 'BPI_PreviewChar_C_SetPreviewMeshRotation::Rot' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.SetPreviewPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct BPI_PreviewChar_C_SetPreviewPawnOwner final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_SetPreviewPawnOwner) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_SetPreviewPawnOwner");
static_assert(sizeof(BPI_PreviewChar_C_SetPreviewPawnOwner) == 0x000008, "Wrong size on BPI_PreviewChar_C_SetPreviewPawnOwner");
static_assert(offsetof(BPI_PreviewChar_C_SetPreviewPawnOwner, Owner) == 0x000000, "Member 'BPI_PreviewChar_C_SetPreviewPawnOwner::Owner' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.SetPreviewRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct BPI_PreviewChar_C_SetPreviewRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 RT;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_SetPreviewRenderTarget) == 0x000008, "Wrong alignment on BPI_PreviewChar_C_SetPreviewRenderTarget");
static_assert(sizeof(BPI_PreviewChar_C_SetPreviewRenderTarget) == 0x000008, "Wrong size on BPI_PreviewChar_C_SetPreviewRenderTarget");
static_assert(offsetof(BPI_PreviewChar_C_SetPreviewRenderTarget, RT) == 0x000000, "Member 'BPI_PreviewChar_C_SetPreviewRenderTarget::RT' has a wrong offset!");

// Function BPI_PreviewChar.BPI_PreviewChar_C.SetPreviewZoomInOut
// 0x0001 (0x0001 - 0x0000)
struct BPI_PreviewChar_C_SetPreviewZoomInOut final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PreviewChar_C_SetPreviewZoomInOut) == 0x000001, "Wrong alignment on BPI_PreviewChar_C_SetPreviewZoomInOut");
static_assert(sizeof(BPI_PreviewChar_C_SetPreviewZoomInOut) == 0x000001, "Wrong size on BPI_PreviewChar_C_SetPreviewZoomInOut");
static_assert(offsetof(BPI_PreviewChar_C_SetPreviewZoomInOut, Value) == 0x000000, "Member 'BPI_PreviewChar_C_SetPreviewZoomInOut::Value' has a wrong offset!");

}


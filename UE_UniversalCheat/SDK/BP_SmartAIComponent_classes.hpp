#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmartAIComponent

#include "Basic.hpp"

#include "S_ReactedActors_structs.hpp"
#include "E_OrderOptions_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "S_AIInteractAnim_structs.hpp"
#include "E_AIBehaviour_structs.hpp"
#include "E_FleeSetting_structs.hpp"
#include "S_MeleeAnimations_structs.hpp"
#include "E_HitboxTypeAI_structs.hpp"
#include "E_StimuliReaction_structs.hpp"
#include "S_TriggerResponse_structs.hpp"
#include "S_ReactSettings_structs.hpp"
#include "S_AttachedHoldables_structs.hpp"
#include "E_BlockType_structs.hpp"
#include "S_EmoteAnimations_structs.hpp"
#include "E_StartingAIBehaviours_structs.hpp"
#include "S_AIOptimization_structs.hpp"
#include "S_GeneralSettings_structs.hpp"
#include "S_AllAIAnims_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "S_ClimbAnims_structs.hpp"
#include "S_RoutineSettings_structs.hpp"
#include "E_DeadBodyReaction_structs.hpp"
#include "E_Radius_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmartAIComponent.BP_SmartAIComponent_C
// 0x1B60 (0x1C00 - 0x00A0)
class UBP_SmartAIComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Debug_Mode;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Debug_Text_Duration;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Attackers;                                         // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_MasterInteractionPoint_C*           Interaction_Point;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 AI_Current_Behaviour;                              // 0x00D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Still_Location;                                    // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Still_Direction;                                   // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterAIController_C*               AI_Controller;                                     // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Attackers_Forget_Time;                             // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ACharacter*                             AI_Character;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterWayPoint_C*                   Way_Point;                                         // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x0130(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Health;                                            // 0x0134(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Accuracy;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Combat_Equip_Weapon;                               // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Only_Melee_When_No_Ammo;                           // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequenceBase*>              Death_Animations;                                  // 0x0148(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_MasterInteractionPoint_C*>   Specified_Interaction_Point;                       // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Use_Interaction_Point_Tags;                        // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Interaction_Point_Tags;                            // 0x0170(0x0010)(Edit, BlueprintVisible)
	double                                        Interaction_Point_Range;                           // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Between_IP_Behavior;                           // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Between_IP_Behaviour;                              // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Between_IP_Behaviour_Time;                         // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AI_Base;                                           // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Base_Distance;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flee_Low_Health;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flee_When_Found;                                   // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Face_Attacker_When_Hidden;                         // 0x01AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Hide;                                       // 0x01AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AF[0x1];                                      // 0x01AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hide_Time_Length;                                  // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Hidden_Montages;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible)
	double                                        Forget_Attackers_Time;                             // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Forget_Attackers;                                  // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return_To_Start_Location;                          // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FleeSetting                                 Flee_Type;                                         // 0x01D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D3[0x5];                                      // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Temp_Behavior_Timer;                               // 0x01D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Melee_Attack;                                  // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Basic_Melee_Radius;                                // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Basic_Melee_Collision;                             // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Melee_Animation_Order;                             // 0x01F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_MeleeAnimations>             Melee_Animations;                                  // 0x01F8(0x0010)(Edit, BlueprintVisible)
	double                                        Melee_Distance;                                    // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Melee_Switch_Distance;                             // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_MeleeAnimations>             Lower_Melee_Animations;                            // 0x0218(0x0010)(Edit, BlueprintVisible)
	TMap<E_HitboxTypeAI, double>                  Melee_Damage;                                      // 0x0228(0x0050)(Edit, BlueprintVisible)
	double                                        Melee_Attack_Frequancy;                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Melee_Anim_Time_Frequency;                     // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Melee_Attack_While_Moving;                     // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attack_Target;                                     // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Attack_Target_Last_Location;                       // 0x0290(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Search_Direction;                                  // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Combat;                                            // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wait_Time_Between_Searching;                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Search_Area_Size;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RangeStartPoint;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Behavior_Index;                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Move_To_Actor;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Being_Interacted_With;                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Available_To_AI_Interact;                          // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_AI_Interact;                                   // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Only_Interact_With_AI_Teams;                       // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AI_Teams;                                          // 0x02F8(0x0010)(Edit, BlueprintVisible)
	double                                        AI_Interact_Ranage;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Interact_Time_Deviation;                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_AIInteractAnim>              AI_Interaction_Animations;                         // 0x0318(0x0010)(Edit, BlueprintVisible)
	E_OrderOptions                                AI_Interaction_Animation_Order;                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AI_Interact_Time;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Melee_Hit_Actors;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Temporary_Stop;                                    // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 End_Behaviour;                                     // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, E_StimuliReaction>          Current_Audio_Response;                            // 0x0350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Search_Location;                                   // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Flee_From_Actors;                                  // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           Forget_Attackers_Timer_Reference;                  // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Temp_Behaviour;                                    // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Trigger_Cooldown;                              // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TriggerResponse>             Trigger_Activated_Response;                        // 0x03D8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_TriggerResponse>             Trigger_Deactivated_Response;                      // 0x03E8(0x0010)(Edit, BlueprintVisible)
	double                                        Trigger_Cooldown_Time;                             // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Proximity_Response;                            // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_ReactSettings>               Proximity_Activated_Response;                      // 0x0408(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_ReactSettings>               Proximity_Deactivated_Response;                    // 0x0418(0x0010)(Edit, BlueprintVisible)
	bool                                          Proximity_Responce_Requires_Sight;                 // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Reaction_Cooldown;                             // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Proximity_Cool_Down_Time;                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Proximity_Sphere_Radius;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Trigger_Cooldown_Time;                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Focus_Actor;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Proximity_Cool_Down_Time;                  // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_AttachedHoldables>           Attached_Holdables;                                // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_AIWeapon_Master_C*                  Holdable_Actor;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Block_Attack;                                      // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current_Emote_Index;                               // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_EmoteAnimations                     Current_Emote;                                     // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_EmoteProp_C*                        Emote_Actor;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Reloading;                                         // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current_Ammo;                                      // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Searching_For_Target;                              // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Attack_Target_Velocity;                            // 0x04A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Emote_Timer;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_Holdable_Class;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          In_Transition;                                     // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Anim_Transition_Cooldown;                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Audio_Transition_Cooldown;                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Second_Audio_Transition;                           // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Last_Non_Combat_Behaviour;                         // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In_Override_Behaviour;                             // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Base_Behaviour;                                    // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EB[0x5];                                      // 0x04EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Behaviour_Timer;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Base_Behaviour;                                // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Emote_Done_Timer;                                  // 0x0500(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Second_Anim_Transition;                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Ragdoll_On_Death;                                  // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Interact_Loop_Order_Anims;                      // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StartingAIBehaviours                        AI_Interact_Between_Behaviour;                     // 0x0512(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_513[0x5];                                      // 0x0513(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Between_AI_Interact_Time;                          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Muzzle_Effect;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        From_Audio_Length;                                 // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LOS_Break_Search_Time;                             // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ACharacter* AI_Character)> AI_Killed;                                         // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Dead_Despawned_Time;                               // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ReactedActors>               Reacted_Actors;                                    // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Melee_Trace_Timer;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_AIOptimization                      AI_Manager_Settings;                               // 0x0568(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Friendly_Fire;                               // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_575[0x3];                                      // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combat_Search_Time;                                // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Friendly_Tags;                                     // 0x0580(0x0010)(Edit, BlueprintVisible)
	double                                        Flee_Time;                                         // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Still_Override_Animation;                          // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Still_Override_Order;                              // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Still_Override_Anims;                              // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Still_Behaviour_Override;                          // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GeneralSettings                     Still_Reaction_Settings;                           // 0x05C0(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TSet<E_AIBehaviour>                           Override_Behaviours;                               // 0x0668(0x0050)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   Priority_Montages;                                 // 0x06B8(0x0010)(Edit, BlueprintVisible)
	double                                        Audio_Transition_Cooldown;                         // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Animation_Transition_Cooldown;                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_AllAIAnims                          AI_Animations;                                     // 0x06D8(0x04C8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Use_Sight_Reaction_Time;                           // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Reaction_Time;                                     // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reacted_Actor_Time;                                // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Can_Crouch;                                        // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB9[0x7];                                      // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_AIBehaviour, double>                   Movement_Speeds;                                   // 0x0BC0(0x0050)(Edit, BlueprintVisible)
	struct FS_GeneralSettings                     Default_Reaction_Settings;                         // 0x0C10(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        Flee_Distance;                                     // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flee_Distance_Cut_Off;                             // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_GeneralSettings                     Flee_Reaction_Settings;                            // 0x0CC8(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        Roam_Wait_Time;                                    // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roam_Wait_Time_Deviation;                          // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Roam_Distance;                                 // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Roam_Distance;                                 // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Prop_Anims;                                    // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D91[0x7];                                      // 0x0D91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Prop_Anim_Freequency;                              // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Prop_Anim_Frequency_Deviation;                     // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Prop_Anim_Order;                                   // 0x0DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA9[0x7];                                      // 0x0DA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_EmoteAnimations>             Prop_Anims_Animations;                             // 0x0DB0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	E_OrderOptions                                Roam_Wait_Anim_Order;                              // 0x0DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC1[0x7];                                      // 0x0DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Roam_Wait_Anims;                                   // 0x0DC8(0x0010)(Edit, BlueprintVisible)
	bool                                          Loop_Roam_Wait_Order_Anims;                        // 0x0DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD9[0x7];                                      // 0x0DD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GeneralSettings                     Roam_Reaction_Settings;                            // 0x0DE0(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_GeneralSettings                     Search_Reaction_Settings;                          // 0x0E88(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_GeneralSettings                     AI_Interact_Reaction_Settings;                     // 0x0F30(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	E_OrderOptions                                Way_Point_Options;                                 // 0x0FD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop_Way_Points;                                   // 0x0FD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reverse_Loop_Way_Point;                            // 0x0FDA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FDB[0x5];                                      // 0x0FDB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_MasterWayPoint_C*>           Way_Points;                                        // 0x0FE0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FS_GeneralSettings                     Way_Point_Reaction_Settings;                       // 0x0FF0(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_GeneralSettings                     Face_Direction_Reaction_Settings;                  // 0x1098(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_GeneralSettings                     Melee_Reaction_Settings;                           // 0x1140(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        Melee_Trace_Lenth;                                 // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Magazine_Ammo;                                 // 0x11F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Per_Shot_Ammo_Reduction;                           // 0x11F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Reload_Montage;                                    // 0x11F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Total_Ammo;                                    // 0x1200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Ammo;                                          // 0x1204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Reload;                                        // 0x1205(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_With_Full_Magazine;                          // 0x1206(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1207[0x1];                                     // 0x1207(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Hit_Deviation__Projectile_;                    // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Accuracy__Projectile_;                             // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Miss_Deviation__Projectile_;                   // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UClass*                                 Range_Projectile;                                  // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Trace_Range;                                       // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Trace_Radius;                                      // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spread__Trace_;                                    // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_LifeSpan__Trace_;                            // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class UMaterialInterface*> Surface_Decal__Trace_;                             // 0x1248(0x0050)(Edit, BlueprintVisible)
	double                                        Decal_Fade_Distance__Trace_;                       // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class UParticleSystem*> Surface_Emitters__Trace_;                          // 0x12A0(0x0050)(Edit, BlueprintVisible)
	struct FVector                                Surface_Decal_Size__Trace_;                        // 0x12F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              RangeShootSound;                                   // 0x1308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Range_Attack_While_Moving;                     // 0x1310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Range_Anim_Time_Frequency;                     // 0x1311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1312[0x6];                                     // 0x1312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Range_Attack_Frequency;                            // 0x1318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Range_Attack;                                  // 0x1320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Range_Attack_Anim_Order;                           // 0x1321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1322[0x6];                                     // 0x1322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Range_Attack_Montages;                             // 0x1328(0x0010)(Edit, BlueprintVisible)
	TMap<E_HitboxTypeAI, double>                  Range_Damage;                                      // 0x1338(0x0050)(Edit, BlueprintVisible)
	double                                        Range_Attack_Distance;                             // 0x1388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Projectile_Homing_Acceleration_Magnitude;          // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Homing_Projectile;                                 // 0x1398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Projectile_Actor_Settings;                     // 0x1399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139A[0x6];                                     // 0x139A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GeneralSettings                     Range_Reaction_Settings;                           // 0x13A0(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UParticleSystem*                        Range_Attack_Particle_Effect;                      // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Range_Attack_Particle_Socket;                      // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Cover;                                         // 0x1458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1459[0x7];                                     // 0x1459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GeneralSettings                     Follow_Reaction_Settings;                          // 0x1460(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, HasGetValueTypeHash)
	class AActor*                                 Follow_Actor;                                      // 0x1508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Follow_Distance;                               // 0x1510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Copy_Follow_Actor_Direction;                       // 0x1518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_Follow_Attack_Target;                       // 0x1519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_Follow_Attackers;                           // 0x151A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151B[0x5];                                     // 0x151B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Follow_Attack_Distance;                            // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StartingAIBehaviours                        Follow_End_Behaviour;                              // 0x1528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1529[0x7];                                     // 0x1529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_GeneralSettings                     Interaction_Point_Reaction_Settings;               // 0x1530(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        Flee_Base_Distance;                                // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Require_Sight_Of_Attacker;                         // 0x15E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15E1[0x7];                                     // 0x15E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Alert_Defenders_Distances;                         // 0x15E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Defend_Tags;                                       // 0x15F0(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         Defend_Actors;                                     // 0x1600(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	double                                        Defend_Cooldown_Time;                              // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Standing_Half_Hight;                               // 0x1618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterWayPoint_C*                   Current_Way_Point;                                 // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 Last_Behaviour;                                    // 0x1628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1629[0x7];                                     // 0x1629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Climb_End_Location;                                // 0x1630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Jump_Look_At_Rotation;                             // 0x1650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Jump_End_Location;                                 // 0x1668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End_Climb_Location;                                // 0x1680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbing;                                          // 0x1698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Forward_Blocked;                                   // 0x1699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169A[0x6];                                     // 0x169A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Climb_Hight;                               // 0x16A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valt;                                              // 0x16A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A9[0x7];                                     // 0x16A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Valt_End_Location;                                 // 0x16B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Object_Normal;                                     // 0x16C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Climb_Anim;                                        // 0x16E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Alert_Cooldown_Time;                       // 0x16E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ClimbAnims>                  Climb_Animations;                                  // 0x16F0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_ClimbAnims>                  Valt_Animations;                                   // 0x1700(0x0010)(Edit, BlueprintVisible)
	double                                        Max_Drop_Down_Height;                              // 0x1710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Attack_Targets;                                    // 0x1718(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          In_Cover;                                          // 0x1728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Climb;                                         // 0x1729(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_AI_Routine;                                    // 0x172A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172B[0x5];                                     // 0x172B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_RoutineSettings>             AI_Routines;                                       // 0x1730(0x0010)(Edit, BlueprintVisible)
	class AActor*                                 Time_of_Day;                                       // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Routine_Timer;                                     // 0x1748(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_OrderOptions                                Face_Direction_Anim_Order;                         // 0x1750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop_Face_Direction_Anims;                         // 0x1751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1752[0x6];                                     // 0x1752(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   Face_Direction_Anims;                              // 0x1758(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          Delay_Range_Attack;                                // 0x1768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1769[0x7];                                     // 0x1769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Range_Delay_Time;                                  // 0x1770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Delay_Done;                                        // 0x1778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_React_Timer;                                   // 0x1779(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Combat_Stance;                                 // 0x177A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177B[0x5];                                     // 0x177B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hit_Reaction_Cooldown;                             // 0x1780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combat_Stance_Time;                                // 0x1788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Dead_Body_Reaction;                            // 0x1790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DeadBodyReaction                            Dead_Body_Responce;                                // 0x1791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_Body_Reaction_Temporary;                      // 0x1792(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1793[0x5];                                     // 0x1793(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dead_Body_Temporary_Time;                          // 0x1798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Dead_Body_Alert_Tags;                              // 0x17A0(0x0010)(Edit, BlueprintVisible)
	double                                        Dead_Body_Alert_Range;                             // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Dead_Body_React_Tags;                              // 0x17B8(0x0010)(Edit, BlueprintVisible)
	bool                                          Dead_Body_Alert;                                   // 0x17C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C9[0x7];                                     // 0x17C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Dead_Body_Alert_Actors;                            // 0x17D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         Seen_Dead_Bodys;                                   // 0x17E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Temperary_Response;                                // 0x17F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17F1[0x7];                                     // 0x17F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temparary_Time;                                    // 0x17F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DeadBodyReaction                            Alerted_Response;                                  // 0x1800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Be_Alerted_AI;                                 // 0x1801(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1802[0x6];                                     // 0x1802(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Yaw_Aim_Offset;                                    // 0x1808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aim_Offset_Enabled;                                // 0x1810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_MeleeAnimations                     Current_Melee_Anim;                                // 0x1818(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Alert_Cooldown_Time;                               // 0x1870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Strafe;                                        // 0x1878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1879[0x7];                                     // 0x1879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Min_Strafe_Distance;                               // 0x1880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Strafe_Distance;                               // 0x1888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow_Strafe;                                      // 0x1890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1891[0x7];                                     // 0x1891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Last_Proximity_Check;                              // 0x1898(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	E_StartingAIBehaviours                        Start_Behaviour;                                   // 0x18A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A9[0x7];                                     // 0x18A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Start_Holdable;                                    // 0x18B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Start_Range_Weapon;                                // 0x18B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Start_Melee_Weapon;                                // 0x18C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x18C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C9[0x7];                                     // 0x18C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Combat_Stance_Timer;                               // 0x18D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Combat_Stance;                                     // 0x18D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Call_Defenders;                                    // 0x18D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Ready;                                          // 0x18DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18DB[0x5];                                     // 0x18DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Climb_Speed;                                       // 0x18E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Block;                                         // 0x18E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18E9[0x7];                                     // 0x18E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_BlockType, int32>                      Block_Chances;                                     // 0x18F0(0x0050)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   Melee_Block_Anims;                                 // 0x1940(0x0010)(Edit, BlueprintVisible)
	struct FTimerHandle                           Block_Timer;                                       // 0x1950(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Block_Cooldown;                                    // 0x1958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   Blocked_Attack_Montages;                           // 0x1960(0x0010)(Edit, BlueprintVisible)
	bool                                          Flee_Alert;                                        // 0x1970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Be_Flee_Alerted;                               // 0x1971(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1972[0x6];                                     // 0x1972(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Flee_Alert_Actors;                                 // 0x1978(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FName>                           Flee_Alert_Tags;                                   // 0x1988(0x0010)(Edit, BlueprintVisible)
	double                                        Flee_Alert_Distance;                               // 0x1998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimed_Still_Override;                              // 0x19A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19A1[0x7];                                     // 0x19A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Flee_Start_Location;                               // 0x19A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_LOS_Search_Time;                               // 0x19C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C1[0x7];                                     // 0x19C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Projectile_Speed;                                  // 0x19C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Melee_Allow_Rotation;                              // 0x19D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               CoverTraceChannel;                                 // 0x19D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               AttackTraceChannel;                                // 0x19D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D3[0x5];                                     // 0x19D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Despawn_Timer;                                     // 0x19D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageMulti;                                       // 0x19E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAttack;                                          // 0x19E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Despawn_AI;                                        // 0x19E9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19EA[0x6];                                     // 0x19EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Radius, int32>                         Acceptable_Radius;                                 // 0x19F0(0x0050)(Edit, BlueprintVisible)
	class FName                                   DeadAICapsuleCollision;                            // 0x1A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeadAIMeshCollision;                               // 0x1A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class USoundBase*>     Surface_Sound__Trace_;                             // 0x1A50(0x0050)(Edit, BlueprintVisible)
	class USoundCue*                              DeathSound;                                        // 0x1AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class UMaterialInterface*> Melee_Surface_Decal;                               // 0x1AA8(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class USoundBase*>     Melee_Surface_Sounds;                              // 0x1AF8(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class UParticleSystem*> Melee_Emitters;                                    // 0x1B48(0x0050)(Edit, BlueprintVisible)
	double                                        MeleeDetectHighOffset;                             // 0x1B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeleeDetectSize;                                   // 0x1BA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Respawn;                                           // 0x1BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BB9[0x7];                                     // 0x1BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                Sounds;                                            // 0x1BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          AllowDynamicRespawnCheck;                          // 0x1BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BD1[0x3];                                     // 0x1BD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StreamLevelPackageName;                            // 0x1BD4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BDC[0x4];                                     // 0x1BDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnedBy;                                         // 0x1BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBTS_FaceDirectionAnimations_C*         FaceDirectionTask;                                 // 0x1BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHealth;                                         // 0x1BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BF4[0x4];                                     // 0x1BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Sight_Actor;                                       // 0x1BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_AI();
	void Active_Melee_Detect();
	void Actor_Aim_Focus(class AActor* Instigator);
	void Actor_Attack_Target(class AActor** Attack_Target_0);
	void Add_Current_Ammo(int32 Add_Amount);
	void AI_Alert(class AActor* Alert_Actor);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Camera_Activate(bool Activate_0);
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Dead();
	void AI_End_Alert();
	void AI_Interact_Time_Total(double* Time_0);
	void AI_Take_Damage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void AI_Trigger_Activated_Bind(class AActor* Overlap_Actor, class ABP_AITrigger_C* AI_Trigger);
	void AI_Trigger_Deactivated_Bind(class AActor* End_Overlap_Actor, class ABP_AITrigger_C* AI_Trigger);
	void Aimed_Focus(class AActor* Aimed_Instigator);
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void Alert_Defenders(class AActor* Attacker);
	void Attack_Distance_Check();
	void Audio_Reaction(class AActor* Actor, const struct FAIStimulus& AI_Stimulus);
	void Basic_Melee_Attack_Collision();
	void Begin_Flee();
	void Cancel_AI_Interact();
	void Cancel_Melee_Timer();
	void Cancel_Temp_Behaviour();
	void ChangeDamageMulti(double ChangeAmount);
	void Check_Attached_Holdables(class UClass* Holdable_Class, bool* Return_value, class ABP_AIWeapon_Master_C** Holdable);
	void Check_Attack_Targets(bool* Target_Found, class AActor** Actor);
	void Check_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void Check_Flee_Alert(class AActor* Actor);
	void Check_Start_Deactivated();
	void Clear_Emote();
	void Climb_Up();
	void Climb_Up_Close();
	void Climbing_Checks();
	void Closest_Flee_From_Actor(class AActor** Actor, double* Distance);
	void Convert_To_Behaviour(E_StartingAIBehaviours Starting_Behaviour, E_AIBehaviour* Behaviour);
	void Cooldown_Timer();
	void CreateNewController();
	void Crouch_Check();
	void Current_Ammo_Check(bool* Has_Ammo, int32* Ammo);
	void Current_Range_Attack_Distance(double* Attack_Range);
	void Current_Reaction_Settings(struct FS_GeneralSettings* Reaction_Settings);
	void Damage_Reaction(double Damage, class AActor* Actor);
	void Deactivate_AI();
	void Deactive_Melee_Detect();
	void Dead_Body_Reaction(class AActor* Reaction_Actor);
	void Debug_Text(const class FString& InString, const struct FLinearColor& TextColor);
	void Defend_Check(class AActor* Attacked, class AActor* Attacker);
	void Delayed_Range_Attack();
	void DespawnCheck();
	void Destroy_Emote_Actor();
	void Determine_Attack_Type();
	void Drop_Down_Check();
	void Emote();
	void Emote_Done();
	void End_Anim_Transition();
	void End_Block_Timer();
	void End_Climb();
	void End_Combat();
	void End_Combat_Stance();
	void End_Flee();
	void Entered_Combat();
	void Equip_Holdable(class UClass* Holdable_Class);
	void ExecuteUbergraph_BP_SmartAIComponent(int32 EntryPoint);
	void Flee_Timer_End();
	void Forget_Attackers_Timer();
	void Forward_Check(double Forward_Distance, double Down_Distance, const struct FVector& Trace_Towards, struct FHitResult* Hit_Result, bool* Return_value);
	void FrequencyTimer(double Time_0);
	void Generic_Damage_Reaction(class AActor* Damage_Cause);
	void Get_Attached_Weapon_Ammo(bool* Ammo_Found, class ABP_AIWeapon_Master_C** Holdable_With_Ammo);
	void Hit_React_Timer_Done();
	void Holdable_Equip_Socket(class UClass* Holdable_Class, class FName* Equip_Socket, class FName* Unequip_Socket, bool* Equip_Montage);
	void Holdable_Unequipped();
	void Is_Holding_Weapon(bool* Is_Weapon, class ABP_AIWeapon_Master_C** Holdable_Actor_0);
	bool Is_In_Combat_();
	void Is_Low_Health(bool* Low_Health, int32* Health_0);
	void Jump_Down(const struct FVector& End_Location);
	void Jump_Down_Close();
	void Jump_Down_Enter();
	void Last_Attacker(class AActor** Attacker);
	void Melee_Collision_Check(class AActor* Hit_Actor, class UPrimitiveComponent* Hit_Component, class FName Bone_Name, const struct FHitResult& Hit);
	void Melee_Trace_Timer_Events();
	void Move_Across();
	void Multicast_AI_Dead();
	void Multicast_Combat_Stance(bool Combat_Stance_0);
	void Multicast_Despawn_Body();
	void Multicast_Homing_Projectile_Spawn(const struct FVector& Spawn_Transform_Location, class AActor* Attack_Target_0, class UClass* Class_0);
	void Multicast_Melee_Emitter(const struct FHitResult& Hit);
	void Multicast_Play_Montage(class UAnimMontage* Montage, double Play_Rate, class FName Start_Name);
	void Multicast_Play_Transition_to_Audio(double Play_In, class USoundCue* Audio);
	void Multicast_Projectile_Spawn(const struct FVector& Spawn_Transform_Location, const struct FVector& Velocity, class UClass* Class_0, double Speed);
	void Multicast_Range_Attack_Partical(const struct FHitResult& Hit_Result);
	void Multicast_Respawn();
	void Multicast_Set_Collision_Profile(class FName Capsule_Profile, class FName Mesh_Profile);
	void Multicast_Sound(class USoundCue* Sound, double Volume);
	void Multicast_Start_Aim_Offset(class AActor* Target);
	void Multicast_Stop_Aim_Offset();
	void Multicast_Stop_Current_Montage(bool Keep_EmoteMontages);
	void Multicast_Stop_Montage(class UAnimMontage* Montage);
	void OnBlendOut_2049CB47425917B35D40CBAEB03142CE(class FName NotifyName);
	void OnCompleted_2049CB47425917B35D40CBAEB03142CE(class FName NotifyName);
	void OnFail_EC17E16E4EA49390E6C1F7A05964C877(EPathFollowingResult MovementResult);
	void OnInterrupted_2049CB47425917B35D40CBAEB03142CE(class FName NotifyName);
	void OnNotifyBegin_2049CB47425917B35D40CBAEB03142CE(class FName NotifyName);
	void OnNotifyEnd_2049CB47425917B35D40CBAEB03142CE(class FName NotifyName);
	void OnSuccess_EC17E16E4EA49390E6C1F7A05964C877(EPathFollowingResult MovementResult);
	void Possessed();
	void Proximity_Activated(class AActor* Proximity_Actor, bool* Proximity_Triggered);
	void Proximity_Deactivated(class AActor* Proximity_Actor, bool* Proximity_Deactivated_0);
	void Proximity_Updates();
	void Random_IP(class ABP_MasterInteractionPoint_C* Last_Interaction_Point, bool* Return_value, class ABP_MasterInteractionPoint_C** Interaction_Point_0);
	void Random_Specified_IP(class ABP_MasterInteractionPoint_C* Last_Interaction_Point, bool* Return_value, class ABP_MasterInteractionPoint_C** Interaction_Point_0);
	void Range_Attack();
	void Reacted_Actor_Check(class AActor* Actor, bool* Actor_Found);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Remove_Attacker(class AActor* Attacker);
	void Remove_Current_Ammo(int32 Remove_Amount);
	void Remove_Total_Amount(int32 Remove_Amount, bool* Removed_All, int32* Remaining_Ammo);
	void Reset_Attack_Target(bool* New_Attack_Target, class AActor** Attack_Target_0);
	void Reset_Proximity_Cooldown_Timer();
	void Reset_Trigger_Cooldown_Timer();
	void Return_Emote_Montages(TArray<class UAnimMontage*>* Emote_Montages);
	void Return_Hit_Reaction_Anims(TArray<class UAnimMontage*>* Hit_Reactions);
	void Roam_Emotes();
	void Routine(int32 Hour);
	void Server_AI_Setup();
	void Server_Block_Attack();
	void Server_Despawn_Body();
	void Server_Holdable_Unequipped();
	void Server_Holdable_Visibility(bool Visible);
	void Server_Reload();
	void Server_Respawn(E_AIBehaviour Behaviour);
	void Server_Start_Combat_Stance();
	void Server_Starting_Weapon();
	void Server_Unblock_Attack();
	void Server_Unequip_Holdable();
	void Set_AI_Dead();
	void Set_BB_AllowRotate(bool AllowRotate);
	void Set_BB_Attack_Target(class AActor* Attacker);
	void Set_BB_Being_Interacted_With(bool Interacted_With);
	void Set_BB_BlockMove(bool StopNode);
	void Set_BB_Current_Behaviour(E_AIBehaviour AI_New_Behaviour, bool Is_Base_Behaviour);
	void Set_BB_Dead(bool Dead_0);
	void Set_BB_Facing_Location(const struct FVector& VectorValue);
	void Set_BB_Focus_Actor(class AActor* Focus_Actor_0);
	void Set_BB_Follow_Actor(class AActor* Follow_Actor_0);
	void Set_BB_Location(const struct FVector& VectorValue);
	void Set_BB_Move_To_Actor(class AActor* Actor);
	void Set_BB_Temporary_Stop(bool Temp_Stop);
	void Set_BB_Wait_Time(double FloatValue);
	void Set_Behavior();
	void Set_Flee_Actor(class AActor* Flee_From_Actor);
	void Set_Movement_Speed(double Movement_Speed);
	void SetupLevelStreamUnload();
	void Sight_Reaction(class AActor* Sight_Actor_0, const struct FAIStimulus& AI_Stimulus);
	void Spawn_Attached_Holdables();
	void Spawn_Hit_Effects(const struct FHitResult& Hit_Result);
	void Spawn_Holdable(class UClass* AI_Weapon, class FName Attach_Socket, bool Is_Visible, class ABP_AIWeapon_Master_C** Holdable_Actor_0);
	void Start_Block_Timer(double Time_0);
	void Start_Flee_Timer();
	void Start_Hit_React_Timer();
	void Start_Melee_Trace();
	void Start_Temp_Behaviour(E_AIBehaviour Temp_Behavior, double Length, E_AIBehaviour End_Behavior);
	void StartTimer();
	void Stop_Current_Montage(bool Keep_Emote_Montages);
	void Stop_Despawn_Timer();
	void Stop_Fleeing();
	void StopCurrentAudio();
	void StreamLevelUnLoaded();
	void Tag_Check(TArray<class FName>& Tags_1, TArray<class FName>& Tags_2, bool* Return_value, class FName* Found_Tag);
	void Take_Damage(double Damage);
	void Total_Ammo_Check(bool* Has_Ammo, int32* Ammo);
	void Transition_Anim(bool Start_Transition, const struct FS_GeneralSettings& AI_Settings, bool* Use_Transition, class UAnimMontage** Anim);
	void Transition_Anim_Timer(const struct FS_GeneralSettings& Transition_From, const struct FS_GeneralSettings& Transition_To);
	void Transition_Audio(bool Start_Transition, const struct FS_GeneralSettings& AI_Settings, bool* Use_Transition, class USoundCue** Audio);
	void Transition_To_Audio_Timer();
	void Transitions(const struct FS_GeneralSettings& Transition_From, const struct FS_GeneralSettings& Transition_To);
	void Trigger_Activated(class AActor* Trigger_Actor, class ABP_AITrigger_C* AI_Trigger);
	void Trigger_Deactivated(class AActor* Trigger_Actor, class ABP_AITrigger_C* AI_Trigger);
	void Turret_Destroyed_Effect();
	void Turret_End_Reload();
	void Turret_Idle_Start();
	void Turret_Idle_Stop();
	void Turret_Start_Reload();
	void Unequip_Holdable();
	void Up_Climb_Check();
	void Update_Aim_Offset_Yaw(const class AActor*& Look_At_Actor);
	void Update_Routine(int32 Hour);
	void UpdateCapsuleCollision(class FName Name_0);

	void AI_Is_Dead_(bool* Dead_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmartAIComponent_C">();
	}
	static class UBP_SmartAIComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SmartAIComponent_C>();
	}
};
static_assert(alignof(UBP_SmartAIComponent_C) == 0x000008, "Wrong alignment on UBP_SmartAIComponent_C");
static_assert(sizeof(UBP_SmartAIComponent_C) == 0x001C00, "Wrong size on UBP_SmartAIComponent_C");
static_assert(offsetof(UBP_SmartAIComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_SmartAIComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Debug_Mode) == 0x0000A8, "Member 'UBP_SmartAIComponent_C::Debug_Mode' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Debug_Text_Duration) == 0x0000B0, "Member 'UBP_SmartAIComponent_C::Debug_Text_Duration' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attackers) == 0x0000B8, "Member 'UBP_SmartAIComponent_C::Attackers' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Interaction_Point) == 0x0000C8, "Member 'UBP_SmartAIComponent_C::Interaction_Point' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Current_Behaviour) == 0x0000D0, "Member 'UBP_SmartAIComponent_C::AI_Current_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Location) == 0x0000D8, "Member 'UBP_SmartAIComponent_C::Still_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Direction) == 0x0000F0, "Member 'UBP_SmartAIComponent_C::Still_Direction' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Controller) == 0x000108, "Member 'UBP_SmartAIComponent_C::AI_Controller' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attackers_Forget_Time) == 0x000110, "Member 'UBP_SmartAIComponent_C::Attackers_Forget_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Character) == 0x000120, "Member 'UBP_SmartAIComponent_C::AI_Character' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Way_Point) == 0x000128, "Member 'UBP_SmartAIComponent_C::Way_Point' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead) == 0x000130, "Member 'UBP_SmartAIComponent_C::Dead' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Health) == 0x000134, "Member 'UBP_SmartAIComponent_C::Health' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Accuracy) == 0x000138, "Member 'UBP_SmartAIComponent_C::Accuracy' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat_Equip_Weapon) == 0x000140, "Member 'UBP_SmartAIComponent_C::Combat_Equip_Weapon' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Only_Melee_When_No_Ammo) == 0x000141, "Member 'UBP_SmartAIComponent_C::Only_Melee_When_No_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Death_Animations) == 0x000148, "Member 'UBP_SmartAIComponent_C::Death_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Specified_Interaction_Point) == 0x000158, "Member 'UBP_SmartAIComponent_C::Specified_Interaction_Point' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Interaction_Point_Tags) == 0x000168, "Member 'UBP_SmartAIComponent_C::Use_Interaction_Point_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Interaction_Point_Tags) == 0x000170, "Member 'UBP_SmartAIComponent_C::Interaction_Point_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Interaction_Point_Range) == 0x000180, "Member 'UBP_SmartAIComponent_C::Interaction_Point_Range' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Between_IP_Behavior) == 0x000188, "Member 'UBP_SmartAIComponent_C::Use_Between_IP_Behavior' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Between_IP_Behaviour) == 0x000189, "Member 'UBP_SmartAIComponent_C::Between_IP_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Between_IP_Behaviour_Time) == 0x000190, "Member 'UBP_SmartAIComponent_C::Between_IP_Behaviour_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Base) == 0x000198, "Member 'UBP_SmartAIComponent_C::AI_Base' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Base_Distance) == 0x0001A0, "Member 'UBP_SmartAIComponent_C::AI_Base_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Low_Health) == 0x0001A8, "Member 'UBP_SmartAIComponent_C::Flee_Low_Health' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_When_Found) == 0x0001AC, "Member 'UBP_SmartAIComponent_C::Flee_When_Found' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Face_Attacker_When_Hidden) == 0x0001AD, "Member 'UBP_SmartAIComponent_C::Face_Attacker_When_Hidden' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Should_Hide) == 0x0001AE, "Member 'UBP_SmartAIComponent_C::Should_Hide' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Hide_Time_Length) == 0x0001B0, "Member 'UBP_SmartAIComponent_C::Hide_Time_Length' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Hidden_Montages) == 0x0001B8, "Member 'UBP_SmartAIComponent_C::Hidden_Montages' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Forget_Attackers_Time) == 0x0001C8, "Member 'UBP_SmartAIComponent_C::Forget_Attackers_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Forget_Attackers) == 0x0001D0, "Member 'UBP_SmartAIComponent_C::Forget_Attackers' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Return_To_Start_Location) == 0x0001D1, "Member 'UBP_SmartAIComponent_C::Return_To_Start_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Type) == 0x0001D2, "Member 'UBP_SmartAIComponent_C::Flee_Type' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temp_Behavior_Timer) == 0x0001D8, "Member 'UBP_SmartAIComponent_C::Temp_Behavior_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Melee_Attack) == 0x0001E0, "Member 'UBP_SmartAIComponent_C::Can_Melee_Attack' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Basic_Melee_Radius) == 0x0001E8, "Member 'UBP_SmartAIComponent_C::Basic_Melee_Radius' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Basic_Melee_Collision) == 0x0001F0, "Member 'UBP_SmartAIComponent_C::Basic_Melee_Collision' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Animation_Order) == 0x0001F1, "Member 'UBP_SmartAIComponent_C::Melee_Animation_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Animations) == 0x0001F8, "Member 'UBP_SmartAIComponent_C::Melee_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Distance) == 0x000208, "Member 'UBP_SmartAIComponent_C::Melee_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Switch_Distance) == 0x000210, "Member 'UBP_SmartAIComponent_C::Melee_Switch_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Lower_Melee_Animations) == 0x000218, "Member 'UBP_SmartAIComponent_C::Lower_Melee_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Damage) == 0x000228, "Member 'UBP_SmartAIComponent_C::Melee_Damage' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Attack_Frequancy) == 0x000278, "Member 'UBP_SmartAIComponent_C::Melee_Attack_Frequancy' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Melee_Anim_Time_Frequency) == 0x000280, "Member 'UBP_SmartAIComponent_C::Use_Melee_Anim_Time_Frequency' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Melee_Attack_While_Moving) == 0x000281, "Member 'UBP_SmartAIComponent_C::Can_Melee_Attack_While_Moving' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Target) == 0x000288, "Member 'UBP_SmartAIComponent_C::Attack_Target' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Target_Last_Location) == 0x000290, "Member 'UBP_SmartAIComponent_C::Attack_Target_Last_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Search_Direction) == 0x0002A8, "Member 'UBP_SmartAIComponent_C::Search_Direction' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat) == 0x0002C0, "Member 'UBP_SmartAIComponent_C::Combat' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Wait_Time_Between_Searching) == 0x0002C8, "Member 'UBP_SmartAIComponent_C::Wait_Time_Between_Searching' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Search_Area_Size) == 0x0002D0, "Member 'UBP_SmartAIComponent_C::Search_Area_Size' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, RangeStartPoint) == 0x0002D8, "Member 'UBP_SmartAIComponent_C::RangeStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Behavior_Index) == 0x0002E0, "Member 'UBP_SmartAIComponent_C::Current_Behavior_Index' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Move_To_Actor) == 0x0002E8, "Member 'UBP_SmartAIComponent_C::Move_To_Actor' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Being_Interacted_With) == 0x0002F0, "Member 'UBP_SmartAIComponent_C::Being_Interacted_With' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Available_To_AI_Interact) == 0x0002F1, "Member 'UBP_SmartAIComponent_C::Available_To_AI_Interact' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_AI_Interact) == 0x0002F2, "Member 'UBP_SmartAIComponent_C::Can_AI_Interact' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Only_Interact_With_AI_Teams) == 0x0002F3, "Member 'UBP_SmartAIComponent_C::Only_Interact_With_AI_Teams' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Teams) == 0x0002F8, "Member 'UBP_SmartAIComponent_C::AI_Teams' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Ranage) == 0x000308, "Member 'UBP_SmartAIComponent_C::AI_Interact_Ranage' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Time_Deviation) == 0x000310, "Member 'UBP_SmartAIComponent_C::AI_Interact_Time_Deviation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interaction_Animations) == 0x000318, "Member 'UBP_SmartAIComponent_C::AI_Interaction_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interaction_Animation_Order) == 0x000328, "Member 'UBP_SmartAIComponent_C::AI_Interaction_Animation_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Time) == 0x000330, "Member 'UBP_SmartAIComponent_C::AI_Interact_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Hit_Actors) == 0x000338, "Member 'UBP_SmartAIComponent_C::Melee_Hit_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temporary_Stop) == 0x000348, "Member 'UBP_SmartAIComponent_C::Temporary_Stop' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, End_Behaviour) == 0x000349, "Member 'UBP_SmartAIComponent_C::End_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Audio_Response) == 0x000350, "Member 'UBP_SmartAIComponent_C::Current_Audio_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Search_Location) == 0x0003A0, "Member 'UBP_SmartAIComponent_C::Search_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_From_Actors) == 0x0003B8, "Member 'UBP_SmartAIComponent_C::Flee_From_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Forget_Attackers_Timer_Reference) == 0x0003C8, "Member 'UBP_SmartAIComponent_C::Forget_Attackers_Timer_Reference' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temp_Behaviour) == 0x0003D0, "Member 'UBP_SmartAIComponent_C::Temp_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Trigger_Cooldown) == 0x0003D1, "Member 'UBP_SmartAIComponent_C::Use_Trigger_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Trigger_Activated_Response) == 0x0003D8, "Member 'UBP_SmartAIComponent_C::Trigger_Activated_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Trigger_Deactivated_Response) == 0x0003E8, "Member 'UBP_SmartAIComponent_C::Trigger_Deactivated_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Trigger_Cooldown_Time) == 0x0003F8, "Member 'UBP_SmartAIComponent_C::Trigger_Cooldown_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Proximity_Response) == 0x000400, "Member 'UBP_SmartAIComponent_C::Use_Proximity_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Proximity_Activated_Response) == 0x000408, "Member 'UBP_SmartAIComponent_C::Proximity_Activated_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Proximity_Deactivated_Response) == 0x000418, "Member 'UBP_SmartAIComponent_C::Proximity_Deactivated_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Proximity_Responce_Requires_Sight) == 0x000428, "Member 'UBP_SmartAIComponent_C::Proximity_Responce_Requires_Sight' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Reaction_Cooldown) == 0x000429, "Member 'UBP_SmartAIComponent_C::Use_Reaction_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Proximity_Cool_Down_Time) == 0x000430, "Member 'UBP_SmartAIComponent_C::Proximity_Cool_Down_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Proximity_Sphere_Radius) == 0x000438, "Member 'UBP_SmartAIComponent_C::Proximity_Sphere_Radius' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Trigger_Cooldown_Time) == 0x000440, "Member 'UBP_SmartAIComponent_C::Current_Trigger_Cooldown_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Focus_Actor) == 0x000448, "Member 'UBP_SmartAIComponent_C::Focus_Actor' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Proximity_Cool_Down_Time) == 0x000450, "Member 'UBP_SmartAIComponent_C::Current_Proximity_Cool_Down_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attached_Holdables) == 0x000458, "Member 'UBP_SmartAIComponent_C::Attached_Holdables' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Holdable_Actor) == 0x000468, "Member 'UBP_SmartAIComponent_C::Holdable_Actor' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Block_Attack) == 0x000470, "Member 'UBP_SmartAIComponent_C::Block_Attack' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Emote_Index) == 0x000474, "Member 'UBP_SmartAIComponent_C::Current_Emote_Index' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Emote) == 0x000478, "Member 'UBP_SmartAIComponent_C::Current_Emote' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Emote_Actor) == 0x000488, "Member 'UBP_SmartAIComponent_C::Emote_Actor' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reloading) == 0x000490, "Member 'UBP_SmartAIComponent_C::Reloading' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Ammo) == 0x000494, "Member 'UBP_SmartAIComponent_C::Current_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Searching_For_Target) == 0x000498, "Member 'UBP_SmartAIComponent_C::Searching_For_Target' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Target_Velocity) == 0x0004A0, "Member 'UBP_SmartAIComponent_C::Attack_Target_Velocity' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Emote_Timer) == 0x0004B8, "Member 'UBP_SmartAIComponent_C::Emote_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temp_Holdable_Class) == 0x0004C0, "Member 'UBP_SmartAIComponent_C::Temp_Holdable_Class' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, In_Transition) == 0x0004C8, "Member 'UBP_SmartAIComponent_C::In_Transition' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Anim_Transition_Cooldown) == 0x0004D0, "Member 'UBP_SmartAIComponent_C::Current_Anim_Transition_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Audio_Transition_Cooldown) == 0x0004D8, "Member 'UBP_SmartAIComponent_C::Current_Audio_Transition_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Second_Audio_Transition) == 0x0004E0, "Member 'UBP_SmartAIComponent_C::Second_Audio_Transition' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Last_Non_Combat_Behaviour) == 0x0004E8, "Member 'UBP_SmartAIComponent_C::Last_Non_Combat_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, In_Override_Behaviour) == 0x0004E9, "Member 'UBP_SmartAIComponent_C::In_Override_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Base_Behaviour) == 0x0004EA, "Member 'UBP_SmartAIComponent_C::Base_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Base_Behaviour_Timer) == 0x0004F0, "Member 'UBP_SmartAIComponent_C::Base_Behaviour_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Base_Behaviour) == 0x0004F8, "Member 'UBP_SmartAIComponent_C::Use_Base_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Emote_Done_Timer) == 0x000500, "Member 'UBP_SmartAIComponent_C::Emote_Done_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Second_Anim_Transition) == 0x000508, "Member 'UBP_SmartAIComponent_C::Second_Anim_Transition' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Ragdoll_On_Death) == 0x000510, "Member 'UBP_SmartAIComponent_C::Ragdoll_On_Death' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Loop_Order_Anims) == 0x000511, "Member 'UBP_SmartAIComponent_C::AI_Interact_Loop_Order_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Between_Behaviour) == 0x000512, "Member 'UBP_SmartAIComponent_C::AI_Interact_Between_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Between_AI_Interact_Time) == 0x000518, "Member 'UBP_SmartAIComponent_C::Between_AI_Interact_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Muzzle_Effect) == 0x000520, "Member 'UBP_SmartAIComponent_C::Muzzle_Effect' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, From_Audio_Length) == 0x000528, "Member 'UBP_SmartAIComponent_C::From_Audio_Length' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, LOS_Break_Search_Time) == 0x000530, "Member 'UBP_SmartAIComponent_C::LOS_Break_Search_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Killed) == 0x000538, "Member 'UBP_SmartAIComponent_C::AI_Killed' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Despawned_Time) == 0x000548, "Member 'UBP_SmartAIComponent_C::Dead_Despawned_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reacted_Actors) == 0x000550, "Member 'UBP_SmartAIComponent_C::Reacted_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Trace_Timer) == 0x000560, "Member 'UBP_SmartAIComponent_C::Melee_Trace_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Manager_Settings) == 0x000568, "Member 'UBP_SmartAIComponent_C::AI_Manager_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Allow_Friendly_Fire) == 0x000574, "Member 'UBP_SmartAIComponent_C::Allow_Friendly_Fire' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat_Search_Time) == 0x000578, "Member 'UBP_SmartAIComponent_C::Combat_Search_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Friendly_Tags) == 0x000580, "Member 'UBP_SmartAIComponent_C::Friendly_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Time) == 0x000590, "Member 'UBP_SmartAIComponent_C::Flee_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Override_Animation) == 0x000598, "Member 'UBP_SmartAIComponent_C::Still_Override_Animation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Override_Order) == 0x0005A0, "Member 'UBP_SmartAIComponent_C::Still_Override_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Override_Anims) == 0x0005A8, "Member 'UBP_SmartAIComponent_C::Still_Override_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Behaviour_Override) == 0x0005B8, "Member 'UBP_SmartAIComponent_C::Still_Behaviour_Override' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Still_Reaction_Settings) == 0x0005C0, "Member 'UBP_SmartAIComponent_C::Still_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Override_Behaviours) == 0x000668, "Member 'UBP_SmartAIComponent_C::Override_Behaviours' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Priority_Montages) == 0x0006B8, "Member 'UBP_SmartAIComponent_C::Priority_Montages' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Audio_Transition_Cooldown) == 0x0006C8, "Member 'UBP_SmartAIComponent_C::Audio_Transition_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Animation_Transition_Cooldown) == 0x0006D0, "Member 'UBP_SmartAIComponent_C::Animation_Transition_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Animations) == 0x0006D8, "Member 'UBP_SmartAIComponent_C::AI_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Sight_Reaction_Time) == 0x000BA0, "Member 'UBP_SmartAIComponent_C::Use_Sight_Reaction_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reaction_Time) == 0x000BA8, "Member 'UBP_SmartAIComponent_C::Reaction_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reacted_Actor_Time) == 0x000BB0, "Member 'UBP_SmartAIComponent_C::Reacted_Actor_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Crouch) == 0x000BB8, "Member 'UBP_SmartAIComponent_C::Can_Crouch' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Movement_Speeds) == 0x000BC0, "Member 'UBP_SmartAIComponent_C::Movement_Speeds' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Default_Reaction_Settings) == 0x000C10, "Member 'UBP_SmartAIComponent_C::Default_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Distance) == 0x000CB8, "Member 'UBP_SmartAIComponent_C::Flee_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Distance_Cut_Off) == 0x000CC0, "Member 'UBP_SmartAIComponent_C::Flee_Distance_Cut_Off' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Reaction_Settings) == 0x000CC8, "Member 'UBP_SmartAIComponent_C::Flee_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Roam_Wait_Time) == 0x000D70, "Member 'UBP_SmartAIComponent_C::Roam_Wait_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Roam_Wait_Time_Deviation) == 0x000D78, "Member 'UBP_SmartAIComponent_C::Roam_Wait_Time_Deviation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Min_Roam_Distance) == 0x000D80, "Member 'UBP_SmartAIComponent_C::Min_Roam_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Roam_Distance) == 0x000D88, "Member 'UBP_SmartAIComponent_C::Max_Roam_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Prop_Anims) == 0x000D90, "Member 'UBP_SmartAIComponent_C::Use_Prop_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Prop_Anim_Freequency) == 0x000D98, "Member 'UBP_SmartAIComponent_C::Prop_Anim_Freequency' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Prop_Anim_Frequency_Deviation) == 0x000DA0, "Member 'UBP_SmartAIComponent_C::Prop_Anim_Frequency_Deviation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Prop_Anim_Order) == 0x000DA8, "Member 'UBP_SmartAIComponent_C::Prop_Anim_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Prop_Anims_Animations) == 0x000DB0, "Member 'UBP_SmartAIComponent_C::Prop_Anims_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Roam_Wait_Anim_Order) == 0x000DC0, "Member 'UBP_SmartAIComponent_C::Roam_Wait_Anim_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Roam_Wait_Anims) == 0x000DC8, "Member 'UBP_SmartAIComponent_C::Roam_Wait_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Loop_Roam_Wait_Order_Anims) == 0x000DD8, "Member 'UBP_SmartAIComponent_C::Loop_Roam_Wait_Order_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Roam_Reaction_Settings) == 0x000DE0, "Member 'UBP_SmartAIComponent_C::Roam_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Search_Reaction_Settings) == 0x000E88, "Member 'UBP_SmartAIComponent_C::Search_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Interact_Reaction_Settings) == 0x000F30, "Member 'UBP_SmartAIComponent_C::AI_Interact_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Way_Point_Options) == 0x000FD8, "Member 'UBP_SmartAIComponent_C::Way_Point_Options' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Loop_Way_Points) == 0x000FD9, "Member 'UBP_SmartAIComponent_C::Loop_Way_Points' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reverse_Loop_Way_Point) == 0x000FDA, "Member 'UBP_SmartAIComponent_C::Reverse_Loop_Way_Point' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Way_Points) == 0x000FE0, "Member 'UBP_SmartAIComponent_C::Way_Points' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Way_Point_Reaction_Settings) == 0x000FF0, "Member 'UBP_SmartAIComponent_C::Way_Point_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Face_Direction_Reaction_Settings) == 0x001098, "Member 'UBP_SmartAIComponent_C::Face_Direction_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Reaction_Settings) == 0x001140, "Member 'UBP_SmartAIComponent_C::Melee_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Trace_Lenth) == 0x0011E8, "Member 'UBP_SmartAIComponent_C::Melee_Trace_Lenth' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Magazine_Ammo) == 0x0011F0, "Member 'UBP_SmartAIComponent_C::Max_Magazine_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Per_Shot_Ammo_Reduction) == 0x0011F4, "Member 'UBP_SmartAIComponent_C::Per_Shot_Ammo_Reduction' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Reload_Montage) == 0x0011F8, "Member 'UBP_SmartAIComponent_C::Reload_Montage' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Total_Ammo) == 0x001200, "Member 'UBP_SmartAIComponent_C::Max_Total_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Ammo) == 0x001204, "Member 'UBP_SmartAIComponent_C::Use_Ammo' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Reload) == 0x001205, "Member 'UBP_SmartAIComponent_C::Can_Reload' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Start_With_Full_Magazine) == 0x001206, "Member 'UBP_SmartAIComponent_C::Start_With_Full_Magazine' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Hit_Deviation__Projectile_) == 0x001208, "Member 'UBP_SmartAIComponent_C::Max_Hit_Deviation__Projectile_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Accuracy__Projectile_) == 0x001210, "Member 'UBP_SmartAIComponent_C::Accuracy__Projectile_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Miss_Deviation__Projectile_) == 0x001218, "Member 'UBP_SmartAIComponent_C::Max_Miss_Deviation__Projectile_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Projectile) == 0x001220, "Member 'UBP_SmartAIComponent_C::Range_Projectile' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Trace_Range) == 0x001228, "Member 'UBP_SmartAIComponent_C::Trace_Range' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Trace_Radius) == 0x001230, "Member 'UBP_SmartAIComponent_C::Trace_Radius' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Spread__Trace_) == 0x001238, "Member 'UBP_SmartAIComponent_C::Spread__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Decal_LifeSpan__Trace_) == 0x001240, "Member 'UBP_SmartAIComponent_C::Decal_LifeSpan__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Surface_Decal__Trace_) == 0x001248, "Member 'UBP_SmartAIComponent_C::Surface_Decal__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Decal_Fade_Distance__Trace_) == 0x001298, "Member 'UBP_SmartAIComponent_C::Decal_Fade_Distance__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Surface_Emitters__Trace_) == 0x0012A0, "Member 'UBP_SmartAIComponent_C::Surface_Emitters__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Surface_Decal_Size__Trace_) == 0x0012F0, "Member 'UBP_SmartAIComponent_C::Surface_Decal_Size__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, RangeShootSound) == 0x001308, "Member 'UBP_SmartAIComponent_C::RangeShootSound' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Range_Attack_While_Moving) == 0x001310, "Member 'UBP_SmartAIComponent_C::Can_Range_Attack_While_Moving' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Range_Anim_Time_Frequency) == 0x001311, "Member 'UBP_SmartAIComponent_C::Use_Range_Anim_Time_Frequency' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Frequency) == 0x001318, "Member 'UBP_SmartAIComponent_C::Range_Attack_Frequency' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Range_Attack) == 0x001320, "Member 'UBP_SmartAIComponent_C::Can_Range_Attack' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Anim_Order) == 0x001321, "Member 'UBP_SmartAIComponent_C::Range_Attack_Anim_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Montages) == 0x001328, "Member 'UBP_SmartAIComponent_C::Range_Attack_Montages' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Damage) == 0x001338, "Member 'UBP_SmartAIComponent_C::Range_Damage' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Distance) == 0x001388, "Member 'UBP_SmartAIComponent_C::Range_Attack_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Projectile_Homing_Acceleration_Magnitude) == 0x001390, "Member 'UBP_SmartAIComponent_C::Projectile_Homing_Acceleration_Magnitude' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Homing_Projectile) == 0x001398, "Member 'UBP_SmartAIComponent_C::Homing_Projectile' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Projectile_Actor_Settings) == 0x001399, "Member 'UBP_SmartAIComponent_C::Use_Projectile_Actor_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Reaction_Settings) == 0x0013A0, "Member 'UBP_SmartAIComponent_C::Range_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Particle_Effect) == 0x001448, "Member 'UBP_SmartAIComponent_C::Range_Attack_Particle_Effect' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Attack_Particle_Socket) == 0x001450, "Member 'UBP_SmartAIComponent_C::Range_Attack_Particle_Socket' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Cover) == 0x001458, "Member 'UBP_SmartAIComponent_C::Use_Cover' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Follow_Reaction_Settings) == 0x001460, "Member 'UBP_SmartAIComponent_C::Follow_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Follow_Actor) == 0x001508, "Member 'UBP_SmartAIComponent_C::Follow_Actor' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Follow_Distance) == 0x001510, "Member 'UBP_SmartAIComponent_C::Max_Follow_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Copy_Follow_Actor_Direction) == 0x001518, "Member 'UBP_SmartAIComponent_C::Copy_Follow_Actor_Direction' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Follow_Attack_Target) == 0x001519, "Member 'UBP_SmartAIComponent_C::Attack_Follow_Attack_Target' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Follow_Attackers) == 0x00151A, "Member 'UBP_SmartAIComponent_C::Attack_Follow_Attackers' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Follow_Attack_Distance) == 0x001520, "Member 'UBP_SmartAIComponent_C::Follow_Attack_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Follow_End_Behaviour) == 0x001528, "Member 'UBP_SmartAIComponent_C::Follow_End_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Interaction_Point_Reaction_Settings) == 0x001530, "Member 'UBP_SmartAIComponent_C::Interaction_Point_Reaction_Settings' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Base_Distance) == 0x0015D8, "Member 'UBP_SmartAIComponent_C::Flee_Base_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Require_Sight_Of_Attacker) == 0x0015E0, "Member 'UBP_SmartAIComponent_C::Require_Sight_Of_Attacker' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Alert_Defenders_Distances) == 0x0015E8, "Member 'UBP_SmartAIComponent_C::Alert_Defenders_Distances' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Defend_Tags) == 0x0015F0, "Member 'UBP_SmartAIComponent_C::Defend_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Defend_Actors) == 0x001600, "Member 'UBP_SmartAIComponent_C::Defend_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Defend_Cooldown_Time) == 0x001610, "Member 'UBP_SmartAIComponent_C::Defend_Cooldown_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Standing_Half_Hight) == 0x001618, "Member 'UBP_SmartAIComponent_C::Standing_Half_Hight' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Way_Point) == 0x001620, "Member 'UBP_SmartAIComponent_C::Current_Way_Point' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Last_Behaviour) == 0x001628, "Member 'UBP_SmartAIComponent_C::Last_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Climb_End_Location) == 0x001630, "Member 'UBP_SmartAIComponent_C::Climb_End_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Time) == 0x001648, "Member 'UBP_SmartAIComponent_C::Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Jump_Look_At_Rotation) == 0x001650, "Member 'UBP_SmartAIComponent_C::Jump_Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Jump_End_Location) == 0x001668, "Member 'UBP_SmartAIComponent_C::Jump_End_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, End_Climb_Location) == 0x001680, "Member 'UBP_SmartAIComponent_C::End_Climb_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Climbing) == 0x001698, "Member 'UBP_SmartAIComponent_C::Climbing' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Forward_Blocked) == 0x001699, "Member 'UBP_SmartAIComponent_C::Forward_Blocked' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Climb_Hight) == 0x0016A0, "Member 'UBP_SmartAIComponent_C::Current_Climb_Hight' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Valt) == 0x0016A8, "Member 'UBP_SmartAIComponent_C::Valt' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Valt_End_Location) == 0x0016B0, "Member 'UBP_SmartAIComponent_C::Valt_End_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Object_Normal) == 0x0016C8, "Member 'UBP_SmartAIComponent_C::Object_Normal' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Climb_Anim) == 0x0016E0, "Member 'UBP_SmartAIComponent_C::Climb_Anim' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Alert_Cooldown_Time) == 0x0016E8, "Member 'UBP_SmartAIComponent_C::Current_Alert_Cooldown_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Climb_Animations) == 0x0016F0, "Member 'UBP_SmartAIComponent_C::Climb_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Valt_Animations) == 0x001700, "Member 'UBP_SmartAIComponent_C::Valt_Animations' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Drop_Down_Height) == 0x001710, "Member 'UBP_SmartAIComponent_C::Max_Drop_Down_Height' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Attack_Targets) == 0x001718, "Member 'UBP_SmartAIComponent_C::Attack_Targets' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, In_Cover) == 0x001728, "Member 'UBP_SmartAIComponent_C::In_Cover' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Climb) == 0x001729, "Member 'UBP_SmartAIComponent_C::Can_Climb' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_AI_Routine) == 0x00172A, "Member 'UBP_SmartAIComponent_C::Use_AI_Routine' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Routines) == 0x001730, "Member 'UBP_SmartAIComponent_C::AI_Routines' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Time_of_Day) == 0x001740, "Member 'UBP_SmartAIComponent_C::Time_of_Day' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Routine_Timer) == 0x001748, "Member 'UBP_SmartAIComponent_C::Routine_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Face_Direction_Anim_Order) == 0x001750, "Member 'UBP_SmartAIComponent_C::Face_Direction_Anim_Order' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Loop_Face_Direction_Anims) == 0x001751, "Member 'UBP_SmartAIComponent_C::Loop_Face_Direction_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Face_Direction_Anims) == 0x001758, "Member 'UBP_SmartAIComponent_C::Face_Direction_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Delay_Range_Attack) == 0x001768, "Member 'UBP_SmartAIComponent_C::Delay_Range_Attack' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Range_Delay_Time) == 0x001770, "Member 'UBP_SmartAIComponent_C::Range_Delay_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Delay_Done) == 0x001778, "Member 'UBP_SmartAIComponent_C::Delay_Done' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Hit_React_Timer) == 0x001779, "Member 'UBP_SmartAIComponent_C::Hit_React_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Combat_Stance) == 0x00177A, "Member 'UBP_SmartAIComponent_C::Use_Combat_Stance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Hit_Reaction_Cooldown) == 0x001780, "Member 'UBP_SmartAIComponent_C::Hit_Reaction_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat_Stance_Time) == 0x001788, "Member 'UBP_SmartAIComponent_C::Combat_Stance_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Dead_Body_Reaction) == 0x001790, "Member 'UBP_SmartAIComponent_C::Use_Dead_Body_Reaction' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Responce) == 0x001791, "Member 'UBP_SmartAIComponent_C::Dead_Body_Responce' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Reaction_Temporary) == 0x001792, "Member 'UBP_SmartAIComponent_C::Dead_Body_Reaction_Temporary' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Temporary_Time) == 0x001798, "Member 'UBP_SmartAIComponent_C::Dead_Body_Temporary_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Alert_Tags) == 0x0017A0, "Member 'UBP_SmartAIComponent_C::Dead_Body_Alert_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Alert_Range) == 0x0017B0, "Member 'UBP_SmartAIComponent_C::Dead_Body_Alert_Range' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_React_Tags) == 0x0017B8, "Member 'UBP_SmartAIComponent_C::Dead_Body_React_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Alert) == 0x0017C8, "Member 'UBP_SmartAIComponent_C::Dead_Body_Alert' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Dead_Body_Alert_Actors) == 0x0017D0, "Member 'UBP_SmartAIComponent_C::Dead_Body_Alert_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Seen_Dead_Bodys) == 0x0017E0, "Member 'UBP_SmartAIComponent_C::Seen_Dead_Bodys' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temperary_Response) == 0x0017F0, "Member 'UBP_SmartAIComponent_C::Temperary_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Temparary_Time) == 0x0017F8, "Member 'UBP_SmartAIComponent_C::Temparary_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Alerted_Response) == 0x001800, "Member 'UBP_SmartAIComponent_C::Alerted_Response' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Be_Alerted_AI) == 0x001801, "Member 'UBP_SmartAIComponent_C::Can_Be_Alerted_AI' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Yaw_Aim_Offset) == 0x001808, "Member 'UBP_SmartAIComponent_C::Yaw_Aim_Offset' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Aim_Offset_Enabled) == 0x001810, "Member 'UBP_SmartAIComponent_C::Aim_Offset_Enabled' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Current_Melee_Anim) == 0x001818, "Member 'UBP_SmartAIComponent_C::Current_Melee_Anim' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Alert_Cooldown_Time) == 0x001870, "Member 'UBP_SmartAIComponent_C::Alert_Cooldown_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_Strafe) == 0x001878, "Member 'UBP_SmartAIComponent_C::Use_Strafe' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Min_Strafe_Distance) == 0x001880, "Member 'UBP_SmartAIComponent_C::Min_Strafe_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Max_Strafe_Distance) == 0x001888, "Member 'UBP_SmartAIComponent_C::Max_Strafe_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Allow_Strafe) == 0x001890, "Member 'UBP_SmartAIComponent_C::Allow_Strafe' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Last_Proximity_Check) == 0x001898, "Member 'UBP_SmartAIComponent_C::Last_Proximity_Check' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Start_Behaviour) == 0x0018A8, "Member 'UBP_SmartAIComponent_C::Start_Behaviour' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Start_Holdable) == 0x0018B0, "Member 'UBP_SmartAIComponent_C::Start_Holdable' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Start_Range_Weapon) == 0x0018B8, "Member 'UBP_SmartAIComponent_C::Start_Range_Weapon' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Start_Melee_Weapon) == 0x0018C0, "Member 'UBP_SmartAIComponent_C::Start_Melee_Weapon' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Activated) == 0x0018C8, "Member 'UBP_SmartAIComponent_C::Activated' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat_Stance_Timer) == 0x0018D0, "Member 'UBP_SmartAIComponent_C::Combat_Stance_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Combat_Stance) == 0x0018D8, "Member 'UBP_SmartAIComponent_C::Combat_Stance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Call_Defenders) == 0x0018D9, "Member 'UBP_SmartAIComponent_C::Call_Defenders' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AI_Ready) == 0x0018DA, "Member 'UBP_SmartAIComponent_C::AI_Ready' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Climb_Speed) == 0x0018E0, "Member 'UBP_SmartAIComponent_C::Climb_Speed' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Block) == 0x0018E8, "Member 'UBP_SmartAIComponent_C::Can_Block' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Block_Chances) == 0x0018F0, "Member 'UBP_SmartAIComponent_C::Block_Chances' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Block_Anims) == 0x001940, "Member 'UBP_SmartAIComponent_C::Melee_Block_Anims' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Block_Timer) == 0x001950, "Member 'UBP_SmartAIComponent_C::Block_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Block_Cooldown) == 0x001958, "Member 'UBP_SmartAIComponent_C::Block_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Blocked_Attack_Montages) == 0x001960, "Member 'UBP_SmartAIComponent_C::Blocked_Attack_Montages' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Alert) == 0x001970, "Member 'UBP_SmartAIComponent_C::Flee_Alert' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Can_Be_Flee_Alerted) == 0x001971, "Member 'UBP_SmartAIComponent_C::Can_Be_Flee_Alerted' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Alert_Actors) == 0x001978, "Member 'UBP_SmartAIComponent_C::Flee_Alert_Actors' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Alert_Tags) == 0x001988, "Member 'UBP_SmartAIComponent_C::Flee_Alert_Tags' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Alert_Distance) == 0x001998, "Member 'UBP_SmartAIComponent_C::Flee_Alert_Distance' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Aimed_Still_Override) == 0x0019A0, "Member 'UBP_SmartAIComponent_C::Aimed_Still_Override' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Flee_Start_Location) == 0x0019A8, "Member 'UBP_SmartAIComponent_C::Flee_Start_Location' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Use_LOS_Search_Time) == 0x0019C0, "Member 'UBP_SmartAIComponent_C::Use_LOS_Search_Time' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Projectile_Speed) == 0x0019C8, "Member 'UBP_SmartAIComponent_C::Projectile_Speed' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Allow_Rotation) == 0x0019D0, "Member 'UBP_SmartAIComponent_C::Melee_Allow_Rotation' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, CoverTraceChannel) == 0x0019D1, "Member 'UBP_SmartAIComponent_C::CoverTraceChannel' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AttackTraceChannel) == 0x0019D2, "Member 'UBP_SmartAIComponent_C::AttackTraceChannel' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Despawn_Timer) == 0x0019D8, "Member 'UBP_SmartAIComponent_C::Despawn_Timer' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, DamageMulti) == 0x0019E0, "Member 'UBP_SmartAIComponent_C::DamageMulti' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, InAttack) == 0x0019E8, "Member 'UBP_SmartAIComponent_C::InAttack' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Despawn_AI) == 0x0019E9, "Member 'UBP_SmartAIComponent_C::Despawn_AI' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Acceptable_Radius) == 0x0019F0, "Member 'UBP_SmartAIComponent_C::Acceptable_Radius' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, DeadAICapsuleCollision) == 0x001A40, "Member 'UBP_SmartAIComponent_C::DeadAICapsuleCollision' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, DeadAIMeshCollision) == 0x001A48, "Member 'UBP_SmartAIComponent_C::DeadAIMeshCollision' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Surface_Sound__Trace_) == 0x001A50, "Member 'UBP_SmartAIComponent_C::Surface_Sound__Trace_' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, DeathSound) == 0x001AA0, "Member 'UBP_SmartAIComponent_C::DeathSound' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Surface_Decal) == 0x001AA8, "Member 'UBP_SmartAIComponent_C::Melee_Surface_Decal' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Surface_Sounds) == 0x001AF8, "Member 'UBP_SmartAIComponent_C::Melee_Surface_Sounds' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Melee_Emitters) == 0x001B48, "Member 'UBP_SmartAIComponent_C::Melee_Emitters' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, MeleeDetectHighOffset) == 0x001B98, "Member 'UBP_SmartAIComponent_C::MeleeDetectHighOffset' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, MeleeDetectSize) == 0x001BA0, "Member 'UBP_SmartAIComponent_C::MeleeDetectSize' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Respawn) == 0x001BB8, "Member 'UBP_SmartAIComponent_C::Respawn' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Sounds) == 0x001BC0, "Member 'UBP_SmartAIComponent_C::Sounds' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, AllowDynamicRespawnCheck) == 0x001BD0, "Member 'UBP_SmartAIComponent_C::AllowDynamicRespawnCheck' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, StreamLevelPackageName) == 0x001BD4, "Member 'UBP_SmartAIComponent_C::StreamLevelPackageName' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, SpawnedBy) == 0x001BE0, "Member 'UBP_SmartAIComponent_C::SpawnedBy' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, FaceDirectionTask) == 0x001BE8, "Member 'UBP_SmartAIComponent_C::FaceDirectionTask' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, MaxHealth) == 0x001BF0, "Member 'UBP_SmartAIComponent_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(UBP_SmartAIComponent_C, Sight_Actor) == 0x001BF8, "Member 'UBP_SmartAIComponent_C::Sight_Actor' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Random_Weather_Variation

#include "Basic.hpp"

#include "Random_Weather_Variation_classes.hpp"
#include "Random_Weather_Variation_parameters.hpp"


namespace SDK
{

// Function Random_Weather_Variation.Random_Weather_Variation_C.Apply State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRandomWeatherVariation_State    Random_Weather_State                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Apply_State(const struct FRandomWeatherVariation_State& Random_Weather_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Apply State");

	Params::Random_Weather_Variation_C_Apply_State Parms{};

	Parms.Random_Weather_State = std::move(Random_Weather_State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Bind to UDS
// (Protected, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Bind_to_UDS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Bind to UDS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Change to Next Random Weather Type
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Change_to_Next_Random_Weather_Type()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Change to Next Random Weather Type");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Check For Season Instant Refresh
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Check_For_Season_Instant_Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Check For Season Instant Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Clear and Restart
// (Public, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Clear_and_Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Clear and Restart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Create Composite Probability Map
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>Out                                                    (Parm, OutParm)

void URandom_Weather_Variation_C::Create_Composite_Probability_Map(TMap<class UUDS_Weather_Settings_C*, double>* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Create Composite Probability Map");

	Params::Random_Weather_Variation_C_Create_Composite_Probability_Map Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Current Hour Changed
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Hour                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Current_Hour_Changed(int32 Hour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Current Hour Changed");

	Params::Random_Weather_Variation_C_Current_Hour_Changed Parms{};

	Parms.Hour = Hour;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.ExecuteUbergraph_Random_Weather_Variation
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::ExecuteUbergraph_Random_Weather_Variation(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "ExecuteUbergraph_Random_Weather_Variation");

	Params::Random_Weather_Variation_C_ExecuteUbergraph_Random_Weather_Variation Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Fill Weather Forecast
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Fill_Weather_Forecast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Fill Weather Forecast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Filter Probability Map
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>Probability_Map                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// class UUDS_Weather_Settings_C*          Current_Random_Type                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TMap<class UUDS_Weather_Settings_C*, double>Filtered_Probability_Map                               (Parm, OutParm)

void URandom_Weather_Variation_C::Filter_Probability_Map(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Current_Random_Type, TMap<class UUDS_Weather_Settings_C*, double>* Filtered_Probability_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Filter Probability Map");

	Params::Random_Weather_Variation_C_Filter_Probability_Map Parms{};

	Parms.Probability_Map = std::move(Probability_Map);
	Parms.Current_Random_Type = Current_Random_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Filtered_Probability_Map != nullptr)
		*Filtered_Probability_Map = std::move(Parms.Filtered_Probability_Map);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get Climate Temperature Ranges
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Climate_Preset_C*            Climate_Object                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EUDS_TemperatureType                    Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Summer_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Autumn_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Winter_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Spring_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Get_Climate_Temperature_Ranges(class UUDS_Climate_Preset_C* Climate_Object, EUDS_TemperatureType Scale, struct FVector2D* Summer_Range, struct FVector2D* Autumn_Range, struct FVector2D* Winter_Range, struct FVector2D* Spring_Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get Climate Temperature Ranges");

	Params::Random_Weather_Variation_C_Get_Climate_Temperature_Ranges Parms{};

	Parms.Climate_Object = Climate_Object;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (Summer_Range != nullptr)
		*Summer_Range = std::move(Parms.Summer_Range);

	if (Autumn_Range != nullptr)
		*Autumn_Range = std::move(Parms.Autumn_Range);

	if (Winter_Range != nullptr)
		*Winter_Range = std::move(Parms.Winter_Range);

	if (Spring_Range != nullptr)
		*Spring_Range = std::move(Parms.Spring_Range);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get Current Lerp Alpha
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double URandom_Weather_Variation_C::Get_Current_Lerp_Alpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get Current Lerp Alpha");

	Params::Random_Weather_Variation_C_Get_Current_Lerp_Alpha Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get Material State Manager
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UUDW_Material_State_Manager_C*    Material_State_Manager                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Get_Material_State_Manager(class UUDW_Material_State_Manager_C** Material_State_Manager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get Material State Manager");

	Params::Random_Weather_Variation_C_Get_Material_State_Manager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Material_State_Manager != nullptr)
		*Material_State_Manager = Parms.Material_State_Manager;
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get Season Probability Map
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class UUDS_Weather_Settings_C*, double>Map                                                    (Parm, OutParm)

void URandom_Weather_Variation_C::Get_Season_Probability_Map(int32 Season, TMap<class UUDS_Weather_Settings_C*, double>* Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get Season Probability Map");

	Params::Random_Weather_Variation_C_Get_Season_Probability_Map Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Map != nullptr)
		*Map = std::move(Parms.Map);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get State for Saving
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRandomWeatherVariation_State    State                                                  (Parm, OutParm, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Get_State_for_Saving(struct FRandomWeatherVariation_State* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get State for Saving");

	Params::Random_Weather_Variation_C_Get_State_for_Saving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Hourly
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Hour                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Hourly(int32 Hour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Hourly");

	Params::Random_Weather_Variation_C_Hourly Parms{};

	Parms.Hour = Hour;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Increment Change Timer
// (Protected, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Increment_Change_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Increment Change Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Increment Random Weather
// (Protected, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Increment_Random_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Increment Random Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Instant Material Update
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Instant_Material_Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Instant Material Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Make Climate Probability Map
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Climate_Preset_C*            Climate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class UUDS_Weather_Settings_C*, double>Probability_Map                                        (Parm, OutParm)

void URandom_Weather_Variation_C::Make_Climate_Probability_Map(class UUDS_Climate_Preset_C* Climate, int32 Season, TMap<class UUDS_Weather_Settings_C*, double>* Probability_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Make Climate Probability Map");

	Params::Random_Weather_Variation_C_Make_Climate_Probability_Map Parms{};

	Parms.Climate = Climate;
	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Probability_Map != nullptr)
		*Probability_Map = std::move(Parms.Probability_Map);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Random Weather Mode
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EUDS_RandomWeatherTiming                Mode                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Random_Weather_Mode(EUDS_RandomWeatherTiming* Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Random Weather Mode");

	Params::Random_Weather_Variation_C_Random_Weather_Mode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mode != nullptr)
		*Mode = Parms.Mode;
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Recalculate Forecast
// (Public, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Recalculate_Forecast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Recalculate Forecast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "ReceiveTick");

	Params::Random_Weather_Variation_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Reset Timer
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Reset_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Reset Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Select Random Weather Type
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>Probability_Map                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// class UUDS_Weather_Settings_C*          Previous_Weather                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Out                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Select_Random_Weather_Type(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Previous_Weather, class UUDS_Weather_Settings_C** Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Select Random Weather Type");

	Params::Random_Weather_Variation_C_Select_Random_Weather_Type Parms{};

	Parms.Probability_Map = std::move(Probability_Map);
	Parms.Previous_Weather = Previous_Weather;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Set New Random Interval Timer
// (Protected, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Set_New_Random_Interval_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Set New Random Interval Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Start Up Random Weather Variation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AUltra_Dynamic_Weather_C*         UDW_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AWeather_Override_Volume_C*       Volume_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Start_with_a_Random_Type                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Starting_Weather_Settings                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Start_Up_Random_Weather_Variation(class AUltra_Dynamic_Weather_C* UDW_0, class AWeather_Override_Volume_C* Volume_0, bool Start_with_a_Random_Type, class UUDS_Weather_Settings_C* Starting_Weather_Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Start Up Random Weather Variation");

	Params::Random_Weather_Variation_C_Start_Up_Random_Weather_Variation Parms{};

	Parms.UDW_0 = UDW_0;
	Parms.Volume_0 = Volume_0;
	Parms.Start_with_a_Random_Type = Start_with_a_Random_Type;
	Parms.Starting_Weather_Settings = Starting_Weather_Settings;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.State Source Map
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>Source_Map                                             (Parm, OutParm)

void URandom_Weather_Variation_C::State_Source_Map(TMap<class UUDS_Weather_Settings_C*, double>* Source_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "State Source Map");

	Params::Random_Weather_Variation_C_State_Source_Map Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Source_Map != nullptr)
		*Source_Map = std::move(Parms.Source_Map);
}

}


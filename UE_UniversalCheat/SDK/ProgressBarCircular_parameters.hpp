#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressBarCircular

#include "Basic.hpp"

#include "S_Effects_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EGradientTypes_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EProgressMethod_structs.hpp"
#include "EEffectLayer_structs.hpp"
#include "EMarqueeMask_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ProgressBarCircular.ProgressBarCircular_C.AddEffect
// 0x0088 (0x0088 - 0x0000)
struct ProgressBarCircular_C_AddEffect final
{
public:
	struct FS_Effects                             Effect;                                            // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_AddEffect) == 0x000008, "Wrong alignment on ProgressBarCircular_C_AddEffect");
static_assert(sizeof(ProgressBarCircular_C_AddEffect) == 0x000088, "Wrong size on ProgressBarCircular_C_AddEffect");
static_assert(offsetof(ProgressBarCircular_C_AddEffect, Effect) == 0x000000, "Member 'ProgressBarCircular_C_AddEffect::Effect' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.AddEntry
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_AddEntry final
{
public:
	double                                        NewPercent_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_AddEntry) == 0x000008, "Wrong alignment on ProgressBarCircular_C_AddEntry");
static_assert(sizeof(ProgressBarCircular_C_AddEntry) == 0x000008, "Wrong size on ProgressBarCircular_C_AddEntry");
static_assert(offsetof(ProgressBarCircular_C_AddEntry, NewPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_AddEntry::NewPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.ClearEffectLayers
// 0x0038 (0x0038 - 0x0000)
struct ProgressBarCircular_C_ClearEffectLayers final
{
public:
	EEffectLayer                                  EffectLayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               CallFunc_FindEffectOverlay_Overlay;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Effect_C*                           K2Node_DynamicCast_AsWB_Effect;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_ClearEffectLayers) == 0x000008, "Wrong alignment on ProgressBarCircular_C_ClearEffectLayers");
static_assert(sizeof(ProgressBarCircular_C_ClearEffectLayers) == 0x000038, "Wrong size on ProgressBarCircular_C_ClearEffectLayers");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, EffectLayer) == 0x000000, "Member 'ProgressBarCircular_C_ClearEffectLayers::EffectLayer' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_FindEffectOverlay_Overlay) == 0x000008, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_FindEffectOverlay_Overlay' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, Temp_int_Variable) == 0x000010, "Member 'ProgressBarCircular_C_ClearEffectLayers::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_GetChildrenCount_ReturnValue) == 0x000014, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_GetChildAt_ReturnValue) == 0x000018, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, K2Node_DynamicCast_AsWB_Effect) == 0x000028, "Member 'ProgressBarCircular_C_ClearEffectLayers::K2Node_DynamicCast_AsWB_Effect' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ProgressBarCircular_C_ClearEffectLayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ClearEffectLayers, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'ProgressBarCircular_C_ClearEffectLayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Count_Percent
// 0x0078 (0x0078 - 0x0000)
struct ProgressBarCircular_C_Count_Percent final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Count_Percent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_Count_Percent");
static_assert(sizeof(ProgressBarCircular_C_Count_Percent) == 0x000078, "Wrong size on ProgressBarCircular_C_Count_Percent");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Time) == 0x000000, "Member 'ProgressBarCircular_C_Count_Percent::Time' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Value) == 0x000008, "Member 'ProgressBarCircular_C_Count_Percent::Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Temp_bool_Variable) == 0x000010, "Member 'ProgressBarCircular_C_Count_Percent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Temp_bool_Variable_1) == 0x000012, "Member 'ProgressBarCircular_C_Count_Percent::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Temp_real_Variable) == 0x000018, "Member 'ProgressBarCircular_C_Count_Percent::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Temp_bool_Variable_2) == 0x000020, "Member 'ProgressBarCircular_C_Count_Percent::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, K2Node_Select_Default) == 0x000028, "Member 'ProgressBarCircular_C_Count_Percent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, Temp_real_Variable_1) == 0x000030, "Member 'ProgressBarCircular_C_Count_Percent::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000048, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, K2Node_Select_Default_1) == 0x000058, "Member 'ProgressBarCircular_C_Count_Percent::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'ProgressBarCircular_C_Count_Percent::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_Percent, K2Node_Select_Default_2) == 0x000070, "Member 'ProgressBarCircular_C_Count_Percent::K2Node_Select_Default_2' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Count_TargetPercent
// 0x0078 (0x0078 - 0x0000)
struct ProgressBarCircular_C_Count_TargetPercent final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Count_TargetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_Count_TargetPercent");
static_assert(sizeof(ProgressBarCircular_C_Count_TargetPercent) == 0x000078, "Wrong size on ProgressBarCircular_C_Count_TargetPercent");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Time) == 0x000000, "Member 'ProgressBarCircular_C_Count_TargetPercent::Time' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Value) == 0x000008, "Member 'ProgressBarCircular_C_Count_TargetPercent::Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Temp_bool_Variable) == 0x000010, "Member 'ProgressBarCircular_C_Count_TargetPercent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Temp_bool_Variable_1) == 0x000012, "Member 'ProgressBarCircular_C_Count_TargetPercent::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Temp_real_Variable) == 0x000018, "Member 'ProgressBarCircular_C_Count_TargetPercent::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Temp_bool_Variable_2) == 0x000020, "Member 'ProgressBarCircular_C_Count_TargetPercent::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, K2Node_Select_Default) == 0x000028, "Member 'ProgressBarCircular_C_Count_TargetPercent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, Temp_real_Variable_1) == 0x000030, "Member 'ProgressBarCircular_C_Count_TargetPercent::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000048, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, K2Node_Select_Default_1) == 0x000058, "Member 'ProgressBarCircular_C_Count_TargetPercent::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'ProgressBarCircular_C_Count_TargetPercent::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Count_TargetPercent, K2Node_Select_Default_2) == 0x000070, "Member 'ProgressBarCircular_C_Count_TargetPercent::K2Node_Select_Default_2' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.ExecuteEntry
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_ExecuteEntry final
{
public:
	double                                        CurrentEntry;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_ExecuteEntry) == 0x000008, "Wrong alignment on ProgressBarCircular_C_ExecuteEntry");
static_assert(sizeof(ProgressBarCircular_C_ExecuteEntry) == 0x000008, "Wrong size on ProgressBarCircular_C_ExecuteEntry");
static_assert(offsetof(ProgressBarCircular_C_ExecuteEntry, CurrentEntry) == 0x000000, "Member 'ProgressBarCircular_C_ExecuteEntry::CurrentEntry' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.ExecuteUbergraph_ProgressBarCircular
// 0x0838 (0x0838 - 0x0000)
struct ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamePaused_ReturnValue;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1; // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPercent_Percent;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_6;               // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPercent_Percent_1;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Event_Size;                                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Value;                                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_Color_3;                              // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_TargetPercent;                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Thickness;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UseTargetPercent;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressMethod                               K2Node_Event_EProgressMethod;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_6;                     // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_CurrentInterpTime;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_TargetInterpTime;                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_Color_2;                              // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_Color_1;                              // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UseGradientFillColor;                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_Color;                                // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_GradientPower;                        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_2; // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_Mask_1;                               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_Mask;                                 // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradientTypes                                K2Node_Event_GradientType;                         // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_BlendMask;                            // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsMarquee;                            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_Image;                                // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EMarqueeMask                                  K2Node_Event_MaskType;                             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_7;               // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Steps;                                // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Spacing;                              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_AbsoluteFillMethod;                   // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Effects>                     K2Node_Event_Effects;                              // 0x0170(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_Has_Been_Initd_Variable_8;               // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_1;                              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnabled_1;                          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnabled;                            // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_9;               // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_7;                     // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index;                                // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_8;                     // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_9;                     // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Effects                             K2Node_MakeStruct_S_Effects;                       // 0x0198(0x0088)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Percent;                        // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Effects                             CallFunc_Array_Get_Item;                           // 0x0248(0x0088)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Effects                             K2Node_MakeStruct_S_Effects_1;                     // 0x02D8(0x0088)(NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Size;                           // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseGradient;                    // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_GradientOpacity;                // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradientTypes                                K2Node_CustomEvent_GradientType;                   // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseTargetPercent;               // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_TargetPercent;                  // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color_2;                        // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color_1;                        // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsProgressMethodInterpolated_ReturnValue; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressMethod                               K2Node_CustomEvent_ProgressMethod;                 // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_NewPercent_1;                   // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Count_Percent_Value;                      // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Count_TargetPercent_Value;                // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Count_Percent_Value_1;                    // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_CustomEvent_Value_1;                        // 0x03F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_CustomEvent_BlendMask;                      // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_10;              // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41A[0x2];                                      // 0x041A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_10;                    // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Effects                             CallFunc_Array_Get_Item_1;                         // 0x0428(0x0088)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Effects                             K2Node_CustomEvent_Effect;                         // 0x04B8(0x0088)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEffectProgressChangeColor_ReturnValue;  // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               CallFunc_FindEffectOverlay_Overlay;                // 0x0548(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_11;              // 0x0551(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552[0x6];                                      // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Thickness;                      // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Separation_Steps;               // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_11;                    // 0x0565(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_566[0x2];                                      // 0x0566(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Spacing;                        // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0571(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_572[0x6];                                      // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Density;                        // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_HardStepBorder;                 // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0589(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A[0x2];                                      // 0x058A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_CustomEvent_BackgroundColor;                // 0x058C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_CustomEvent_BackgroundMask;                 // 0x05A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_FillColorCurrent;               // 0x05A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_GradientPower;                  // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_12;              // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_AbsoluteFillMethod;             // 0x05C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x05C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C3[0x5];                                      // 0x05C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_4;            // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseMarquee;                     // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_CustomEvent_MarqueeColor;                   // 0x05DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_MarqueeBackgroundColor;         // 0x05EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x05FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Value;                          // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarqueeMask                                  K2Node_CustomEvent_MarqueeMask;                    // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_CustomEvent_CustomMarqueeMask;              // 0x0610(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_12;                    // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0619(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61A[0x2];                                      // 0x061A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x061C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetInterpolationTime_ReturnValue;         // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_NewPercent;                     // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_13;              // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0674(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidEntryIndex_ReturnValue;            // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetEntryIndex_Value;                      // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_CurrentEntry;                   // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsEnabled_ReturnValue;                 // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsEnabled_ReturnValue_1;               // 0x0691(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0692(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0693(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0694(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_13;                    // 0x0695(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0696(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_14;                    // 0x0697(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Effect_Circular_C*                  CallFunc_Create_ReturnValue;                       // 0x06A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_14;              // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x06B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_15;              // 0x06BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x06BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_15;                    // 0x06BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x06BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x06BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BF[0x1];                                      // 0x06BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_4;                     // 0x06D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_3; // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9[0x3];                                      // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x06DC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_16;                    // 0x06EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x06ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x06EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_1;                           // 0x06EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_16;              // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FLinearColor& Color)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x06F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0704(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0718(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0720(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_17;              // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x3];                                      // 0x0729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_17;                    // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOverlay*>                       K2Node_MakeArray_Array;                            // 0x0738(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UOverlay*                               CallFunc_Array_Get_Item_2;                         // 0x0748(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0759(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyChildren_ReturnValue;               // 0x075A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75B[0x5];                                      // 0x075B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0760(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWB_Effect_C*                           K2Node_DynamicCast_AsWB_Effect;                    // 0x0768(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x0771(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x0772(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0773(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0774(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0778(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0781(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_782[0x2];                                      // 0x0782(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_3;                           // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0788(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0790(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x079C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x079D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79E[0x2];                                      // 0x079E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_4;                           // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x07A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A5[0x3];                                      // 0x07A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_5;                           // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color;                          // 0x07B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x07C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA[0x6];                                      // 0x07CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_6;                           // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_18;              // 0x07E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E2[0x6];                                      // 0x07E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_7;                           // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x07F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F1[0x7];                                      // 0x07F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_8;                           // 0x07F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0800(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0x7];                                      // 0x0801(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_9;                           // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_18;                    // 0x0821(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0822(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_25;                   // 0x0823(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_DeltaTime_ImplicitCast;         // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0834(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular) == 0x000008, "Wrong alignment on ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular");
static_assert(sizeof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular) == 0x000838, "Wrong size on ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, EntryPoint) == 0x000000, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::EntryPoint' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_1) == 0x000006, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable) == 0x000007, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000008, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsGamePaused_ReturnValue) == 0x00000A, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_2) == 0x00000C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_1) == 0x00000D, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_2) == 0x00000E, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1) == 0x00000F, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_2) == 0x000010, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_3) == 0x000011, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_3) == 0x000012, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000013, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_3) == 0x000014, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_4) == 0x000015, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_4) == 0x000016, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000017, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_5) == 0x000018, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetPercent_Percent) == 0x000020, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetPercent_Percent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Array_Index_Variable) == 0x000028, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00002C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_6) == 0x00002D, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_6' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetPercent_Percent_1) == 0x000030, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetPercent_Percent_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_4) == 0x000038, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_5) == 0x000039, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_5) == 0x00003A, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_6) == 0x000048, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Variable) == 0x00004C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Size) == 0x000058, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Size' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Value) == 0x000068, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_BreakVector2D_X) == 0x000070, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_BreakVector2D_Y) == 0x000078, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FClamp_ReturnValue) == 0x000080, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Color_3) == 0x000088, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Color_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Loop_Counter_Variable_1) == 0x000098, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_TargetPercent) == 0x0000A0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_TargetPercent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FClamp_ReturnValue_1) == 0x0000A8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000B0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Thickness) == 0x0000B8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Thickness' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_UseTargetPercent) == 0x0000C0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_UseTargetPercent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_EProgressMethod) == 0x0000C1, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_EProgressMethod' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_6) == 0x0000C2, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_6' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_CurrentInterpTime) == 0x0000C8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_CurrentInterpTime' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_TargetInterpTime) == 0x0000D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_TargetInterpTime' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Color_2) == 0x0000D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Color_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Color_1) == 0x0000E8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Color_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_UseGradientFillColor) == 0x0000F8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_UseGradientFillColor' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Color) == 0x0000FC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Color' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_GradientPower) == 0x000110, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_GradientPower' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_2) == 0x000118, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Mask_1) == 0x000120, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Mask_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Mask) == 0x000128, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Mask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_DynamicCast_AsTexture_2D) == 0x000130, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_GradientType) == 0x000139, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_GradientType' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_BlendMask) == 0x000140, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_BlendMask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_IsMarquee) == 0x000148, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_IsMarquee' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Image) == 0x000150, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Image' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_MaskType) == 0x000158, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_MaskType' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_7) == 0x000159, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_7' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Steps) == 0x00015C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Steps' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Spacing) == 0x000160, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Spacing' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_AbsoluteFillMethod) == 0x000168, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_AbsoluteFillMethod' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Effects) == 0x000170, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Effects' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_8) == 0x000180, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_8' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Index_1) == 0x000184, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Index_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_IsEnabled_1) == 0x000188, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_IsEnabled_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000189, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_IsEnabled) == 0x00018A, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_IsEnabled' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_9) == 0x00018B, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_9' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_7) == 0x00018C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_7' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_Index) == 0x000190, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000194, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_8) == 0x000195, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_8' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_9) == 0x000196, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_9' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_7) == 0x000197, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_MakeStruct_S_Effects) == 0x000198, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_MakeStruct_S_Effects' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_8) == 0x000220, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Percent) == 0x000228, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Percent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Length_ReturnValue) == 0x000230, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FClamp_ReturnValue_2) == 0x000238, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Array_Index_Variable_2) == 0x000240, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_9) == 0x000244, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Get_Item) == 0x000248, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x0002D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_MakeStruct_S_Effects_1) == 0x0002D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_MakeStruct_S_Effects_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Size) == 0x000360, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Size' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_UseGradient) == 0x000368, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_UseGradient' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_GradientOpacity) == 0x000370, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_GradientOpacity' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_GradientType) == 0x000378, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_GradientType' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FClamp_ReturnValue_3) == 0x000380, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_UseTargetPercent) == 0x000388, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_UseTargetPercent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_TargetPercent) == 0x000390, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_TargetPercent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Color_2) == 0x000398, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Color_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Color_1) == 0x0003A8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Color_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsProgressMethodInterpolated_ReturnValue) == 0x0003B8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsProgressMethodInterpolated_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_ProgressMethod) == 0x0003B9, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_ProgressMethod' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_NewPercent_1) == 0x0003C0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_NewPercent_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Count_Percent_Value) == 0x0003C8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Count_Percent_Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Count_TargetPercent_Value) == 0x0003D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Count_TargetPercent_Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_MapRangeClamped_ReturnValue) == 0x0003D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0003E0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Count_Percent_Value_1) == 0x0003E8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Count_Percent_Value_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0003F0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Value_1) == 0x0003F8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Value_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_10) == 0x000400, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_BlendMask) == 0x000408, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_BlendMask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Not_PreBool_ReturnValue) == 0x000410, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_11) == 0x000411, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Loop_Counter_Variable_2) == 0x000414, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_10) == 0x000418, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_10' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Less_IntInt_ReturnValue) == 0x000419, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Add_IntInt_ReturnValue_3) == 0x00041C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_10) == 0x000420, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_10' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Get_Item_1) == 0x000428, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Length_ReturnValue_1) == 0x0004B0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Less_IntInt_ReturnValue_1) == 0x0004B4, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Effect) == 0x0004B8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Effect' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsEffectProgressChangeColor_ReturnValue) == 0x000540, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsEffectProgressChangeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FindEffectOverlay_Overlay) == 0x000548, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FindEffectOverlay_Overlay' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_12) == 0x000550, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_11) == 0x000551, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_11' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Thickness) == 0x000558, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Thickness' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Separation_Steps) == 0x000560, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Separation_Steps' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_13) == 0x000564, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_11) == 0x000565, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_11' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Spacing) == 0x000568, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Spacing' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000570, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000571, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Density) == 0x000578, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Density' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_HardStepBorder) == 0x000580, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_HardStepBorder' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_14) == 0x000588, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_15) == 0x000589, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_BackgroundColor) == 0x00058C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_BackgroundColor' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_BackgroundMask) == 0x0005A0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_BackgroundMask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_FillColorCurrent) == 0x0005A8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_FillColorCurrent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_GradientPower) == 0x0005B8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_GradientPower' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_12) == 0x0005C0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_12' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_AbsoluteFillMethod) == 0x0005C1, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_AbsoluteFillMethod' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0005C2, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0005C8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_MapRangeClamped_ReturnValue_4) == 0x0005D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_UseMarquee) == 0x0005D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_UseMarquee' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_MarqueeColor) == 0x0005DC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_MarqueeColor' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_MarqueeBackgroundColor) == 0x0005EC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_MarqueeBackgroundColor' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_16) == 0x0005FC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Value) == 0x000600, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_MarqueeMask) == 0x000608, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_MarqueeMask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_CustomMarqueeMask) == 0x000610, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_CustomMarqueeMask' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_12) == 0x000618, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_12' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_17) == 0x000619, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_MyGeometry) == 0x00061C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_InDeltaTime) == 0x000654, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetInterpolationTime_ReturnValue) == 0x000658, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetInterpolationTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_NewPercent) == 0x000660, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_NewPercent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000668, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_13) == 0x000670, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_13' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Add_ReturnValue) == 0x000674, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValidEntryIndex_ReturnValue) == 0x000678, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValidEntryIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetEntryIndex_Value) == 0x000680, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetEntryIndex_Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_CurrentEntry) == 0x000688, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_CurrentEntry' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetIsEnabled_ReturnValue) == 0x000690, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetIsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetIsEnabled_ReturnValue_1) == 0x000691, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetIsEnabled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Event_IsDesignTime) == 0x000692, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Not_PreBool_ReturnValue_1) == 0x000693, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_18) == 0x000694, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_13) == 0x000695, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_13' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_SwitchEnum_CmpSuccess) == 0x000696, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_14) == 0x000697, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_14' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_19) == 0x000698, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Create_ReturnValue) == 0x0006A0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_14) == 0x0006A8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_14' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_AddChildToOverlay_ReturnValue) == 0x0006B0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_20) == 0x0006B8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0006B9, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_15) == 0x0006BA, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_15' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_21) == 0x0006BB, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_15) == 0x0006BC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_15' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0006BD, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable) == 0x0006BE, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default) == 0x0006C0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_byte_Variable) == 0x0006C8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_FClamp_ReturnValue_4) == 0x0006D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_FClamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_3) == 0x0006D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CreateDelegate_OutputDelegate) == 0x0006DC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_16) == 0x0006EC, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_16' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_byte_Variable_1) == 0x0006ED, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_1) == 0x0006EE, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_1) == 0x0006EF, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_16) == 0x0006F0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_16' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CreateDelegate_OutputDelegate_1) == 0x0006F4, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CreateDelegate_OutputDelegate_2) == 0x000704, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_object_Variable) == 0x000718, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000720, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_17) == 0x000728, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_17' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Variable_1) == 0x00072C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_17) == 0x000730, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_17' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_MakeArray_Array) == 0x000738, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Get_Item_2) == 0x000748, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Array_Length_ReturnValue_2) == 0x000750, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetChildrenCount_ReturnValue) == 0x000754, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Less_IntInt_ReturnValue_2) == 0x000758, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000759, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_HasAnyChildren_ReturnValue) == 0x00075A, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_HasAnyChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_GetChildAt_ReturnValue) == 0x000760, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_DynamicCast_AsWB_Effect) == 0x000768, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_DynamicCast_AsWB_Effect' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_DynamicCast_bSuccess_1) == 0x000770, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_22) == 0x000771, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_23) == 0x000772, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_2) == 0x000773, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Variable_2) == 0x000774, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_2) == 0x000778, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_3) == 0x000780, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Not_PreBool_ReturnValue_2) == 0x000781, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_3) == 0x000784, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_BooleanAND_ReturnValue_1) == 0x000788, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_PlayAnimation_ReturnValue) == 0x000790, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_int_Variable_3) == 0x000798, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_4) == 0x00079C, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_5) == 0x00079D, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_4) == 0x0007A0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_6) == 0x0007A4, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_5) == 0x0007A8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_CustomEvent_Color) == 0x0007B0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_real_Variable) == 0x0007C0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0007C8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_7) == 0x0007C9, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_real_Variable_1) == 0x0007D0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_6) == 0x0007D8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Less_IntInt_ReturnValue_3) == 0x0007E0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Has_Been_Initd_Variable_18) == 0x0007E1, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Has_Been_Initd_Variable_18' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_7) == 0x0007E8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_8) == 0x0007F0, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_8) == 0x0007F8, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Greater_IntInt_ReturnValue) == 0x000800, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_real_Variable_2) == 0x000808, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_Variable_9) == 0x000810, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_Select_Default_9) == 0x000818, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_24) == 0x000820, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, Temp_bool_IsClosed_Variable_18) == 0x000821, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::Temp_bool_IsClosed_Variable_18' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000822, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_IsValid_ReturnValue_25) == 0x000823, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_IsValid_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, K2Node_VariableSet_DeltaTime_ImplicitCast) == 0x000828, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::K2Node_VariableSet_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_Delay_Duration_ImplicitCast) == 0x000830, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000834, "Member 'ProgressBarCircular_C_ExecuteUbergraph_ProgressBarCircular::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.FindEffectOverlay
// 0x0020 (0x0020 - 0x0000)
struct ProgressBarCircular_C_FindEffectOverlay final
{
public:
	EEffectLayer                                  EffectLayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               Overlay;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EEffectLayer                                  Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_FindEffectOverlay) == 0x000008, "Wrong alignment on ProgressBarCircular_C_FindEffectOverlay");
static_assert(sizeof(ProgressBarCircular_C_FindEffectOverlay) == 0x000020, "Wrong size on ProgressBarCircular_C_FindEffectOverlay");
static_assert(offsetof(ProgressBarCircular_C_FindEffectOverlay, EffectLayer) == 0x000000, "Member 'ProgressBarCircular_C_FindEffectOverlay::EffectLayer' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_FindEffectOverlay, Overlay) == 0x000008, "Member 'ProgressBarCircular_C_FindEffectOverlay::Overlay' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_FindEffectOverlay, Temp_byte_Variable) == 0x000010, "Member 'ProgressBarCircular_C_FindEffectOverlay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_FindEffectOverlay, K2Node_Select_Default) == 0x000018, "Member 'ProgressBarCircular_C_FindEffectOverlay::K2Node_Select_Default' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.GetEntryIndex
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_GetEntryIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_GetEntryIndex) == 0x000008, "Wrong alignment on ProgressBarCircular_C_GetEntryIndex");
static_assert(sizeof(ProgressBarCircular_C_GetEntryIndex) == 0x000010, "Wrong size on ProgressBarCircular_C_GetEntryIndex");
static_assert(offsetof(ProgressBarCircular_C_GetEntryIndex, Index_0) == 0x000000, "Member 'ProgressBarCircular_C_GetEntryIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetEntryIndex, Value) == 0x000008, "Member 'ProgressBarCircular_C_GetEntryIndex::Value' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.GetInterpolationTime
// 0x0038 (0x0038 - 0x0000)
struct ProgressBarCircular_C_GetInterpolationTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_GetInterpolationTime) == 0x000008, "Wrong alignment on ProgressBarCircular_C_GetInterpolationTime");
static_assert(sizeof(ProgressBarCircular_C_GetInterpolationTime) == 0x000038, "Wrong size on ProgressBarCircular_C_GetInterpolationTime");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, ReturnValue) == 0x000000, "Member 'ProgressBarCircular_C_GetInterpolationTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, Temp_bool_Variable) == 0x000008, "Member 'ProgressBarCircular_C_GetInterpolationTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, Temp_real_Variable) == 0x000010, "Member 'ProgressBarCircular_C_GetInterpolationTime::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, CallFunc_MakeLiteralDouble_ReturnValue) == 0x000018, "Member 'ProgressBarCircular_C_GetInterpolationTime::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, K2Node_Select_Default) == 0x000020, "Member 'ProgressBarCircular_C_GetInterpolationTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'ProgressBarCircular_C_GetInterpolationTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_GetInterpolationTime, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'ProgressBarCircular_C_GetInterpolationTime::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.IsEffectProgressChangeColor
// 0x0090 (0x0090 - 0x0000)
struct ProgressBarCircular_C_IsEffectProgressChangeColor final
{
public:
	struct FS_Effects                             Effect;                                            // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_IsEffectProgressChangeColor) == 0x000008, "Wrong alignment on ProgressBarCircular_C_IsEffectProgressChangeColor");
static_assert(sizeof(ProgressBarCircular_C_IsEffectProgressChangeColor) == 0x000090, "Wrong size on ProgressBarCircular_C_IsEffectProgressChangeColor");
static_assert(offsetof(ProgressBarCircular_C_IsEffectProgressChangeColor, Effect) == 0x000000, "Member 'ProgressBarCircular_C_IsEffectProgressChangeColor::Effect' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsEffectProgressChangeColor, ReturnValue) == 0x000088, "Member 'ProgressBarCircular_C_IsEffectProgressChangeColor::ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsEffectProgressChangeColor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000089, "Member 'ProgressBarCircular_C_IsEffectProgressChangeColor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.IsProgressMethodInterpolated
// 0x0002 (0x0002 - 0x0000)
struct ProgressBarCircular_C_IsProgressMethodInterpolated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_IsProgressMethodInterpolated) == 0x000001, "Wrong alignment on ProgressBarCircular_C_IsProgressMethodInterpolated");
static_assert(sizeof(ProgressBarCircular_C_IsProgressMethodInterpolated) == 0x000002, "Wrong size on ProgressBarCircular_C_IsProgressMethodInterpolated");
static_assert(offsetof(ProgressBarCircular_C_IsProgressMethodInterpolated, ReturnValue) == 0x000000, "Member 'ProgressBarCircular_C_IsProgressMethodInterpolated::ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsProgressMethodInterpolated, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ProgressBarCircular_C_IsProgressMethodInterpolated::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.IsProgressMethodStatic
// 0x0002 (0x0002 - 0x0000)
struct ProgressBarCircular_C_IsProgressMethodStatic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_IsProgressMethodStatic) == 0x000001, "Wrong alignment on ProgressBarCircular_C_IsProgressMethodStatic");
static_assert(sizeof(ProgressBarCircular_C_IsProgressMethodStatic) == 0x000002, "Wrong size on ProgressBarCircular_C_IsProgressMethodStatic");
static_assert(offsetof(ProgressBarCircular_C_IsProgressMethodStatic, ReturnValue) == 0x000000, "Member 'ProgressBarCircular_C_IsProgressMethodStatic::ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsProgressMethodStatic, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ProgressBarCircular_C_IsProgressMethodStatic::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.IsValidEntryIndex
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_IsValidEntryIndex final
{
public:
	int32                                         IndexToTest;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_IsValidEntryIndex) == 0x000004, "Wrong alignment on ProgressBarCircular_C_IsValidEntryIndex");
static_assert(sizeof(ProgressBarCircular_C_IsValidEntryIndex) == 0x000008, "Wrong size on ProgressBarCircular_C_IsValidEntryIndex");
static_assert(offsetof(ProgressBarCircular_C_IsValidEntryIndex, IndexToTest) == 0x000000, "Member 'ProgressBarCircular_C_IsValidEntryIndex::IndexToTest' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsValidEntryIndex, ReturnValue) == 0x000004, "Member 'ProgressBarCircular_C_IsValidEntryIndex::ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_IsValidEntryIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000005, "Member 'ProgressBarCircular_C_IsValidEntryIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_AddEffect
// 0x0090 (0x0090 - 0x0000)
struct ProgressBarCircular_C_PB_AddEffect final
{
public:
	struct FS_Effects                             Effect;                                            // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_AddEffect) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_AddEffect");
static_assert(sizeof(ProgressBarCircular_C_PB_AddEffect) == 0x000090, "Wrong size on ProgressBarCircular_C_PB_AddEffect");
static_assert(offsetof(ProgressBarCircular_C_PB_AddEffect, Effect) == 0x000000, "Member 'ProgressBarCircular_C_PB_AddEffect::Effect' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_AddEffect, Index_0) == 0x000088, "Member 'ProgressBarCircular_C_PB_AddEffect::Index_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_AddEffect, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'ProgressBarCircular_C_PB_AddEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetEffects
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetEffects final
{
public:
	TArray<struct FS_Effects>                     Effects_0;                                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetEffects) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetEffects");
static_assert(sizeof(ProgressBarCircular_C_PB_GetEffects) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetEffects");
static_assert(offsetof(ProgressBarCircular_C_PB_GetEffects, Effects_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetEffects::Effects_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetFillColor
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetFillColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetFillColor) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_GetFillColor");
static_assert(sizeof(ProgressBarCircular_C_PB_GetFillColor) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetFillColor");
static_assert(offsetof(ProgressBarCircular_C_PB_GetFillColor, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetFillColor::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetInterpTimeCurrent
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_GetInterpTimeCurrent final
{
public:
	double                                        CurrentInterpTime;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetInterpTimeCurrent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetInterpTimeCurrent");
static_assert(sizeof(ProgressBarCircular_C_PB_GetInterpTimeCurrent) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_GetInterpTimeCurrent");
static_assert(offsetof(ProgressBarCircular_C_PB_GetInterpTimeCurrent, CurrentInterpTime) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetInterpTimeCurrent::CurrentInterpTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetInterpTimeTarget
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_GetInterpTimeTarget final
{
public:
	double                                        TargetInterpTime;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetInterpTimeTarget) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetInterpTimeTarget");
static_assert(sizeof(ProgressBarCircular_C_PB_GetInterpTimeTarget) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_GetInterpTimeTarget");
static_assert(offsetof(ProgressBarCircular_C_PB_GetInterpTimeTarget, TargetInterpTime) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetInterpTimeTarget::TargetInterpTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetIsMarquee
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_GetIsMarquee final
{
public:
	bool                                          IsMarquee;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetIsMarquee) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_GetIsMarquee");
static_assert(sizeof(ProgressBarCircular_C_PB_GetIsMarquee) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_GetIsMarquee");
static_assert(offsetof(ProgressBarCircular_C_PB_GetIsMarquee, IsMarquee) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetIsMarquee::IsMarquee' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetPercent
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetPercent final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercent_Percent;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_GetPercent) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_GetPercent, Percent) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetPercent::Percent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_GetPercent, CallFunc_GetPercent_Percent) == 0x000008, "Member 'ProgressBarCircular_C_PB_GetPercent::CallFunc_GetPercent_Percent' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetProgressMethod
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_GetProgressMethod final
{
public:
	EProgressMethod                               EProgressMethod;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetProgressMethod) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_GetProgressMethod");
static_assert(sizeof(ProgressBarCircular_C_PB_GetProgressMethod) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_GetProgressMethod");
static_assert(offsetof(ProgressBarCircular_C_PB_GetProgressMethod, EProgressMethod) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetProgressMethod::EProgressMethod' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetSeparationSteps
// 0x0004 (0x0004 - 0x0000)
struct ProgressBarCircular_C_PB_GetSeparationSteps final
{
public:
	int32                                         Steps;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetSeparationSteps) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_GetSeparationSteps");
static_assert(sizeof(ProgressBarCircular_C_PB_GetSeparationSteps) == 0x000004, "Wrong size on ProgressBarCircular_C_PB_GetSeparationSteps");
static_assert(offsetof(ProgressBarCircular_C_PB_GetSeparationSteps, Steps) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetSeparationSteps::Steps' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetSize
// 0x0020 (0x0020 - 0x0000)
struct ProgressBarCircular_C_PB_GetSize final
{
public:
	struct FVector2D                              Size_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetSize) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetSize");
static_assert(sizeof(ProgressBarCircular_C_PB_GetSize) == 0x000020, "Wrong size on ProgressBarCircular_C_PB_GetSize");
static_assert(offsetof(ProgressBarCircular_C_PB_GetSize, Size_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetSize::Size_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_GetSize, CallFunc_MakeVector2D_ReturnValue) == 0x000010, "Member 'ProgressBarCircular_C_PB_GetSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetFillColor_Negative
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetTargetFillColor_Negative final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetTargetFillColor_Negative) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_GetTargetFillColor_Negative");
static_assert(sizeof(ProgressBarCircular_C_PB_GetTargetFillColor_Negative) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetTargetFillColor_Negative");
static_assert(offsetof(ProgressBarCircular_C_PB_GetTargetFillColor_Negative, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetTargetFillColor_Negative::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetFillColor_Positive
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetTargetFillColor_Positive final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetTargetFillColor_Positive) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_GetTargetFillColor_Positive");
static_assert(sizeof(ProgressBarCircular_C_PB_GetTargetFillColor_Positive) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetTargetFillColor_Positive");
static_assert(offsetof(ProgressBarCircular_C_PB_GetTargetFillColor_Positive, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetTargetFillColor_Positive::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetTargetPercent
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_GetTargetPercent final
{
public:
	double                                        TargetPercent_0;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTargetPercent_TargetPercent;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetTargetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_GetTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_GetTargetPercent) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_GetTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_GetTargetPercent, TargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetTargetPercent::TargetPercent_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_GetTargetPercent, CallFunc_GetTargetPercent_TargetPercent) == 0x000008, "Member 'ProgressBarCircular_C_PB_GetTargetPercent::CallFunc_GetTargetPercent_TargetPercent' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetUseGradientFillColor
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_GetUseGradientFillColor final
{
public:
	bool                                          UseGradientFillColor;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetUseGradientFillColor) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_GetUseGradientFillColor");
static_assert(sizeof(ProgressBarCircular_C_PB_GetUseGradientFillColor) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_GetUseGradientFillColor");
static_assert(offsetof(ProgressBarCircular_C_PB_GetUseGradientFillColor, UseGradientFillColor) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetUseGradientFillColor::UseGradientFillColor' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_GetUseTargetPercent
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_GetUseTargetPercent final
{
public:
	bool                                          UseTargetPercent_0;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_GetUseTargetPercent) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_GetUseTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_GetUseTargetPercent) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_GetUseTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_GetUseTargetPercent, UseTargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_GetUseTargetPercent::UseTargetPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_RemoveEffect
// 0x0004 (0x0004 - 0x0000)
struct ProgressBarCircular_C_PB_RemoveEffect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_RemoveEffect) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_RemoveEffect");
static_assert(sizeof(ProgressBarCircular_C_PB_RemoveEffect) == 0x000004, "Wrong size on ProgressBarCircular_C_PB_RemoveEffect");
static_assert(offsetof(ProgressBarCircular_C_PB_RemoveEffect, Index_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_RemoveEffect::Index_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetAllEffectsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetAllEffectsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetAllEffectsEnabled) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetAllEffectsEnabled");
static_assert(sizeof(ProgressBarCircular_C_PB_SetAllEffectsEnabled) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetAllEffectsEnabled");
static_assert(offsetof(ProgressBarCircular_C_PB_SetAllEffectsEnabled, IsEnabled) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetAllEffectsEnabled::IsEnabled' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetBackgroundColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetBackgroundColor) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetBackgroundColor");
static_assert(sizeof(ProgressBarCircular_C_PB_SetBackgroundColor) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetBackgroundColor");
static_assert(offsetof(ProgressBarCircular_C_PB_SetBackgroundColor, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetBackgroundColor::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBackgroundColorMask
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetBackgroundColorMask final
{
public:
	class UTexture2D*                             Mask;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetBackgroundColorMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetBackgroundColorMask");
static_assert(sizeof(ProgressBarCircular_C_PB_SetBackgroundColorMask) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetBackgroundColorMask");
static_assert(offsetof(ProgressBarCircular_C_PB_SetBackgroundColorMask, Mask) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetBackgroundColorMask::Mask' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetBlendMask
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetBlendMask final
{
public:
	class UTexture2D*                             BlendMask_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetBlendMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetBlendMask");
static_assert(sizeof(ProgressBarCircular_C_PB_SetBlendMask) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetBlendMask");
static_assert(offsetof(ProgressBarCircular_C_PB_SetBlendMask, BlendMask_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetBlendMask::BlendMask_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetCustomMarqueeImage
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetCustomMarqueeImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetCustomMarqueeImage) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetCustomMarqueeImage");
static_assert(sizeof(ProgressBarCircular_C_PB_SetCustomMarqueeImage) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetCustomMarqueeImage");
static_assert(offsetof(ProgressBarCircular_C_PB_SetCustomMarqueeImage, Image) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetCustomMarqueeImage::Image' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetCustomMarqueeMaskType
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetCustomMarqueeMaskType final
{
public:
	EMarqueeMask                                  MaskType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetCustomMarqueeMaskType) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetCustomMarqueeMaskType");
static_assert(sizeof(ProgressBarCircular_C_PB_SetCustomMarqueeMaskType) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetCustomMarqueeMaskType");
static_assert(offsetof(ProgressBarCircular_C_PB_SetCustomMarqueeMaskType, MaskType) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetCustomMarqueeMaskType::MaskType' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetEffectEnabled
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetEffectEnabled final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetEffectEnabled) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetEffectEnabled");
static_assert(sizeof(ProgressBarCircular_C_PB_SetEffectEnabled) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetEffectEnabled");
static_assert(offsetof(ProgressBarCircular_C_PB_SetEffectEnabled, Index_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetEffectEnabled::Index_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_PB_SetEffectEnabled, IsEnabled) == 0x000004, "Member 'ProgressBarCircular_C_PB_SetEffectEnabled::IsEnabled' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetEffects
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetEffects final
{
public:
	TArray<struct FS_Effects>                     Effects_0;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetEffects) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetEffects");
static_assert(sizeof(ProgressBarCircular_C_PB_SetEffects) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetEffects");
static_assert(offsetof(ProgressBarCircular_C_PB_SetEffects, Effects_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetEffects::Effects_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColor
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetFillColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetFillColor) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetFillColor");
static_assert(sizeof(ProgressBarCircular_C_PB_SetFillColor) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetFillColor");
static_assert(offsetof(ProgressBarCircular_C_PB_SetFillColor, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetFillColor::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorGradientPower
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetFillColorGradientPower final
{
public:
	double                                        GradientPower;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetFillColorGradientPower) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetFillColorGradientPower");
static_assert(sizeof(ProgressBarCircular_C_PB_SetFillColorGradientPower) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetFillColorGradientPower");
static_assert(offsetof(ProgressBarCircular_C_PB_SetFillColorGradientPower, GradientPower) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetFillColorGradientPower::GradientPower' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorGradientType
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetFillColorGradientType final
{
public:
	EGradientTypes                                GradientType_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetFillColorGradientType) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetFillColorGradientType");
static_assert(sizeof(ProgressBarCircular_C_PB_SetFillColorGradientType) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetFillColorGradientType");
static_assert(offsetof(ProgressBarCircular_C_PB_SetFillColorGradientType, GradientType_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetFillColorGradientType::GradientType_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetFillColorMask
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetFillColorMask final
{
public:
	class UObject*                                Mask;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetFillColorMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetFillColorMask");
static_assert(sizeof(ProgressBarCircular_C_PB_SetFillColorMask) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetFillColorMask");
static_assert(offsetof(ProgressBarCircular_C_PB_SetFillColorMask, Mask) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetFillColorMask::Mask' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetInterpTimeCurrent
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetInterpTimeCurrent final
{
public:
	double                                        CurrentInterpTime;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetInterpTimeCurrent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetInterpTimeCurrent");
static_assert(sizeof(ProgressBarCircular_C_PB_SetInterpTimeCurrent) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetInterpTimeCurrent");
static_assert(offsetof(ProgressBarCircular_C_PB_SetInterpTimeCurrent, CurrentInterpTime) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetInterpTimeCurrent::CurrentInterpTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetInterpTimeTarget
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetInterpTimeTarget final
{
public:
	double                                        TargetInterpTime;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetInterpTimeTarget) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetInterpTimeTarget");
static_assert(sizeof(ProgressBarCircular_C_PB_SetInterpTimeTarget) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetInterpTimeTarget");
static_assert(offsetof(ProgressBarCircular_C_PB_SetInterpTimeTarget, TargetInterpTime) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetInterpTimeTarget::TargetInterpTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetIsMarquee
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetIsMarquee final
{
public:
	bool                                          IsMarquee;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetIsMarquee) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetIsMarquee");
static_assert(sizeof(ProgressBarCircular_C_PB_SetIsMarquee) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetIsMarquee");
static_assert(offsetof(ProgressBarCircular_C_PB_SetIsMarquee, IsMarquee) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetIsMarquee::IsMarquee' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetPercent
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetPercent final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_SetPercent) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_SetPercent, Value) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetPercent::Value' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetProgressMethod
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetProgressMethod final
{
public:
	EProgressMethod                               EProgressMethod;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetProgressMethod) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetProgressMethod");
static_assert(sizeof(ProgressBarCircular_C_PB_SetProgressMethod) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetProgressMethod");
static_assert(offsetof(ProgressBarCircular_C_PB_SetProgressMethod, EProgressMethod) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetProgressMethod::EProgressMethod' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationAbsoluteFill
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetSeparationAbsoluteFill final
{
public:
	bool                                          AbsoluteFillMethod;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetSeparationAbsoluteFill) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetSeparationAbsoluteFill");
static_assert(sizeof(ProgressBarCircular_C_PB_SetSeparationAbsoluteFill) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetSeparationAbsoluteFill");
static_assert(offsetof(ProgressBarCircular_C_PB_SetSeparationAbsoluteFill, AbsoluteFillMethod) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetSeparationAbsoluteFill::AbsoluteFillMethod' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationSteps
// 0x0004 (0x0004 - 0x0000)
struct ProgressBarCircular_C_PB_SetSeparationSteps final
{
public:
	int32                                         Steps;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetSeparationSteps) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetSeparationSteps");
static_assert(sizeof(ProgressBarCircular_C_PB_SetSeparationSteps) == 0x000004, "Wrong size on ProgressBarCircular_C_PB_SetSeparationSteps");
static_assert(offsetof(ProgressBarCircular_C_PB_SetSeparationSteps, Steps) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetSeparationSteps::Steps' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSeparationStepsSpacing
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetSeparationStepsSpacing final
{
public:
	double                                        Spacing;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetSeparationStepsSpacing) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetSeparationStepsSpacing");
static_assert(sizeof(ProgressBarCircular_C_PB_SetSeparationStepsSpacing) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetSeparationStepsSpacing");
static_assert(offsetof(ProgressBarCircular_C_PB_SetSeparationStepsSpacing, Spacing) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetSeparationStepsSpacing::Spacing' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetSize
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetSize final
{
public:
	struct FVector2D                              Size_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetSize) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetSize");
static_assert(sizeof(ProgressBarCircular_C_PB_SetSize) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetSize");
static_assert(offsetof(ProgressBarCircular_C_PB_SetSize, Size_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetSize::Size_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetFillColor_Negative
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetTargetFillColor_Negative final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetTargetFillColor_Negative) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetTargetFillColor_Negative");
static_assert(sizeof(ProgressBarCircular_C_PB_SetTargetFillColor_Negative) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetTargetFillColor_Negative");
static_assert(offsetof(ProgressBarCircular_C_PB_SetTargetFillColor_Negative, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetTargetFillColor_Negative::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetFillColor_Positive
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_PB_SetTargetFillColor_Positive final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetTargetFillColor_Positive) == 0x000004, "Wrong alignment on ProgressBarCircular_C_PB_SetTargetFillColor_Positive");
static_assert(sizeof(ProgressBarCircular_C_PB_SetTargetFillColor_Positive) == 0x000010, "Wrong size on ProgressBarCircular_C_PB_SetTargetFillColor_Positive");
static_assert(offsetof(ProgressBarCircular_C_PB_SetTargetFillColor_Positive, Color) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetTargetFillColor_Positive::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetTargetPercent
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetTargetPercent final
{
public:
	double                                        TargetPercent_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetTargetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_SetTargetPercent) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_SetTargetPercent, TargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetTargetPercent::TargetPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetThickness
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_PB_SetThickness final
{
public:
	double                                        Thickness_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetThickness) == 0x000008, "Wrong alignment on ProgressBarCircular_C_PB_SetThickness");
static_assert(sizeof(ProgressBarCircular_C_PB_SetThickness) == 0x000008, "Wrong size on ProgressBarCircular_C_PB_SetThickness");
static_assert(offsetof(ProgressBarCircular_C_PB_SetThickness, Thickness_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetThickness::Thickness_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetUseGradientFillColor
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetUseGradientFillColor final
{
public:
	bool                                          UseGradientFillColor;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetUseGradientFillColor) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetUseGradientFillColor");
static_assert(sizeof(ProgressBarCircular_C_PB_SetUseGradientFillColor) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetUseGradientFillColor");
static_assert(offsetof(ProgressBarCircular_C_PB_SetUseGradientFillColor, UseGradientFillColor) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetUseGradientFillColor::UseGradientFillColor' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PB_SetUseTargetPercent
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PB_SetUseTargetPercent final
{
public:
	bool                                          UseTargetPercent_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PB_SetUseTargetPercent) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PB_SetUseTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_PB_SetUseTargetPercent) == 0x000001, "Wrong size on ProgressBarCircular_C_PB_SetUseTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_PB_SetUseTargetPercent, UseTargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_PB_SetUseTargetPercent::UseTargetPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_PreConstruct) == 0x000001, "Wrong alignment on ProgressBarCircular_C_PreConstruct");
static_assert(sizeof(ProgressBarCircular_C_PreConstruct) == 0x000001, "Wrong size on ProgressBarCircular_C_PreConstruct");
static_assert(offsetof(ProgressBarCircular_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ProgressBarCircular_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.RemoveEntryIndex
// 0x0004 (0x0004 - 0x0000)
struct ProgressBarCircular_C_RemoveEntryIndex final
{
public:
	int32                                         IndexToRemove;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_RemoveEntryIndex) == 0x000004, "Wrong alignment on ProgressBarCircular_C_RemoveEntryIndex");
static_assert(sizeof(ProgressBarCircular_C_RemoveEntryIndex) == 0x000004, "Wrong size on ProgressBarCircular_C_RemoveEntryIndex");
static_assert(offsetof(ProgressBarCircular_C_RemoveEntryIndex, IndexToRemove) == 0x000000, "Member 'ProgressBarCircular_C_RemoveEntryIndex::IndexToRemove' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetBackgroundColor
// 0x0018 (0x0018 - 0x0000)
struct ProgressBarCircular_C_SetBackgroundColor final
{
public:
	struct FLinearColor                           BackgroundColor_0;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             BackgroundMask_0;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetBackgroundColor) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetBackgroundColor");
static_assert(sizeof(ProgressBarCircular_C_SetBackgroundColor) == 0x000018, "Wrong size on ProgressBarCircular_C_SetBackgroundColor");
static_assert(offsetof(ProgressBarCircular_C_SetBackgroundColor, BackgroundColor_0) == 0x000000, "Member 'ProgressBarCircular_C_SetBackgroundColor::BackgroundColor_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetBackgroundColor, BackgroundMask_0) == 0x000010, "Member 'ProgressBarCircular_C_SetBackgroundColor::BackgroundMask_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetBlendMask
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_SetBlendMask final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetEffectMaterial_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetBlendMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetBlendMask");
static_assert(sizeof(ProgressBarCircular_C_SetBlendMask) == 0x000010, "Wrong size on ProgressBarCircular_C_SetBlendMask");
static_assert(offsetof(ProgressBarCircular_C_SetBlendMask, Value) == 0x000000, "Member 'ProgressBarCircular_C_SetBlendMask::Value' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetBlendMask, CallFunc_GetEffectMaterial_ReturnValue) == 0x000008, "Member 'ProgressBarCircular_C_SetBlendMask::CallFunc_GetEffectMaterial_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetDensity
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetDensity final
{
public:
	double                                        Density_0;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetDensity) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetDensity");
static_assert(sizeof(ProgressBarCircular_C_SetDensity) == 0x000008, "Wrong size on ProgressBarCircular_C_SetDensity");
static_assert(offsetof(ProgressBarCircular_C_SetDensity, Density_0) == 0x000000, "Member 'ProgressBarCircular_C_SetDensity::Density_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetFillColor
// 0x0018 (0x0018 - 0x0000)
struct ProgressBarCircular_C_SetFillColor final
{
public:
	struct FLinearColor                           FillColorCurrent_0;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GradientPower;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetFillColor) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetFillColor");
static_assert(sizeof(ProgressBarCircular_C_SetFillColor) == 0x000018, "Wrong size on ProgressBarCircular_C_SetFillColor");
static_assert(offsetof(ProgressBarCircular_C_SetFillColor, FillColorCurrent_0) == 0x000000, "Member 'ProgressBarCircular_C_SetFillColor::FillColorCurrent_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetFillColor, GradientPower) == 0x000010, "Member 'ProgressBarCircular_C_SetFillColor::GradientPower' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetFillColorMask
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetFillColorMask final
{
public:
	class UTexture2D*                             Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetFillColorMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetFillColorMask");
static_assert(sizeof(ProgressBarCircular_C_SetFillColorMask) == 0x000008, "Wrong size on ProgressBarCircular_C_SetFillColorMask");
static_assert(offsetof(ProgressBarCircular_C_SetFillColorMask, Value) == 0x000000, "Member 'ProgressBarCircular_C_SetFillColorMask::Value' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetMarqueeMask
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_SetMarqueeMask final
{
public:
	EMarqueeMask                                  MarqueeMask_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CustomMarqueeMask_0;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetMarqueeMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetMarqueeMask");
static_assert(sizeof(ProgressBarCircular_C_SetMarqueeMask) == 0x000010, "Wrong size on ProgressBarCircular_C_SetMarqueeMask");
static_assert(offsetof(ProgressBarCircular_C_SetMarqueeMask, MarqueeMask_0) == 0x000000, "Member 'ProgressBarCircular_C_SetMarqueeMask::MarqueeMask_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetMarqueeMask, CustomMarqueeMask_0) == 0x000008, "Member 'ProgressBarCircular_C_SetMarqueeMask::CustomMarqueeMask_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetMarqueeTime
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetMarqueeTime final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetMarqueeTime) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetMarqueeTime");
static_assert(sizeof(ProgressBarCircular_C_SetMarqueeTime) == 0x000008, "Wrong size on ProgressBarCircular_C_SetMarqueeTime");
static_assert(offsetof(ProgressBarCircular_C_SetMarqueeTime, Value) == 0x000000, "Member 'ProgressBarCircular_C_SetMarqueeTime::Value' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetOverallBlendMask
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetOverallBlendMask final
{
public:
	class UTexture2D*                             BlendMask_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetOverallBlendMask) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetOverallBlendMask");
static_assert(sizeof(ProgressBarCircular_C_SetOverallBlendMask) == 0x000008, "Wrong size on ProgressBarCircular_C_SetOverallBlendMask");
static_assert(offsetof(ProgressBarCircular_C_SetOverallBlendMask, BlendMask_0) == 0x000000, "Member 'ProgressBarCircular_C_SetOverallBlendMask::BlendMask_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetPercentInterpolated
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetPercentInterpolated final
{
public:
	double                                        NewPercent_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetPercentInterpolated) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetPercentInterpolated");
static_assert(sizeof(ProgressBarCircular_C_SetPercentInterpolated) == 0x000008, "Wrong size on ProgressBarCircular_C_SetPercentInterpolated");
static_assert(offsetof(ProgressBarCircular_C_SetPercentInterpolated, NewPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_SetPercentInterpolated::NewPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetProgressMethod
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_SetProgressMethod final
{
public:
	EProgressMethod                               ProgressMethod_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetProgressMethod) == 0x000001, "Wrong alignment on ProgressBarCircular_C_SetProgressMethod");
static_assert(sizeof(ProgressBarCircular_C_SetProgressMethod) == 0x000001, "Wrong size on ProgressBarCircular_C_SetProgressMethod");
static_assert(offsetof(ProgressBarCircular_C_SetProgressMethod, ProgressMethod_0) == 0x000000, "Member 'ProgressBarCircular_C_SetProgressMethod::ProgressMethod_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetSize
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetSize final
{
public:
	double                                        Size_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetSize) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetSize");
static_assert(sizeof(ProgressBarCircular_C_SetSize) == 0x000008, "Wrong size on ProgressBarCircular_C_SetSize");
static_assert(offsetof(ProgressBarCircular_C_SetSize, Size_0) == 0x000000, "Member 'ProgressBarCircular_C_SetSize::Size_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetSpacing
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetSpacing final
{
public:
	double                                        Spacing;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetSpacing) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetSpacing");
static_assert(sizeof(ProgressBarCircular_C_SetSpacing) == 0x000008, "Wrong size on ProgressBarCircular_C_SetSpacing");
static_assert(offsetof(ProgressBarCircular_C_SetSpacing, Spacing) == 0x000000, "Member 'ProgressBarCircular_C_SetSpacing::Spacing' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetStepDensity
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetStepDensity final
{
public:
	double                                        HardStepBorder;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetStepDensity) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetStepDensity");
static_assert(sizeof(ProgressBarCircular_C_SetStepDensity) == 0x000008, "Wrong size on ProgressBarCircular_C_SetStepDensity");
static_assert(offsetof(ProgressBarCircular_C_SetStepDensity, HardStepBorder) == 0x000000, "Member 'ProgressBarCircular_C_SetStepDensity::HardStepBorder' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetSteps
// 0x0004 (0x0004 - 0x0000)
struct ProgressBarCircular_C_SetSteps final
{
public:
	int32                                         Separation_Steps_0;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetSteps) == 0x000004, "Wrong alignment on ProgressBarCircular_C_SetSteps");
static_assert(sizeof(ProgressBarCircular_C_SetSteps) == 0x000004, "Wrong size on ProgressBarCircular_C_SetSteps");
static_assert(offsetof(ProgressBarCircular_C_SetSteps, Separation_Steps_0) == 0x000000, "Member 'ProgressBarCircular_C_SetSteps::Separation_Steps_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetFillColorNegative
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_SetTargetFillColorNegative final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetTargetFillColorNegative) == 0x000004, "Wrong alignment on ProgressBarCircular_C_SetTargetFillColorNegative");
static_assert(sizeof(ProgressBarCircular_C_SetTargetFillColorNegative) == 0x000010, "Wrong size on ProgressBarCircular_C_SetTargetFillColorNegative");
static_assert(offsetof(ProgressBarCircular_C_SetTargetFillColorNegative, Color) == 0x000000, "Member 'ProgressBarCircular_C_SetTargetFillColorNegative::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetFillColorPositive
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_SetTargetFillColorPositive final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetTargetFillColorPositive) == 0x000004, "Wrong alignment on ProgressBarCircular_C_SetTargetFillColorPositive");
static_assert(sizeof(ProgressBarCircular_C_SetTargetFillColorPositive) == 0x000010, "Wrong size on ProgressBarCircular_C_SetTargetFillColorPositive");
static_assert(offsetof(ProgressBarCircular_C_SetTargetFillColorPositive, Color) == 0x000000, "Member 'ProgressBarCircular_C_SetTargetFillColorPositive::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetTargetPercent
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_SetTargetPercent final
{
public:
	bool                                          UseTargetPercent_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetPercent_0;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetTargetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_SetTargetPercent) == 0x000010, "Wrong size on ProgressBarCircular_C_SetTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_SetTargetPercent, UseTargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_SetTargetPercent::UseTargetPercent_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetTargetPercent, TargetPercent_0) == 0x000008, "Member 'ProgressBarCircular_C_SetTargetPercent::TargetPercent_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetThickness
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_SetThickness final
{
public:
	double                                        Thickness_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetThickness) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetThickness");
static_assert(sizeof(ProgressBarCircular_C_SetThickness) == 0x000008, "Wrong size on ProgressBarCircular_C_SetThickness");
static_assert(offsetof(ProgressBarCircular_C_SetThickness, Thickness_0) == 0x000000, "Member 'ProgressBarCircular_C_SetThickness::Thickness_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetupMarquee
// 0x0024 (0x0024 - 0x0000)
struct ProgressBarCircular_C_SetupMarquee final
{
public:
	bool                                          UseMarquee;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MarqueeColor_0;                                    // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MarqueeBackgroundColor;                            // 0x0014(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetupMarquee) == 0x000004, "Wrong alignment on ProgressBarCircular_C_SetupMarquee");
static_assert(sizeof(ProgressBarCircular_C_SetupMarquee) == 0x000024, "Wrong size on ProgressBarCircular_C_SetupMarquee");
static_assert(offsetof(ProgressBarCircular_C_SetupMarquee, UseMarquee) == 0x000000, "Member 'ProgressBarCircular_C_SetupMarquee::UseMarquee' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetupMarquee, MarqueeColor_0) == 0x000004, "Member 'ProgressBarCircular_C_SetupMarquee::MarqueeColor_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetupMarquee, MarqueeBackgroundColor) == 0x000014, "Member 'ProgressBarCircular_C_SetupMarquee::MarqueeBackgroundColor' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.SetUseGradient
// 0x0018 (0x0018 - 0x0000)
struct ProgressBarCircular_C_SetUseGradient final
{
public:
	bool                                          UseGradient_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GradientOpacity_0;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradientTypes                                GradientType_0;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_SetUseGradient) == 0x000008, "Wrong alignment on ProgressBarCircular_C_SetUseGradient");
static_assert(sizeof(ProgressBarCircular_C_SetUseGradient) == 0x000018, "Wrong size on ProgressBarCircular_C_SetUseGradient");
static_assert(offsetof(ProgressBarCircular_C_SetUseGradient, UseGradient_0) == 0x000000, "Member 'ProgressBarCircular_C_SetUseGradient::UseGradient_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetUseGradient, GradientOpacity_0) == 0x000008, "Member 'ProgressBarCircular_C_SetUseGradient::GradientOpacity_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_SetUseGradient, GradientType_0) == 0x000010, "Member 'ProgressBarCircular_C_SetUseGradient::GradientType_0' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.StartTriggerProgressChangeColor
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_StartTriggerProgressChangeColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_StartTriggerProgressChangeColor) == 0x000004, "Wrong alignment on ProgressBarCircular_C_StartTriggerProgressChangeColor");
static_assert(sizeof(ProgressBarCircular_C_StartTriggerProgressChangeColor) == 0x000010, "Wrong size on ProgressBarCircular_C_StartTriggerProgressChangeColor");
static_assert(offsetof(ProgressBarCircular_C_StartTriggerProgressChangeColor, Color) == 0x000000, "Member 'ProgressBarCircular_C_StartTriggerProgressChangeColor::Color' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Tick
// 0x003C (0x003C - 0x0000)
struct ProgressBarCircular_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Tick) == 0x000004, "Wrong alignment on ProgressBarCircular_C_Tick");
static_assert(sizeof(ProgressBarCircular_C_Tick) == 0x00003C, "Wrong size on ProgressBarCircular_C_Tick");
static_assert(offsetof(ProgressBarCircular_C_Tick, MyGeometry) == 0x000000, "Member 'ProgressBarCircular_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Tick, InDeltaTime) == 0x000038, "Member 'ProgressBarCircular_C_Tick::InDeltaTime' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_CurrentPercent
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_Transfer_CurrentPercent final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Transfer_CurrentPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_Transfer_CurrentPercent");
static_assert(sizeof(ProgressBarCircular_C_Transfer_CurrentPercent) == 0x000010, "Wrong size on ProgressBarCircular_C_Transfer_CurrentPercent");
static_assert(offsetof(ProgressBarCircular_C_Transfer_CurrentPercent, Percent) == 0x000000, "Member 'ProgressBarCircular_C_Transfer_CurrentPercent::Percent' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Transfer_CurrentPercent, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ProgressBarCircular_C_Transfer_CurrentPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_TargetPercent
// 0x0010 (0x0010 - 0x0000)
struct ProgressBarCircular_C_Transfer_TargetPercent final
{
public:
	double                                        TargetPercent_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Transfer_TargetPercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_Transfer_TargetPercent");
static_assert(sizeof(ProgressBarCircular_C_Transfer_TargetPercent) == 0x000010, "Wrong size on ProgressBarCircular_C_Transfer_TargetPercent");
static_assert(offsetof(ProgressBarCircular_C_Transfer_TargetPercent, TargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_Transfer_TargetPercent::TargetPercent_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Transfer_TargetPercent, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ProgressBarCircular_C_Transfer_TargetPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.Transfer_UseTargetPercent
// 0x0002 (0x0002 - 0x0000)
struct ProgressBarCircular_C_Transfer_UseTargetPercent final
{
public:
	bool                                          UseTargetPercent_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_Transfer_UseTargetPercent) == 0x000001, "Wrong alignment on ProgressBarCircular_C_Transfer_UseTargetPercent");
static_assert(sizeof(ProgressBarCircular_C_Transfer_UseTargetPercent) == 0x000002, "Wrong size on ProgressBarCircular_C_Transfer_UseTargetPercent");
static_assert(offsetof(ProgressBarCircular_C_Transfer_UseTargetPercent, UseTargetPercent_0) == 0x000000, "Member 'ProgressBarCircular_C_Transfer_UseTargetPercent::UseTargetPercent_0' has a wrong offset!");
static_assert(offsetof(ProgressBarCircular_C_Transfer_UseTargetPercent, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ProgressBarCircular_C_Transfer_UseTargetPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.UpdatePercent
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarCircular_C_UpdatePercent final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_UpdatePercent) == 0x000008, "Wrong alignment on ProgressBarCircular_C_UpdatePercent");
static_assert(sizeof(ProgressBarCircular_C_UpdatePercent) == 0x000008, "Wrong size on ProgressBarCircular_C_UpdatePercent");
static_assert(offsetof(ProgressBarCircular_C_UpdatePercent, Percent) == 0x000000, "Member 'ProgressBarCircular_C_UpdatePercent::Percent' has a wrong offset!");

// Function ProgressBarCircular.ProgressBarCircular_C.UseAbsoluteFillMethod
// 0x0001 (0x0001 - 0x0000)
struct ProgressBarCircular_C_UseAbsoluteFillMethod final
{
public:
	bool                                          AbsoluteFillMethod;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressBarCircular_C_UseAbsoluteFillMethod) == 0x000001, "Wrong alignment on ProgressBarCircular_C_UseAbsoluteFillMethod");
static_assert(sizeof(ProgressBarCircular_C_UseAbsoluteFillMethod) == 0x000001, "Wrong size on ProgressBarCircular_C_UseAbsoluteFillMethod");
static_assert(offsetof(ProgressBarCircular_C_UseAbsoluteFillMethod, AbsoluteFillMethod) == 0x000000, "Member 'ProgressBarCircular_C_UseAbsoluteFillMethod::AbsoluteFillMethod' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmbientSoundController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AmbientSoundController.BP_AmbientSoundController_C
// 0x00A0 (0x0340 - 0x02A0)
class ABP_AmbientSoundController_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUDS_PlayerOcclusion_C*                 UDS_PlayerOcclusion;                               // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Tick_Rate;                                         // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Day;                                               // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DaySound;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Raining;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snowing;                                           // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   UDS;                                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             NightSound;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Foggy;                                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Target_Volume_Multiplier;                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Daytime_Volume_Multiplier;                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Nighttime_Volume_Multiplier;                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dusty;                                             // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_UDS_or_UDW;                                     // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        No_Weather_Volume_Multiplier;                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rainy_Volume_Multiplier;                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snowy_Volume_Multiplier;                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusty_Volume_Multiplier;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Volume_Multiplier;                           // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Update_Volume_Multiplier();
	void UDW_Starting_Up(class AUltra_Dynamic_Weather_C* UDW_0);
	void UDW_Ending_Play();
	void UDW_End_Play(class AActor* Actor, EEndPlayReason EndPlayReason);
	void UDS_Starting_Up(class AUltra_Dynamic_Sky_C* UDS_0);
	void UDS_Ending_Play();
	void UDS_End_Play(class AActor* Actor, EEndPlayReason EndPlayReason);
	void Sunset();
	void Sunrise();
	void State_Change_Fog();
	void Started_Snowing();
	void Started_Raining();
	void Started_Dust();
	void Start_Up_Sound();
	void ReceiveBeginPlay();
	void Get_UDS_and_UDW_Reference();
	void Get_Starting_Dispatchers_State();
	void Finished_Snowing();
	void Finished_Raining();
	void Finished_Dust();
	void ExecuteUbergraph_BP_AmbientSoundController(int32 EntryPoint);
	void Check_if_UDS_and_UDW_Are_Both_Gone();
	void Bind_to_Dispatchers();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AmbientSoundController_C">();
	}
	static class ABP_AmbientSoundController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AmbientSoundController_C>();
	}
};
static_assert(alignof(ABP_AmbientSoundController_C) == 0x000008, "Wrong alignment on ABP_AmbientSoundController_C");
static_assert(sizeof(ABP_AmbientSoundController_C) == 0x000340, "Wrong size on ABP_AmbientSoundController_C");
static_assert(offsetof(ABP_AmbientSoundController_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_AmbientSoundController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, UDS_PlayerOcclusion) == 0x0002A8, "Member 'ABP_AmbientSoundController_C::UDS_PlayerOcclusion' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Audio) == 0x0002B0, "Member 'ABP_AmbientSoundController_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Tick_Rate) == 0x0002B8, "Member 'ABP_AmbientSoundController_C::Tick_Rate' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Day) == 0x0002BC, "Member 'ABP_AmbientSoundController_C::Day' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, DaySound) == 0x0002C0, "Member 'ABP_AmbientSoundController_C::DaySound' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Raining) == 0x0002C8, "Member 'ABP_AmbientSoundController_C::Raining' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Snowing) == 0x0002C9, "Member 'ABP_AmbientSoundController_C::Snowing' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, UDW) == 0x0002D0, "Member 'ABP_AmbientSoundController_C::UDW' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, UDS) == 0x0002D8, "Member 'ABP_AmbientSoundController_C::UDS' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Runtime) == 0x0002E0, "Member 'ABP_AmbientSoundController_C::Runtime' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, NightSound) == 0x0002E8, "Member 'ABP_AmbientSoundController_C::NightSound' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Foggy) == 0x0002F0, "Member 'ABP_AmbientSoundController_C::Foggy' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Target_Volume_Multiplier) == 0x0002F8, "Member 'ABP_AmbientSoundController_C::Target_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Daytime_Volume_Multiplier) == 0x000300, "Member 'ABP_AmbientSoundController_C::Daytime_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Nighttime_Volume_Multiplier) == 0x000308, "Member 'ABP_AmbientSoundController_C::Nighttime_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Dusty) == 0x000310, "Member 'ABP_AmbientSoundController_C::Dusty' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, No_UDS_or_UDW) == 0x000311, "Member 'ABP_AmbientSoundController_C::No_UDS_or_UDW' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, No_Weather_Volume_Multiplier) == 0x000318, "Member 'ABP_AmbientSoundController_C::No_Weather_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Rainy_Volume_Multiplier) == 0x000320, "Member 'ABP_AmbientSoundController_C::Rainy_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Snowy_Volume_Multiplier) == 0x000328, "Member 'ABP_AmbientSoundController_C::Snowy_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Dusty_Volume_Multiplier) == 0x000330, "Member 'ABP_AmbientSoundController_C::Dusty_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_AmbientSoundController_C, Foggy_Volume_Multiplier) == 0x000338, "Member 'ABP_AmbientSoundController_C::Foggy_Volume_Multiplier' has a wrong offset!");

}


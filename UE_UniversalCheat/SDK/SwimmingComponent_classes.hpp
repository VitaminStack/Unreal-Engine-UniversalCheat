#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwimmingComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SwimmingComponent.SwimmingComponent_C
// 0x0048 (0x0100 - 0x00B8)
class USwimmingComponent_C final : public UBaseComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SwimmingComponent_C;                // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CurrentOxygen;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxOxygen;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwimming_;                                       // 0x00D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          InWater_;                                          // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fast_;                                             // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Deepness;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UnderWater_;                                       // 0x00E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerCharacter_C*                  PlayerRef;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              PassiveSkillsComponent;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ComponentLoaded();
	void ComponentPreSave();
	void DealDamage();
	void ExecuteUbergraph_SwimmingComponent(int32 EntryPoint);
	void LoadComponent();
	void OnRep_IsSwimming_();
	void OnRep_UnderWater_();
	void OxygenTimer();
	void WaterDetection();
	void WaterTrace(double* Deepness_0, struct FVector* ImpactPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SwimmingComponent_C">();
	}
	static class USwimmingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USwimmingComponent_C>();
	}
};
static_assert(alignof(USwimmingComponent_C) == 0x000008, "Wrong alignment on USwimmingComponent_C");
static_assert(sizeof(USwimmingComponent_C) == 0x000100, "Wrong size on USwimmingComponent_C");
static_assert(offsetof(USwimmingComponent_C, UberGraphFrame_SwimmingComponent_C) == 0x0000B8, "Member 'USwimmingComponent_C::UberGraphFrame_SwimmingComponent_C' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, CurrentOxygen) == 0x0000C0, "Member 'USwimmingComponent_C::CurrentOxygen' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, MaxOxygen) == 0x0000C8, "Member 'USwimmingComponent_C::MaxOxygen' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, IsSwimming_) == 0x0000D0, "Member 'USwimmingComponent_C::IsSwimming_' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, InWater_) == 0x0000D1, "Member 'USwimmingComponent_C::InWater_' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, Fast_) == 0x0000D2, "Member 'USwimmingComponent_C::Fast_' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, Deepness) == 0x0000D8, "Member 'USwimmingComponent_C::Deepness' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, UnderWater_) == 0x0000E0, "Member 'USwimmingComponent_C::UnderWater_' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, PlayerRef) == 0x0000E8, "Member 'USwimmingComponent_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, Audio) == 0x0000F0, "Member 'USwimmingComponent_C::Audio' has a wrong offset!");
static_assert(offsetof(USwimmingComponent_C, PassiveSkillsComponent) == 0x0000F8, "Member 'USwimmingComponent_C::PassiveSkillsComponent' has a wrong offset!");

}


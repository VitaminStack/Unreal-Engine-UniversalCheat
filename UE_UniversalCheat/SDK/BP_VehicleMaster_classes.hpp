#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_ReplicatedContainerInfo_structs.hpp"
#include "S_InvWeight_structs.hpp"
#include "ChaosVehicles_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleMaster.BP_VehicleMaster_C
// 0x0190 (0x04C0 - 0x0330)
class ABP_VehicleMaster_C : public AWheeledVehiclePawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExitPoint_DriverSide;                              // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExitPoint_PassengerSide;                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMediaSoundComponent*                   MediaSound;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadioComponent_C*                      RadioComponent;                                    // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FireEffect;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeEffect;                                       // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSound;                                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVehicleHealthComponent_C*              VehicleHealthComponent;                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       RepairWidget;                                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RepairBoxCollision;                                // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       FuelWidget;                                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FuelBoxCollision;                                  // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitBoxCollision;                                   // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightLeft;                                         // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightRight;                                        // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVehicleFuelComponent_C*                FuelComponent;                                     // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlayerLocation;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Outline_;                                          // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleUI_C*                           VehicleUI;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LightsOn_;                                         // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueVehicle_;                                    // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USpotLightComponent*>            Lights;                                            // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Flipped;                                           // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRefuellingArea_;                                 // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRepairingArea_;                                  // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InStorageArea_;                                    // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeld;                                            // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Duration;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NoiseTimer;                                        // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          GetOutPasseenger;                                  // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit_;                                            // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_ReplicatedContainerInfo>     MainJigContainers;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, SaveGame, ContainsInstancedReference)
	TArray<struct FGuid>                          MainContainersIDs;                                 // 0x0468(0x0010)(Edit, BlueprintVisible, SaveGame)
	TArray<struct FS_InvWeight>                   InventoryWeight;                                   // 0x0478(0x0010)(Edit, BlueprintVisible, SaveGame)
	bool                                          EngineOn_;                                         // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Colors;                                            // 0x0490(0x0010)(Edit, BlueprintVisible)
	int32                                         VehicleColor;                                      // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomColorSelected_;                              // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InteractingActor)> SpecialInteractionOption;                          // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UnderWater;                                        // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPush_;                                          // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAir;                                             // 0x04BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActorLoaded();
	void ActorPreLoad();
	void ActorPreSave();
	void ActorSaved();
	void ApplyDamageToAIBasedOnSpeed(class AActor* DamagedActor);
	void ApplyDamageToVehicleBasedOnSpeed();
	void BndEvt__BP_MasterVehicle_FuelBoxCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_MasterVehicle_FuelBoxCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_MasterVehicle_HitBoxCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_MasterVehicle_RepairBoxCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_MasterVehicle_RepairBoxCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void BndEvt__BP_VehicleMaster_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void CheckCanExitCarDriverSide(bool* Can_Exiting_Car_);
	void CheckCanExitCarPassengerSide(bool* Can_Exiting_Car_);
	void CheckDistanceFromActor();
	void CheckWater();
	void ComponentsToSave(TArray<class UActorComponent*>* Components);
	void Event_ExitVehicle();
	void Event_FlipVehicle();
	void Event_HoldTimer();
	void Event_Landed();
	void Event_Noise();
	void Event_StopTimer();
	void Event_UpdateTimer();
	void ExecuteUbergraph_BP_VehicleMaster(int32 EntryPoint);
	void ExitVehicle(bool* CanExit_);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetMainSceneComp(class USceneComponent** Comp);
	void Horn();
	void IsInAir_();
	void JigCanInteract(bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void OnBeginFuelInteract(class AActor* Actor);
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void OnBeginRepairInteract(class AActor* Actor);
	void OnBeginStorageInteract(class AActor* Actor);
	void OnEndFuelInteract(class AActor* Actor);
	void OnEndInteract();
	void OnEndRepairInteract(class AActor* Actor);
	void OnEndStorageInteract(class AActor* Actor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteractEnded();
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void PickupBuildFromGround();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void SetInteractDistance(class AActor* Target);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetSaveProperties();
	void Svr_UpdateEngine(double Fuel);
	void Svr_UpdateFuel(double Fuel);
	void TurnOnOffLights();
	void UpdateStorageStat();
	void UseGasCan();
	void VehicleFire(bool Visible);
	void VehicleHealth();
	void VehicleHitAudio();
	void VehicleSmoke(bool Visible);
	void VehicleSound();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleMaster_C">();
	}
	static class ABP_VehicleMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleMaster_C>();
	}
};
static_assert(alignof(ABP_VehicleMaster_C) == 0x000008, "Wrong alignment on ABP_VehicleMaster_C");
static_assert(sizeof(ABP_VehicleMaster_C) == 0x0004C0, "Wrong size on ABP_VehicleMaster_C");
static_assert(offsetof(ABP_VehicleMaster_C, UberGraphFrame) == 0x000330, "Member 'ABP_VehicleMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, SkeletalMesh) == 0x000338, "Member 'ABP_VehicleMaster_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, ExitPoint_DriverSide) == 0x000340, "Member 'ABP_VehicleMaster_C::ExitPoint_DriverSide' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, ExitPoint_PassengerSide) == 0x000348, "Member 'ABP_VehicleMaster_C::ExitPoint_PassengerSide' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, MediaSound) == 0x000350, "Member 'ABP_VehicleMaster_C::MediaSound' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, RadioComponent) == 0x000358, "Member 'ABP_VehicleMaster_C::RadioComponent' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, FireEffect) == 0x000360, "Member 'ABP_VehicleMaster_C::FireEffect' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, SmokeEffect) == 0x000368, "Member 'ABP_VehicleMaster_C::SmokeEffect' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Scene) == 0x000370, "Member 'ABP_VehicleMaster_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, BP_JigMultiplayer) == 0x000378, "Member 'ABP_VehicleMaster_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, AIOSubject) == 0x000380, "Member 'ABP_VehicleMaster_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, EngineSound) == 0x000388, "Member 'ABP_VehicleMaster_C::EngineSound' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, VehicleHealthComponent) == 0x000390, "Member 'ABP_VehicleMaster_C::VehicleHealthComponent' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, RepairWidget) == 0x000398, "Member 'ABP_VehicleMaster_C::RepairWidget' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, RepairBoxCollision) == 0x0003A0, "Member 'ABP_VehicleMaster_C::RepairBoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, FuelWidget) == 0x0003A8, "Member 'ABP_VehicleMaster_C::FuelWidget' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, FuelBoxCollision) == 0x0003B0, "Member 'ABP_VehicleMaster_C::FuelBoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, HitBoxCollision) == 0x0003B8, "Member 'ABP_VehicleMaster_C::HitBoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, LightLeft) == 0x0003C0, "Member 'ABP_VehicleMaster_C::LightLeft' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, LightRight) == 0x0003C8, "Member 'ABP_VehicleMaster_C::LightRight' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, FuelComponent) == 0x0003D0, "Member 'ABP_VehicleMaster_C::FuelComponent' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, PlayerLocation) == 0x0003D8, "Member 'ABP_VehicleMaster_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Outline_) == 0x0003E0, "Member 'ABP_VehicleMaster_C::Outline_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, VehicleUI) == 0x0003E8, "Member 'ABP_VehicleMaster_C::VehicleUI' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Name_0) == 0x0003F0, "Member 'ABP_VehicleMaster_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, LightsOn_) == 0x000400, "Member 'ABP_VehicleMaster_C::LightsOn_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, UniqueVehicle_) == 0x000401, "Member 'ABP_VehicleMaster_C::UniqueVehicle_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Lights) == 0x000408, "Member 'ABP_VehicleMaster_C::Lights' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Flipped) == 0x000418, "Member 'ABP_VehicleMaster_C::Flipped' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, InRefuellingArea_) == 0x000419, "Member 'ABP_VehicleMaster_C::InRefuellingArea_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, InRepairingArea_) == 0x00041A, "Member 'ABP_VehicleMaster_C::InRepairingArea_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, InStorageArea_) == 0x00041B, "Member 'ABP_VehicleMaster_C::InStorageArea_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, IsHeld) == 0x00041C, "Member 'ABP_VehicleMaster_C::IsHeld' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Duration) == 0x000420, "Member 'ABP_VehicleMaster_C::Duration' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, NoiseTimer) == 0x000428, "Member 'ABP_VehicleMaster_C::NoiseTimer' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, InteractingActorLoc) == 0x000430, "Member 'ABP_VehicleMaster_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, CurrentActor) == 0x000448, "Member 'ABP_VehicleMaster_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, GetOutPasseenger) == 0x000450, "Member 'ABP_VehicleMaster_C::GetOutPasseenger' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, IsHit_) == 0x000451, "Member 'ABP_VehicleMaster_C::IsHit_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, MainJigContainers) == 0x000458, "Member 'ABP_VehicleMaster_C::MainJigContainers' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, MainContainersIDs) == 0x000468, "Member 'ABP_VehicleMaster_C::MainContainersIDs' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, InventoryWeight) == 0x000478, "Member 'ABP_VehicleMaster_C::InventoryWeight' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, EngineOn_) == 0x000488, "Member 'ABP_VehicleMaster_C::EngineOn_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, Colors) == 0x000490, "Member 'ABP_VehicleMaster_C::Colors' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, VehicleColor) == 0x0004A0, "Member 'ABP_VehicleMaster_C::VehicleColor' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, RandomColorSelected_) == 0x0004A4, "Member 'ABP_VehicleMaster_C::RandomColorSelected_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, SpecialInteractionOption) == 0x0004A8, "Member 'ABP_VehicleMaster_C::SpecialInteractionOption' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, UnderWater) == 0x0004B8, "Member 'ABP_VehicleMaster_C::UnderWater' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, CanPush_) == 0x0004B9, "Member 'ABP_VehicleMaster_C::CanPush_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleMaster_C, IsAir) == 0x0004BA, "Member 'ABP_VehicleMaster_C::IsAir' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalBear

#include "Basic.hpp"

#include "BP_AnimalBear_classes.hpp"
#include "BP_AnimalBear_parameters.hpp"


namespace SDK
{

// Function BP_AnimalBear.BP_AnimalBear_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.StopBurning
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::StopBurning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "StopBurning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.SetPickupCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::SetPickupCount(int32 NewCount, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "SetPickupCount");

	Params::BP_AnimalBear_C_SetPickupCount Parms{};

	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.SetMeshesAndMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::SetMeshesAndMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "SetMeshesAndMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.SetInteractOption
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::SetInteractOption(const struct FGameplayTag& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "SetInteractOption");

	Params::BP_AnimalBear_C_SetInteractOption Parms{};

	Parms.Option = std::move(Option);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.SetInteractDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::SetInteractDistance(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "SetInteractDistance");

	Params::BP_AnimalBear_C_SetInteractDistance Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.SetBurning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dmg                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::SetBurning(bool Burning_, double Dmg, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "SetBurning");

	Params::BP_AnimalBear_C_SetBurning Parms{};

	Parms.Burning_ = Burning_;
	Parms.Dmg = Dmg;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AnimalBear_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "ReceiveAnyDamage");

	Params::BP_AnimalBear_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.PickupBuildFromGround
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::PickupBuildFromGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "PickupBuildFromGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OverrideName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::OverrideName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OverrideName");

	Params::BP_AnimalBear_C_OverrideName Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnStopExecuteInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::OnStopExecuteInteract(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnStopExecuteInteract");

	Params::BP_AnimalBear_C_OnStopExecuteInteract Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnServerExecuteInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ByActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_JigPayload                    Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_AnimalBear_C::OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnServerExecuteInteract");

	Params::BP_AnimalBear_C_OnServerExecuteInteract Parms{};

	Parms.Option = std::move(Option);
	Parms.ByActor = ByActor;
	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnRequestServerInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FS_JigPayload                    Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnRequestServerInteract");

	Params::BP_AnimalBear_C_OnRequestServerInteract Parms{};

	Parms.Actor = Actor;
	Parms.Option = std::move(Option);
	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnExecuteInteractEnded
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::OnExecuteInteractEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnExecuteInteractEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnExecuteInteractDialogue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::OnExecuteInteractDialogue(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnExecuteInteractDialogue");

	Params::BP_AnimalBear_C_OnExecuteInteractDialogue Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnExecuteInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnExecuteInteract");

	Params::BP_AnimalBear_C_OnExecuteInteract Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.Option = std::move(Option);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnEndInteract
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::OnEndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnEndInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.OnBeginInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TMap<struct FGameplayTag, class FText>  Options                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_AnimalBear_C::OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "OnBeginInteract");

	Params::BP_AnimalBear_C_OnBeginInteract Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigSetCanInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanInteract                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnablePhysics                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigSetCanInteract");

	Params::BP_AnimalBear_C_JigSetCanInteract Parms{};

	Parms.CanInteract = CanInteract;
	Parms.EnablePhysics = EnablePhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnUpdateChamberUID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            NewUID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnUpdateChamberUID");

	Params::BP_AnimalBear_C_JigMP_OnUpdateChamberUID Parms{};

	Parms.NewUID = std::move(NewUID);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnTwoContainersSwap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FromContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ToContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnTwoContainersSwap");

	Params::BP_AnimalBear_C_JigMP_OnTwoContainersSwap Parms{};

	Parms.FromContainer = FromContainer;
	Parms.ToContainer = ToContainer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnRequestDropItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRepItemInfo                     ItemInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             ContainerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorRef                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnRequestDropItem");

	Params::BP_AnimalBear_C_JigMP_OnRequestDropItem Parms{};

	Parms.ItemInfo = std::move(ItemInfo);
	Parms.ContainerName = ContainerName;

	UObject::ProcessEvent(Func, &Parms);

	if (ActorRef != nullptr)
		*ActorRef = Parms.ActorRef;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnPickupEquipped
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             ToContainerName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OverrideActor                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnPickupEquipped");

	Params::BP_AnimalBear_C_JigMP_OnPickupEquipped Parms{};

	Parms.ActorRef = ActorRef;
	Parms.ToContainerName = ToContainerName;
	Parms.UID = std::move(UID);
	Parms.ToContainerUID = std::move(ToContainerUID);
	Parms.Info = std::move(Info);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (OverrideActor != nullptr)
		*OverrideActor = Parms.OverrideActor;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnPickupAdded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRepItemInfo                     Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ToContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnPickupAdded");

	Params::BP_AnimalBear_C_JigMP_OnPickupAdded Parms{};

	Parms.Info = std::move(Info);
	Parms.ItemUID = std::move(ItemUID);
	Parms.ToContainerUID = std::move(ToContainerUID);
	Parms.ToContainer = ToContainer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnMainContainerItemRemoved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ContainerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     ItemRemovedInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnMainContainerItemRemoved");

	Params::BP_AnimalBear_C_JigMP_OnMainContainerItemRemoved Parms{};

	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ItemUID = std::move(ItemUID);
	Parms.ContainerName = ContainerName;
	Parms.ItemRemovedInfo = std::move(ItemRemovedInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnMainContainerItemAdded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ToContainerName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     ItemInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             FromMain                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorRef                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnMainContainerItemAdded");

	Params::BP_AnimalBear_C_JigMP_OnMainContainerItemAdded Parms{};

	Parms.ToContainerUID = std::move(ToContainerUID);
	Parms.ItemUID = std::move(ItemUID);
	Parms.ToContainerName = ToContainerName;
	Parms.ItemInfo = std::move(ItemInfo);
	Parms.FromMain = FromMain;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ActorRef != nullptr)
		*ActorRef = Parms.ActorRef;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnItemRemoved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  ToComponent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnItemRemoved");

	Params::BP_AnimalBear_C_JigMP_OnItemRemoved Parms{};

	Parms.ItemUID = std::move(ItemUID);
	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ToContainerUID = std::move(ToContainerUID);
	Parms.ToComponent = ToComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnItemMoved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnItemMoved");

	Params::BP_AnimalBear_C_JigMP_OnItemMoved Parms{};

	Parms.ItemUID = std::move(ItemUID);
	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ToContainerUID = std::move(ToContainerUID);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnItemDropped
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnItemDropped");

	Params::BP_AnimalBear_C_JigMP_OnItemDropped Parms{};

	Parms.ItemUID = std::move(ItemUID);
	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ActorRef = ActorRef;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnItemConsumed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRepItemInfo                     ConsumedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Remaining                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     InsideOf                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             FromContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CustomData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallbackToPlayer_                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnItemConsumed");

	Params::BP_AnimalBear_C_JigMP_OnItemConsumed Parms{};

	Parms.ConsumedItem = std::move(ConsumedItem);
	Parms.Amount = Amount;
	Parms.Remaining = Remaining;
	Parms.InsideOf = std::move(InsideOf);
	Parms.FromContainer = FromContainer;
	Parms.CustomData = std::move(CustomData);
	Parms.CallbackToPlayer_ = CallbackToPlayer_;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnItemAdded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  FromComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnItemAdded");

	Params::BP_AnimalBear_C_JigMP_OnItemAdded Parms{};

	Parms.ItemUID = std::move(ItemUID);
	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ToContainerUID = std::move(ToContainerUID);
	Parms.FromComponent = FromComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_OnContainersSwap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  Container1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  Container2                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_OnContainersSwap");

	Params::BP_AnimalBear_C_JigMP_OnContainersSwap Parms{};

	Parms.Container1 = Container1;
	Parms.Container2 = Container2;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigMP_GetLootWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Result                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigMP_GetLootWidget(class UWidget** Result, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigMP_GetLootWidget");

	Params::BP_AnimalBear_C_JigMP_GetLootWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}


// Function BP_AnimalBear.BP_AnimalBear_C.JigCanInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::JigCanInteract(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "JigCanInteract");

	Params::BP_AnimalBear_C_JigCanInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AnimalBear.BP_AnimalBear_C.IsAIBurning?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBurning_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::IsAIBurning_(bool* IsBurning_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "IsAIBurning?");

	Params::BP_AnimalBear_C_IsAIBurning_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBurning_ != nullptr)
		*IsBurning_ = Parms.IsBurning_;
}


// Function BP_AnimalBear.BP_AnimalBear_C.HitByVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::HitByVehicle(double Speed, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "HitByVehicle");

	Params::BP_AnimalBear_C_HitByVehicle Parms{};

	Parms.Speed = Speed;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetMovementSpeeds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RoamingSpeed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AlertSpeed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AttackSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetMovementSpeeds");

	Params::BP_AnimalBear_C_GetMovementSpeeds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RoamingSpeed != nullptr)
		*RoamingSpeed = Parms.RoamingSpeed;

	if (AlertSpeed != nullptr)
		*AlertSpeed = Parms.AlertSpeed;

	if (AttackSpeed != nullptr)
		*AttackSpeed = Parms.AttackSpeed;
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh_0                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::GetMesh(class USkeletalMeshComponent** Mesh_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetMesh");

	Params::BP_AnimalBear_C_GetMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh_0 != nullptr)
		*Mesh_0 = Parms.Mesh_0;
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MarkerOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetMarker");

	Params::BP_AnimalBear_C_GetMarker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);

	if (MarkerOffset != nullptr)
		*MarkerOffset = Parms.MarkerOffset;
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetMainSceneComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::GetMainSceneComp(class USceneComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetMainSceneComp");

	Params::BP_AnimalBear_C_GetMainSceneComp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetJigMultiplayerComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  JigComp                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::GetJigMultiplayerComponent(class UActorComponent** JigComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetJigMultiplayerComponent");

	Params::BP_AnimalBear_C_GetJigMultiplayerComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JigComp != nullptr)
		*JigComp = Parms.JigComp;
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetItemInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJigsawItem_DataAsset_C*          Info                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_RandomStatsConfig             RandomStatsConfig                                      (Parm, OutParm, HasGetValueTypeHash)
// TMap<class FString, class FString>      CustomData                                             (Parm, OutParm)

void ABP_AnimalBear_C::GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetItemInfo");

	Params::BP_AnimalBear_C_GetItemInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = Parms.Info;

	if (Count != nullptr)
		*Count = Parms.Count;

	if (RandomStatsConfig != nullptr)
		*RandomStatsConfig = std::move(Parms.RandomStatsConfig);

	if (CustomData != nullptr)
		*CustomData = std::move(Parms.CustomData);
}


// Function BP_AnimalBear.BP_AnimalBear_C.GetInteractOptions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<struct FGameplayTag, class FText>  Options                                                (Parm, OutParm)

void ABP_AnimalBear_C::GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "GetInteractOptions");

	Params::BP_AnimalBear_C_GetInteractOptions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Options != nullptr)
		*Options = std::move(Parms.Options);
}


// Function BP_AnimalBear.BP_AnimalBear_C.ExecuteUbergraph_BP_AnimalBear
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::ExecuteUbergraph_BP_AnimalBear(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "ExecuteUbergraph_BP_AnimalBear");

	Params::BP_AnimalBear_C_ExecuteUbergraph_BP_AnimalBear Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Event_XP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::Event_XP(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Event_XP");

	Params::BP_AnimalBear_C_Event_XP Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Event_Marker
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::Event_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Event_Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Event_Fire
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::Event_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Event_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Despawn
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::Despawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Despawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Death
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.CheckDistanceFromActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::CheckDistanceFromActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "CheckDistanceFromActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.Change Speed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::Change_Speed(double Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "Change Speed");

	Params::BP_AnimalBear_C_Change_Speed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.CanStompAI?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stomp_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::CanStompAI_(bool* Stomp_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "CanStompAI?");

	Params::BP_AnimalBear_C_CanStompAI_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stomp_ != nullptr)
		*Stomp_ = Parms.Stomp_;
}


// Function BP_AnimalBear.BP_AnimalBear_C.CanAddMarkerToAI?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanAdd_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::CanAddMarkerToAI_(bool* CanAdd_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "CanAddMarkerToAI?");

	Params::BP_AnimalBear_C_CanAddMarkerToAI_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanAdd_ != nullptr)
		*CanAdd_ = Parms.CanAdd_;
}


// Function BP_AnimalBear.BP_AnimalBear_C.BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_1_OnHit__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UPrimitiveComponent*              CollidingComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_1_OnHit__DelegateSignature(const struct FHitResult& HitResult, class UPrimitiveComponent* CollidingComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_1_OnHit__DelegateSignature");

	Params::BP_AnimalBear_C_BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_1_OnHit__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.CollidingComponent = CollidingComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_0_OnCollisionActivated__DelegateSignature
// (BlueprintEvent)
// Parameters:
// ECCCollisionPart                        CollisionPart                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_0_OnCollisionActivated__DelegateSignature(ECCCollisionPart CollisionPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_0_OnCollisionActivated__DelegateSignature");

	Params::BP_AnimalBear_C_BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_0_OnCollisionActivated__DelegateSignature Parms{};

	Parms.CollisionPart = CollisionPart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bIsBeyondLastLayer                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LayerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsSeen                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");

	Params::BP_AnimalBear_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature Parms{};

	Parms.bIsBeyondLastLayer = bIsBeyondLastLayer;
	Parms.LayerIndex = LayerIndex;
	Parms.bIsSeen = bIsSeen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBear.BP_AnimalBear_C.AttackPlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBear_C::AttackPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "AttackPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBear.BP_AnimalBear_C.AIHealthBarInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Boss_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::AIHealthBarInfo(bool* Visible_, class FString* Name_0, bool* Boss_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "AIHealthBarInfo");

	Params::BP_AnimalBear_C_AIHealthBarInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_ != nullptr)
		*Visible_ = Parms.Visible_;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Boss_ != nullptr)
		*Boss_ = Parms.Boss_;
}


// Function BP_AnimalBear.BP_AnimalBear_C.AddMarker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetComponent*                 Marker_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBear_C::AddMarker(class UWidgetComponent* Marker_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBear_C", "AddMarker");

	Params::BP_AnimalBear_C_AddMarker Parms{};

	Parms.Marker_0 = Marker_0;

	UObject::ProcessEvent(Func, &Parms);
}

}


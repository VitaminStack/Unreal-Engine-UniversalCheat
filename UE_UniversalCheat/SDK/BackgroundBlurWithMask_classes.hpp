#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackgroundBlurWithMask

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "BackgroundBlurWithMask_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class BackgroundBlurWithMask.BackgroundBlurWithMask
// 0x0148 (0x02E0 - 0x0198)
class UBackgroundBlurWithMask final : public UContentWidget
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x01B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAlphaToBlur;                                 // 0x01B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlurStrength;                                      // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaskMaterial;                                  // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MaskTexture;                                       // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaskMaterialSetting                   MaskMaterialSetting;                               // 0x01C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EMaskTextureChannel                           MaskTextureChannel;                                // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAutoRadiusCalculation;                    // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlurRadius;                                        // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            LowQualityFallbackBrush;                           // 0x01F0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 MaskMaterialRenderTarget;                          // 0x02D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RedrawMaskMaterial();
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);
	void SetBlurRadius(int32 InBlurRadius);
	void SetBlurStrength(float InStrength);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLowQualityFallbackBrush(const struct FSlateBrush& InBrush);
	void SetMaskMaterialSetting(const struct FMaskMaterialSetting& InMaskMaterialSetting);
	void SetMaskTexture(class UTexture2D* InMaskTexture);
	void SetMaskTextureChannel(EMaskTextureChannel InMaskTextureChannel);
	void SetPadding(const struct FMargin& InPadding);
	void SetUseMaskMaterial(bool bInUseMaskMaterial);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

	class UTexture* GetMaskTextureInUse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackgroundBlurWithMask">();
	}
	static class UBackgroundBlurWithMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlurWithMask>();
	}
};
static_assert(alignof(UBackgroundBlurWithMask) == 0x000010, "Wrong alignment on UBackgroundBlurWithMask");
static_assert(sizeof(UBackgroundBlurWithMask) == 0x0002E0, "Wrong size on UBackgroundBlurWithMask");
static_assert(offsetof(UBackgroundBlurWithMask, Padding) == 0x0001A0, "Member 'UBackgroundBlurWithMask::Padding' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, HorizontalAlignment) == 0x0001B0, "Member 'UBackgroundBlurWithMask::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, VerticalAlignment) == 0x0001B1, "Member 'UBackgroundBlurWithMask::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, bApplyAlphaToBlur) == 0x0001B2, "Member 'UBackgroundBlurWithMask::bApplyAlphaToBlur' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, BlurStrength) == 0x0001B4, "Member 'UBackgroundBlurWithMask::BlurStrength' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, bUseMaskMaterial) == 0x0001B8, "Member 'UBackgroundBlurWithMask::bUseMaskMaterial' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, MaskTexture) == 0x0001C0, "Member 'UBackgroundBlurWithMask::MaskTexture' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, MaskMaterialSetting) == 0x0001C8, "Member 'UBackgroundBlurWithMask::MaskMaterialSetting' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, MaskTextureChannel) == 0x0001E0, "Member 'UBackgroundBlurWithMask::MaskTextureChannel' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, bOverrideAutoRadiusCalculation) == 0x0001E1, "Member 'UBackgroundBlurWithMask::bOverrideAutoRadiusCalculation' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, BlurRadius) == 0x0001E4, "Member 'UBackgroundBlurWithMask::BlurRadius' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, LowQualityFallbackBrush) == 0x0001F0, "Member 'UBackgroundBlurWithMask::LowQualityFallbackBrush' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMask, MaskMaterialRenderTarget) == 0x0002D0, "Member 'UBackgroundBlurWithMask::MaskMaterialRenderTarget' has a wrong offset!");

// Class BackgroundBlurWithMask.BackgroundBlurWithMaskSlot
// 0x0028 (0x0060 - 0x0038)
class UBackgroundBlurWithMaskSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackgroundBlurWithMaskSlot">();
	}
	static class UBackgroundBlurWithMaskSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlurWithMaskSlot>();
	}
};
static_assert(alignof(UBackgroundBlurWithMaskSlot) == 0x000008, "Wrong alignment on UBackgroundBlurWithMaskSlot");
static_assert(sizeof(UBackgroundBlurWithMaskSlot) == 0x000060, "Wrong size on UBackgroundBlurWithMaskSlot");
static_assert(offsetof(UBackgroundBlurWithMaskSlot, Padding) == 0x000038, "Member 'UBackgroundBlurWithMaskSlot::Padding' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMaskSlot, HorizontalAlignment) == 0x000048, "Member 'UBackgroundBlurWithMaskSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurWithMaskSlot, VerticalAlignment) == 0x000049, "Member 'UBackgroundBlurWithMaskSlot::VerticalAlignment' has a wrong offset!");

}


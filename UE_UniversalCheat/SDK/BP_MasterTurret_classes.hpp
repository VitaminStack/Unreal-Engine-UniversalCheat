#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterTurret

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterTurret.BP_MasterTurret_C
// 0x0080 (0x0318 - 0x0298)
class ABP_MasterTurret_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        FOV_Arrow_Down;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FOV_Arrow_Up;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FOV_Arrow_Right;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FOV_Arrow_Left;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_Base;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Weapon_Muzzle;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TurretAIComponent_C*                BP_TurretAIComponent;                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Forward_Direction;                                 // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret;                                            // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        FOV_Down;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOV_Up;                                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOV_Right;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOV_Left;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Mode;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Actor_Aim_Focus(class AActor* Instigator_0);
	void Actor_Attack_Target(class AActor** Attack_Target);
	void AI_Alert(class AActor* Alert_Actor);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Camera_Activate(bool Activate);
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Dead();
	void AI_End_Alert();
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void Damage_Object(double Damage, class AActor* Damage_Causer, class AController* Event_Instigator);
	void Damage_Shoved(bool Anim, double Force);
	void ExecuteUbergraph_BP_MasterTurret(int32 EntryPoint);
	void IsObjectDamageable_(bool* Damageable_);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void Turret_Destroyed_Effect();
	void Turret_End_Reload();
	void Turret_Idle_Start();
	void Turret_Idle_Stop();
	void Turret_Start_Reload();
	void UserConstructionScript();

	void AI_Is_Dead_(bool* Dead) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterTurret_C">();
	}
	static class ABP_MasterTurret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterTurret_C>();
	}
};
static_assert(alignof(ABP_MasterTurret_C) == 0x000008, "Wrong alignment on ABP_MasterTurret_C");
static_assert(sizeof(ABP_MasterTurret_C) == 0x000318, "Wrong size on ABP_MasterTurret_C");
static_assert(offsetof(ABP_MasterTurret_C, UberGraphFrame) == 0x000298, "Member 'ABP_MasterTurret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Arrow_Down) == 0x0002A0, "Member 'ABP_MasterTurret_C::FOV_Arrow_Down' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Arrow_Up) == 0x0002A8, "Member 'ABP_MasterTurret_C::FOV_Arrow_Up' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Arrow_Right) == 0x0002B0, "Member 'ABP_MasterTurret_C::FOV_Arrow_Right' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Arrow_Left) == 0x0002B8, "Member 'ABP_MasterTurret_C::FOV_Arrow_Left' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Turret_Base) == 0x0002C0, "Member 'ABP_MasterTurret_C::Turret_Base' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Scene) == 0x0002C8, "Member 'ABP_MasterTurret_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Weapon_Muzzle) == 0x0002D0, "Member 'ABP_MasterTurret_C::Weapon_Muzzle' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, BP_TurretAIComponent) == 0x0002D8, "Member 'ABP_MasterTurret_C::BP_TurretAIComponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Forward_Direction) == 0x0002E0, "Member 'ABP_MasterTurret_C::Forward_Direction' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Turret) == 0x0002E8, "Member 'ABP_MasterTurret_C::Turret' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Down) == 0x0002F0, "Member 'ABP_MasterTurret_C::FOV_Down' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Up) == 0x0002F8, "Member 'ABP_MasterTurret_C::FOV_Up' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Right) == 0x000300, "Member 'ABP_MasterTurret_C::FOV_Right' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, FOV_Left) == 0x000308, "Member 'ABP_MasterTurret_C::FOV_Left' has a wrong offset!");
static_assert(offsetof(ABP_MasterTurret_C, Debug_Mode) == 0x000310, "Member 'ABP_MasterTurret_C::Debug_Mode' has a wrong offset!");

}


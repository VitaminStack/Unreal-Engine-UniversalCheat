#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JigHelperComp

#include "Basic.hpp"

#include "S_RepNonActorData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_EquipmentIDInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_ServerEquippedItems_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_RepActorData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JigHelperComp.BP_JigHelperComp_C
// 0x0BA0 (0x0C40 - 0x00A0)
class UBP_JigHelperComp_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<struct FGameplayTag, struct FGuid>       EquipmentUIDs;                                     // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_ServerEquippedItems                 ServerEquippedItems;                               // 0x00F8(0x09D8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FS_RepNonActorData>             RepPrimitiveActorsData;                            // 0x0AD0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FS_RepActorData>                RepActorsData;                                     // 0x0AE0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          TraceToActors_;                                    // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FS_EquipmentIDInfo> EquipmentIDSlotConfig;                             // 0x0AF8(0x0050)(Edit, BlueprintVisible)
	TMap<struct FGameplayTag, class ABP_CustomPrimitiveComp_C*> SpawnedCustomPrimitives;                           // 0x0B48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           ActiveWeapon;                                      // 0x0B98(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FGameplayTag& Slot)> OnActiveWeaponSlotChanged;                         // 0x0BA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 PreviewChar;                                       // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentTracActor;                                  // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        CurrentInteractOptions;                            // 0x0BC0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentInteractOptionIndex;                        // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InteractExecutedActor;                             // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class AController* Controller)> OnPossessed;                                       // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnEquipmentUpdated;                                // 0x0C30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void CycleOptions(bool Value);
	void Equip_Actor_to_Socket(class AActor* ActorRef, bool IsSecondary);
	void ExecuteUbergraph_BP_JigHelperComp(int32 EntryPoint);
	void ForceRepPrimitiveActorSpawns();
	void GetActiveWeapon(class AActor** Actor);
	void GetActiveWeaponSlot(struct FGameplayTag* ActiveWeapon_0);
	void GetAllEquippedActors(TArray<class AActor*>* OutArr);
	void GetCurrentTracActor(class AActor** Actor, bool* Valid);
	struct FVector GetDropLocation();
	void GetEquipConfigByName(class FName& Name_0, struct FS_EquipmentIDInfo* Result, struct FGameplayTag* Slot);
	void GetEquipmentUID(const struct FGameplayTag& Slot, struct FGuid* Value);
	void GetEquippedActorBySlot(const struct FGameplayTag& Slot, bool IncludePrimitive_, class AActor** Actor, int32* Array_Index);
	void GetEquippedInfoBySlot(const struct FGameplayTag& Slot, struct FRepItemInfo* Info, bool* Equipped);
	void GetMeshFromOwner(class USkeletalMeshComponent** Mesh);
	void GetPrimitiveBySlot(const struct FGameplayTag& Slot, class ABP_CustomPrimitiveComp_C** Value);
	void GetPrimitiveByUID(const struct FGuid& UID, class AActor** Actor);
	void GetTraceIgnore(TArray<class AActor*>* OutArr);
	void OnContainerSwap(class FName From, class FName To);
	void OnInventoryOpenClose_Event_0(bool Opened_);
	void OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void OnLoadDataRequested();
	void OnMainAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** Actor);
	void OnMainRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo);
	void OnPawnControllerChangedDelegates_Event_0(class APawn* Pawn, class AController* Controller);
	void OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, struct FGuid& UID, struct FGuid& ToContainerUID, struct FRepItemInfo& Info, class AActor** OverrideActor);
	void OnRep_ActiveWeapon();
	void OnRep_RepActorsData();
	void OnRep_RepPrimitiveActorsData();
	void PreviewAttachmentUpdated(class UObject* Item, bool* Result);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemovePrimitiveActorBySlot(const struct FGameplayTag& Slot);
	void RequestDropAsPickup(struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void SetActiveWeaponSlot(const struct FGameplayTag& NewSlot);
	void SetEquippedInfoBySlot(const struct FGameplayTag& Slot, const struct FRepItemInfo& Info, const struct FGuid& UID, bool SkipUID);
	void SetPreviewChar(class AActor* PreviewChar_0);
	class AActor* SpawnPrimitiveActor(struct FS_RepNonActorData& Data, const struct FGuid& UID);
	void StopInteraction();
	void TraceToWorld();
	void TryInteract(double TraceDistance);
	void TryPickup(class AActor* PickupRef, class UJSIContainer_C* TargetContainer, bool* Result);
	void UpdateChamberUID(const struct FGuid& UID, bool* Result);
	void UpdatePrevFromPrim();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JigHelperComp_C">();
	}
	static class UBP_JigHelperComp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_JigHelperComp_C>();
	}
};
static_assert(alignof(UBP_JigHelperComp_C) == 0x000008, "Wrong alignment on UBP_JigHelperComp_C");
static_assert(sizeof(UBP_JigHelperComp_C) == 0x000C40, "Wrong size on UBP_JigHelperComp_C");
static_assert(offsetof(UBP_JigHelperComp_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_JigHelperComp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, EquipmentUIDs) == 0x0000A8, "Member 'UBP_JigHelperComp_C::EquipmentUIDs' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, ServerEquippedItems) == 0x0000F8, "Member 'UBP_JigHelperComp_C::ServerEquippedItems' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, RepPrimitiveActorsData) == 0x000AD0, "Member 'UBP_JigHelperComp_C::RepPrimitiveActorsData' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, RepActorsData) == 0x000AE0, "Member 'UBP_JigHelperComp_C::RepActorsData' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, TraceToActors_) == 0x000AF0, "Member 'UBP_JigHelperComp_C::TraceToActors_' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, EquipmentIDSlotConfig) == 0x000AF8, "Member 'UBP_JigHelperComp_C::EquipmentIDSlotConfig' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, SpawnedCustomPrimitives) == 0x000B48, "Member 'UBP_JigHelperComp_C::SpawnedCustomPrimitives' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, ActiveWeapon) == 0x000B98, "Member 'UBP_JigHelperComp_C::ActiveWeapon' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, OnActiveWeaponSlotChanged) == 0x000BA0, "Member 'UBP_JigHelperComp_C::OnActiveWeaponSlotChanged' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, PreviewChar) == 0x000BB0, "Member 'UBP_JigHelperComp_C::PreviewChar' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, CurrentTracActor) == 0x000BB8, "Member 'UBP_JigHelperComp_C::CurrentTracActor' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, CurrentInteractOptions) == 0x000BC0, "Member 'UBP_JigHelperComp_C::CurrentInteractOptions' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, CurrentInteractOptionIndex) == 0x000C10, "Member 'UBP_JigHelperComp_C::CurrentInteractOptionIndex' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, InteractExecutedActor) == 0x000C18, "Member 'UBP_JigHelperComp_C::InteractExecutedActor' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, OnPossessed) == 0x000C20, "Member 'UBP_JigHelperComp_C::OnPossessed' has a wrong offset!");
static_assert(offsetof(UBP_JigHelperComp_C, OnEquipmentUpdated) == 0x000C30, "Member 'UBP_JigHelperComp_C::OnEquipmentUpdated' has a wrong offset!");

}


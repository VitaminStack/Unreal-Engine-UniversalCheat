#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIInterface

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK::Params
{

// Function BP_AIInterface.BP_AIInterface_C.Actor Aim Focus
// 0x0008 (0x0008 - 0x0000)
struct BP_AIInterface_C_Actor_Aim_Focus final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_Actor_Aim_Focus) == 0x000008, "Wrong alignment on BP_AIInterface_C_Actor_Aim_Focus");
static_assert(sizeof(BP_AIInterface_C_Actor_Aim_Focus) == 0x000008, "Wrong size on BP_AIInterface_C_Actor_Aim_Focus");
static_assert(offsetof(BP_AIInterface_C_Actor_Aim_Focus, Instigator) == 0x000000, "Member 'BP_AIInterface_C_Actor_Aim_Focus::Instigator' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.Actor Attack Target
// 0x0008 (0x0008 - 0x0000)
struct BP_AIInterface_C_Actor_Attack_Target final
{
public:
	class AActor*                                 Attack_Target;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_Actor_Attack_Target) == 0x000008, "Wrong alignment on BP_AIInterface_C_Actor_Attack_Target");
static_assert(sizeof(BP_AIInterface_C_Actor_Attack_Target) == 0x000008, "Wrong size on BP_AIInterface_C_Actor_Attack_Target");
static_assert(offsetof(BP_AIInterface_C_Actor_Attack_Target, Attack_Target) == 0x000000, "Member 'BP_AIInterface_C_Actor_Attack_Target::Attack_Target' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Alert
// 0x0008 (0x0008 - 0x0000)
struct BP_AIInterface_C_AI_Alert final
{
public:
	class AActor*                                 Alert_Actor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Alert) == 0x000008, "Wrong alignment on BP_AIInterface_C_AI_Alert");
static_assert(sizeof(BP_AIInterface_C_AI_Alert) == 0x000008, "Wrong size on BP_AIInterface_C_AI_Alert");
static_assert(offsetof(BP_AIInterface_C_AI_Alert, Alert_Actor) == 0x000000, "Member 'BP_AIInterface_C_AI_Alert::Alert_Actor' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Animation Switch
// 0x0001 (0x0001 - 0x0000)
struct BP_AIInterface_C_AI_Animation_Switch final
{
public:
	E_AIBehaviour                                 Behaviour;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Animation_Switch) == 0x000001, "Wrong alignment on BP_AIInterface_C_AI_Animation_Switch");
static_assert(sizeof(BP_AIInterface_C_AI_Animation_Switch) == 0x000001, "Wrong size on BP_AIInterface_C_AI_Animation_Switch");
static_assert(offsetof(BP_AIInterface_C_AI_Animation_Switch, Behaviour) == 0x000000, "Member 'BP_AIInterface_C_AI_Animation_Switch::Behaviour' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Block
// 0x0010 (0x0010 - 0x0000)
struct BP_AIInterface_C_AI_Block final
{
public:
	E_BlockType                                   Block_Type;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Block_Attacker;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Block) == 0x000008, "Wrong alignment on BP_AIInterface_C_AI_Block");
static_assert(sizeof(BP_AIInterface_C_AI_Block) == 0x000010, "Wrong size on BP_AIInterface_C_AI_Block");
static_assert(offsetof(BP_AIInterface_C_AI_Block, Block_Type) == 0x000000, "Member 'BP_AIInterface_C_AI_Block::Block_Type' has a wrong offset!");
static_assert(offsetof(BP_AIInterface_C_AI_Block, Block_Attacker) == 0x000008, "Member 'BP_AIInterface_C_AI_Block::Block_Attacker' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Camera Activate
// 0x0001 (0x0001 - 0x0000)
struct BP_AIInterface_C_AI_Camera_Activate final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Camera_Activate) == 0x000001, "Wrong alignment on BP_AIInterface_C_AI_Camera_Activate");
static_assert(sizeof(BP_AIInterface_C_AI_Camera_Activate) == 0x000001, "Wrong size on BP_AIInterface_C_AI_Camera_Activate");
static_assert(offsetof(BP_AIInterface_C_AI_Camera_Activate, Activate) == 0x000000, "Member 'BP_AIInterface_C_AI_Camera_Activate::Activate' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Can Interact?
// 0x0001 (0x0001 - 0x0000)
struct BP_AIInterface_C_AI_Can_Interact_ final
{
public:
	bool                                          Can_Interact;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Can_Interact_) == 0x000001, "Wrong alignment on BP_AIInterface_C_AI_Can_Interact_");
static_assert(sizeof(BP_AIInterface_C_AI_Can_Interact_) == 0x000001, "Wrong size on BP_AIInterface_C_AI_Can_Interact_");
static_assert(offsetof(BP_AIInterface_C_AI_Can_Interact_, Can_Interact) == 0x000000, "Member 'BP_AIInterface_C_AI_Can_Interact_::Can_Interact' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.Alert Actor Defenders
// 0x0010 (0x0010 - 0x0000)
struct BP_AIInterface_C_Alert_Actor_Defenders final
{
public:
	class AActor*                                 Attacked;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_Alert_Actor_Defenders) == 0x000008, "Wrong alignment on BP_AIInterface_C_Alert_Actor_Defenders");
static_assert(sizeof(BP_AIInterface_C_Alert_Actor_Defenders) == 0x000010, "Wrong size on BP_AIInterface_C_Alert_Actor_Defenders");
static_assert(offsetof(BP_AIInterface_C_Alert_Actor_Defenders, Attacked) == 0x000000, "Member 'BP_AIInterface_C_Alert_Actor_Defenders::Attacked' has a wrong offset!");
static_assert(offsetof(BP_AIInterface_C_Alert_Actor_Defenders, Attacker) == 0x000008, "Member 'BP_AIInterface_C_Alert_Actor_Defenders::Attacker' has a wrong offset!");

// Function BP_AIInterface.BP_AIInterface_C.AI Is Dead?
// 0x0001 (0x0001 - 0x0000)
struct BP_AIInterface_C_AI_Is_Dead_ final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIInterface_C_AI_Is_Dead_) == 0x000001, "Wrong alignment on BP_AIInterface_C_AI_Is_Dead_");
static_assert(sizeof(BP_AIInterface_C_AI_Is_Dead_) == 0x000001, "Wrong size on BP_AIInterface_C_AI_Is_Dead_");
static_assert(offsetof(BP_AIInterface_C_AI_Is_Dead_, Dead) == 0x000000, "Member 'BP_AIInterface_C_AI_Is_Dead_::Dead' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AISpawner_Master

#include "Basic.hpp"

#include "BP_AISpawner_Master_classes.hpp"
#include "BP_AISpawner_Master_parameters.hpp"


namespace SDK
{

// Function BP_AISpawner_Master.BP_AISpawner_Master_C.AddGroupToRepsawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::AddGroupToRepsawn(double Delay, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "AddGroupToRepsawn");

	Params::BP_AISpawner_Master_C_AddGroupToRepsawn Parms{};

	Parms.Delay = Delay;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.AddGroupToSpawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AmountToSpawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::AddGroupToSpawn(int32 AmountToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "AddGroupToSpawn");

	Params::BP_AISpawner_Master_C_AddGroupToSpawn Parms{};

	Parms.AmountToSpawn = AmountToSpawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.CanSpawnActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::CanSpawnActors(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "CanSpawnActors");

	Params::BP_AISpawner_Master_C_CanSpawnActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.CanSpawnerRespawnActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::CanSpawnerRespawnActors(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "CanSpawnerRespawnActors");

	Params::BP_AISpawner_Master_C_CanSpawnerRespawnActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.CheckStartSpawningWithRadius
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::CheckStartSpawningWithRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "CheckStartSpawningWithRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ClearSpawnPoints
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::ClearSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ClearSpawnPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ConvertLocalToWorldLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Point_Local                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point_World                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ConvertLocalToWorldLocation(struct FVector& Point_Local, struct FVector* Point_World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ConvertLocalToWorldLocation");

	Params::BP_AISpawner_Master_C_ConvertLocalToWorldLocation Parms{};

	Parms.Point_Local = std::move(Point_Local);

	UObject::ProcessEvent(Func, &Parms);

	Point_Local = std::move(Parms.Point_Local);

	if (Point_World != nullptr)
		*Point_World = std::move(Parms.Point_World);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ConvertLocalToWorldSpawnPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAIOSpawnPoint                   SpawnPoint_LocalSpace                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FAIOSpawnPoint                   SpawnPoint_WorldSpace                                  (Parm, OutParm, NoDestructor)

void ABP_AISpawner_Master_C::ConvertLocalToWorldSpawnPoint(struct FAIOSpawnPoint& SpawnPoint_LocalSpace, struct FAIOSpawnPoint* SpawnPoint_WorldSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ConvertLocalToWorldSpawnPoint");

	Params::BP_AISpawner_Master_C_ConvertLocalToWorldSpawnPoint Parms{};

	Parms.SpawnPoint_LocalSpace = std::move(SpawnPoint_LocalSpace);

	UObject::ProcessEvent(Func, &Parms);

	SpawnPoint_LocalSpace = std::move(Parms.SpawnPoint_LocalSpace);

	if (SpawnPoint_WorldSpace != nullptr)
		*SpawnPoint_WorldSpace = std::move(Parms.SpawnPoint_WorldSpace);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ConvertWorldToLocalLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Point_Local                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point_World                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ConvertWorldToLocalLocation(struct FVector& Point_Local, struct FVector* Point_World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ConvertWorldToLocalLocation");

	Params::BP_AISpawner_Master_C_ConvertWorldToLocalLocation Parms{};

	Parms.Point_Local = std::move(Point_Local);

	UObject::ProcessEvent(Func, &Parms);

	Point_Local = std::move(Parms.Point_Local);

	if (Point_World != nullptr)
		*Point_World = std::move(Parms.Point_World);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ConvertWorldToLocalSpawnPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAIOSpawnPoint                   SpawnPoint_WorldSpace                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FAIOSpawnPoint                   SpawnPoint_LocalSpace                                  (Parm, OutParm, NoDestructor)

void ABP_AISpawner_Master_C::ConvertWorldToLocalSpawnPoint(struct FAIOSpawnPoint& SpawnPoint_WorldSpace, struct FAIOSpawnPoint* SpawnPoint_LocalSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ConvertWorldToLocalSpawnPoint");

	Params::BP_AISpawner_Master_C_ConvertWorldToLocalSpawnPoint Parms{};

	Parms.SpawnPoint_WorldSpace = std::move(SpawnPoint_WorldSpace);

	UObject::ProcessEvent(Func, &Parms);

	SpawnPoint_WorldSpace = std::move(Parms.SpawnPoint_WorldSpace);

	if (SpawnPoint_LocalSpace != nullptr)
		*SpawnPoint_LocalSpace = std::move(Parms.SpawnPoint_LocalSpace);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.EventSettlement
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::EventSettlement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "EventSettlement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ExecuteUbergraph_BP_AISpawner_Master
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ExecuteUbergraph_BP_AISpawner_Master(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ExecuteUbergraph_BP_AISpawner_Master");

	Params::BP_AISpawner_Master_C_ExecuteUbergraph_BP_AISpawner_Master Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.FinishedSpawningGroup
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::FinishedSpawningGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "FinishedSpawningGroup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.GenerateSpawnPoints
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::GenerateSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "GenerateSpawnPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.GetCVarType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CVar                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::GetCVarType(class FName* CVar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "GetCVarType");

	Params::BP_AISpawner_Master_C_GetCVarType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CVar != nullptr)
		*CVar = Parms.CVar;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.GetRandomSpawnPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAIOSpawnPoint                   SpawnPoint                                             (Parm, OutParm, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::GetRandomSpawnPoint(struct FAIOSpawnPoint* SpawnPoint, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "GetRandomSpawnPoint");

	Params::BP_AISpawner_Master_C_GetRandomSpawnPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnPoint != nullptr)
		*SpawnPoint = std::move(Parms.SpawnPoint);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.GetSpawnPointAtIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAIOSpawnPoint                   SpawnPoint                                             (Parm, OutParm, NoDestructor)

void ABP_AISpawner_Master_C::GetSpawnPointAtIndex(int32 Index_0, bool* Success, struct FAIOSpawnPoint* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "GetSpawnPointAtIndex");

	Params::BP_AISpawner_Master_C_GetSpawnPointAtIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (SpawnPoint != nullptr)
		*SpawnPoint = std::move(Parms.SpawnPoint);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.InitSpawnByRadius
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::InitSpawnByRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "InitSpawnByRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.InitSpawner
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::InitSpawner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "InitSpawner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.IsAnyInvokerInRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::IsAnyInvokerInRadius(double Radius, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "IsAnyInvokerInRadius");

	Params::BP_AISpawner_Master_C_IsAnyInvokerInRadius Parms{};

	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.IsAnyInvokerInSpawnRegion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_AISpawner_Master_C::IsAnyInvokerInSpawnRegion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "IsAnyInvokerInSpawnRegion");

	Params::BP_AISpawner_Master_C_IsAnyInvokerInSpawnRegion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.IsSpawnedClassReplicated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Replicates                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::IsSpawnedClassReplicated(bool* Replicates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "IsSpawnedClassReplicated");

	Params::BP_AISpawner_Master_C_IsSpawnedClassReplicated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Replicates != nullptr)
		*Replicates = Parms.Replicates;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.KillSpawnedActors
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowRespawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::KillSpawnedActors(bool AllowRespawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "KillSpawnedActors");

	Params::BP_AISpawner_Master_C_KillSpawnedActors Parms{};

	Parms.AllowRespawn = AllowRespawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.OnSpawnedActorKilled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           KilledAI                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::OnSpawnedActorKilled(class AActor* KilledAI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "OnSpawnedActorKilled");

	Params::BP_AISpawner_Master_C_OnSpawnedActorKilled Parms{};

	Parms.KilledAI = KilledAI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.OnSubjectDespawnedByOptimizerSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAIOSubjectComponent*             DespawnedSubjectComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::OnSubjectDespawnedByOptimizerSubsystem(class UAIOSubjectComponent* DespawnedSubjectComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "OnSubjectDespawnedByOptimizerSubsystem");

	Params::BP_AISpawner_Master_C_OnSubjectDespawnedByOptimizerSubsystem Parms{};

	Parms.DespawnedSubjectComponent = DespawnedSubjectComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.OnSubjectSpawnedByOptimizerSubsystem
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAIOSubjectComponent*             SpawnedSubjectComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::OnSubjectSpawnedByOptimizerSubsystem(class UAIOSubjectComponent* SpawnedSubjectComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "OnSubjectSpawnedByOptimizerSubsystem");

	Params::BP_AISpawner_Master_C_OnSubjectSpawnedByOptimizerSubsystem Parms{};

	Parms.SpawnedSubjectComponent = SpawnedSubjectComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.OverrideBehaviour
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::OverrideBehaviour(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "OverrideBehaviour");

	Params::BP_AISpawner_Master_C_OverrideBehaviour Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.PostSpawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SpawnedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::PostSpawn(class AActor* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "PostSpawn");

	Params::BP_AISpawner_Master_C_PostSpawn Parms{};

	Parms.SpawnedActor = SpawnedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ProjectLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LocationToProject                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ProjectedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ProjectLocation(struct FVector& LocationToProject, bool* Success, struct FVector* ProjectedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ProjectLocation");

	Params::BP_AISpawner_Master_C_ProjectLocation Parms{};

	Parms.LocationToProject = std::move(LocationToProject);

	UObject::ProcessEvent(Func, &Parms);

	LocationToProject = std::move(Parms.LocationToProject);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ProjectedLocation != nullptr)
		*ProjectedLocation = std::move(Parms.ProjectedLocation);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ProjectSpawnPoints
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::ProjectSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ProjectSpawnPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AISpawner_Master_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ReceiveEndPlay");

	Params::BP_AISpawner_Master_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.ResetSpawner
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ResetIsSpawningStopped                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::ResetSpawner(bool ResetIsSpawningStopped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "ResetSpawner");

	Params::BP_AISpawner_Master_C_ResetSpawner Parms{};

	Parms.ResetIsSpawningStopped = ResetIsSpawningStopped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.SetIsSpawningStopped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::SetIsSpawningStopped(bool Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "SetIsSpawningStopped");

	Params::BP_AISpawner_Master_C_SetIsSpawningStopped Parms{};

	Parms.Stop = Stop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.SetSpawnCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::SetSpawnCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "SetSpawnCount");

	Params::BP_AISpawner_Master_C_SetSpawnCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.SetWasSpawningInitialized
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInitialized                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::SetWasSpawningInitialized(bool IsInitialized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "SetWasSpawningInitialized");

	Params::BP_AISpawner_Master_C_SetWasSpawningInitialized Parms{};

	Parms.IsInitialized = IsInitialized;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.SpawnActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::SpawnActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "SpawnActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.SpawningLoop
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::SpawningLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "SpawningLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.TraceForPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Loc                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayerHit_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::TraceForPlayer(const struct FVector& Loc, bool* PlayerHit_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "TraceForPlayer");

	Params::BP_AISpawner_Master_C_TraceForPlayer Parms{};

	Parms.Loc = std::move(Loc);

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerHit_ != nullptr)
		*PlayerHit_ = Parms.PlayerHit_;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.TryToSpawnGroup
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::TryToSpawnGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "TryToSpawnGroup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.UpdateRespawningGroups
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::UpdateRespawningGroups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "UpdateRespawningGroups");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.UpdateSpawnerAfterActorWasKilled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KilledAIAmount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::UpdateSpawnerAfterActorWasKilled(int32 KilledAIAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "UpdateSpawnerAfterActorWasKilled");

	Params::BP_AISpawner_Master_C_UpdateSpawnerAfterActorWasKilled Parms{};

	Parms.KilledAIAmount = KilledAIAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.UpdateSpawnerAfterSpawnActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FinishedSpawningGroup                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_Master_C::UpdateSpawnerAfterSpawnActor(bool* FinishedSpawningGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "UpdateSpawnerAfterSpawnActor");

	Params::BP_AISpawner_Master_C_UpdateSpawnerAfterSpawnActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FinishedSpawningGroup != nullptr)
		*FinishedSpawningGroup = Parms.FinishedSpawningGroup;
}


// Function BP_AISpawner_Master.BP_AISpawner_Master_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_Master_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_Master_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}


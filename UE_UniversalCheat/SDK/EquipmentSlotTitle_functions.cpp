#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipmentSlotTitle

#include "Basic.hpp"

#include "EquipmentSlotTitle_classes.hpp"
#include "EquipmentSlotTitle_parameters.hpp"


namespace SDK
{

// Function EquipmentSlotTitle.EquipmentSlotTitle_C.ExecuteUbergraph_EquipmentSlotTitle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEquipmentSlotTitle_C::ExecuteUbergraph_EquipmentSlotTitle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "ExecuteUbergraph_EquipmentSlotTitle");

	Params::EquipmentSlotTitle_C_ExecuteUbergraph_EquipmentSlotTitle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.IsEmptyEquipmentSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEmpty_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEquipmentSlotTitle_C::IsEmptyEquipmentSlot(bool* IsEmpty_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "IsEmptyEquipmentSlot");

	Params::EquipmentSlotTitle_C_IsEmptyEquipmentSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEmpty_0 != nullptr)
		*IsEmpty_0 = Parms.IsEmpty_0;
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        InMyGeometry                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UEquipmentSlotTitle_C::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "OnMouseButtonDoubleClick");

	Params::EquipmentSlotTitle_C_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UEquipmentSlotTitle_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "OnMouseButtonDown");

	Params::EquipmentSlotTitle_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEquipmentSlotTitle_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "PreConstruct");

	Params::EquipmentSlotTitle_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.SetDefaultColor
// (BlueprintCallable, BlueprintEvent)

void UEquipmentSlotTitle_C::SetDefaultColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "SetDefaultColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.UpdateName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             SlotName_0                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UEquipmentSlotTitle_C::UpdateName(const class FText& SlotName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "UpdateName");

	Params::EquipmentSlotTitle_C_UpdateName Parms{};

	Parms.SlotName_0 = std::move(SlotName_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipmentSlotTitle.EquipmentSlotTitle_C.UpdateTextColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Color_0                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UEquipmentSlotTitle_C::UpdateTextColor(const struct FSlateColor& Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlotTitle_C", "UpdateTextColor");

	Params::EquipmentSlotTitle_C_UpdateTextColor Parms{};

	Parms.Color_0 = std::move(Color_0);

	UObject::ProcessEvent(Func, &Parms);
}

}


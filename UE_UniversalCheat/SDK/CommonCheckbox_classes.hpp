#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonCheckbox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CommonCheckbox.CommonCheckbox_C
// 0x0118 (0x03D8 - 0x02C0)
class UCommonCheckbox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               BottomSpacer;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CheckboxName;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CheckboxValue;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                LeftMargin;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                RightMargin;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              Toggle;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TopSpacer;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ToggleTitle;                                       // 0x0300(0x0018)(Edit, BlueprintVisible)
	int32                                         FontSize;                                          // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CheckboxDefaultValueTip;                           // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          ChangeCheckboxColorWhenFocused_;                   // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeTextColorWhenFocused_;                       // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedToggleAndTextColor;                         // 0x033C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedToggleAndTextColor;                       // 0x034C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TopMargin;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BottomMargin;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftSideMargin;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightSideMargin;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DefaultValue;                                      // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhotoModeWidget_C*                     PhotoModeWidget;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   OptionFalse;                                       // 0x0390(0x0018)(Edit, BlueprintVisible)
	class FText                                   OptionTrue;                                        // 0x03A8(0x0018)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(bool Value)>    CheckboxDispatcher;                                // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Focus_;                                            // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__ToggleDoF_1_K2Node_ComponentBoundEvent_3_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void ChangeValue(bool Value, bool Focus__0);
	void ExecuteUbergraph_CommonCheckbox(int32 EntryPoint);
	void Initialize(bool DefaultValue_0, class UPhotoModeWidget_C* PhotoModeWidget__Self_);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void ResetCheckbox(bool Focus__0);
	void ResetToggleFocus();
	void Set_Focused_or_Unfocused_Color(bool ChangeCheckboxColorWhenFocused__0, bool ChangeTextColorWhenFocused__0, class UCheckBox* CheckBox, class UWidget* CheckboxTitle, class UWidget* CheckboxValue_0);
	void SetToggleFocus();
	class FText setTxtValue();
	class UWidget* ToggleUsingArrows(EUINavigation Navigation_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CommonCheckbox_C">();
	}
	static class UCommonCheckbox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonCheckbox_C>();
	}
};
static_assert(alignof(UCommonCheckbox_C) == 0x000008, "Wrong alignment on UCommonCheckbox_C");
static_assert(sizeof(UCommonCheckbox_C) == 0x0003D8, "Wrong size on UCommonCheckbox_C");
static_assert(offsetof(UCommonCheckbox_C, UberGraphFrame) == 0x0002C0, "Member 'UCommonCheckbox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, BottomSpacer) == 0x0002C8, "Member 'UCommonCheckbox_C::BottomSpacer' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, CheckboxName) == 0x0002D0, "Member 'UCommonCheckbox_C::CheckboxName' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, CheckboxValue) == 0x0002D8, "Member 'UCommonCheckbox_C::CheckboxValue' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, LeftMargin) == 0x0002E0, "Member 'UCommonCheckbox_C::LeftMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, RightMargin) == 0x0002E8, "Member 'UCommonCheckbox_C::RightMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, Toggle) == 0x0002F0, "Member 'UCommonCheckbox_C::Toggle' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, TopSpacer) == 0x0002F8, "Member 'UCommonCheckbox_C::TopSpacer' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, ToggleTitle) == 0x000300, "Member 'UCommonCheckbox_C::ToggleTitle' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, FontSize) == 0x000318, "Member 'UCommonCheckbox_C::FontSize' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, CheckboxDefaultValueTip) == 0x000320, "Member 'UCommonCheckbox_C::CheckboxDefaultValueTip' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, ChangeCheckboxColorWhenFocused_) == 0x000338, "Member 'UCommonCheckbox_C::ChangeCheckboxColorWhenFocused_' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, ChangeTextColorWhenFocused_) == 0x000339, "Member 'UCommonCheckbox_C::ChangeTextColorWhenFocused_' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, FocusedToggleAndTextColor) == 0x00033C, "Member 'UCommonCheckbox_C::FocusedToggleAndTextColor' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, UnfocusedToggleAndTextColor) == 0x00034C, "Member 'UCommonCheckbox_C::UnfocusedToggleAndTextColor' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, TopMargin) == 0x000360, "Member 'UCommonCheckbox_C::TopMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, BottomMargin) == 0x000368, "Member 'UCommonCheckbox_C::BottomMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, LeftSideMargin) == 0x000370, "Member 'UCommonCheckbox_C::LeftSideMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, RightSideMargin) == 0x000378, "Member 'UCommonCheckbox_C::RightSideMargin' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, DefaultValue) == 0x000380, "Member 'UCommonCheckbox_C::DefaultValue' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, PhotoModeWidget) == 0x000388, "Member 'UCommonCheckbox_C::PhotoModeWidget' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, OptionFalse) == 0x000390, "Member 'UCommonCheckbox_C::OptionFalse' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, OptionTrue) == 0x0003A8, "Member 'UCommonCheckbox_C::OptionTrue' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, CheckboxDispatcher) == 0x0003C0, "Member 'UCommonCheckbox_C::CheckboxDispatcher' has a wrong offset!");
static_assert(offsetof(UCommonCheckbox_C, Focus_) == 0x0003D0, "Member 'UCommonCheckbox_C::Focus_' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZombieBoss

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RepItemInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_JigPayload_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "E_AIBehaviour_structs.hpp"
#include "AIOptimizer_structs.hpp"


namespace SDK::Params
{

// Function BP_ZombieBoss.BP_ZombieBoss_C.Actor Aim Focus
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_Actor_Aim_Focus final
{
public:
	class AActor*                                 Instigator_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Actor_Aim_Focus) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Actor_Aim_Focus");
static_assert(sizeof(BP_ZombieBoss_C_Actor_Aim_Focus) == 0x000008, "Wrong size on BP_ZombieBoss_C_Actor_Aim_Focus");
static_assert(offsetof(BP_ZombieBoss_C_Actor_Aim_Focus, Instigator_0) == 0x000000, "Member 'BP_ZombieBoss_C_Actor_Aim_Focus::Instigator_0' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Actor Attack Target
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_Actor_Attack_Target final
{
public:
	class AActor*                                 Attack_Target;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Actor_Attack_Target) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Actor_Attack_Target");
static_assert(sizeof(BP_ZombieBoss_C_Actor_Attack_Target) == 0x000008, "Wrong size on BP_ZombieBoss_C_Actor_Attack_Target");
static_assert(offsetof(BP_ZombieBoss_C_Actor_Attack_Target, Attack_Target) == 0x000000, "Member 'BP_ZombieBoss_C_Actor_Attack_Target::Attack_Target' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AddMarker
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_AddMarker final
{
public:
	class UWidgetComponent*                       Marker_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AddMarker) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_AddMarker");
static_assert(sizeof(BP_ZombieBoss_C_AddMarker) == 0x000008, "Wrong size on BP_ZombieBoss_C_AddMarker");
static_assert(offsetof(BP_ZombieBoss_C_AddMarker, Marker_0) == 0x000000, "Member 'BP_ZombieBoss_C_AddMarker::Marker_0' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Alert
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_AI_Alert final
{
public:
	class AActor*                                 Alert_Actor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Alert) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_AI_Alert");
static_assert(sizeof(BP_ZombieBoss_C_AI_Alert) == 0x000008, "Wrong size on BP_ZombieBoss_C_AI_Alert");
static_assert(offsetof(BP_ZombieBoss_C_AI_Alert, Alert_Actor) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Alert::Alert_Actor' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Animation Switch
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_AI_Animation_Switch final
{
public:
	E_AIBehaviour                                 Behaviour;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Animation_Switch) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_AI_Animation_Switch");
static_assert(sizeof(BP_ZombieBoss_C_AI_Animation_Switch) == 0x000001, "Wrong size on BP_ZombieBoss_C_AI_Animation_Switch");
static_assert(offsetof(BP_ZombieBoss_C_AI_Animation_Switch, Behaviour) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Animation_Switch::Behaviour' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Block
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_AI_Block final
{
public:
	E_BlockType                                   Block_Type;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Block_Attacker;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Block) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_AI_Block");
static_assert(sizeof(BP_ZombieBoss_C_AI_Block) == 0x000010, "Wrong size on BP_ZombieBoss_C_AI_Block");
static_assert(offsetof(BP_ZombieBoss_C_AI_Block, Block_Type) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Block::Block_Type' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AI_Block, Block_Attacker) == 0x000008, "Member 'BP_ZombieBoss_C_AI_Block::Block_Attacker' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Camera Activate
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_AI_Camera_Activate final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Camera_Activate) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_AI_Camera_Activate");
static_assert(sizeof(BP_ZombieBoss_C_AI_Camera_Activate) == 0x000001, "Wrong size on BP_ZombieBoss_C_AI_Camera_Activate");
static_assert(offsetof(BP_ZombieBoss_C_AI_Camera_Activate, Activate) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Camera_Activate::Activate' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Can Interact?
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_AI_Can_Interact_ final
{
public:
	bool                                          Can_Interact;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Can_Interact_) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_AI_Can_Interact_");
static_assert(sizeof(BP_ZombieBoss_C_AI_Can_Interact_) == 0x000001, "Wrong size on BP_ZombieBoss_C_AI_Can_Interact_");
static_assert(offsetof(BP_ZombieBoss_C_AI_Can_Interact_, Can_Interact) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Can_Interact_::Can_Interact' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AIHealthBarInfo
// 0x0050 (0x0050 - 0x0000)
struct BP_ZombieBoss_C_AIHealthBarInfo final
{
public:
	bool                                          Visible_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Boss_;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValues_StandardHealth;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentHealth;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_MaxHealth;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AIHealthBarInfo) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_AIHealthBarInfo");
static_assert(sizeof(BP_ZombieBoss_C_AIHealthBarInfo) == 0x000050, "Wrong size on BP_ZombieBoss_C_AIHealthBarInfo");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, Visible_) == 0x000000, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::Visible_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, Name_0) == 0x000008, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::Name_0' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, Boss_) == 0x000018, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::Boss_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_GetValues_StandardHealth) == 0x000020, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_GetValues_StandardHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_GetValues_CurrentHealth) == 0x000028, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_GetValues_CurrentHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_GetValues_MaxHealth) == 0x000030, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_GetValues_MaxHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_GetHUD_HUD) == 0x000038, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_AIHealthBarInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x000040, "Member 'BP_ZombieBoss_C_AIHealthBarInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Alert Actor Defenders
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_Alert_Actor_Defenders final
{
public:
	class AActor*                                 Attacked;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Alert_Actor_Defenders) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Alert_Actor_Defenders");
static_assert(sizeof(BP_ZombieBoss_C_Alert_Actor_Defenders) == 0x000010, "Wrong size on BP_ZombieBoss_C_Alert_Actor_Defenders");
static_assert(offsetof(BP_ZombieBoss_C_Alert_Actor_Defenders, Attacked) == 0x000000, "Member 'BP_ZombieBoss_C_Alert_Actor_Defenders::Attacked' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_Alert_Actor_Defenders, Attacker) == 0x000008, "Member 'BP_ZombieBoss_C_Alert_Actor_Defenders::Attacker' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature final
{
public:
	class AActor*                                 DmgCauser;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Headshot;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature");
static_assert(sizeof(BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature) == 0x000010, "Wrong size on BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature, DmgCauser) == 0x000000, "Member 'BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature::DmgCauser' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature, Headshot) == 0x000008, "Member 'BP_ZombieBoss_C_BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature::Headshot' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature final
{
public:
	bool                                          bIsBeyondLastLayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeen;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(sizeof(BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x00000C, "Wrong size on BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsBeyondLastLayer) == 0x000000, "Member 'BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, LayerIndex) == 0x000004, "Member 'BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsSeen) == 0x000008, "Member 'BP_ZombieBoss_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsSeen' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature final
{
public:
	double                                        Dmg;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DmgCauser;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature");
static_assert(sizeof(BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature) == 0x000010, "Wrong size on BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature, Dmg) == 0x000000, "Member 'BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature::Dmg' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature, DmgCauser) == 0x000008, "Member 'BP_ZombieBoss_C_BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature::DmgCauser' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.CanAddMarkerToAI?
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_CanAddMarkerToAI_ final
{
public:
	bool                                          CanAdd_;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_CanAddMarkerToAI_) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_CanAddMarkerToAI_");
static_assert(sizeof(BP_ZombieBoss_C_CanAddMarkerToAI_) == 0x000001, "Wrong size on BP_ZombieBoss_C_CanAddMarkerToAI_");
static_assert(offsetof(BP_ZombieBoss_C_CanAddMarkerToAI_, CanAdd_) == 0x000000, "Member 'BP_ZombieBoss_C_CanAddMarkerToAI_::CanAdd_' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.CanStompAI?
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_CanStompAI_ final
{
public:
	bool                                          Stomp_;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_CanStompAI_) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_CanStompAI_");
static_assert(sizeof(BP_ZombieBoss_C_CanStompAI_) == 0x000001, "Wrong size on BP_ZombieBoss_C_CanStompAI_");
static_assert(offsetof(BP_ZombieBoss_C_CanStompAI_, Stomp_) == 0x000000, "Member 'BP_ZombieBoss_C_CanStompAI_::Stomp_' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Change Speed
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_Change_Speed final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Change_Speed) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Change_Speed");
static_assert(sizeof(BP_ZombieBoss_C_Change_Speed) == 0x000020, "Wrong size on BP_ZombieBoss_C_Change_Speed");
static_assert(offsetof(BP_ZombieBoss_C_Change_Speed, Speed) == 0x000000, "Member 'BP_ZombieBoss_C_Change_Speed::Speed' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_Change_Speed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_ZombieBoss_C_Change_Speed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_Change_Speed, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000010, "Member 'BP_ZombieBoss_C_Change_Speed::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_Change_Speed, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x000018, "Member 'BP_ZombieBoss_C_Change_Speed::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.CheckDistanceFromActor
// 0x0058 (0x0058 - 0x0000)
struct BP_ZombieBoss_C_CheckDistanceFromActor final
{
public:
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnInteractActorOverDistance_Result;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_CheckDistanceFromActor) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_CheckDistanceFromActor");
static_assert(sizeof(BP_ZombieBoss_C_CheckDistanceFromActor) == 0x000058, "Wrong size on BP_ZombieBoss_C_CheckDistanceFromActor");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x000000, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_OnInteractActorOverDistance_Result) == 0x000011, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_OnInteractActorOverDistance_Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_CheckDistanceFromActor, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_ZombieBoss_C_CheckDistanceFromActor::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Death
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_Death final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Death) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Death");
static_assert(sizeof(BP_ZombieBoss_C_Death) == 0x000008, "Wrong size on BP_ZombieBoss_C_Death");
static_assert(offsetof(BP_ZombieBoss_C_Death, Player) == 0x000000, "Member 'BP_ZombieBoss_C_Death::Player' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Event_DamageMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BP_ZombieBoss_C_Event_DamageMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Event_DamageMultiplier) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_Event_DamageMultiplier");
static_assert(sizeof(BP_ZombieBoss_C_Event_DamageMultiplier) == 0x000004, "Wrong size on BP_ZombieBoss_C_Event_DamageMultiplier");
static_assert(offsetof(BP_ZombieBoss_C_Event_DamageMultiplier, NewValue) == 0x000000, "Member 'BP_ZombieBoss_C_Event_DamageMultiplier::NewValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Event_HealthMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BP_ZombieBoss_C_Event_HealthMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Event_HealthMultiplier) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_Event_HealthMultiplier");
static_assert(sizeof(BP_ZombieBoss_C_Event_HealthMultiplier) == 0x000004, "Wrong size on BP_ZombieBoss_C_Event_HealthMultiplier");
static_assert(offsetof(BP_ZombieBoss_C_Event_HealthMultiplier, NewValue) == 0x000000, "Member 'BP_ZombieBoss_C_Event_HealthMultiplier::NewValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Event_OnHit
// 0x00E8 (0x00E8 - 0x0000)
struct BP_ZombieBoss_C_Event_OnHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_ZombieBoss_C_Event_OnHit) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_Event_OnHit");
static_assert(sizeof(BP_ZombieBoss_C_Event_OnHit) == 0x0000E8, "Wrong size on BP_ZombieBoss_C_Event_OnHit");
static_assert(offsetof(BP_ZombieBoss_C_Event_OnHit, Hit) == 0x000000, "Member 'BP_ZombieBoss_C_Event_OnHit::Hit' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Event_SpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BP_ZombieBoss_C_Event_SpeedMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Event_SpeedMultiplier) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_Event_SpeedMultiplier");
static_assert(sizeof(BP_ZombieBoss_C_Event_SpeedMultiplier) == 0x000004, "Wrong size on BP_ZombieBoss_C_Event_SpeedMultiplier");
static_assert(offsetof(BP_ZombieBoss_C_Event_SpeedMultiplier, NewValue) == 0x000000, "Member 'BP_ZombieBoss_C_Event_SpeedMultiplier::NewValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Event_XP
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_Event_XP final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Event_XP) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_Event_XP");
static_assert(sizeof(BP_ZombieBoss_C_Event_XP) == 0x000001, "Wrong size on BP_ZombieBoss_C_Event_XP");
static_assert(offsetof(BP_ZombieBoss_C_Event_XP, NewValue) == 0x000000, "Member 'BP_ZombieBoss_C_Event_XP::NewValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.ExecuteUbergraph_BP_ZombieBoss
// 0x09D0 (0x09D0 - 0x0000)
struct BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIOptimizerSubsystem*                  CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Speed;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction;                            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Instigator;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Attacked;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Attacker;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Alert_Actor;                          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 K2Node_Event_Behaviour;                            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Activate;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BlockType                                   K2Node_Event_Block_Type;                           // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Block_Attacker;                       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_2;                             // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ByActor;                              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          K2Node_Event_Payload;                              // 0x0080(0x0030)(HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_1;                             // 0x00B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Player;                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue_1;                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_Array_Random_OutItem;                     // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsBeyondLastLayer;     // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_LayerIndex;             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsSeen;                // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue_1;            // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ScalingDamageMultiplier_NewDmg;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAIOSubjectHandle                      CallFunc_K2_DespawnSubject_SubjectHandle;          // 0x0148(0x0004)(NoDestructor)
	bool                                          CallFunc_K2_DespawnSubject_ReturnValue;            // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm)
	double                                        CallFunc_ScalingDamageMultiplier_NewDmg_1;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Target;                         // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0188(0x0018)()
	class AAIController*                          CallFunc_GetAIController_ReturnValue_2;            // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x01D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       K2Node_Event_Marker;                               // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ZombieBossRock_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue_3;            // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LineOfSightTo_ReturnValue;                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_Hit;                            // 0x02B0(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A[0x2];                                      // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0418(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Burning_;                             // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Dmg;                                  // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Actor;                                // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x04A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x04B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue_1;                // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool NewValue)>                K2Node_CreateDelegate_OutputDelegate;              // 0x04D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Name;                                 // 0x04E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x04F0(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0510(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0528(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0578(0x0010)(ReferenceParm)
	TMap<class FName, class FText>                K2Node_MakeMap_Map;                                // 0x0588(0x0050)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x05D8(0x0018)()
	TMap<class FName, class FText>                K2Node_MakeMap_Map_1;                              // 0x05F0(0x0050)()
	class FText                                   K2Node_Select_Default;                             // 0x0640(0x0018)()
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map_2;                              // 0x0658(0x0050)(ConstParm)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD;                               // 0x06A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD_Game_C*                            CallFunc_GetHUD_HUD_1;                             // 0x06B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget;                // 0x06B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x06C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option;                               // 0x06C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x06D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_Event_Options;                              // 0x06D8(0x0050)(ConstParm)
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface;   // 0x0728(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_JigCharacterInterface_C> K2Node_DynamicCast_AsBP_Jig_Character_Interface_1; // 0x0740(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0758(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x0760(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_ShowInteractWidget_Widget_1;              // 0x0768(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestServerData_Result;                 // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x3];                                      // 0x0771(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool NewValue)>                K2Node_CreateDelegate_OutputDelegate_1;            // 0x0774(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_784[0x4];                                      // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_SetupInventoryWidget_InventoryWidgetRef;  // 0x0788(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddJigWidgetToContent_Result;             // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0791(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x0792(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0793(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue_4;                     // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_StandardHealth;                 // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentHealth;                  // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_MaxHealth;                      // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue_3;                     // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewValue_2;                     // 0x07C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue_1;                     // 0x07C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue;                       // 0x07C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C6[0x2];                                      // 0x07C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 CallFunc_CastToController_Controller;              // 0x07C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x07D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x07E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x07E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue;                   // 0x07EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue_1;                 // 0x07ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue;               // 0x07EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EF[0x1];                                      // 0x07EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float NewValue)>               K2Node_CreateDelegate_OutputDelegate_3;            // 0x07F0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue_1;             // 0x0800(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0xF];                                      // 0x0801(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0810(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float NewValue)>               K2Node_CreateDelegate_OutputDelegate_4;            // 0x0870(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x0880(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x088C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D[0x3];                                      // 0x088D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevellingComponent_C*                  CallFunc_GetLevellingComponent_LevellingComponent; // 0x0890(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0898(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x08A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x08B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_AddXP_XPOutput;                           // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float NewValue)>               K2Node_CreateDelegate_OutputDelegate_6;            // 0x08D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E4[0x4];                                      // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x08E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0900(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x7];                                      // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0918(0x0018)()
	class UTechTreeComponent_C*                   CallFunc_GetSkillTreeManager_TechTree;             // 0x0930(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_DmgCauser_1;            // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_Headshot;               // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_941[0x7];                                      // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_ComponentBoundEvent_Dmg;                    // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_DmgCauser;              // 0x0950(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0958(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Damage;                               // 0x0970(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x0978(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x0980(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0988(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast;      // 0x0998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x099C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast_1;    // 0x09A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x09A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x09B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DamageTaken_DmgAmount_ImplicitCast;       // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss) == 0x000010, "Wrong alignment on BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss");
static_assert(sizeof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss) == 0x0009D0, "Wrong size on BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, EntryPoint) == 0x000000, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_bool_Has_Been_Initd_Variable) == 0x000010, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_bool_IsClosed_Variable) == 0x000011, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_bool_Has_Been_Initd_Variable_1) == 0x000012, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Speed) == 0x000018, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Speed' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Direction) == 0x000020, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Instigator) == 0x000038, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Attacked) == 0x000040, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Attacked' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Attacker) == 0x000048, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Attacker' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Alert_Actor) == 0x000050, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Alert_Actor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Behaviour) == 0x000058, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Behaviour' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Activate) == 0x000059, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Activate' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Block_Type) == 0x00005A, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Block_Type' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Block_Attacker) == 0x000060, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Block_Attacker' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_InteractingActor_3) == 0x000068, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Option_2) == 0x000070, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Option_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_ByActor) == 0x000078, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_ByActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Payload) == 0x000080, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_InteractingActor_2) == 0x0000B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Option_1) == 0x0000B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Option_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_Player) == 0x0000C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ActorHasTag_ReturnValue) == 0x0000C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ActorHasTag_ReturnValue_1) == 0x0000C9, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ActorHasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BooleanOR_ReturnValue) == 0x0000CA, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Array_Random_OutItem) == 0x0000D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Array_Random_OutIndex) == 0x0000D8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_PlayAnimMontage_ReturnValue) == 0x0000DC, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000E0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000F8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_bool_IsClosed_Variable_1) == 0x000110, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetAIController_ReturnValue) == 0x000118, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_IsValid_ReturnValue) == 0x000120, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_bIsBeyondLastLayer) == 0x000121, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_LayerIndex) == 0x000124, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_bIsSeen) == 0x000128, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_bIsSeen' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_SwitchInteger_CmpSuccess) == 0x000129, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetAIController_ReturnValue_1) == 0x000130, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetAIController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000138, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ScalingDamageMultiplier_NewDmg) == 0x000140, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ScalingDamageMultiplier_NewDmg' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_DespawnSubject_SubjectHandle) == 0x000148, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_DespawnSubject_SubjectHandle' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_DespawnSubject_ReturnValue) == 0x00014C, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_DespawnSubject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeArray_Array) == 0x000150, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ScalingDamageMultiplier_NewDmg_1) == 0x000160, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ScalingDamageMultiplier_NewDmg_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RandomFloatInRange_ReturnValue) == 0x000168, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_Target) == 0x000170, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_text_Variable) == 0x000188, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetAIController_ReturnValue_2) == 0x0001A0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetAIController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_IsValid_ReturnValue_1) == 0x0001A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0001B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0001C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0001D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Marker) == 0x000230, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Marker' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000238, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_FinishSpawningActor_ReturnValue) == 0x000240, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakTransform_Location) == 0x000248, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakTransform_Rotation) == 0x000260, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakTransform_Scale) == 0x000278, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_IsValid_ReturnValue_2) == 0x000290, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetPlayerController_ReturnValue) == 0x000298, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetAIController_ReturnValue_3) == 0x0002A0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetAIController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_LineOfSightTo_ReturnValue) == 0x0002A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_LineOfSightTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_Hit) == 0x0002B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_bBlockingHit) == 0x000398, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_bInitialOverlap) == 0x000399, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_Time) == 0x00039C, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_Distance) == 0x0003A0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_Location) == 0x0003A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_ImpactPoint) == 0x0003C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_Normal) == 0x0003D8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_ImpactNormal) == 0x0003F0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_PhysMat) == 0x000408, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_HitActor) == 0x000410, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_HitComponent) == 0x000418, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_HitBoneName) == 0x000420, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_BoneName) == 0x000428, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_HitItem) == 0x000430, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_ElementIndex) == 0x000434, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_FaceIndex) == 0x000438, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_TraceStart) == 0x000440, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_BreakHitResult_TraceEnd) == 0x000458, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Burning_) == 0x000470, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Burning_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Dmg) == 0x000478, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Dmg' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Actor) == 0x000480, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Actor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ApplyDamage_ReturnValue) == 0x000488, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_MakeRotFromX_ReturnValue) == 0x000490, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Conv_DoubleToString_ReturnValue) == 0x0004A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0004B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ApplyDamage_ReturnValue_1) == 0x0004C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ApplyDamage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_IsValid_ReturnValue_3) == 0x0004C4, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0004C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate) == 0x0004D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Name) == 0x0004E0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Conv_StringToText_ReturnValue) == 0x0004F0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_bool_Variable) == 0x000508, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_MakeLiteralText_ReturnValue) == 0x000510, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeStruct_FormatArgumentData) == 0x000528, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeArray_Array_1) == 0x000578, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeMap_Map) == 0x000588, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Format_ReturnValue) == 0x0005D8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeMap_Map_1) == 0x0005F0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Select_Default) == 0x000640, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_MakeMap_Map_2) == 0x000658, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_MakeMap_Map_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetHUD_HUD) == 0x0006A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetHUD_HUD_1) == 0x0006B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetHUD_HUD_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ShowInteractWidget_Widget) == 0x0006B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ShowInteractWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_InteractingActor_1) == 0x0006C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Option) == 0x0006C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Option' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_InteractingActor) == 0x0006D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Options) == 0x0006D8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Options' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_DynamicCast_AsBP_Jig_Character_Interface) == 0x000728, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_DynamicCast_AsBP_Jig_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_DynamicCast_bSuccess) == 0x000738, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_DynamicCast_AsBP_Jig_Character_Interface_1) == 0x000740, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_DynamicCast_AsBP_Jig_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_DynamicCast_bSuccess_1) == 0x000750, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_SetTimer_ReturnValue) == 0x000758, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_SetTimer_ReturnValue_1) == 0x000760, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ShowInteractWidget_Widget_1) == 0x000768, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ShowInteractWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RequestServerData_Result) == 0x000770, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RequestServerData_Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_1) == 0x000774, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SetupInventoryWidget_InventoryWidgetRef) == 0x000788, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SetupInventoryWidget_InventoryWidgetRef' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_AddJigWidgetToContent_Result) == 0x000790, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_AddJigWidgetToContent_Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SetStaticMesh_ReturnValue) == 0x000791, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetBoolCVar_ReturnValue) == 0x000792, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000793, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_NewValue_4) == 0x000794, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_NewValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetValues_StandardHealth) == 0x000798, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetValues_StandardHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetValues_CurrentHealth) == 0x0007A0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetValues_CurrentHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetValues_MaxHealth) == 0x0007A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetValues_MaxHealth' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_NewValue_3) == 0x0007B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_NewValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0007B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_NewValue_2) == 0x0007C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_NewValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_NewValue_1) == 0x0007C4, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_NewValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CustomEvent_NewValue) == 0x0007C5, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_CastToController_Controller) == 0x0007C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_CastToController_Controller' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_2) == 0x0007D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0007E0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Add_IntInt_ReturnValue) == 0x0007E8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_StoreStats_ReturnValue) == 0x0007EC, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_StoreStats_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_StoreStats_ReturnValue_1) == 0x0007ED, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_StoreStats_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SetAchievement_ReturnValue) == 0x0007EE, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SetAchievement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_3) == 0x0007F0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_SetAchievement_ReturnValue_1) == 0x000800, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_SetAchievement_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_struct_Variable) == 0x000810, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_4) == 0x000870, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_AddComponent_ReturnValue) == 0x000880, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, Temp_int_Variable) == 0x000888, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00088C, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetLevellingComponent_LevellingComponent) == 0x000890, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetLevellingComponent_LevellingComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_5) == 0x000898, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0008A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0008B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0008B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0008C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_AddXP_XPOutput) == 0x0008C8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_AddXP_XPOutput' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_CreateDelegate_OutputDelegate_6) == 0x0008D0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_FTrunc_ReturnValue) == 0x0008E0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Conv_IntToString_ReturnValue) == 0x0008E8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x0008F8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Concat_StrStr_ReturnValue) == 0x000900, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000910, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000918, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_GetSkillTreeManager_TechTree) == 0x000930, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_GetSkillTreeManager_TechTree' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_DmgCauser_1) == 0x000938, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_DmgCauser_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_Headshot) == 0x000940, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_Headshot' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_Dmg) == 0x000948, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_Dmg' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_ComponentBoundEvent_DmgCauser) == 0x000950, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_ComponentBoundEvent_DmgCauser' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000958, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_Damage) == 0x000970, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_DamageType) == 0x000978, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_InstigatedBy) == 0x000980, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, K2Node_Event_DamageCauser) == 0x000988, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000990, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ApplyDamage_BaseDamage_ImplicitCast) == 0x000998, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ApplyDamage_BaseDamage_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Delay_Duration_ImplicitCast) == 0x00099C, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0009A0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_ApplyDamage_BaseDamage_ImplicitCast_1) == 0x0009A4, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_ApplyDamage_BaseDamage_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x0009A8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Delay_Duration_ImplicitCast_2) == 0x0009B0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0009B8, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss, CallFunc_DamageTaken_DmgAmount_ImplicitCast) == 0x0009C0, "Member 'BP_ZombieBoss_C_ExecuteUbergraph_BP_ZombieBoss::CallFunc_DamageTaken_DmgAmount_ImplicitCast' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetInteractOptions
// 0x00A0 (0x00A0 - 0x0000)
struct BP_ZombieBoss_C_GetInteractOptions final
{
public:
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0000(0x0050)(Parm, OutParm)
	TMap<struct FGameplayTag, class FText>        K2Node_MakeMap_Map;                                // 0x0050(0x0050)()
};
static_assert(alignof(BP_ZombieBoss_C_GetInteractOptions) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetInteractOptions");
static_assert(sizeof(BP_ZombieBoss_C_GetInteractOptions) == 0x0000A0, "Wrong size on BP_ZombieBoss_C_GetInteractOptions");
static_assert(offsetof(BP_ZombieBoss_C_GetInteractOptions, Options) == 0x000000, "Member 'BP_ZombieBoss_C_GetInteractOptions::Options' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetInteractOptions, K2Node_MakeMap_Map) == 0x000050, "Member 'BP_ZombieBoss_C_GetInteractOptions::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetItemInfo
// 0x0078 (0x0078 - 0x0000)
struct BP_ZombieBoss_C_GetItemInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatsConfig;                                 // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TMap<class FString, class FString>            CustomData;                                        // 0x0028(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_ZombieBoss_C_GetItemInfo) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetItemInfo");
static_assert(sizeof(BP_ZombieBoss_C_GetItemInfo) == 0x000078, "Wrong size on BP_ZombieBoss_C_GetItemInfo");
static_assert(offsetof(BP_ZombieBoss_C_GetItemInfo, Info) == 0x000000, "Member 'BP_ZombieBoss_C_GetItemInfo::Info' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetItemInfo, Count) == 0x000008, "Member 'BP_ZombieBoss_C_GetItemInfo::Count' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetItemInfo, RandomStatsConfig) == 0x000010, "Member 'BP_ZombieBoss_C_GetItemInfo::RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetItemInfo, CustomData) == 0x000028, "Member 'BP_ZombieBoss_C_GetItemInfo::CustomData' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetJigMultiplayerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_GetJigMultiplayerComponent final
{
public:
	class UActorComponent*                        JigComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_GetJigMultiplayerComponent) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetJigMultiplayerComponent");
static_assert(sizeof(BP_ZombieBoss_C_GetJigMultiplayerComponent) == 0x000008, "Wrong size on BP_ZombieBoss_C_GetJigMultiplayerComponent");
static_assert(offsetof(BP_ZombieBoss_C_GetJigMultiplayerComponent, JigComp) == 0x000000, "Member 'BP_ZombieBoss_C_GetJigMultiplayerComponent::JigComp' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetMainSceneComp
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_GetMainSceneComp final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_GetMainSceneComp) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetMainSceneComp");
static_assert(sizeof(BP_ZombieBoss_C_GetMainSceneComp) == 0x000008, "Wrong size on BP_ZombieBoss_C_GetMainSceneComp");
static_assert(offsetof(BP_ZombieBoss_C_GetMainSceneComp, Comp) == 0x000000, "Member 'BP_ZombieBoss_C_GetMainSceneComp::Comp' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetMarker
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_GetMarker final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarkerOffset;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_GetMarker) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetMarker");
static_assert(sizeof(BP_ZombieBoss_C_GetMarker) == 0x000020, "Wrong size on BP_ZombieBoss_C_GetMarker");
static_assert(offsetof(BP_ZombieBoss_C_GetMarker, Texture) == 0x000000, "Member 'BP_ZombieBoss_C_GetMarker::Texture' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetMarker, Color) == 0x000008, "Member 'BP_ZombieBoss_C_GetMarker::Color' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetMarker, MarkerOffset) == 0x000018, "Member 'BP_ZombieBoss_C_GetMarker::MarkerOffset' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_GetMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh_0;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_GetMesh) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetMesh");
static_assert(sizeof(BP_ZombieBoss_C_GetMesh) == 0x000008, "Wrong size on BP_ZombieBoss_C_GetMesh");
static_assert(offsetof(BP_ZombieBoss_C_GetMesh, Mesh_0) == 0x000000, "Member 'BP_ZombieBoss_C_GetMesh::Mesh_0' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.GetMovementSpeeds
// 0x0018 (0x0018 - 0x0000)
struct BP_ZombieBoss_C_GetMovementSpeeds final
{
public:
	double                                        RoamingSpeed;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSpeed;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_GetMovementSpeeds) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_GetMovementSpeeds");
static_assert(sizeof(BP_ZombieBoss_C_GetMovementSpeeds) == 0x000018, "Wrong size on BP_ZombieBoss_C_GetMovementSpeeds");
static_assert(offsetof(BP_ZombieBoss_C_GetMovementSpeeds, RoamingSpeed) == 0x000000, "Member 'BP_ZombieBoss_C_GetMovementSpeeds::RoamingSpeed' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetMovementSpeeds, AlertSpeed) == 0x000008, "Member 'BP_ZombieBoss_C_GetMovementSpeeds::AlertSpeed' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_GetMovementSpeeds, AttackSpeed) == 0x000010, "Member 'BP_ZombieBoss_C_GetMovementSpeeds::AttackSpeed' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.HitByVehicle
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_HitByVehicle final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_HitByVehicle) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_HitByVehicle");
static_assert(sizeof(BP_ZombieBoss_C_HitByVehicle) == 0x000020, "Wrong size on BP_ZombieBoss_C_HitByVehicle");
static_assert(offsetof(BP_ZombieBoss_C_HitByVehicle, Speed) == 0x000000, "Member 'BP_ZombieBoss_C_HitByVehicle::Speed' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_HitByVehicle, Direction) == 0x000008, "Member 'BP_ZombieBoss_C_HitByVehicle::Direction' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.IsAIBurning?
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_IsAIBurning_ final
{
public:
	bool                                          IsBurning_;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_IsAIBurning_) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_IsAIBurning_");
static_assert(sizeof(BP_ZombieBoss_C_IsAIBurning_) == 0x000001, "Wrong size on BP_ZombieBoss_C_IsAIBurning_");
static_assert(offsetof(BP_ZombieBoss_C_IsAIBurning_, IsBurning_) == 0x000000, "Member 'BP_ZombieBoss_C_IsAIBurning_::IsBurning_' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigCanInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_JigCanInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigCanInteract) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_JigCanInteract");
static_assert(sizeof(BP_ZombieBoss_C_JigCanInteract) == 0x000001, "Wrong size on BP_ZombieBoss_C_JigCanInteract");
static_assert(offsetof(BP_ZombieBoss_C_JigCanInteract, Result) == 0x000000, "Member 'BP_ZombieBoss_C_JigCanInteract::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_GetLootWidget
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_JigMP_GetLootWidget final
{
public:
	class UWidget*                                Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_GetLootWidget) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_GetLootWidget");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_GetLootWidget) == 0x000010, "Wrong size on BP_ZombieBoss_C_JigMP_GetLootWidget");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_GetLootWidget, Result) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_GetLootWidget::Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_GetLootWidget, Valid_) == 0x000008, "Member 'BP_ZombieBoss_C_JigMP_GetLootWidget::Valid_' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnContainersSwap
// 0x0018 (0x0018 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnContainersSwap final
{
public:
	class UJSIContainer_C*                        Container1;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container2;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnContainersSwap) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnContainersSwap");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnContainersSwap) == 0x000018, "Wrong size on BP_ZombieBoss_C_JigMP_OnContainersSwap");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnContainersSwap, Container1) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnContainersSwap::Container1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnContainersSwap, Container2) == 0x000008, "Member 'BP_ZombieBoss_C_JigMP_OnContainersSwap::Container2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnContainersSwap, Result) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnContainersSwap::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnItemAdded
// 0x0040 (0x0040 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnItemAdded final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        FromComponent;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnItemAdded) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnItemAdded");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnItemAdded) == 0x000040, "Wrong size on BP_ZombieBoss_C_JigMP_OnItemAdded");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemAdded, ItemUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemAdded, FromContainerUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnItemAdded::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemAdded, ToContainerUID) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemAdded, FromComponent) == 0x000030, "Member 'BP_ZombieBoss_C_JigMP_OnItemAdded::FromComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemAdded, Result) == 0x000038, "Member 'BP_ZombieBoss_C_JigMP_OnItemAdded::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnItemConsumed
// 0x0118 (0x0118 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnItemConsumed final
{
public:
	struct FRepItemInfo                           ConsumedItem;                                      // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Remaining;                                         // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           InsideOf;                                          // 0x0080(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromContainer;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomData;                                        // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallbackToPlayer_;                                 // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0111(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnItemConsumed) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnItemConsumed");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnItemConsumed) == 0x000118, "Wrong size on BP_ZombieBoss_C_JigMP_OnItemConsumed");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, ConsumedItem) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::ConsumedItem' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, Amount) == 0x000078, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::Amount' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, Remaining) == 0x00007C, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::Remaining' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, InsideOf) == 0x000080, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::InsideOf' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, FromContainer) == 0x0000F8, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, CustomData) == 0x000100, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::CustomData' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, CallbackToPlayer_) == 0x000110, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::CallbackToPlayer_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemConsumed, Result) == 0x000111, "Member 'BP_ZombieBoss_C_JigMP_OnItemConsumed::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnItemDropped
// 0x0030 (0x0030 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnItemDropped final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnItemDropped) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnItemDropped");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnItemDropped) == 0x000030, "Wrong size on BP_ZombieBoss_C_JigMP_OnItemDropped");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemDropped, ItemUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnItemDropped::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemDropped, FromContainerUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnItemDropped::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemDropped, ActorRef) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnItemDropped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemDropped, Result) == 0x000028, "Member 'BP_ZombieBoss_C_JigMP_OnItemDropped::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnItemMoved
// 0x0034 (0x0034 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnItemMoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnItemMoved) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnItemMoved");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnItemMoved) == 0x000034, "Wrong size on BP_ZombieBoss_C_JigMP_OnItemMoved");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemMoved, ItemUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnItemMoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemMoved, FromContainerUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnItemMoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemMoved, ToContainerUID) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnItemMoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemMoved, Result) == 0x000030, "Member 'BP_ZombieBoss_C_JigMP_OnItemMoved::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnItemRemoved
// 0x0040 (0x0040 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnItemRemoved final
{
public:
	struct FGuid                                  ItemUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  FromContainerUID;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ToComponent;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnItemRemoved) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnItemRemoved");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnItemRemoved) == 0x000040, "Wrong size on BP_ZombieBoss_C_JigMP_OnItemRemoved");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemRemoved, ItemUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemRemoved, FromContainerUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemRemoved, ToContainerUID) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnItemRemoved::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemRemoved, ToComponent) == 0x000030, "Member 'BP_ZombieBoss_C_JigMP_OnItemRemoved::ToComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnItemRemoved, Result) == 0x000038, "Member 'BP_ZombieBoss_C_JigMP_OnItemRemoved::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnMainContainerItemAdded
// 0x00B8 (0x00B8 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded final
{
public:
	struct FGuid                                  ToContainerUID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemInfo;                                          // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   FromMain;                                          // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorRef;                                          // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded) == 0x0000B8, "Wrong size on BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, ToContainerUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, ItemUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, ToContainerName) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, ItemInfo) == 0x000028, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, FromMain) == 0x0000A0, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::FromMain' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, Result) == 0x0000A8, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded, ActorRef) == 0x0000B0, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemAdded::ActorRef' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnMainContainerItemRemoved
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved final
{
public:
	struct FGuid                                  FromContainerUID;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           ItemRemovedInfo;                                   // 0x0028(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved) == 0x0000A8, "Wrong size on BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved, FromContainerUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved::FromContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved, ItemUID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved, ContainerName) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved, ItemRemovedInfo) == 0x000028, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved::ItemRemovedInfo' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved, Result) == 0x0000A0, "Member 'BP_ZombieBoss_C_JigMP_OnMainContainerItemRemoved::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnPickupAdded
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnPickupAdded final
{
public:
	struct FRepItemInfo                           Info;                                              // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnPickupAdded) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnPickupAdded");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnPickupAdded) == 0x0000A8, "Wrong size on BP_ZombieBoss_C_JigMP_OnPickupAdded");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupAdded, Info) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnPickupAdded::Info' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupAdded, ItemUID) == 0x000078, "Member 'BP_ZombieBoss_C_JigMP_OnPickupAdded::ItemUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupAdded, ToContainerUID) == 0x000088, "Member 'BP_ZombieBoss_C_JigMP_OnPickupAdded::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupAdded, ToContainer) == 0x000098, "Member 'BP_ZombieBoss_C_JigMP_OnPickupAdded::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupAdded, Result) == 0x0000A0, "Member 'BP_ZombieBoss_C_JigMP_OnPickupAdded::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnPickupEquipped
// 0x00B8 (0x00B8 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnPickupEquipped final
{
public:
	class AActor*                                 ActorRef;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainerName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  UID;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ToContainerUID;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRepItemInfo                           Info;                                              // 0x0030(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverrideActor;                                     // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnPickupEquipped) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnPickupEquipped");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnPickupEquipped) == 0x0000B8, "Wrong size on BP_ZombieBoss_C_JigMP_OnPickupEquipped");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, ActorRef) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, ToContainerName) == 0x000008, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::ToContainerName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, UID) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::UID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, ToContainerUID) == 0x000020, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::ToContainerUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, Info) == 0x000030, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::Info' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, Result) == 0x0000A8, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::Result' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnPickupEquipped, OverrideActor) == 0x0000B0, "Member 'BP_ZombieBoss_C_JigMP_OnPickupEquipped::OverrideActor' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnRequestDropItem
// 0x0150 (0x0150 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnRequestDropItem final
{
public:
	struct FRepItemInfo                           ItemInfo;                                          // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FName                                   ContainerName;                                     // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnRequestDropItem) == 0x000010, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnRequestDropItem");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnRequestDropItem) == 0x000150, "Wrong size on BP_ZombieBoss_C_JigMP_OnRequestDropItem");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, ItemInfo) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, ContainerName) == 0x000078, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::ContainerName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, ActorRef) == 0x000080, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::ActorRef' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000088, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000A8, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000130, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_FinishSpawningActor_ReturnValue) == 0x000138, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnRequestDropItem, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000140, "Member 'BP_ZombieBoss_C_JigMP_OnRequestDropItem::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnTwoContainersSwap
// 0x0014 (0x0014 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnTwoContainersSwap final
{
public:
	class FName                                   FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnTwoContainersSwap) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnTwoContainersSwap");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnTwoContainersSwap) == 0x000014, "Wrong size on BP_ZombieBoss_C_JigMP_OnTwoContainersSwap");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnTwoContainersSwap, FromContainer) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnTwoContainersSwap::FromContainer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnTwoContainersSwap, ToContainer) == 0x000008, "Member 'BP_ZombieBoss_C_JigMP_OnTwoContainersSwap::ToContainer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnTwoContainersSwap, Result) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnTwoContainersSwap::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigMP_OnUpdateChamberUID
// 0x0014 (0x0014 - 0x0000)
struct BP_ZombieBoss_C_JigMP_OnUpdateChamberUID final
{
public:
	struct FGuid                                  NewUID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigMP_OnUpdateChamberUID) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_JigMP_OnUpdateChamberUID");
static_assert(sizeof(BP_ZombieBoss_C_JigMP_OnUpdateChamberUID) == 0x000014, "Wrong size on BP_ZombieBoss_C_JigMP_OnUpdateChamberUID");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnUpdateChamberUID, NewUID) == 0x000000, "Member 'BP_ZombieBoss_C_JigMP_OnUpdateChamberUID::NewUID' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigMP_OnUpdateChamberUID, Result) == 0x000010, "Member 'BP_ZombieBoss_C_JigMP_OnUpdateChamberUID::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.JigSetCanInteract
// 0x0003 (0x0003 - 0x0000)
struct BP_ZombieBoss_C_JigSetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePhysics;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_JigSetCanInteract) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_JigSetCanInteract");
static_assert(sizeof(BP_ZombieBoss_C_JigSetCanInteract) == 0x000003, "Wrong size on BP_ZombieBoss_C_JigSetCanInteract");
static_assert(offsetof(BP_ZombieBoss_C_JigSetCanInteract, CanInteract) == 0x000000, "Member 'BP_ZombieBoss_C_JigSetCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigSetCanInteract, EnablePhysics) == 0x000001, "Member 'BP_ZombieBoss_C_JigSetCanInteract::EnablePhysics' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_JigSetCanInteract, Result) == 0x000002, "Member 'BP_ZombieBoss_C_JigSetCanInteract::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.LeftArmTrace
// 0x0218 (0x0218 - 0x0000)
struct BP_ZombieBoss_C_LeftArmTrace final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0038(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_LeftArmTrace) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_LeftArmTrace");
static_assert(sizeof(BP_ZombieBoss_C_LeftArmTrace) == 0x000218, "Wrong size on BP_ZombieBoss_C_LeftArmTrace");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, Temp_object_Variable) == 0x000000, "Member 'BP_ZombieBoss_C_LeftArmTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_ZombieBoss_C_LeftArmTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000038, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x000120, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000121, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000122, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_BoneName) == 0x0001B0, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0001E0, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_GetObjectClass_ReturnValue) == 0x0001F8, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_Array_Contains_ReturnValue) == 0x000200, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_LeftArmTrace, CallFunc_GetClassDisplayName_ReturnValue) == 0x000208, "Member 'BP_ZombieBoss_C_LeftArmTrace::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnBeginInteract
// 0x0058 (0x0058 - 0x0000)
struct BP_ZombieBoss_C_OnBeginInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_ZombieBoss_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnBeginInteract");
static_assert(sizeof(BP_ZombieBoss_C_OnBeginInteract) == 0x000058, "Wrong size on BP_ZombieBoss_C_OnBeginInteract");
static_assert(offsetof(BP_ZombieBoss_C_OnBeginInteract, InteractingActor) == 0x000000, "Member 'BP_ZombieBoss_C_OnBeginInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnBeginInteract, Options) == 0x000008, "Member 'BP_ZombieBoss_C_OnBeginInteract::Options' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnExecuteInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_OnExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnExecuteInteract) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnExecuteInteract");
static_assert(sizeof(BP_ZombieBoss_C_OnExecuteInteract) == 0x000010, "Wrong size on BP_ZombieBoss_C_OnExecuteInteract");
static_assert(offsetof(BP_ZombieBoss_C_OnExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_ZombieBoss_C_OnExecuteInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnExecuteInteract, Option) == 0x000008, "Member 'BP_ZombieBoss_C_OnExecuteInteract::Option' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnExecuteInteractDialogue
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_OnExecuteInteractDialogue final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnExecuteInteractDialogue) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnExecuteInteractDialogue");
static_assert(sizeof(BP_ZombieBoss_C_OnExecuteInteractDialogue) == 0x000008, "Wrong size on BP_ZombieBoss_C_OnExecuteInteractDialogue");
static_assert(offsetof(BP_ZombieBoss_C_OnExecuteInteractDialogue, InteractingActor) == 0x000000, "Member 'BP_ZombieBoss_C_OnExecuteInteractDialogue::InteractingActor' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnRep_IsDead?
// 0x0048 (0x0048 - 0x0000)
struct BP_ZombieBoss_C_OnRep_IsDead_ final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINT_AnimBPPlayer_C>   K2Node_DynamicCast_AsINT_Anim_BPPlayer;            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnRep_IsDead_) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnRep_IsDead_");
static_assert(sizeof(BP_ZombieBoss_C_OnRep_IsDead_) == 0x000048, "Wrong size on BP_ZombieBoss_C_OnRep_IsDead_");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, CallFunc_GetAIController_ReturnValue) == 0x000018, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, K2Node_DynamicCast_AsINT_Anim_BPPlayer) == 0x000030, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::K2Node_DynamicCast_AsINT_Anim_BPPlayer' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRep_IsDead_, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_ZombieBoss_C_OnRep_IsDead_::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnRequestServerInteract
// 0x0048 (0x0048 - 0x0000)
struct BP_ZombieBoss_C_OnRequestServerInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnRequestServerInteract) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnRequestServerInteract");
static_assert(sizeof(BP_ZombieBoss_C_OnRequestServerInteract) == 0x000048, "Wrong size on BP_ZombieBoss_C_OnRequestServerInteract");
static_assert(offsetof(BP_ZombieBoss_C_OnRequestServerInteract, Actor) == 0x000000, "Member 'BP_ZombieBoss_C_OnRequestServerInteract::Actor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRequestServerInteract, Option) == 0x000008, "Member 'BP_ZombieBoss_C_OnRequestServerInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRequestServerInteract, Payload) == 0x000010, "Member 'BP_ZombieBoss_C_OnRequestServerInteract::Payload' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnRequestServerInteract, Result) == 0x000040, "Member 'BP_ZombieBoss_C_OnRequestServerInteract::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnServerExecuteInteract
// 0x0040 (0x0040 - 0x0000)
struct BP_ZombieBoss_C_OnServerExecuteInteract final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ByActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnServerExecuteInteract) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnServerExecuteInteract");
static_assert(sizeof(BP_ZombieBoss_C_OnServerExecuteInteract) == 0x000040, "Wrong size on BP_ZombieBoss_C_OnServerExecuteInteract");
static_assert(offsetof(BP_ZombieBoss_C_OnServerExecuteInteract, Option) == 0x000000, "Member 'BP_ZombieBoss_C_OnServerExecuteInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnServerExecuteInteract, ByActor) == 0x000008, "Member 'BP_ZombieBoss_C_OnServerExecuteInteract::ByActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_OnServerExecuteInteract, Payload) == 0x000010, "Member 'BP_ZombieBoss_C_OnServerExecuteInteract::Payload' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OnStopExecuteInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_OnStopExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OnStopExecuteInteract) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OnStopExecuteInteract");
static_assert(sizeof(BP_ZombieBoss_C_OnStopExecuteInteract) == 0x000008, "Wrong size on BP_ZombieBoss_C_OnStopExecuteInteract");
static_assert(offsetof(BP_ZombieBoss_C_OnStopExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_ZombieBoss_C_OnStopExecuteInteract::InteractingActor' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.Outline
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_Outline final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_Outline) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_Outline");
static_assert(sizeof(BP_ZombieBoss_C_Outline) == 0x000001, "Wrong size on BP_ZombieBoss_C_Outline");
static_assert(offsetof(BP_ZombieBoss_C_Outline, NewValue) == 0x000000, "Member 'BP_ZombieBoss_C_Outline::NewValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.OverrideName
// 0x0010 (0x0010 - 0x0000)
struct BP_ZombieBoss_C_OverrideName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_OverrideName) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_OverrideName");
static_assert(sizeof(BP_ZombieBoss_C_OverrideName) == 0x000010, "Wrong size on BP_ZombieBoss_C_OverrideName");
static_assert(offsetof(BP_ZombieBoss_C_OverrideName, Name_0) == 0x000000, "Member 'BP_ZombieBoss_C_OverrideName::Name_0' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.PlayAttack
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_PlayAttack final
{
public:
	bool                                          CallFunc_IsAlive__Alive_;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_PlayAttack) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_PlayAttack");
static_assert(sizeof(BP_ZombieBoss_C_PlayAttack) == 0x000020, "Wrong size on BP_ZombieBoss_C_PlayAttack");
static_assert(offsetof(BP_ZombieBoss_C_PlayAttack, CallFunc_IsAlive__Alive_) == 0x000000, "Member 'BP_ZombieBoss_C_PlayAttack::CallFunc_IsAlive__Alive_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_PlayAttack, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_ZombieBoss_C_PlayAttack::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.RadiationDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_RadiationDamage final
{
public:
	class AActor*                                 Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_RadiationDamage) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_RadiationDamage");
static_assert(sizeof(BP_ZombieBoss_C_RadiationDamage) == 0x000020, "Wrong size on BP_ZombieBoss_C_RadiationDamage");
static_assert(offsetof(BP_ZombieBoss_C_RadiationDamage, Object) == 0x000000, "Member 'BP_ZombieBoss_C_RadiationDamage::Object' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RadiationDamage, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'BP_ZombieBoss_C_RadiationDamage::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RadiationDamage, K2Node_DynamicCast_AsBP_Player_Character) == 0x000010, "Member 'BP_ZombieBoss_C_RadiationDamage::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RadiationDamage, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_ZombieBoss_C_RadiationDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.RangedAttack
// 0x0018 (0x0018 - 0x0000)
struct BP_ZombieBoss_C_RangedAttack final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_RangedAttack) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_RangedAttack");
static_assert(sizeof(BP_ZombieBoss_C_RangedAttack) == 0x000018, "Wrong size on BP_ZombieBoss_C_RangedAttack");
static_assert(offsetof(BP_ZombieBoss_C_RangedAttack, Target) == 0x000000, "Member 'BP_ZombieBoss_C_RangedAttack::Target' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.ReceiveAnyDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_ReceiveAnyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_ReceiveAnyDamage) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_ReceiveAnyDamage");
static_assert(sizeof(BP_ZombieBoss_C_ReceiveAnyDamage) == 0x000020, "Wrong size on BP_ZombieBoss_C_ReceiveAnyDamage");
static_assert(offsetof(BP_ZombieBoss_C_ReceiveAnyDamage, Damage) == 0x000000, "Member 'BP_ZombieBoss_C_ReceiveAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ReceiveAnyDamage, DamageType) == 0x000008, "Member 'BP_ZombieBoss_C_ReceiveAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ReceiveAnyDamage, InstigatedBy) == 0x000010, "Member 'BP_ZombieBoss_C_ReceiveAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_ReceiveAnyDamage, DamageCauser) == 0x000018, "Member 'BP_ZombieBoss_C_ReceiveAnyDamage::DamageCauser' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.RightArmTrace
// 0x0218 (0x0218 - 0x0000)
struct BP_ZombieBoss_C_RightArmTrace final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0038(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_RightArmTrace) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_RightArmTrace");
static_assert(sizeof(BP_ZombieBoss_C_RightArmTrace) == 0x000218, "Wrong size on BP_ZombieBoss_C_RightArmTrace");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, Temp_object_Variable) == 0x000000, "Member 'BP_ZombieBoss_C_RightArmTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_ZombieBoss_C_RightArmTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000038, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x000120, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000121, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000122, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_BoneName) == 0x0001B0, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0001E0, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_GetObjectClass_ReturnValue) == 0x0001F8, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_Array_Contains_ReturnValue) == 0x000200, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_RightArmTrace, CallFunc_GetClassDisplayName_ReturnValue) == 0x000208, "Member 'BP_ZombieBoss_C_RightArmTrace::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.SetBurning
// 0x0018 (0x0018 - 0x0000)
struct BP_ZombieBoss_C_SetBurning final
{
public:
	bool                                          Burning_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dmg;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_SetBurning) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_SetBurning");
static_assert(sizeof(BP_ZombieBoss_C_SetBurning) == 0x000018, "Wrong size on BP_ZombieBoss_C_SetBurning");
static_assert(offsetof(BP_ZombieBoss_C_SetBurning, Burning_) == 0x000000, "Member 'BP_ZombieBoss_C_SetBurning::Burning_' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_SetBurning, Dmg) == 0x000008, "Member 'BP_ZombieBoss_C_SetBurning::Dmg' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_SetBurning, Actor) == 0x000010, "Member 'BP_ZombieBoss_C_SetBurning::Actor' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.SetInteractDistance
// 0x0020 (0x0020 - 0x0000)
struct BP_ZombieBoss_C_SetInteractDistance final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_SetInteractDistance) == 0x000008, "Wrong alignment on BP_ZombieBoss_C_SetInteractDistance");
static_assert(sizeof(BP_ZombieBoss_C_SetInteractDistance) == 0x000020, "Wrong size on BP_ZombieBoss_C_SetInteractDistance");
static_assert(offsetof(BP_ZombieBoss_C_SetInteractDistance, Target) == 0x000000, "Member 'BP_ZombieBoss_C_SetInteractDistance::Target' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_SetInteractDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_ZombieBoss_C_SetInteractDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.SetInteractOption
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_SetInteractOption final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_SetInteractOption) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_SetInteractOption");
static_assert(sizeof(BP_ZombieBoss_C_SetInteractOption) == 0x000008, "Wrong size on BP_ZombieBoss_C_SetInteractOption");
static_assert(offsetof(BP_ZombieBoss_C_SetInteractOption, Option) == 0x000000, "Member 'BP_ZombieBoss_C_SetInteractOption::Option' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.SetPickupCount
// 0x0008 (0x0008 - 0x0000)
struct BP_ZombieBoss_C_SetPickupCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_SetPickupCount) == 0x000004, "Wrong alignment on BP_ZombieBoss_C_SetPickupCount");
static_assert(sizeof(BP_ZombieBoss_C_SetPickupCount) == 0x000008, "Wrong size on BP_ZombieBoss_C_SetPickupCount");
static_assert(offsetof(BP_ZombieBoss_C_SetPickupCount, NewCount) == 0x000000, "Member 'BP_ZombieBoss_C_SetPickupCount::NewCount' has a wrong offset!");
static_assert(offsetof(BP_ZombieBoss_C_SetPickupCount, Result) == 0x000004, "Member 'BP_ZombieBoss_C_SetPickupCount::Result' has a wrong offset!");

// Function BP_ZombieBoss.BP_ZombieBoss_C.AI Is Dead?
// 0x0001 (0x0001 - 0x0000)
struct BP_ZombieBoss_C_AI_Is_Dead_ final
{
public:
	bool                                          Dead_0;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ZombieBoss_C_AI_Is_Dead_) == 0x000001, "Wrong alignment on BP_ZombieBoss_C_AI_Is_Dead_");
static_assert(sizeof(BP_ZombieBoss_C_AI_Is_Dead_) == 0x000001, "Wrong size on BP_ZombieBoss_C_AI_Is_Dead_");
static_assert(offsetof(BP_ZombieBoss_C_AI_Is_Dead_, Dead_0) == 0x000000, "Member 'BP_ZombieBoss_C_AI_Is_Dead_::Dead_0' has a wrong offset!");

}


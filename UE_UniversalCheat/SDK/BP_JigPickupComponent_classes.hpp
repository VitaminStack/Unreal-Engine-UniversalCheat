#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JigPickupComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "S_RepWeaponAttachment_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JigPickupComponent.BP_JigPickupComponent_C
// 0x00F8 (0x0198 - 0x00A0)
class UBP_JigPickupComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UJigsawItem_DataAsset_C*                ItemDataAsset;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OverrideCount;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatConfig;                                  // 0x00B8(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          EnablePhysics_;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBePicked_;                                      // 0x00D1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_JigMultiplayer_C*                   OwnerMPComp;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AMainLocalAttachment_C*>     InstalledAttachments;                              // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FS_RepWeaponAttachment                 RepAttachments;                                    // 0x0110(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	bool                                          ProcessAttachments_;                               // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepCapacity;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnAttachmentsUpdated;                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FString, class FString>            CustomData;                                        // 0x0148(0x0050)(Edit, BlueprintVisible)

public:
	void CanInteract_(bool* CanBePicked__0);
	void CheckDistanceFromActor();
	void CheckMismatch();
	void ExecuteUbergraph_BP_JigPickupComponent(int32 EntryPoint);
	void FindAttachmentActorByContainerIndex(int32 Index_0, class ABP_AMainLocalAttachment_C** Attachment, bool* Found);
	void FindAttachmentActorByType(const struct FGameplayTag& Type, class ABP_AMainLocalAttachment_C** Attachment, bool* Found);
	void FindAttachmentActorByTypeArr(const struct FGameplayTag& Type, TArray<class ABP_AMainLocalAttachment_C*>* Attachment, bool* Found);
	void FindAttachmentByDataAsset(class UJigsawItem_DataAsset_C* DA, struct FS_RepAttachmentInfo* Output, bool* Found);
	void FindAttachmentDataByType(const struct FGameplayTag& Type, struct FS_RepAttachmentInfo* Output, bool* Found);
	void FindLocalAttachmentByUID(const struct FGuid& UID, class ABP_AMainLocalAttachment_C** Attachment);
	void GetAttachSocketByInContainerIndex(class UJigsawItem_DataAsset_C* Info, int32 InContainerIndex, class FName* Socket);
	void GetCapacity(int32* RepCapacity_0);
	void GetCount(int32* Count);
	void GetCustomData(TArray<class FString>* Keys, TArray<class FString>* Values);
	void GetPickupName(class FText* Result);
	void LogAttachments();
	void ModifyDurability(double MinusDurability);
	void OnAttachmentInstalled(const struct FGuid& MainUID, TArray<struct FS_RepAttachmentInfo>& Attachments);
	void OnExecuteInteract(class AActor* Actor, const struct FGameplayTag& Option);
	void OnRep_CanBePicked_();
	void OnRep_EnablePhysics_();
	void OnRep_RepAttachments();
	void ProcessAttachments();
	void ProcessStartingItems(class UBP_JigMultiplayer_C* MPComp);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SERVER_UpdateAttachmentState(const TArray<struct FGuid>& UID, const struct FGameplayTag& NewState);
	void SetAttachmentsCustomDepth(bool bValue);
	void SetAttachmentState(TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool PreExecuteClientSide_);
	void SetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void SetCount(int32 OverrideCount_0);
	void SetInteractDistance(class AActor* Target);
	void UpdateAttachmentFromMP(class UBP_JigMultiplayer_C* MPComp, const struct FGuid& ItemUID);
	void UpdateAttachments();
	void UpdateAttachmentStateByUID(TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool* Result);
	void ValidateAttachedActor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JigPickupComponent_C">();
	}
	static class UBP_JigPickupComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_JigPickupComponent_C>();
	}
};
static_assert(alignof(UBP_JigPickupComponent_C) == 0x000008, "Wrong alignment on UBP_JigPickupComponent_C");
static_assert(sizeof(UBP_JigPickupComponent_C) == 0x000198, "Wrong size on UBP_JigPickupComponent_C");
static_assert(offsetof(UBP_JigPickupComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_JigPickupComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, ItemDataAsset) == 0x0000A8, "Member 'UBP_JigPickupComponent_C::ItemDataAsset' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, OverrideCount) == 0x0000B0, "Member 'UBP_JigPickupComponent_C::OverrideCount' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, RandomStatConfig) == 0x0000B8, "Member 'UBP_JigPickupComponent_C::RandomStatConfig' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, EnablePhysics_) == 0x0000D0, "Member 'UBP_JigPickupComponent_C::EnablePhysics_' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, CanBePicked_) == 0x0000D1, "Member 'UBP_JigPickupComponent_C::CanBePicked_' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, OwnerMPComp) == 0x0000D8, "Member 'UBP_JigPickupComponent_C::OwnerMPComp' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, CurrentActor) == 0x0000E0, "Member 'UBP_JigPickupComponent_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, InteractingActorLoc) == 0x0000E8, "Member 'UBP_JigPickupComponent_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, InstalledAttachments) == 0x000100, "Member 'UBP_JigPickupComponent_C::InstalledAttachments' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, RepAttachments) == 0x000110, "Member 'UBP_JigPickupComponent_C::RepAttachments' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, ProcessAttachments_) == 0x000130, "Member 'UBP_JigPickupComponent_C::ProcessAttachments_' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, RepCapacity) == 0x000134, "Member 'UBP_JigPickupComponent_C::RepCapacity' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, OnAttachmentsUpdated) == 0x000138, "Member 'UBP_JigPickupComponent_C::OnAttachmentsUpdated' has a wrong offset!");
static_assert(offsetof(UBP_JigPickupComponent_C, CustomData) == 0x000148, "Member 'UBP_JigPickupComponent_C::CustomData' has a wrong offset!");

}


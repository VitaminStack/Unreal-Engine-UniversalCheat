#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FirearmPickup

#include "Basic.hpp"

#include "BP_FirearmPickup_classes.hpp"
#include "BP_FirearmPickup_parameters.hpp"


namespace SDK
{

// Function BP_FirearmPickup.BP_FirearmPickup_C.ChamberWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ActiveWeapons                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    FromFireFunction                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BulletID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::ChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& ActiveWeapons, bool FromFireFunction, bool* Result, class FName* BulletID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ChamberWeapon");

	Params::BP_FirearmPickup_C_ChamberWeapon Parms{};

	Parms.MPComp = MPComp;
	Parms.ActiveWeapons = std::move(ActiveWeapons);
	Parms.FromFireFunction = FromFireFunction;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (BulletID != nullptr)
		*BulletID = Parms.BulletID;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.CheckAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::CheckAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "CheckAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Client_HitUI
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Client_HitUI(double Damage, const struct FLinearColor& Colour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Client_HitUI");

	Params::BP_FirearmPickup_C_Client_HitUI Parms{};

	Parms.Damage = Damage;
	Parms.Colour = std::move(Colour);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.CriticalHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     FloatingDmgColour                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::CriticalHit(double Damage, double* NewDamage, struct FLinearColor* FloatingDmgColour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "CriticalHit");

	Params::BP_FirearmPickup_C_CriticalHit Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (NewDamage != nullptr)
		*NewDamage = Parms.NewDamage;

	if (FloatingDmgColour != nullptr)
		*FloatingDmgColour = std::move(Parms.FloatingDmgColour);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.DamageMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Headshot_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::DamageMultiplier(bool Headshot_, double* Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "DamageMultiplier");

	Params::BP_FirearmPickup_C_DamageMultiplier Parms{};

	Parms.Headshot_ = Headshot_;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage != nullptr)
		*Damage = Parms.Damage;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.EffectiveDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::EffectiveDamage(double Damage, double* NewDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "EffectiveDamage");

	Params::BP_FirearmPickup_C_EffectiveDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (NewDamage != nullptr)
		*NewDamage = Parms.NewDamage;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Event_FireRate
// (BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::Event_FireRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Event_FireRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ExecuteUbergraph_BP_FirearmPickup
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::ExecuteUbergraph_BP_FirearmPickup(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ExecuteUbergraph_BP_FirearmPickup");

	Params::BP_FirearmPickup_C_ExecuteUbergraph_BP_FirearmPickup Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FindAttachmentStats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StatValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FindAttachmentStats(const struct FGameplayTag& Stat, bool* Found, double* StatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FindAttachmentStats");

	Params::BP_FirearmPickup_C_FindAttachmentStats Parms{};

	Parms.Stat = std::move(Stat);

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (StatValue != nullptr)
		*StatValue = Parms.StatValue;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FindSpecificAttachmentStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Found_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StatValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FindSpecificAttachmentStat(const struct FGameplayTag& Attachment, const struct FGameplayTag& Stat, bool* Found_, double* StatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FindSpecificAttachmentStat");

	Params::BP_FirearmPickup_C_FindSpecificAttachmentStat Parms{};

	Parms.Attachment = std::move(Attachment);
	Parms.Stat = std::move(Stat);

	UObject::ProcessEvent(Func, &Parms);

	if (Found_ != nullptr)
		*Found_ = Parms.Found_;

	if (StatValue != nullptr)
		*StatValue = Parms.StatValue;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FindStat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     StatTag                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MinValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FindStat(const struct FGameplayTag& StatTag, bool* Found, float* MinValue, double* MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FindStat");

	Params::BP_FirearmPickup_C_FindStat Parms{};

	Parms.StatTag = std::move(StatTag);

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (MinValue != nullptr)
		*MinValue = Parms.MinValue;

	if (MaxValue != nullptr)
		*MaxValue = Parms.MaxValue;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FirearmTypeMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Headshot_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FirearmTypeMultiplier(bool Headshot_, double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FirearmTypeMultiplier");

	Params::BP_FirearmPickup_C_FirearmTypeMultiplier Parms{};

	Parms.Headshot_ = Headshot_;

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FireBullet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::FireBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FireBullet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FireSurfaceHit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        Surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FireSurfaceHit(const struct FVector& ImpactPoint, class AActor* HitActor, const struct FRotator& Rotation, EPhysicalSurface Surface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FireSurfaceHit");

	Params::BP_FirearmPickup_C_FireSurfaceHit Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.HitActor = HitActor;
	Parms.Rotation = std::move(Rotation);
	Parms.Surface = Surface;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.FireTrace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::FireTrace(double Spread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "FireTrace");

	Params::BP_FirearmPickup_C_FireTrace Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.GetHorizontalRecoilStrength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Strength                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::GetHorizontalRecoilStrength(double* Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "GetHorizontalRecoilStrength");

	Params::BP_FirearmPickup_C_GetHorizontalRecoilStrength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Strength != nullptr)
		*Strength = Parms.Strength;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.GetNewMagInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UJSI_Slot_C*                      NewMag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::GetNewMagInfo(class UJSI_Slot_C* NewMag, double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "GetNewMagInfo");

	Params::BP_FirearmPickup_C_GetNewMagInfo Parms{};

	Parms.NewMag = NewMag;

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.GetVerticalRecoilStrength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Strength                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::GetVerticalRecoilStrength(double* Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "GetVerticalRecoilStrength");

	Params::BP_FirearmPickup_C_GetVerticalRecoilStrength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Strength != nullptr)
		*Strength = Parms.Strength;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_AttachmentInstalled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            MainUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_RepAttachmentInfo>     Attachments                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     AttachmentType                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_AttachmentInstalled(const struct FGuid& MainUID, TArray<struct FS_RepAttachmentInfo>& Attachments, bool* Result, struct FGameplayTag* AttachmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_AttachmentInstalled");

	Params::BP_FirearmPickup_C_Jig_AttachmentInstalled Parms{};

	Parms.MainUID = std::move(MainUID);
	Parms.Attachments = std::move(Attachments);

	UObject::ProcessEvent(Func, &Parms);

	Attachments = std::move(Parms.Attachments);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (AttachmentType != nullptr)
		*AttachmentType = std::move(Parms.AttachmentType);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_AttachmentRemoved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_RepAttachmentInfo>     Attachments                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     AttachmentType                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_AttachmentRemoved(TArray<struct FS_RepAttachmentInfo>& Attachments, bool* Result, struct FGameplayTag* AttachmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_AttachmentRemoved");

	Params::BP_FirearmPickup_C_Jig_AttachmentRemoved Parms{};

	Parms.Attachments = std::move(Attachments);

	UObject::ProcessEvent(Func, &Parms);

	Attachments = std::move(Parms.Attachments);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (AttachmentType != nullptr)
		*AttachmentType = std::move(Parms.AttachmentType);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_CanChamberWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PlayerSlots                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_CanChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_CanChamberWeapon");

	Params::BP_FirearmPickup_C_Jig_CanChamberWeapon Parms{};

	Parms.MPComp = MPComp;
	Parms.PlayerSlots = std::move(PlayerSlots);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_CheckCanReload
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PlayerSlots                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ContainerMag                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ReloadMontage                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HasInternalMag                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanChamber_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      ReloadWith                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     LoopReloadAnim                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_CheckCanReload(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result, class UJSIContainer_C** ContainerMag, class UAnimMontage** ReloadMontage, bool* HasInternalMag, bool* CanChamber_, class UJSI_Slot_C** ReloadWith, class UAnimMontage** LoopReloadAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_CheckCanReload");

	Params::BP_FirearmPickup_C_Jig_CheckCanReload Parms{};

	Parms.MPComp = MPComp;
	Parms.PlayerSlots = std::move(PlayerSlots);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ContainerMag != nullptr)
		*ContainerMag = Parms.ContainerMag;

	if (ReloadMontage != nullptr)
		*ReloadMontage = Parms.ReloadMontage;

	if (HasInternalMag != nullptr)
		*HasInternalMag = Parms.HasInternalMag;

	if (CanChamber_ != nullptr)
		*CanChamber_ = Parms.CanChamber_;

	if (ReloadWith != nullptr)
		*ReloadWith = Parms.ReloadWith;

	if (LoopReloadAnim != nullptr)
		*LoopReloadAnim = Parms.LoopReloadAnim;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_ExecuteChamberWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  MPComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PlayerSlots                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ChamberMontage                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_ExecuteChamberWeapon(class UActorComponent* MPComp, const struct FGameplayTag& PlayerSlots, bool* Result, class UAnimMontage** ChamberMontage, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_ExecuteChamberWeapon");

	Params::BP_FirearmPickup_C_Jig_ExecuteChamberWeapon Parms{};

	Parms.MPComp = MPComp;
	Parms.PlayerSlots = std::move(PlayerSlots);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ChamberMontage != nullptr)
		*ChamberMontage = Parms.ChamberMontage;

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetADSSocketLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SocketLoc                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SocketFound                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetADSSocketLocation(struct FVector* SocketLoc, bool* SocketFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetADSSocketLocation");

	Params::BP_FirearmPickup_C_Jig_GetADSSocketLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SocketLoc != nullptr)
		*SocketLoc = std::move(Parms.SocketLoc);

	if (SocketFound != nullptr)
		*SocketFound = Parms.SocketFound;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetAttachmentActiveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Result                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetAttachmentActiveState(struct FGameplayTag* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetAttachmentActiveState");

	Params::BP_FirearmPickup_C_Jig_GetAttachmentActiveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetAttachmentArrayByType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_AMainLocalAttachment_C*>Attachment                                             (Parm, OutParm)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetAttachmentArrayByType(const struct FGameplayTag& Type, TArray<class ABP_AMainLocalAttachment_C*>* Attachment, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetAttachmentArrayByType");

	Params::BP_FirearmPickup_C_Jig_GetAttachmentArrayByType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = std::move(Parms.Attachment);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetAttachmentByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_AMainLocalAttachment_C*       Attachment                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetAttachmentByType(const struct FGameplayTag& Type, class ABP_AMainLocalAttachment_C** Attachment, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetAttachmentByType");

	Params::BP_FirearmPickup_C_Jig_GetAttachmentByType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	if (Attachment != nullptr)
		*Attachment = Parms.Attachment;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetAttachmentInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            UID                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJigsawItem_DataAsset_C*          AttachmentInfo                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetAttachmentInfo(struct FGuid* UID, class UJigsawItem_DataAsset_C** AttachmentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetAttachmentInfo");

	Params::BP_FirearmPickup_C_Jig_GetAttachmentInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UID != nullptr)
		*UID = std::move(Parms.UID);

	if (AttachmentInfo != nullptr)
		*AttachmentInfo = Parms.AttachmentInfo;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetAvailableAttachmentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            States                                                 (Parm, OutParm)

void ABP_FirearmPickup_C::Jig_GetAvailableAttachmentStates(struct FGameplayTagContainer* States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetAvailableAttachmentStates");

	Params::BP_FirearmPickup_C_Jig_GetAvailableAttachmentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (States != nullptr)
		*States = std::move(Parms.States);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetEquipMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanChamber_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     EquipMontage                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetEquipMontage(bool CanChamber_, class UAnimMontage** EquipMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetEquipMontage");

	Params::BP_FirearmPickup_C_Jig_GetEquipMontage Parms{};

	Parms.CanChamber_ = CanChamber_;

	UObject::ProcessEvent(Func, &Parms);

	if (EquipMontage != nullptr)
		*EquipMontage = Parms.EquipMontage;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetPendingMag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FindMagIfNoPending_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AMainLocalAttachment_C*       MagRef                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetPendingMag(bool FindMagIfNoPending_, class ABP_AMainLocalAttachment_C** MagRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetPendingMag");

	Params::BP_FirearmPickup_C_Jig_GetPendingMag Parms{};

	Parms.FindMagIfNoPending_ = FindMagIfNoPending_;

	UObject::ProcessEvent(Func, &Parms);

	if (MagRef != nullptr)
		*MagRef = Parms.MagRef;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_GetPrimitiveComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_GetPrimitiveComponent(class UPrimitiveComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_GetPrimitiveComponent");

	Params::BP_FirearmPickup_C_Jig_GetPrimitiveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_OnAttachmentSnapInspector
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::Jig_OnAttachmentSnapInspector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_OnAttachmentSnapInspector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_OnMontageNotify
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_OnMontageNotify(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_OnMontageNotify");

	Params::BP_FirearmPickup_C_Jig_OnMontageNotify Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_SetAttachmentActiveState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_SetAttachmentActiveState(const struct FGameplayTag& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_SetAttachmentActiveState");

	Params::BP_FirearmPickup_C_Jig_SetAttachmentActiveState Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_SetAttachmentInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJigsawItem_DataAsset_C*          AttachmentInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_SetAttachmentInfo(const struct FGuid& UID, class UJigsawItem_DataAsset_C* AttachmentInfo, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_SetAttachmentInfo");

	Params::BP_FirearmPickup_C_Jig_SetAttachmentInfo Parms{};

	Parms.UID = std::move(UID);
	Parms.AttachmentInfo = AttachmentInfo;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_SetAttachmentState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGuid>                    UID                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTag                     NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    PreExecuteClientSide_                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_SetAttachmentState(const TArray<struct FGuid>& UID, const struct FGameplayTag& NewState, bool PreExecuteClientSide_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_SetAttachmentState");

	Params::BP_FirearmPickup_C_Jig_SetAttachmentState Parms{};

	Parms.UID = std::move(UID);
	Parms.NewState = std::move(NewState);
	Parms.PreExecuteClientSide_ = PreExecuteClientSide_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_SetPendingMag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AMainLocalAttachment_C*       MagRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UJigsawItem_DataAsset_C*          DA                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_SetPendingMag(class ABP_AMainLocalAttachment_C* MagRef, class UJigsawItem_DataAsset_C* DA, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_SetPendingMag");

	Params::BP_FirearmPickup_C_Jig_SetPendingMag Parms{};

	Parms.MagRef = MagRef;
	Parms.DA = DA;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_StartReloading
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  MPCom                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  MagContainer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      WithMag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Jig_StartReloading(class UActorComponent* MPCom, class UJSIContainer_C* MagContainer, class UJSI_Slot_C* WithMag, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_StartReloading");

	Params::BP_FirearmPickup_C_Jig_StartReloading Parms{};

	Parms.MPCom = MPCom;
	Parms.MagContainer = MagContainer;
	Parms.WithMag = WithMag;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Jig_ToggleAttachmentActiveState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::Jig_ToggleAttachmentActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Jig_ToggleAttachmentActiveState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.JigMP_OnItemConsumed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRepItemInfo                     ConsumedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Remaining                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     InsideOf                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             FromContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CustomData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallbackToPlayer_                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "JigMP_OnItemConsumed");

	Params::BP_FirearmPickup_C_JigMP_OnItemConsumed Parms{};

	Parms.ConsumedItem = std::move(ConsumedItem);
	Parms.Amount = Amount;
	Parms.Remaining = Remaining;
	Parms.InsideOf = std::move(InsideOf);
	Parms.FromContainer = FromContainer;
	Parms.CustomData = std::move(CustomData);
	Parms.CallbackToPlayer_ = CallbackToPlayer_;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.JigMP_OnMainContainerItemRemoved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ContainerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRepItemInfo                     ItemRemovedInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "JigMP_OnMainContainerItemRemoved");

	Params::BP_FirearmPickup_C_JigMP_OnMainContainerItemRemoved Parms{};

	Parms.FromContainerUID = std::move(FromContainerUID);
	Parms.ItemUID = std::move(ItemUID);
	Parms.ContainerName = ContainerName;
	Parms.ItemRemovedInfo = std::move(ItemRemovedInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.JigMP_OnUpdateChamberUID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            NewUID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "JigMP_OnUpdateChamberUID");

	Params::BP_FirearmPickup_C_JigMP_OnUpdateChamberUID Parms{};

	Parms.NewUID = std::move(NewUID);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Local_CheckCanReload
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  PlayerComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ActiveSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ContainerMag                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanChamber_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      ReloadWith                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Local_CheckCanReload(class UActorComponent* PlayerComp, const struct FGameplayTag& ActiveSlot, bool* Result, class UJSIContainer_C** ContainerMag, bool* CanChamber_, class UJSI_Slot_C** ReloadWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Local_CheckCanReload");

	Params::BP_FirearmPickup_C_Local_CheckCanReload Parms{};

	Parms.PlayerComp = PlayerComp;
	Parms.ActiveSlot = std::move(ActiveSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ContainerMag != nullptr)
		*ContainerMag = Parms.ContainerMag;

	if (CanChamber_ != nullptr)
		*CanChamber_ = Parms.CanChamber_;

	if (ReloadWith != nullptr)
		*ReloadWith = Parms.ReloadWith;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Local_CheckCanReloadInternal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  PlayerComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ActiveSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ContainerMag                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanChamber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      ReloadWith                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Local_CheckCanReloadInternal(class UActorComponent* PlayerComp, const struct FGameplayTag& ActiveSlot, bool* Result, class UJSIContainer_C** ContainerMag, bool* CanChamber, class UJSI_Slot_C** ReloadWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Local_CheckCanReloadInternal");

	Params::BP_FirearmPickup_C_Local_CheckCanReloadInternal Parms{};

	Parms.PlayerComp = PlayerComp;
	Parms.ActiveSlot = std::move(ActiveSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ContainerMag != nullptr)
		*ContainerMag = Parms.ContainerMag;

	if (CanChamber != nullptr)
		*CanChamber = Parms.CanChamber;

	if (ReloadWith != nullptr)
		*ReloadWith = Parms.ReloadWith;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Local_StartShooting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JigMultiplayer_C*             PlayerMPComp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ActiveWeapon                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    HipFire__0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Local_StartShooting(class UBP_JigMultiplayer_C* PlayerMPComp, const struct FGameplayTag& ActiveWeapon, bool HipFire__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Local_StartShooting");

	Params::BP_FirearmPickup_C_Local_StartShooting Parms{};

	Parms.PlayerMPComp = PlayerMPComp;
	Parms.ActiveWeapon = std::move(ActiveWeapon);
	Parms.HipFire__0 = HipFire__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Local_StopShooting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DontSendRPC_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Local_StopShooting(bool DontSendRPC_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Local_StopShooting");

	Params::BP_FirearmPickup_C_Local_StopShooting Parms{};

	Parms.DontSendRPC_ = DontSendRPC_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.LocalStartReload
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  PlayerComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ContainerMag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      WithMag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::LocalStartReload(class UActorComponent* PlayerComp, class UJSIContainer_C* ContainerMag, class UJSI_Slot_C* WithMag, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "LocalStartReload");

	Params::BP_FirearmPickup_C_LocalStartReload Parms{};

	Parms.PlayerComp = PlayerComp;
	Parms.ContainerMag = ContainerMag;
	Parms.WithMag = WithMag;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.LocalStartReloadInternal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  PlayerComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ContainerMag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::LocalStartReloadInternal(class UActorComponent* PlayerComp, class UJSIContainer_C* ContainerMag, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "LocalStartReloadInternal");

	Params::BP_FirearmPickup_C_LocalStartReloadInternal Parms{};

	Parms.PlayerComp = PlayerComp;
	Parms.ContainerMag = ContainerMag;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.MC_SpawnTrail
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MuzzleLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPointLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FirearmPickup_C::MC_SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "MC_SpawnTrail");

	Params::BP_FirearmPickup_C_MC_SpawnTrail Parms{};

	Parms.MuzzleLocation = std::move(MuzzleLocation);
	Parms.EndPointLocation = std::move(EndPointLocation);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.MC_WeaponEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::MC_WeaponEffects(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "MC_WeaponEffects");

	Params::BP_FirearmPickup_C_MC_WeaponEffects Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.MC_WeaponShot
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Started_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::MC_WeaponShot(bool Started_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "MC_WeaponShot");

	Params::BP_FirearmPickup_C_MC_WeaponShot Parms{};

	Parms.Started_ = Started_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.MuzzleDurability
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AttachmentFound_                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::MuzzleDurability(bool* AttachmentFound_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "MuzzleDurability");

	Params::BP_FirearmPickup_C_MuzzleDurability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttachmentFound_ != nullptr)
		*AttachmentFound_ = Parms.AttachmentFound_;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.MuzzleEffects
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::MuzzleEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "MuzzleEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnAttachmentsUpdated
// (BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::OnAttachmentsUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnAttachmentsUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnBlendOut_336AF8914848A4799421D89C590F8176
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::OnBlendOut_336AF8914848A4799421D89C590F8176(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnBlendOut_336AF8914848A4799421D89C590F8176");

	Params::BP_FirearmPickup_C_OnBlendOut_336AF8914848A4799421D89C590F8176 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnCompleted_336AF8914848A4799421D89C590F8176
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::OnCompleted_336AF8914848A4799421D89C590F8176(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnCompleted_336AF8914848A4799421D89C590F8176");

	Params::BP_FirearmPickup_C_OnCompleted_336AF8914848A4799421D89C590F8176 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnInterrupted_336AF8914848A4799421D89C590F8176
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::OnInterrupted_336AF8914848A4799421D89C590F8176(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnInterrupted_336AF8914848A4799421D89C590F8176");

	Params::BP_FirearmPickup_C_OnInterrupted_336AF8914848A4799421D89C590F8176 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnNotifyBegin_336AF8914848A4799421D89C590F8176
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::OnNotifyBegin_336AF8914848A4799421D89C590F8176(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnNotifyBegin_336AF8914848A4799421D89C590F8176");

	Params::BP_FirearmPickup_C_OnNotifyBegin_336AF8914848A4799421D89C590F8176 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.OnNotifyEnd_336AF8914848A4799421D89C590F8176
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::OnNotifyEnd_336AF8914848A4799421D89C590F8176(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "OnNotifyEnd_336AF8914848A4799421D89C590F8176");

	Params::BP_FirearmPickup_C_OnNotifyEnd_336AF8914848A4799421D89C590F8176 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ProjectileTraceFromCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::ProjectileTraceFromCamera(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ProjectileTraceFromCamera");

	Params::BP_FirearmPickup_C_ProjectileTraceFromCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.RecoilTL__FinishedFunc
// (BlueprintEvent)

void ABP_FirearmPickup_C::RecoilTL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "RecoilTL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.RecoilTL__UpdateFunc
// (BlueprintEvent)

void ABP_FirearmPickup_C::RecoilTL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "RecoilTL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ReduceDurability
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Reduced_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::ReduceDurability(bool* Reduced_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ReduceDurability");

	Params::BP_FirearmPickup_C_ReduceDurability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Reduced_ != nullptr)
		*Reduced_ = Parms.Reduced_;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ResetRecoilTL__FinishedFunc
// (BlueprintEvent)

void ABP_FirearmPickup_C::ResetRecoilTL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ResetRecoilTL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ResetRecoilTL__UpdateFunc
// (BlueprintEvent)

void ABP_FirearmPickup_C::ResetRecoilTL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ResetRecoilTL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.SERVER_DamageEvent
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Headshot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::SERVER_DamageEvent(bool Headshot, class AActor* DamagedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "SERVER_DamageEvent");

	Params::BP_FirearmPickup_C_SERVER_DamageEvent Parms{};

	Parms.Headshot = Headshot;
	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.SpawnTrail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MuzzleLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPointLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FirearmPickup_C::SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "SpawnTrail");

	Params::BP_FirearmPickup_C_SpawnTrail Parms{};

	Parms.MuzzleLocation = std::move(MuzzleLocation);
	Parms.EndPointLocation = std::move(EndPointLocation);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.StartRecoil
// (BlueprintCallable, BlueprintEvent)

void ABP_FirearmPickup_C::StartRecoil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "StartRecoil");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Svr_SpawnTrail
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MuzzleLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPointLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_FirearmPickup_C::Svr_SpawnTrail(const struct FVector& MuzzleLocation, const struct FVector& EndPointLocation, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Svr_SpawnTrail");

	Params::BP_FirearmPickup_C_Svr_SpawnTrail Parms{};

	Parms.MuzzleLocation = std::move(MuzzleLocation);
	Parms.EndPointLocation = std::move(EndPointLocation);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Svr_WeaponEffects
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Svr_WeaponEffects(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Svr_WeaponEffects");

	Params::BP_FirearmPickup_C_Svr_WeaponEffects Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Svr_WeaponShot
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Started_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Svr_WeaponShot(bool Started_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Svr_WeaponShot");

	Params::BP_FirearmPickup_C_Svr_WeaponShot Parms{};

	Parms.Started_ = Started_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Trace_BodyImpact
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Trace_BodyImpact(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Trace_BodyImpact");

	Params::BP_FirearmPickup_C_Trace_BodyImpact Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Trace_Headshot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Trace_Headshot(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Trace_Headshot");

	Params::BP_FirearmPickup_C_Trace_Headshot Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Trace_Impact
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Trace_Impact(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Trace_Impact");

	Params::BP_FirearmPickup_C_Trace_Impact Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.Trace_ImpactBulletHole
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::Trace_ImpactBulletHole(const struct FVector& Location, const struct FRotator& Rotation, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "Trace_ImpactBulletHole");

	Params::BP_FirearmPickup_C_Trace_ImpactBulletHole Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.UpdatePlayerPitch&Yaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::UpdatePlayerPitch_Yaw(double Pitch, double Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "UpdatePlayerPitch&Yaw");

	Params::BP_FirearmPickup_C_UpdatePlayerPitch_Yaw Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.UpdateStat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     StatTag                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  NewStatValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Updated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StatValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::UpdateStat(const struct FGameplayTag& StatTag, double NewStatValue, bool* Updated, double* StatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "UpdateStat");

	Params::BP_FirearmPickup_C_UpdateStat Parms{};

	Parms.StatTag = std::move(StatTag);
	Parms.NewStatValue = NewStatValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Updated != nullptr)
		*Updated = Parms.Updated;

	if (StatValue != nullptr)
		*StatValue = Parms.StatValue;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.WeaponRecoilValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Vertical                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Horizontal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FirearmPickup_C::WeaponRecoilValues(double* Vertical, double* Horizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "WeaponRecoilValues");

	Params::BP_FirearmPickup_C_WeaponRecoilValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Vertical != nullptr)
		*Vertical = Parms.Vertical;

	if (Horizontal != nullptr)
		*Horizontal = Parms.Horizontal;
}


// Function BP_FirearmPickup.BP_FirearmPickup_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FirearmPickup_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FirearmPickup_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}


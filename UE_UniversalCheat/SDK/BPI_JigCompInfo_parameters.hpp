#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_JigCompInfo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_GetType
// 0x0008 (0x0008 - 0x0000)
struct BPI_JigCompInfo_C_JigCom_GetType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigCom_GetType) == 0x000004, "Wrong alignment on BPI_JigCompInfo_C_JigCom_GetType");
static_assert(sizeof(BPI_JigCompInfo_C_JigCom_GetType) == 0x000008, "Wrong size on BPI_JigCompInfo_C_JigCom_GetType");
static_assert(offsetof(BPI_JigCompInfo_C_JigCom_GetType, Type) == 0x000000, "Member 'BPI_JigCompInfo_C_JigCom_GetType::Type' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsLootContainer
// 0x0001 (0x0001 - 0x0000)
struct BPI_JigCompInfo_C_JigCom_IsLootContainer final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigCom_IsLootContainer) == 0x000001, "Wrong alignment on BPI_JigCompInfo_C_JigCom_IsLootContainer");
static_assert(sizeof(BPI_JigCompInfo_C_JigCom_IsLootContainer) == 0x000001, "Wrong size on BPI_JigCompInfo_C_JigCom_IsLootContainer");
static_assert(offsetof(BPI_JigCompInfo_C_JigCom_IsLootContainer, Result) == 0x000000, "Member 'BPI_JigCompInfo_C_JigCom_IsLootContainer::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsMainCharacter
// 0x0001 (0x0001 - 0x0000)
struct BPI_JigCompInfo_C_JigCom_IsMainCharacter final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigCom_IsMainCharacter) == 0x000001, "Wrong alignment on BPI_JigCompInfo_C_JigCom_IsMainCharacter");
static_assert(sizeof(BPI_JigCompInfo_C_JigCom_IsMainCharacter) == 0x000001, "Wrong size on BPI_JigCompInfo_C_JigCom_IsMainCharacter");
static_assert(offsetof(BPI_JigCompInfo_C_JigCom_IsMainCharacter, Result) == 0x000000, "Member 'BPI_JigCompInfo_C_JigCom_IsMainCharacter::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsPickup
// 0x0001 (0x0001 - 0x0000)
struct BPI_JigCompInfo_C_JigCom_IsPickup final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigCom_IsPickup) == 0x000001, "Wrong alignment on BPI_JigCompInfo_C_JigCom_IsPickup");
static_assert(sizeof(BPI_JigCompInfo_C_JigCom_IsPickup) == 0x000001, "Wrong size on BPI_JigCompInfo_C_JigCom_IsPickup");
static_assert(offsetof(BPI_JigCompInfo_C_JigCom_IsPickup, Result) == 0x000000, "Member 'BPI_JigCompInfo_C_JigCom_IsPickup::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsVendor
// 0x0001 (0x0001 - 0x0000)
struct BPI_JigCompInfo_C_JigCom_IsVendor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigCom_IsVendor) == 0x000001, "Wrong alignment on BPI_JigCompInfo_C_JigCom_IsVendor");
static_assert(sizeof(BPI_JigCompInfo_C_JigCom_IsVendor) == 0x000001, "Wrong size on BPI_JigCompInfo_C_JigCom_IsVendor");
static_assert(offsetof(BPI_JigCompInfo_C_JigCom_IsVendor, Result) == 0x000000, "Member 'BPI_JigCompInfo_C_JigCom_IsVendor::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_AddNewPendingRequest
// 0x0010 (0x0010 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_AddNewPendingRequest final
{
public:
	class UJSI_Slot_C*                            NewItem;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_AddNewPendingRequest) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_AddNewPendingRequest");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_AddNewPendingRequest) == 0x000010, "Wrong size on BPI_JigCompInfo_C_JigComp_AddNewPendingRequest");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_AddNewPendingRequest, NewItem) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_AddNewPendingRequest::NewItem' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_AddNewPendingRequest, Result) == 0x000008, "Member 'BPI_JigCompInfo_C_JigComp_AddNewPendingRequest::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestChamberUID
// 0x0014 (0x0014 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_CallRequestChamberUID final
{
public:
	struct FGuid                                  ChamberContainerUID;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_CallRequestChamberUID) == 0x000004, "Wrong alignment on BPI_JigCompInfo_C_JigComp_CallRequestChamberUID");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_CallRequestChamberUID) == 0x000014, "Wrong size on BPI_JigCompInfo_C_JigComp_CallRequestChamberUID");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestChamberUID, ChamberContainerUID) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestChamberUID::ChamberContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestChamberUID, Result) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestChamberUID::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestReload
// 0x0058 (0x0058 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_CallRequestReload final
{
public:
	struct FGuid                                  UnloadUID;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  UnloadToContainerUID;                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FinalRot;                                          // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ReloadUID;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ReloadToContainerUID;                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 WeaponRef;                                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_CallRequestReload) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_CallRequestReload");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_CallRequestReload) == 0x000058, "Wrong size on BPI_JigCompInfo_C_JigComp_CallRequestReload");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, UnloadUID) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::UnloadUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, UnloadToContainerUID) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::UnloadToContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, ToIndex) == 0x000020, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::ToIndex' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, FinalRot) == 0x000024, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::FinalRot' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, ReloadUID) == 0x000028, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::ReloadUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, ReloadToContainerUID) == 0x000038, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::ReloadToContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, WeaponRef) == 0x000048, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::WeaponRef' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReload, Result) == 0x000050, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReload::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestReloadInternal
// 0x0028 (0x0028 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal final
{
public:
	struct FGuid                                  MagContainerUID;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  AmmoToAdd;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCap;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal) == 0x000004, "Wrong alignment on BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal) == 0x000028, "Wrong size on BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal, MagContainerUID) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal::MagContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal, AmmoToAdd) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal::AmmoToAdd' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal, MaxCap) == 0x000020, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal::MaxCap' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal, Result) == 0x000024, "Member 'BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallServerChamberWeapon
// 0x0038 (0x0038 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon final
{
public:
	struct FGuid                                  ChamberContainerUID;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  MagContainerUID;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  BulletToChamberUID;                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChamberContainerIndex;                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SendChamberUID_;                                   // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0035(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon) == 0x000004, "Wrong alignment on BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon) == 0x000038, "Wrong size on BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, ChamberContainerUID) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::ChamberContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, MagContainerUID) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::MagContainerUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, BulletToChamberUID) == 0x000020, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::BulletToChamberUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, ChamberContainerIndex) == 0x000030, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::ChamberContainerIndex' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, SendChamberUID_) == 0x000034, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::SendChamberUID_' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon, Result) == 0x000035, "Member 'BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallServerConsumeRequest
// 0x0038 (0x0038 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest final
{
public:
	class UActorComponent*                        TargetComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  ItemUID;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomData;                                        // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest) == 0x000038, "Wrong size on BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest, TargetComp) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest::TargetComp' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest, ItemUID) == 0x000008, "Member 'BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest::ItemUID' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest, Amount) == 0x000018, "Member 'BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest::Amount' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest, CustomData) == 0x000020, "Member 'BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest::CustomData' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest, Result) == 0x000030, "Member 'BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryEquip
// 0x0018 (0x0018 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_ContextTryEquip final
{
public:
	class UJSI_Slot_C*                            Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        RootContainer;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_ContextTryEquip) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_ContextTryEquip");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_ContextTryEquip) == 0x000018, "Wrong size on BPI_JigCompInfo_C_JigComp_ContextTryEquip");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryEquip, Item) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryEquip::Item' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryEquip, RootContainer) == 0x000008, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryEquip::RootContainer' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryEquip, Result) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryEquip::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryUnequip
// 0x0018 (0x0018 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_ContextTryUnequip final
{
public:
	class UJSI_Slot_C*                            Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        RootContainer;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_ContextTryUnequip) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_ContextTryUnequip");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_ContextTryUnequip) == 0x000018, "Wrong size on BPI_JigCompInfo_C_JigComp_ContextTryUnequip");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnequip, Item) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnequip::Item' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnequip, RootContainer) == 0x000008, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnequip::RootContainer' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnequip, Result) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnequip::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryUnloadAmmo
// 0x0018 (0x0018 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo final
{
public:
	class UJSI_Slot_C*                            Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        RootContainer;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo) == 0x000018, "Wrong size on BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo, Item) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo::Item' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo, RootContainer) == 0x000008, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo::RootContainer' has a wrong offset!");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo, Result) == 0x000010, "Member 'BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo::Result' has a wrong offset!");

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_GetInventoryWidgetRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef) == 0x000008, "Wrong alignment on BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef");
static_assert(sizeof(BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef) == 0x000008, "Wrong size on BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef");
static_assert(offsetof(BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef, UserWidget) == 0x000000, "Member 'BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef::UserWidget' has a wrong offset!");

}


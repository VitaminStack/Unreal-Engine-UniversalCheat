#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintSubsystem

#include "Basic.hpp"


namespace SDK::Params
{

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystem.K2_OnTick
// 0x0004 (0x0004 - 0x0000)
struct BlueprintGameInstanceSubsystem_K2_OnTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameInstanceSubsystem_K2_OnTick) == 0x000004, "Wrong alignment on BlueprintGameInstanceSubsystem_K2_OnTick");
static_assert(sizeof(BlueprintGameInstanceSubsystem_K2_OnTick) == 0x000004, "Wrong size on BlueprintGameInstanceSubsystem_K2_OnTick");
static_assert(offsetof(BlueprintGameInstanceSubsystem_K2_OnTick, DeltaTime) == 0x000000, "Member 'BlueprintGameInstanceSubsystem_K2_OnTick::DeltaTime' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystem.SetTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct BlueprintGameInstanceSubsystem_SetTickEnabled final
{
public:
	bool                                          bEnableTick;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameInstanceSubsystem_SetTickEnabled) == 0x000001, "Wrong alignment on BlueprintGameInstanceSubsystem_SetTickEnabled");
static_assert(sizeof(BlueprintGameInstanceSubsystem_SetTickEnabled) == 0x000001, "Wrong size on BlueprintGameInstanceSubsystem_SetTickEnabled");
static_assert(offsetof(BlueprintGameInstanceSubsystem_SetTickEnabled, bEnableTick) == 0x000000, "Member 'BlueprintGameInstanceSubsystem_SetTickEnabled::bEnableTick' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystem.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BlueprintGameInstanceSubsystem_GetGameInstance final
{
public:
	class UGameInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameInstanceSubsystem_GetGameInstance) == 0x000008, "Wrong alignment on BlueprintGameInstanceSubsystem_GetGameInstance");
static_assert(sizeof(BlueprintGameInstanceSubsystem_GetGameInstance) == 0x000008, "Wrong size on BlueprintGameInstanceSubsystem_GetGameInstance");
static_assert(offsetof(BlueprintGameInstanceSubsystem_GetGameInstance, ReturnValue) == 0x000000, "Member 'BlueprintGameInstanceSubsystem_GetGameInstance::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystem.IsTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct BlueprintGameInstanceSubsystem_IsTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameInstanceSubsystem_IsTickEnabled) == 0x000001, "Wrong alignment on BlueprintGameInstanceSubsystem_IsTickEnabled");
static_assert(sizeof(BlueprintGameInstanceSubsystem_IsTickEnabled) == 0x000001, "Wrong size on BlueprintGameInstanceSubsystem_IsTickEnabled");
static_assert(offsetof(BlueprintGameInstanceSubsystem_IsTickEnabled, ReturnValue) == 0x000000, "Member 'BlueprintGameInstanceSubsystem_IsTickEnabled::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystem.K2_ShouldCreateSubsystem
// 0x0020 (0x0020 - 0x0000)
struct BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem final
{
public:
	class FText                                   OutReason;                                         // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem) == 0x000008, "Wrong alignment on BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem");
static_assert(sizeof(BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem) == 0x000020, "Wrong size on BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem");
static_assert(offsetof(BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem, OutReason) == 0x000000, "Member 'BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem::OutReason' has a wrong offset!");
static_assert(offsetof(BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem, ReturnValue) == 0x000018, "Member 'BlueprintGameInstanceSubsystem_K2_ShouldCreateSubsystem::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintGameInstanceSubsystemBase.GetBlueprintSubsystemOfClass
// 0x0018 (0x0018 - 0x0000)
struct BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBlueprintGameInstanceSubsystem> TargetClass;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintGameInstanceSubsystem*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass) == 0x000008, "Wrong alignment on BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass");
static_assert(sizeof(BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass) == 0x000018, "Wrong size on BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass");
static_assert(offsetof(BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass, WorldContextObject) == 0x000000, "Member 'BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass, TargetClass) == 0x000008, "Member 'BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass::TargetClass' has a wrong offset!");
static_assert(offsetof(BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass, ReturnValue) == 0x000010, "Member 'BlueprintGameInstanceSubsystemBase_GetBlueprintSubsystemOfClass::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.K2_OnTick
// 0x0004 (0x0004 - 0x0000)
struct BlueprintWorldSubsystem_K2_OnTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystem_K2_OnTick) == 0x000004, "Wrong alignment on BlueprintWorldSubsystem_K2_OnTick");
static_assert(sizeof(BlueprintWorldSubsystem_K2_OnTick) == 0x000004, "Wrong size on BlueprintWorldSubsystem_K2_OnTick");
static_assert(offsetof(BlueprintWorldSubsystem_K2_OnTick, DeltaTime) == 0x000000, "Member 'BlueprintWorldSubsystem_K2_OnTick::DeltaTime' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.K2_OnWorldBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct BlueprintWorldSubsystem_K2_OnWorldBeginPlay final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystem_K2_OnWorldBeginPlay) == 0x000008, "Wrong alignment on BlueprintWorldSubsystem_K2_OnWorldBeginPlay");
static_assert(sizeof(BlueprintWorldSubsystem_K2_OnWorldBeginPlay) == 0x000008, "Wrong size on BlueprintWorldSubsystem_K2_OnWorldBeginPlay");
static_assert(offsetof(BlueprintWorldSubsystem_K2_OnWorldBeginPlay, World) == 0x000000, "Member 'BlueprintWorldSubsystem_K2_OnWorldBeginPlay::World' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.K2_OnWorldComponentsUpdated
// 0x0008 (0x0008 - 0x0000)
struct BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated) == 0x000008, "Wrong alignment on BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated");
static_assert(sizeof(BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated) == 0x000008, "Wrong size on BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated");
static_assert(offsetof(BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated, World) == 0x000000, "Member 'BlueprintWorldSubsystem_K2_OnWorldComponentsUpdated::World' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.SetTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct BlueprintWorldSubsystem_SetTickEnabled final
{
public:
	bool                                          bEnableTick;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystem_SetTickEnabled) == 0x000001, "Wrong alignment on BlueprintWorldSubsystem_SetTickEnabled");
static_assert(sizeof(BlueprintWorldSubsystem_SetTickEnabled) == 0x000001, "Wrong size on BlueprintWorldSubsystem_SetTickEnabled");
static_assert(offsetof(BlueprintWorldSubsystem_SetTickEnabled, bEnableTick) == 0x000000, "Member 'BlueprintWorldSubsystem_SetTickEnabled::bEnableTick' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.IsTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct BlueprintWorldSubsystem_IsTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystem_IsTickEnabled) == 0x000001, "Wrong alignment on BlueprintWorldSubsystem_IsTickEnabled");
static_assert(sizeof(BlueprintWorldSubsystem_IsTickEnabled) == 0x000001, "Wrong size on BlueprintWorldSubsystem_IsTickEnabled");
static_assert(offsetof(BlueprintWorldSubsystem_IsTickEnabled, ReturnValue) == 0x000000, "Member 'BlueprintWorldSubsystem_IsTickEnabled::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystem.K2_ShouldCreateSubsystem
// 0x0020 (0x0020 - 0x0000)
struct BlueprintWorldSubsystem_K2_ShouldCreateSubsystem final
{
public:
	class FText                                   OutReason;                                         // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintWorldSubsystem_K2_ShouldCreateSubsystem) == 0x000008, "Wrong alignment on BlueprintWorldSubsystem_K2_ShouldCreateSubsystem");
static_assert(sizeof(BlueprintWorldSubsystem_K2_ShouldCreateSubsystem) == 0x000020, "Wrong size on BlueprintWorldSubsystem_K2_ShouldCreateSubsystem");
static_assert(offsetof(BlueprintWorldSubsystem_K2_ShouldCreateSubsystem, OutReason) == 0x000000, "Member 'BlueprintWorldSubsystem_K2_ShouldCreateSubsystem::OutReason' has a wrong offset!");
static_assert(offsetof(BlueprintWorldSubsystem_K2_ShouldCreateSubsystem, ReturnValue) == 0x000018, "Member 'BlueprintWorldSubsystem_K2_ShouldCreateSubsystem::ReturnValue' has a wrong offset!");

// Function BlueprintSubsystem.BlueprintWorldSubsystemBase.GetBlueprintSubsystemOfClass
// 0x0018 (0x0018 - 0x0000)
struct BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBlueprintWorldSubsystem>   TargetClass;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintWorldSubsystem*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass) == 0x000008, "Wrong alignment on BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass");
static_assert(sizeof(BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass) == 0x000018, "Wrong size on BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass");
static_assert(offsetof(BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass, WorldContextObject) == 0x000000, "Member 'BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass, TargetClass) == 0x000008, "Member 'BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass::TargetClass' has a wrong offset!");
static_assert(offsetof(BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass, ReturnValue) == 0x000010, "Member 'BlueprintWorldSubsystemBase_GetBlueprintSubsystemOfClass::ReturnValue' has a wrong offset!");

}


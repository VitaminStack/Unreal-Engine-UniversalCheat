#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalBear

#include "Basic.hpp"

#include "CombatComponents_structs.hpp"
#include "BP_Animal_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AnimalBear.BP_AnimalBear_C
// 0x00E0 (0x0780 - 0x06A0)
class ABP_AnimalBear_C final : public ABP_Animal_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AnimalBear_C;                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Bear_Noises;                                       // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCCCollisionHandlerComponent*           CCCollisionHandler;                                // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DamageToDo;                                        // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_Attacking;                                   // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AttackMontage;                                     // 0x06E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                InteractingActorLoc;                               // 0x06F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentActor;                                      // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Sockets;                                           // 0x0710(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          XpPopUpEnabled_;                                   // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Health;                                            // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HitAnimation;                                      // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HitSound;                                          // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead_;                                           // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAddMarker_;                                     // 0x0741(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_742[0x6];                                      // 0x0742(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       Marker;                                            // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MarkerTimer;                                       // 0x0750(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Burning_;                                       // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               BurningEffect;                                     // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BurningTimer;                                      // 0x0768(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Looted;                                            // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void StopBurning();
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetMeshesAndMaterial();
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetInteractDistance(class AActor* Target);
	void SetBurning(bool Burning_, double Dmg, class AActor* Actor);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void PickupBuildFromGround();
	void OverrideName(const class FString& Name_0);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigCanInteract(bool* Result);
	void IsAIBurning_(bool* IsBurning_);
	void HitByVehicle(double Speed, const struct FVector& Direction);
	void GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed);
	void GetMesh(class USkeletalMeshComponent** Mesh_0);
	void GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void ExecuteUbergraph_BP_AnimalBear(int32 EntryPoint);
	void Event_XP(bool NewValue);
	void Event_Marker();
	void Event_Fire();
	void Despawn();
	void Death();
	void CheckDistanceFromActor();
	void Change_Speed(double Speed);
	void CanStompAI_(bool* Stomp_);
	void CanAddMarkerToAI_(bool* CanAdd_);
	void BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_1_OnHit__DelegateSignature(const struct FHitResult& HitResult, class UPrimitiveComponent* CollidingComponent);
	void BndEvt__BP_Zombie_Master_CCCollisionHandler_K2Node_ComponentBoundEvent_0_OnCollisionActivated__DelegateSignature(ECCCollisionPart CollisionPart);
	void BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void AttackPlayer();
	void AIHealthBarInfo(bool* Visible_, class FString* Name_0, bool* Boss_);
	void AddMarker(class UWidgetComponent* Marker_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnimalBear_C">();
	}
	static class ABP_AnimalBear_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AnimalBear_C>();
	}
};
static_assert(alignof(ABP_AnimalBear_C) == 0x000010, "Wrong alignment on ABP_AnimalBear_C");
static_assert(sizeof(ABP_AnimalBear_C) == 0x000780, "Wrong size on ABP_AnimalBear_C");
static_assert(offsetof(ABP_AnimalBear_C, UberGraphFrame_BP_AnimalBear_C) == 0x0006A0, "Member 'ABP_AnimalBear_C::UberGraphFrame_BP_AnimalBear_C' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Bear_Noises) == 0x0006A8, "Member 'ABP_AnimalBear_C::Bear_Noises' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, BP_JigMultiplayer) == 0x0006B0, "Member 'ABP_AnimalBear_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, NavigationInvoker) == 0x0006B8, "Member 'ABP_AnimalBear_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, CCCollisionHandler) == 0x0006C0, "Member 'ABP_AnimalBear_C::CCCollisionHandler' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, AIOSubject) == 0x0006C8, "Member 'ABP_AnimalBear_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, DamageToDo) == 0x0006D0, "Member 'ABP_AnimalBear_C::DamageToDo' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Start_Attacking) == 0x0006D8, "Member 'ABP_AnimalBear_C::Start_Attacking' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, AttackMontage) == 0x0006E0, "Member 'ABP_AnimalBear_C::AttackMontage' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, InteractingActorLoc) == 0x0006F0, "Member 'ABP_AnimalBear_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, CurrentActor) == 0x000708, "Member 'ABP_AnimalBear_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Sockets) == 0x000710, "Member 'ABP_AnimalBear_C::Sockets' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, XpPopUpEnabled_) == 0x000720, "Member 'ABP_AnimalBear_C::XpPopUpEnabled_' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Health) == 0x000728, "Member 'ABP_AnimalBear_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, HitAnimation) == 0x000730, "Member 'ABP_AnimalBear_C::HitAnimation' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, HitSound) == 0x000738, "Member 'ABP_AnimalBear_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, IsDead_) == 0x000740, "Member 'ABP_AnimalBear_C::IsDead_' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, CanAddMarker_) == 0x000741, "Member 'ABP_AnimalBear_C::CanAddMarker_' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Marker) == 0x000748, "Member 'ABP_AnimalBear_C::Marker' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, MarkerTimer) == 0x000750, "Member 'ABP_AnimalBear_C::MarkerTimer' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Is_Burning_) == 0x000758, "Member 'ABP_AnimalBear_C::Is_Burning_' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, BurningEffect) == 0x000760, "Member 'ABP_AnimalBear_C::BurningEffect' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, BurningTimer) == 0x000768, "Member 'ABP_AnimalBear_C::BurningTimer' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBear_C, Looted) == 0x000770, "Member 'ABP_AnimalBear_C::Looted' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_JigCompInfo

#include "Basic.hpp"

#include "BPI_JigCompInfo_classes.hpp"
#include "BPI_JigCompInfo_parameters.hpp"


namespace SDK
{

// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_GetType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Type                                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigCom_GetType(struct FGameplayTag* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigCom_GetType");

	Params::BPI_JigCompInfo_C_JigCom_GetType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = std::move(Parms.Type);
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsLootContainer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigCom_IsLootContainer(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigCom_IsLootContainer");

	Params::BPI_JigCompInfo_C_JigCom_IsLootContainer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsMainCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigCom_IsMainCharacter(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigCom_IsMainCharacter");

	Params::BPI_JigCompInfo_C_JigCom_IsMainCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsPickup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigCom_IsPickup(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigCom_IsPickup");

	Params::BPI_JigCompInfo_C_JigCom_IsPickup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigCom_IsVendor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigCom_IsVendor(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigCom_IsVendor");

	Params::BPI_JigCompInfo_C_JigCom_IsVendor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_AddNewPendingRequest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSI_Slot_C*                      NewItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_AddNewPendingRequest(class UJSI_Slot_C* NewItem, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_AddNewPendingRequest");

	Params::BPI_JigCompInfo_C_JigComp_AddNewPendingRequest Parms{};

	Parms.NewItem = NewItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestChamberUID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ChamberContainerUID                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_CallRequestChamberUID(const struct FGuid& ChamberContainerUID, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_CallRequestChamberUID");

	Params::BPI_JigCompInfo_C_JigComp_CallRequestChamberUID Parms{};

	Parms.ChamberContainerUID = std::move(ChamberContainerUID);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestReload
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            UnloadUID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            UnloadToContainerUID                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FinalRot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ReloadUID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ReloadToContainerUID                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           WeaponRef                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_CallRequestReload(const struct FGuid& UnloadUID, const struct FGuid& UnloadToContainerUID, int32 ToIndex, bool FinalRot, const struct FGuid& ReloadUID, const struct FGuid& ReloadToContainerUID, class AActor* WeaponRef, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_CallRequestReload");

	Params::BPI_JigCompInfo_C_JigComp_CallRequestReload Parms{};

	Parms.UnloadUID = std::move(UnloadUID);
	Parms.UnloadToContainerUID = std::move(UnloadToContainerUID);
	Parms.ToIndex = ToIndex;
	Parms.FinalRot = FinalRot;
	Parms.ReloadUID = std::move(ReloadUID);
	Parms.ReloadToContainerUID = std::move(ReloadToContainerUID);
	Parms.WeaponRef = WeaponRef;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallRequestReloadInternal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            MagContainerUID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            AmmoToAdd                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCap                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_CallRequestReloadInternal(const struct FGuid& MagContainerUID, const struct FGuid& AmmoToAdd, int32 MaxCap, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_CallRequestReloadInternal");

	Params::BPI_JigCompInfo_C_JigComp_CallRequestReloadInternal Parms{};

	Parms.MagContainerUID = std::move(MagContainerUID);
	Parms.AmmoToAdd = std::move(AmmoToAdd);
	Parms.MaxCap = MaxCap;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallServerChamberWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid                            ChamberContainerUID                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            MagContainerUID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            BulletToChamberUID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChamberContainerIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendChamberUID_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_CallServerChamberWeapon(const struct FGuid& ChamberContainerUID, const struct FGuid& MagContainerUID, const struct FGuid& BulletToChamberUID, int32 ChamberContainerIndex, bool SendChamberUID_, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_CallServerChamberWeapon");

	Params::BPI_JigCompInfo_C_JigComp_CallServerChamberWeapon Parms{};

	Parms.ChamberContainerUID = std::move(ChamberContainerUID);
	Parms.MagContainerUID = std::move(MagContainerUID);
	Parms.BulletToChamberUID = std::move(BulletToChamberUID);
	Parms.ChamberContainerIndex = ChamberContainerIndex;
	Parms.SendChamberUID_ = SendChamberUID_;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_CallServerConsumeRequest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  TargetComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FGuid                            ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CustomData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_CallServerConsumeRequest(class UActorComponent* TargetComp, const struct FGuid& ItemUID, int32 Amount, const class FString& CustomData, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_CallServerConsumeRequest");

	Params::BPI_JigCompInfo_C_JigComp_CallServerConsumeRequest Parms{};

	Parms.TargetComp = TargetComp;
	Parms.ItemUID = std::move(ItemUID);
	Parms.Amount = Amount;
	Parms.CustomData = std::move(CustomData);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryEquip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSI_Slot_C*                      Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  RootContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_ContextTryEquip(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_ContextTryEquip");

	Params::BPI_JigCompInfo_C_JigComp_ContextTryEquip Parms{};

	Parms.Item = Item;
	Parms.RootContainer = RootContainer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryUnequip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSI_Slot_C*                      Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  RootContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_ContextTryUnequip(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_ContextTryUnequip");

	Params::BPI_JigCompInfo_C_JigComp_ContextTryUnequip Parms{};

	Parms.Item = Item;
	Parms.RootContainer = RootContainer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_ContextTryUnloadAmmo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSI_Slot_C*                      Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  RootContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_ContextTryUnloadAmmo(class UJSI_Slot_C* Item, class UJSIContainer_C* RootContainer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_ContextTryUnloadAmmo");

	Params::BPI_JigCompInfo_C_JigComp_ContextTryUnloadAmmo Parms{};

	Parms.Item = Item;
	Parms.RootContainer = RootContainer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_JigCompInfo.BPI_JigCompInfo_C.JigComp_GetInventoryWidgetRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_JigCompInfo_C::JigComp_GetInventoryWidgetRef(class UUserWidget** UserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_JigCompInfo_C", "JigComp_GetInventoryWidgetRef");

	Params::BPI_JigCompInfo_C_JigComp_GetInventoryWidgetRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UserWidget != nullptr)
		*UserWidget = Parms.UserWidget;
}

}


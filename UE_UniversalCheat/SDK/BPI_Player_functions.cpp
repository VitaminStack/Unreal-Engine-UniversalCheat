#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Player

#include "Basic.hpp"

#include "BPI_Player_classes.hpp"
#include "BPI_Player_parameters.hpp"


namespace SDK
{

// Function BPI_Player.BPI_Player_C.CreateNotificationUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  UI_Delay                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::CreateNotificationUI(const class FText& Text, class UTexture2D* Image, const struct FLinearColor& Color, double UI_Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "CreateNotificationUI");

	Params::BPI_Player_C_CreateNotificationUI Parms{};

	Parms.Text = std::move(Text);
	Parms.Image = Image;
	Parms.Color = std::move(Color);
	Parms.UI_Delay = UI_Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.GetInGameUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_Ingame_C*                     UI                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::GetInGameUI(class UBP_Ingame_C** UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "GetInGameUI");

	Params::BPI_Player_C_GetInGameUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UI != nullptr)
		*UI = Parms.UI;
}


// Function BPI_Player.BPI_Player_C.GetPlayerRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerCharacter_C*            Player                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::GetPlayerRef(class ABP_PlayerCharacter_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "GetPlayerRef");

	Params::BPI_Player_C_GetPlayerRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BPI_Player.BPI_Player_C.IsBurning?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::IsBurning_(bool* Burning_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "IsBurning?");

	Params::BPI_Player_C_IsBurning_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Burning_ != nullptr)
		*Burning_ = Parms.Burning_;
}


// Function BPI_Player.BPI_Player_C.IsGPSEquipped?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GPS_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::IsGPSEquipped_(bool* GPS_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "IsGPSEquipped?");

	Params::BPI_Player_C_IsGPSEquipped_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GPS_ != nullptr)
		*GPS_ = Parms.GPS_;
}


// Function BPI_Player.BPI_Player_C.IsPlayerInVehicle?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InVehicle                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::IsPlayerInVehicle_(bool* InVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "IsPlayerInVehicle?");

	Params::BPI_Player_C_IsPlayerInVehicle_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVehicle != nullptr)
		*InVehicle = Parms.InVehicle;
}


// Function BPI_Player.BPI_Player_C.PlayerDeath
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_C::PlayerDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "PlayerDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player.BPI_Player_C.PlayMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Play_Rate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::PlayMontage(class UAnimMontage* Montage, double Play_Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "PlayMontage");

	Params::BPI_Player_C_PlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.Play_Rate = Play_Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendHealthToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendHealthToClient(double NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendHealthToClient");

	Params::BPI_Player_C_SendHealthToClient Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendHungerToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewHunger                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendHungerToClient(double NewHunger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendHungerToClient");

	Params::BPI_Player_C_SendHungerToClient Parms{};

	Parms.NewHunger = NewHunger;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendOxygenToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewOxygen                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendOxygenToClient(double NewOxygen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendOxygenToClient");

	Params::BPI_Player_C_SendOxygenToClient Parms{};

	Parms.NewOxygen = NewOxygen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendRadiationToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewRadiation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendRadiationToClient(double NewRadiation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendRadiationToClient");

	Params::BPI_Player_C_SendRadiationToClient Parms{};

	Parms.NewRadiation = NewRadiation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendStaminaToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewStamina                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendStaminaToClient(double NewStamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendStaminaToClient");

	Params::BPI_Player_C_SendStaminaToClient Parms{};

	Parms.NewStamina = NewStamina;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SendThirstToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewThirst                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SendThirstToClient(double NewThirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SendThirstToClient");

	Params::BPI_Player_C_SendThirstToClient Parms{};

	Parms.NewThirst = NewThirst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SetBurning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SetBurning(bool Burning, double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SetBurning");

	Params::BPI_Player_C_SetBurning Parms{};

	Parms.Burning = Burning;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.SetTraceToWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Set_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::SetTraceToWorld(bool Set_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "SetTraceToWorld");

	Params::BPI_Player_C_SetTraceToWorld Parms{};

	Parms.Set_ = Set_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.StopMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::StopMontage(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "StopMontage");

	Params::BPI_Player_C_StopMontage Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.UpdatePlayerSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::UpdatePlayerSpeed(double NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "UpdatePlayerSpeed");

	Params::BPI_Player_C_UpdatePlayerSpeed Parms{};

	Parms.NewSpeed = NewSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player.BPI_Player_C.VehicleInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enter_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_VehicleMaster_C*              VehicleRef                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_C::VehicleInteraction(bool Enter_, const class ABP_VehicleMaster_C*& VehicleRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_C", "VehicleInteraction");

	Params::BPI_Player_C_VehicleInteraction Parms{};

	Parms.Enter_ = Enter_;
	Parms.VehicleRef = VehicleRef;

	UObject::ProcessEvent(Func, &Parms);
}

}


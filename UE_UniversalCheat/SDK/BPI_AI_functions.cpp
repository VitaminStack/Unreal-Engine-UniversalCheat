#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AI

#include "Basic.hpp"

#include "BPI_AI_classes.hpp"
#include "BPI_AI_parameters.hpp"


namespace SDK
{

// Function BPI_AI.BPI_AI_C.AddMarker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetComponent*                 Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::AddMarker(class UWidgetComponent* Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "AddMarker");

	Params::BPI_AI_C_AddMarker Parms{};

	Parms.Marker = Marker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AI.BPI_AI_C.AIHealthBarInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Boss_                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::AIHealthBarInfo(bool* Visible_, class FString* Name_0, bool* Boss_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "AIHealthBarInfo");

	Params::BPI_AI_C_AIHealthBarInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_ != nullptr)
		*Visible_ = Parms.Visible_;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Boss_ != nullptr)
		*Boss_ = Parms.Boss_;
}


// Function BPI_AI.BPI_AI_C.CanAddMarkerToAI?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanAdd_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::CanAddMarkerToAI_(bool* CanAdd_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "CanAddMarkerToAI?");

	Params::BPI_AI_C_CanAddMarkerToAI_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanAdd_ != nullptr)
		*CanAdd_ = Parms.CanAdd_;
}


// Function BPI_AI.BPI_AI_C.CanStompAI?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stomp_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::CanStompAI_(bool* Stomp_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "CanStompAI?");

	Params::BPI_AI_C_CanStompAI_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stomp_ != nullptr)
		*Stomp_ = Parms.Stomp_;
}


// Function BPI_AI.BPI_AI_C.GetMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MarkerOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "GetMarker");

	Params::BPI_AI_C_GetMarker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);

	if (MarkerOffset != nullptr)
		*MarkerOffset = Parms.MarkerOffset;
}


// Function BPI_AI.BPI_AI_C.GetMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::GetMesh(class USkeletalMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "GetMesh");

	Params::BPI_AI_C_GetMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function BPI_AI.BPI_AI_C.GetMovementSpeeds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RoamingSpeed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AlertSpeed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AttackSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "GetMovementSpeeds");

	Params::BPI_AI_C_GetMovementSpeeds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RoamingSpeed != nullptr)
		*RoamingSpeed = Parms.RoamingSpeed;

	if (AlertSpeed != nullptr)
		*AlertSpeed = Parms.AlertSpeed;

	if (AttackSpeed != nullptr)
		*AttackSpeed = Parms.AttackSpeed;
}


// Function BPI_AI.BPI_AI_C.HitByVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::HitByVehicle(double Speed, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "HitByVehicle");

	Params::BPI_AI_C_HitByVehicle Parms{};

	Parms.Speed = Speed;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AI.BPI_AI_C.IsAIBurning?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBurning_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::IsAIBurning_(bool* IsBurning_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "IsAIBurning?");

	Params::BPI_AI_C_IsAIBurning_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBurning_ != nullptr)
		*IsBurning_ = Parms.IsBurning_;
}


// Function BPI_AI.BPI_AI_C.OverrideName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_AI_C::OverrideName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "OverrideName");

	Params::BPI_AI_C_OverrideName Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AI.BPI_AI_C.SetBurning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Burning_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dmg                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_AI_C::SetBurning(bool Burning_, double Dmg, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AI_C", "SetBurning");

	Params::BPI_AI_C_SetBurning Parms{};

	Parms.Burning_ = Burning_;
	Parms.Dmg = Dmg;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwable_Molotov

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterThrowable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Throwable_Molotov.BP_Throwable_Molotov_C
// 0x0028 (0x02F8 - 0x02D0)
class ABP_Throwable_Molotov_C final : public ABP_MasterThrowable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Throwable_Molotov_C;             // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        MinDamage;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDamage;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSound;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Throwable_Molotov_Capsule_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_Throwable_Molotov(int32 EntryPoint);
	void Fire_Damage();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Throwable_Molotov_C">();
	}
	static class ABP_Throwable_Molotov_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Throwable_Molotov_C>();
	}
};
static_assert(alignof(ABP_Throwable_Molotov_C) == 0x000008, "Wrong alignment on ABP_Throwable_Molotov_C");
static_assert(sizeof(ABP_Throwable_Molotov_C) == 0x0002F8, "Wrong size on ABP_Throwable_Molotov_C");
static_assert(offsetof(ABP_Throwable_Molotov_C, UberGraphFrame_BP_Throwable_Molotov_C) == 0x0002D0, "Member 'ABP_Throwable_Molotov_C::UberGraphFrame_BP_Throwable_Molotov_C' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Molotov_C, ParticleSystem) == 0x0002D8, "Member 'ABP_Throwable_Molotov_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Molotov_C, MinDamage) == 0x0002E0, "Member 'ABP_Throwable_Molotov_C::MinDamage' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Molotov_C, MaxDamage) == 0x0002E8, "Member 'ABP_Throwable_Molotov_C::MaxDamage' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Molotov_C, FireSound) == 0x0002F0, "Member 'ABP_Throwable_Molotov_C::FireSound' has a wrong offset!");

}


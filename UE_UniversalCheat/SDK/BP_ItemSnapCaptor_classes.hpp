#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemSnapCaptor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ItemSnapCaptor.BP_ItemSnapCaptor_C
// 0x00C0 (0x0358 - 0x0298)
class ABP_ItemSnapCaptor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpringArmComponent*                    SpringArm;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Main;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        InitialFOV;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemToInspect;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UTextureRenderTarget2D*> CreatedRenderTargets;                              // 0x02D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLocked_;                                         // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Streaming_;                                        // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AMainLocalAttachment_C*>     CurrentAttachments;                                // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnSnapTaken;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USceneComponent*                        ItemMeshComp;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void CaptureFromTarget(class UTextureRenderTarget2D* TextureTarget, bool* GoNext_);
	void CaptureFromTargetCustom(class UTextureRenderTarget2D* TextureTarget, bool* GoNext_);
	void CaptureSnap();
	void ClearAttachments();
	void DelayedCaptureSnap();
	void ExecuteUbergraph_BP_ItemSnapCaptor(int32 EntryPoint);
	void GetActiveComponent(class USceneComponent** Comp);
	void GetAttachSocketByInContainerIndex(class UJigsawItem_DataAsset_C* Info, int32 InContainerIndex, class FName* Socket);
	void GetDefaultDim(class UJSI_Slot_C* Target, struct FVector2D* SlotDimension);
	struct FTransform GetInitValues(double* FOVAngle);
	void GetSnap(bool ShareRTarget, class UTextureRenderTarget2D** Output_Get, bool* FromShared_);
	void GetSnapNoCapture(class UJSI_Slot_C* Item, bool ShareRTarget, class UTextureRenderTarget2D** Output_Get, bool* FromShared_);
	void InstallAttachments(class UJSI_Slot_C* JigItem);
	void IsActionbar(class UJSI_Slot_C* ItemRef, bool* Result);
	void IsLocked(bool* IsLocked__0);
	void ReceiveBeginPlay();
	void RemoveIronsights(bool Hide_, class ABP_AMainLocalAttachment_C* Attachment, class USceneComponent* SceneComp);
	void SetJigitem(class UJSI_Slot_C* ItemRef, bool* Found, bool* ShareRenderTargetWithSimilarItems);
	void SetJigitem_Custom(class UJSI_Slot_C* ItemRef, const struct FTransform& Transform, double FOV, bool* Found, bool* ShareRenderTargetWithSimilarItems);
	void SetLocked(bool IsLocked__0);
	void UpdateSnap(class UJSI_Slot_C* ItemRef, class UTextureRenderTarget2D* TextureTarget, class UTextureRenderTarget2D** Output_Get);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ItemSnapCaptor_C">();
	}
	static class ABP_ItemSnapCaptor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ItemSnapCaptor_C>();
	}
};
static_assert(alignof(ABP_ItemSnapCaptor_C) == 0x000008, "Wrong alignment on ABP_ItemSnapCaptor_C");
static_assert(sizeof(ABP_ItemSnapCaptor_C) == 0x000358, "Wrong size on ABP_ItemSnapCaptor_C");
static_assert(offsetof(ABP_ItemSnapCaptor_C, UberGraphFrame) == 0x000298, "Member 'ABP_ItemSnapCaptor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, SpringArm) == 0x0002A0, "Member 'ABP_ItemSnapCaptor_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, Scene) == 0x0002A8, "Member 'ABP_ItemSnapCaptor_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, Main) == 0x0002B0, "Member 'ABP_ItemSnapCaptor_C::Main' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, SpotLight) == 0x0002B8, "Member 'ABP_ItemSnapCaptor_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, SceneCaptureComponent2D) == 0x0002C0, "Member 'ABP_ItemSnapCaptor_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, InitialFOV) == 0x0002C8, "Member 'ABP_ItemSnapCaptor_C::InitialFOV' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, ItemToInspect) == 0x0002D0, "Member 'ABP_ItemSnapCaptor_C::ItemToInspect' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, CreatedRenderTargets) == 0x0002D8, "Member 'ABP_ItemSnapCaptor_C::CreatedRenderTargets' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, IsLocked_) == 0x000328, "Member 'ABP_ItemSnapCaptor_C::IsLocked_' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, Streaming_) == 0x000329, "Member 'ABP_ItemSnapCaptor_C::Streaming_' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, CurrentAttachments) == 0x000330, "Member 'ABP_ItemSnapCaptor_C::CurrentAttachments' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, OnSnapTaken) == 0x000340, "Member 'ABP_ItemSnapCaptor_C::OnSnapTaken' has a wrong offset!");
static_assert(offsetof(ABP_ItemSnapCaptor_C, ItemMeshComp) == 0x000350, "Member 'ABP_ItemSnapCaptor_C::ItemMeshComp' has a wrong offset!");

}


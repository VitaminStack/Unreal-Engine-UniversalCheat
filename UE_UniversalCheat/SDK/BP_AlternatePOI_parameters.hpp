#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AlternatePOI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AlternatePOI.BP_AlternatePOI_C.ExecuteUbergraph_BP_AlternatePOI
// 0x0080 (0x0080 - 0x0000)
struct BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI) == 0x000010, "Wrong alignment on BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI");
static_assert(sizeof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI) == 0x000080, "Wrong size on BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, EntryPoint) == 0x000000, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, Temp_bool_Variable) == 0x000004, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, K2Node_Select_Default) == 0x000008, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000070, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI, CallFunc_FinishSpawningActor_ReturnValue) == 0x000078, "Member 'BP_AlternatePOI_C_ExecuteUbergraph_BP_AlternatePOI::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_AlternatePOI.BP_AlternatePOI_C.ComponentsToSave
// 0x0010 (0x0010 - 0x0000)
struct BP_AlternatePOI_C_ComponentsToSave final
{
public:
	TArray<class UActorComponent*>                Components;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_AlternatePOI_C_ComponentsToSave) == 0x000008, "Wrong alignment on BP_AlternatePOI_C_ComponentsToSave");
static_assert(sizeof(BP_AlternatePOI_C_ComponentsToSave) == 0x000010, "Wrong size on BP_AlternatePOI_C_ComponentsToSave");
static_assert(offsetof(BP_AlternatePOI_C_ComponentsToSave, Components) == 0x000000, "Member 'BP_AlternatePOI_C_ComponentsToSave::Components' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildingComponent

#include "Basic.hpp"

#include "BuildingComponent_classes.hpp"
#include "BuildingComponent_parameters.hpp"


namespace SDK
{

// Function BuildingComponent.BuildingComponent_C.BoundsCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DivideScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertBool                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BoundsOverlapOffset                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hit                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::BoundsCheck(float DivideScale, bool InvertBool, const struct FVector& BoundsOverlapOffset, bool* Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "BoundsCheck");

	Params::BuildingComponent_C_BoundsCheck Parms{};

	Parms.DivideScale = DivideScale;
	Parms.InvertBool = InvertBool;
	Parms.BoundsOverlapOffset = std::move(BoundsOverlapOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (Hit != nullptr)
		*Hit = Parms.Hit;
}


// Function BuildingComponent.BuildingComponent_C.BuildCycle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBuildingComponent_C::BuildCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "BuildCycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingComponent.BuildingComponent_C.ChangeRotationZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Increase_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::ChangeRotationZ(bool Increase_, double Value, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "ChangeRotationZ");

	Params::BuildingComponent_C_ChangeRotationZ Parms{};

	Parms.Increase_ = Increase_;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BuildingComponent.BuildingComponent_C.CheckForSnap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_BuildingSnapTypes                  Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::CheckForSnap(Enum_BuildingSnapTypes Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "CheckForSnap");

	Params::BuildingComponent_C_CheckForSnap Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.Event_LaunchBuildMode
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJigsawItem_DataAsset_C*          DA                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Replacing_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReplacingActor_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::Event_LaunchBuildMode(class UJigsawItem_DataAsset_C* DA, bool Replacing_, class AActor* ReplacingActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "Event_LaunchBuildMode");

	Params::BuildingComponent_C_Event_LaunchBuildMode Parms{};

	Parms.DA = DA;
	Parms.Replacing_ = Replacing_;
	Parms.ReplacingActor_0 = ReplacingActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.Event_NoBuildZone
// (BlueprintCallable, BlueprintEvent)

void UBuildingComponent_C::Event_NoBuildZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "Event_NoBuildZone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingComponent.BuildingComponent_C.Event_StopBuildMode
// (BlueprintCallable, BlueprintEvent)

void UBuildingComponent_C::Event_StopBuildMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "Event_StopBuildMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingComponent.BuildingComponent_C.ExecuteUbergraph_BuildingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::ExecuteUbergraph_BuildingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "ExecuteUbergraph_BuildingComponent");

	Params::BuildingComponent_C_ExecuteUbergraph_BuildingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.GetNearestTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FTransform>               Transforms                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       ResultTransform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::GetNearestTransform(const struct FVector& Location, TArray<struct FTransform>& Transforms, struct FTransform* ResultTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "GetNearestTransform");

	Params::BuildingComponent_C_GetNearestTransform Parms{};

	Parms.Location = std::move(Location);
	Parms.Transforms = std::move(Transforms);

	UObject::ProcessEvent(Func, &Parms);

	Transforms = std::move(Parms.Transforms);

	if (ResultTransform != nullptr)
		*ResultTransform = std::move(Parms.ResultTransform);
}


// Function BuildingComponent.BuildingComponent_C.GiveBuildColour
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGreen_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::GiveBuildColour(bool IsGreen_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "GiveBuildColour");

	Params::BuildingComponent_C_GiveBuildColour Parms{};

	Parms.IsGreen_ = IsGreen_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.IsPlaceableOnLandscape
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBuildingComponent_C::IsPlaceableOnLandscape(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "IsPlaceableOnLandscape");

	Params::BuildingComponent_C_IsPlaceableOnLandscape Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BuildingComponent.BuildingComponent_C.LoadComponent
// (BlueprintCallable, BlueprintEvent)

void UBuildingComponent_C::LoadComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "LoadComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingComponent.BuildingComponent_C.RotateSnap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       SocketTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBuildingComponent_C::RotateSnap(const struct FTransform& SocketTransform, class AActor* Actor, struct FRotator* Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "RotateSnap");

	Params::BuildingComponent_C_RotateSnap Parms{};

	Parms.SocketTransform = std::move(SocketTransform);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);
}


// Function BuildingComponent.BuildingComponent_C.SpawnBuild
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::SpawnBuild(const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "SpawnBuild");

	Params::BuildingComponent_C_SpawnBuild Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.SpawnBuildGhost
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::SpawnBuildGhost(class UStaticMesh* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "SpawnBuildGhost");

	Params::BuildingComponent_C_SpawnBuildGhost Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingComponent.BuildingComponent_C.Svr_SpawnBuild
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingComponent_C::Svr_SpawnBuild(const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingComponent_C", "Svr_SpawnBuild");

	Params::BuildingComponent_C_Svr_SpawnBuild Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}

}


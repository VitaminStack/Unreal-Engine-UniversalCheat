#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MainSpecialContainer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MainSpecialContainer.BP_MainSpecialContainer_C
// 0x0040 (0x0300 - 0x02C0)
class UBP_MainSpecialContainer_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UJSI_Slot_C*                            ItemOwner;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        TempChamberContainer;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        TempMagContainer;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                AllContainers;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWidget*                                Temp;                                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_InspectorWindowWidget_C*            InspectorParent;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BackpackSettings(bool Disabled_);
	void Destruct();
	void DropInfo_OnItemEquippedChange_Event_0(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void DropInfo_OnItemEquippedChange_Event_1(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void EventOnAttachmentEquipped(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void ExecuteUbergraph_BP_MainSpecialContainer(int32 EntryPoint);
	void ForceInitSpecialcontainer();
	void GetAllAttachments(TArray<class FName>* Attachments);
	void GetContainerByAttachmentType(const struct FGameplayTag& Type, class UJSIContainer_C** JigContainer, int32* ContainerIndex);
	void GetDropWidget(class UDropItemBackGwidget_C** DropWRef);
	void GetJSIContainerByPlayerSlots(const struct FGameplayTag& Slot_0, class UJSIContainer_C** Container, class UJSI_Slot_C** EquippedItem, bool* IsPending_);
	void GetListOfNonAddContainers(TArray<class UJSIContainer_C*>* Containers);
	void GetLootContent(class UUserWidget** Widget);
	void GetValidReloadContainers(TArray<class UJSIContainer_C*>* Containers);
	void JigSetLootContent(class UUserWidget* Widget, const class FText& Name_0);
	void JSICheckStatus();
	void JSIOnWeightUpdated(double NewWeight);
	void OnCreatedFromUtility();
	void OnHandguardAttachment(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void OnHandguardEquipped(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void PreInitSpecialContainer();
	void SetActionbarFollower(class UJSI_Slot_C* JigRef, bool* Return);
	void SetActorOwner(class AActor* ActorRef);
	void SetContainerSnapUpdate(const TArray<class UJSIContainer_C*>& Containers, const TArray<class UJSIContainer_C*>& ContentContainers);
	void SetInspectorRef(class UBP_InspectorWindowWidget_C* Inspector);
	void SetItemReference(class UJSI_Slot_C* ItemRef);
	void UpdateAmmoCounter(class UJSIContainer_C* Mag, class UJSIContainer_C* Chamber);
	void UpdateSnap();

	void GetListOfContainers(TArray<class UJSIContainer_C*>* Containers) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MainSpecialContainer_C">();
	}
	static class UBP_MainSpecialContainer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MainSpecialContainer_C>();
	}
};
static_assert(alignof(UBP_MainSpecialContainer_C) == 0x000008, "Wrong alignment on UBP_MainSpecialContainer_C");
static_assert(sizeof(UBP_MainSpecialContainer_C) == 0x000300, "Wrong size on UBP_MainSpecialContainer_C");
static_assert(offsetof(UBP_MainSpecialContainer_C, UberGraphFrame) == 0x0002C0, "Member 'UBP_MainSpecialContainer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, ItemOwner) == 0x0002C8, "Member 'UBP_MainSpecialContainer_C::ItemOwner' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, TempChamberContainer) == 0x0002D0, "Member 'UBP_MainSpecialContainer_C::TempChamberContainer' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, TempMagContainer) == 0x0002D8, "Member 'UBP_MainSpecialContainer_C::TempMagContainer' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, AllContainers) == 0x0002E0, "Member 'UBP_MainSpecialContainer_C::AllContainers' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, Temp) == 0x0002F0, "Member 'UBP_MainSpecialContainer_C::Temp' has a wrong offset!");
static_assert(offsetof(UBP_MainSpecialContainer_C, InspectorParent) == 0x0002F8, "Member 'UBP_MainSpecialContainer_C::InspectorParent' has a wrong offset!");

}


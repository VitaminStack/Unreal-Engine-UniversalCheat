#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UBPP_FunctionLibrary

#include "Basic.hpp"

#include "UBPP_E_PrintMode_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UBPP_E_StyleSelection_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"
#include "UBPP_E_AddingType_structs.hpp"
#include "UBPP_E_InputMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UBPP_FunctionLibrary.UBPP_FunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UUBPP_FunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Actor_Array_Add(TArray<class AActor*>& Input_Array, class AActor* New_Item, class UObject* __WorldContext, TArray<class AActor*>* Return_Array, int32* New_Length);
	static void Actor_Array_to_Location_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FVector>* Output_Locations);
	static void Actor_Array_To_Rotator_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FRotator>* Output_Rotator);
	static void Actor_Array_To_Scale_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FVector>* Output_Scales);
	static void Actor_Array_To_Transform_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FTransform>* Output_Transform);
	static bool Actor_Line_Trace_By_Channel(class AActor* Actor, double Length, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void Actor_to_Actor_Line_Trace_by_Channel(class AActor* Actor_A, class AActor* Actor_B, bool Ignore_Actors, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Append_Actor_Arrays(TArray<class AActor*>& Actor_Array_A, TArray<class AActor*>& Actor_Array_B, class UObject* __WorldContext, TArray<class AActor*>* Return_Array, int32* Length);
	static void Append_Boolean_Arrays(TArray<bool>& Actor_Array_A, TArray<bool>& Actor_Array_B, class UObject* __WorldContext, TArray<bool>* Return_Array, int32* Length);
	static void Append_Byte_Arrays(TArray<uint8>& Int_Array_A, TArray<uint8>& Int_Array_B, class UObject* __WorldContext, TArray<uint8>* Return_Array, int32* Length);
	static void Append_Float_Arrays(TArray<double>& Float_Array_A, TArray<double>& Float_Array_B, class UObject* __WorldContext, TArray<double>* Return_Array, int32* Length);
	static void Append_Int_Arrays(TArray<int32>& Int_Array_A, TArray<int32>& Int_Array_B, class UObject* __WorldContext, TArray<int32>* Return_Array, int32* Length);
	static void Append_Integer64_Arrays(TArray<int64>& Int_Array_A, TArray<int64>& Int_Array_B, class UObject* __WorldContext, TArray<int64>* Return_Array, int32* Length);
	static void Append_String_Arrays(TArray<class FString>& Actor_Array_A, TArray<class FString>& Actor_Array_B, class UObject* __WorldContext, TArray<class FString>* Return_Array, int32* Length);
	static void Append_Text(const class FText& A, const class FText& B, class UObject* __WorldContext, class FText* Return_value);
	static void Append_Vector_Arrays(TArray<struct FVector>& Vector_Array_A, TArray<struct FVector>& Vector_Array_B, class UObject* __WorldContext, TArray<struct FVector>* Return_Array, int32* Length);
	static void Apply_Points_Drag(TArray<struct FVector>& Array, int32 At_Location, const struct FVector& Strength, int32 Radius, class UObject* __WorldContext, TArray<struct FVector>* Array1);
	static void Apply_Points_Drag__Linear_(TArray<struct FVector>& Array, int32 At_Location, const struct FVector& Strength, int32 Radius, class UObject* __WorldContext, TArray<struct FVector>* Array1);
	static void Bigger_Than_or_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Bigger_Than_or_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Bigger_Than_or_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Bigger_Than_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Bigger_Than_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Bigger_Than_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Boolean_Array_Add(TArray<bool>& Input_Array, bool New_Item, class UObject* __WorldContext, TArray<bool>* Return_Array, int32* New_Length);
	static void Bouncing_Line_Trace_By_Channel(const struct FVector& Start, const struct FRotator& Rotation, double Length, int32 Times, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* All_Out_Hits, int32* Times_Till_Stop, bool* Return_value);
	static void Break_Float(double Value, class UObject* __WorldContext, int32* Pre_Decimal_Places, int32* Decimal_Places);
	static void Byte_Array_Add(TArray<uint8>& Input_Array, uint8 New_Item, class UObject* __WorldContext, TArray<uint8>* Return_Array, int32* New_Length);
	static void Byte_Array_to_Float_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<double>* Return_Array);
	static void Byte_Array_to_Int_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<int32>* Return_Array);
	static void Byte_Array_to_Int64_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<int64>* Return_Array);
	static void Byte_Array_to_String_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array);
	static void Byte_To_Integer(uint8 Value, class UObject* __WorldContext, int32* Return_value);
	static void Byte_To_Integer64(uint8 Value, class UObject* __WorldContext, int64* Return_value);
	static void Byte_To_Vector(uint8 Input_Byte, class UObject* __WorldContext, struct FVector* Return_Vector);
	static void Camera_Line_Trace_By_Channel(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Camera_Line_Trace_By_Profile(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Camera_Line_Trace_For_Objects(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Combine_Vectors__Max_(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value);
	static void Combine_Vectors__Min_(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value);
	static void Create_Widget_Compact(class APlayerController* PlayerController, class UClass* Class_0, EUBPP_E_AddingType Adding_Type, int32 ZOrder, bool Show_Mouse_Cursor, EUBPP_E_InputMode Input_Mode, EMouseLockMode InMouseLockMode__Only_UI_only_and_Game_only_, bool HideCursorDuringCapture__Only_Game_And_UI_, class UObject* __WorldContext, class UUserWidget** Reference);
	static void Double__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value);
	static void Double__Float_(double Value, class UObject* __WorldContext, double* Return_value);
	static void Double__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Double__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static void Draw_Static_Mesh_Debug_Box(class AStaticMeshActor* Static_Mesh_Actor, const struct FLinearColor& LineColor, double Duration, double Thickness, class UObject* __WorldContext);
	static void Equal__Color_(const struct FColor& A, const struct FColor& B, class UObject* __WorldContext, bool* Return_value);
	static void Equal__Slate_Color_(const struct FSlateColor& A, const struct FSlateColor& B, class UObject* __WorldContext, bool* Return_value);
	static void Equal__Stream_(const struct FRandomStream& A, const struct FRandomStream& B, class UObject* __WorldContext, bool* Return_value);
	static bool Equals_Max__Byte_(uint8 Input_Value, class UObject* __WorldContext);
	static void Equals_Not_Max__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Not_Zero__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Not_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Not_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Not_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Zero__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Equals_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Find_Actor_Look_at_Rotation(class AActor* Start, class AActor* Target, class UObject* __WorldContext, struct FRotator* Return_value);
	static void Find_Look_At_Rotation__Crosshair_(const struct FVector& Start, int32 PlayerIndex, double Length_Range, class UObject* __WorldContext, struct FRotator* Return_value);
	static void Float_Array_Add(TArray<double>& Input_Array, double New_Item, class UObject* __WorldContext, TArray<double>* Return_Array, int32* New_Length);
	static void Float_Array_To_Int_Array(TArray<double>& Float_Array, class UObject* __WorldContext, TArray<int32>* Return_Array);
	static void Float_Array_To_String_Array(TArray<double>& Input_Float_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array);
	static void Float_Array_To_Vector_Array(TArray<double>& Input_Float_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_Array);
	static void Generate_Points_On_Line(const struct FVector& Start_Position, const struct FVector& End_Position, int32 Count_To_Spawn_Between, class UObject* __WorldContext, TArray<struct FVector>* Return_Points);
	static void Generate_Random_Byte_Array(int32 Array_Length, uint8 Range_Max, class UObject* __WorldContext, TArray<uint8>* Random_Array);
	static void Generate_Random_Byte_Array_From_Stream(int32 Array_Length, uint8 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<uint8>* Random_Array);
	static void Generate_Random_Float_Array(int32 Array_Length, class UObject* __WorldContext, TArray<double>* Random_Array);
	static void Generate_Random_Float_Array_from_Stream(int32 Array_Length, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<double>* Random_Array);
	static void Generate_Random_Float_Array_In_Range(int32 Array_Length, double Min, double Max, class UObject* __WorldContext, TArray<double>* Random_Array);
	static void Generate_Random_Float_Array_In_Range_From_Stream(int32 Array_Length, double Min, double Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<double>* Random_Array);
	static void Generate_Random_Int_Array(int32 Array_Length, int32 Range_Max, class UObject* __WorldContext, TArray<int32>* Random_Array);
	static void Generate_Random_Int_Array_From_Stream(int32 Array_Length, int32 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<int32>* Random_Array);
	static void Generate_Random_Int_Array_in_Range(int32 Array_Length, int32 Range_Min, int32 Range_Max, class UObject* __WorldContext, TArray<int32>* Random_Array);
	static void Generate_Random_Int_Array_in_Range_From_Stream(int32 Array_Length, int32 Range_Min, int32 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<int32>* Random_Array);
	static void Get_Actor_Backward_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value);
	static void Get_Actor_Down_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value);
	static void Get_Actor_Left_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value);
	static void Get_Alignment(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Vector2D, bool* Return_value);
	static void Get_Anchors(class UWidget* Widget, class UObject* __WorldContext, struct FAnchors* Return_Value_Anchors, bool* Return_value);
	static void Get_Auto_Size(class UWidget* Widget, class UObject* __WorldContext, bool* Return_Value_Auto_Size, bool* Return_value);
	static void Get_Box_Extent_Bound_Points(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, TArray<struct FVector>* Bound_Points);
	static void Get_Box_Extent_Site_Points(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, TArray<struct FVector>* Site_Points);
	static void Get_Column(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Column, bool* Return_value);
	static void Get_Column_Span(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_ZOrder, bool* Return_value);
	static void Get_Distance__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, double* Distance);
	static void Get_Element_Index__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* ElementIndex);
	static void Get_Face_Index__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* FaceIndex);
	static void Get_Farthest_Vector(const struct FVector& OriginVector, TArray<struct FVector>& AllOtherVectors, class UObject* __WorldContext, struct FVector* FarthestVector, double* Distance, int32* Index_0);
	static void Get_Fill_Empty_Space(class UWidget* Widget, class UObject* __WorldContext, bool* Return_Value_Fill_Empty_Space, bool* Return_value);
	static void Get_Fill_Span_When_Less_Than(class UWidget* Widget, class UObject* __WorldContext, double* Return_Value_Fill_Span_when_Less_Than, bool* Return_value);
	static void Get_Highest_Distance_Between_Actors(TArray<class AActor*>& AllActors, class UObject* __WorldContext, double* Distance, class AActor** ActorA, class AActor** ActorB, int32* ActorIndexA, int32* ActorIndexB);
	static void Get_Hit_Actor__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class AActor** HitActor);
	static void Get_Hit_Bone_Name__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class FName* HitBoneName);
	static void Get_Hit_Component__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class UPrimitiveComponent** HitComponent);
	static void Get_Hit_Item__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* HitItem);
	static void Get_Horizontal_Alignment(class UWidget* Widget, class UObject* __WorldContext, EHorizontalAlignment* Return_Value_Horizontal_Alignment, bool* Return_value);
	static void Get_Impact_Normal__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* ImpactNormal);
	static void Get_Impact_Point__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* ImpactPoint);
	static void Get_Initial_Overlap__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, bool* Initial_Overlap);
	static void Get_Is_Blocking_Hit__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, bool* Blocking_Hit);
	static void Get_Layer(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Layer, bool* Return_value);
	static void Get_Layout(class UWidget* Widget, class UObject* __WorldContext, struct FAnchorData* Return_Value_Layout, bool* Return_value);
	static void Get_Location__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* Location);
	static void Get_Nearest_Sphere_Point(const struct FVector& Point, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, struct FVector* Return_value);
	static void Get_Nearest_Vector(const struct FVector& Origin_Vector, TArray<struct FVector>& All_Other_Vectors, class UObject* __WorldContext, struct FVector* NearestVector, double* Distance, int32* Index_0);
	static void Get_Nearest_Vector_On_Line(const struct FVector& Input_Vector, const struct FVector& Line_Start, const struct FVector& Line_End, double Precision_1_500, class UObject* __WorldContext, struct FVector* NearestVector, double* Distance, int32* Index_0);
	static void Get_Normal__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* Normal);
	static void Get_Nudge(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Nudge, bool* Return_value);
	static void Get_Offsets(class UWidget* Widget, class UObject* __WorldContext, struct FMargin* Return_Value_Offsets, bool* Return_value);
	static void Get_Padding(class UWidget* Widget, class UObject* __WorldContext, struct FMargin* Return_Value_Padding, bool* Return_value);
	static void Get_Phys_Mat__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class UPhysicalMaterial** PhysMat);
	static void Get_Position(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Position, bool* Return_value);
	static void Get_Random_Alphabetic_Code(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, const struct FUBPP_Struct_Symbols& Symbols, class UObject* __WorldContext, class FString* Code);
	static void Get_Random_Alphabetic_Code_from_Stream(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, const struct FUBPP_Struct_Symbols& Symbols, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code);
	static void Get_Random_Code(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FUBPP_Struct_Symbols& Alphabet___Symbols, class UObject* __WorldContext, class FString* Code);
	static void Get_Random_Code_from_Stream(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FUBPP_Struct_Symbols& Symbols, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code);
	static void Get_Random_Numeric_Code(int32 Code_Length, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, class UObject* __WorldContext, class FString* Code);
	static void Get_Random_Numeric_Code_from_Stream(int32 Code_Length, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code);
	static void Get_Row(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Row, bool* Return_value);
	static void Get_Row_Span(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Row_Span, bool* Return_value);
	static void Get_Size__Slate_Child_Size_(class UWidget* Widget, class UObject* __WorldContext, struct FSlateChildSize* Return_Value_Size, bool* Return_value);
	static void Get_Size__Vector2D_(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Size, bool* Return_value);
	static void Get_Smallest_Distance_Between_Actors(TArray<class AActor*>& AllActors, class UObject* __WorldContext, double* Distance, class AActor** ActorA, class AActor** ActorB, int32* ActorIndexA, int32* ActorIndexB);
	static void Get_Time__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, double* Time);
	static void Get_Trace_End__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* TraceEnd);
	static void Get_Trace_Start__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* TraceStart);
	static void Get_Vector_Difference(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value);
	static void Get_Vertical_Alignment(class UWidget* Widget, class UObject* __WorldContext, EVerticalAlignment* Return_Value_Vertical_Alignment, bool* Return_value);
	static void Get_ZOrder(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_ZOrder, bool* Return_value);
	static void GetPercentage__Float_(double Value, double Percentage, class UObject* __WorldContext, double* Return_value);
	static void GetPercentage__Int_(int32 Value, double Percentage, class UObject* __WorldContext, int32* Return_value);
	static void GetPercentage__Int64_(int64 Value, double Percentage, class UObject* __WorldContext, int64* Return_value);
	static void Half__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value);
	static void Half__Float_(double Value, class UObject* __WorldContext, double* Return_value);
	static void Half__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Half__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static void InRange__Byte_(uint8 Value, uint8 Min, uint8 Max, bool Inclusive_Min, bool Inclusive_Max, class UObject* __WorldContext, bool* Return_value);
	static void InRange__Vector_(const struct FVector& Value, const struct FVector& Min, const struct FVector& Max, bool Inclusive_Min, bool Inclusive_Max, class UObject* __WorldContext, bool* Return_value);
	static void Int_Array_Add(TArray<int32>& Input_Array, int32 New_Item, class UObject* __WorldContext, TArray<int32>* Return_Array, int32* New_Length);
	static void Int_Array_to_Float_Array(TArray<int32>& Integer_Array, class UObject* __WorldContext, TArray<double>* Return_Array);
	static void Int_Array_to_String(TArray<int32>& Input_Int_Array, const class FString& Separator, class UObject* __WorldContext, class FString* Return_Array);
	static void Int_Array_To_String_Array(TArray<int32>& Input_Int_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array);
	static void Int_Array_To_Vector_Array(TArray<int32>& Input_Float_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_Array);
	static void Int_to_Vector(int32 Input_Int, class UObject* __WorldContext, struct FVector* Return_Vector);
	static void Int64_Array_Add(TArray<int64>& Input_Array, int64 New_Item, class UObject* __WorldContext, TArray<int64>* Return_Array, int32* New_Length);
	static void Integer64_To_String(int64 Input_Value, class UObject* __WorldContext, class FString* Return_String);
	static void Integer64_To_Text(int64 Input_Value, class UObject* __WorldContext, class FText* Return_Text);
	static void Invert_Float(double Value, class UObject* __WorldContext, double* Return_value);
	static void Invert_Integer(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Invert_Integer64(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static void Invert_Vector(const struct FVector& Value, class UObject* __WorldContext, struct FVector* Return_value);
	static void Is_Android_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_Engine_Version_4_26(class UObject* __WorldContext, bool* Return_value);
	static void Is_Engine_Version_4_27(class UObject* __WorldContext, bool* Return_value);
	static void Is_Facing_Wall(class AActor* Actor, double Max_Distance_To_Wall, bool Get_More_Informations__Height_, double Max_Height_To_Check, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, bool* Return_value, struct FVector* Wall_Height_Point);
	static void Is_IOS_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_Linux_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_Mac_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_Point_In_Sphere(const struct FVector& Point, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, bool* Return_value);
	static void Is_PS4_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_Sphere_Completely_In_Sphere(const struct FVector& Point__Sphere_, double Point_Radius, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, bool* Return_value);
	static void Is_Sphere_Touching_Sphere(const struct FVector& Sphere_1, double Radius_1, const struct FVector& Sphere_2, double Radius_2, class UObject* __WorldContext, bool* Return_value);
	static void Is_Windows_Platform(class UObject* __WorldContext, bool* Return_value);
	static void Is_XboxOne_Platform(class UObject* __WorldContext, bool* Return_value);
	static void IsVectorInBoxExtent(const struct FVector& Input_Vector, const struct FVector& Box_Origin, const struct FVector& Box_Extent, class UObject* __WorldContext, bool* Return_value);
	static void Len__Text_(const class FText& Input_Text, class UObject* __WorldContext, int32* Return_value);
	static void Make_Float(int32 Pre_Decimal_Places, int32 Decimal_Places, class UObject* __WorldContext, double* Return_value);
	static void Max_Byte(class UObject* __WorldContext, uint8* Max_Int);
	static void Max_Float(class UObject* __WorldContext, double* Max_Int);
	static void Max_Int(class UObject* __WorldContext, int32* Max_Int_0);
	static void Max_Int64(class UObject* __WorldContext, int64* Max_Int);
	static bool Meele_Capsule_Trace_By_Channel__First_Person_(class AActor* Player_Actor, int32 Player_Index, double Hitbox_Forward_Offset, double Hitbox_Radius, double Hitbox_Half_Height, bool TraceComplex, ETraceTypeQuery TraceChannel, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool _Top_Down_(class USkeletalMeshComponent* Skeletal_Mesh, class FName Head_Socket_Name, bool _Skeletal_Mesh_, const struct FVector& Head_Location, double Hitbox_Forward_Offset, double Hitbox_Radius, double Hitbox_Half_Height, bool bTraceComplex, ETraceTypeQuery TraceChannel, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void Min_Byte(class UObject* __WorldContext, uint8* Max_Int);
	static void Min_Float(class UObject* __WorldContext, double* Max_Float);
	static void Min_Int(class UObject* __WorldContext, int32* Max_Int);
	static void Min_Int64(class UObject* __WorldContext, int64* Max_Int);
	static void Minus_Absolute__Float_(double Value, class UObject* __WorldContext, double* Return_value);
	static void Minus_Absolute__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Minus_Absolute__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static void Minus_One__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value);
	static void Minus_One__Float_(double Value, class UObject* __WorldContext, double* Return_value);
	static void Minus_One__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Minus_One__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static struct FVector2D Mouse_Position_on_Platform(class UObject* __WorldContext);
	static struct FVector2D Mouse_Position_on_Viewport(class UObject* __WorldContext);
	static void Multi_Camera_Line_Trace_By_Channel(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static void Multi_Camera_Line_Trace_By_Profile(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static void Multi_Camera_Line_Trace_for_Objects(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static bool Multi_Noise_Line_Trace_By_Channel(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool Multi_Noise_Line_Trace_By_Profile(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool Multi_Noise_Line_Trace_For_Objects(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static void Multi_Weapon_Line_Trace_By_Channel(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceC_hannel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static void Multi_Weapon_Line_Trace_By_Profile(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static void Multi_Weapon_Line_Trace_For_Objects(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value);
	static void Name_to_Int(class FName Input_Name, class UObject* __WorldContext, int32* Return_value);
	static bool Noise_Line_Trace_By_Channel(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool Noise_Line_Trace_By_Profile(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool Noise_Line_Trace_For_Objects(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void Object_Array_To_Display_Name_Array(TArray<class UObject*>& Input_Object, class UObject* __WorldContext, TArray<class FString>* Output_Display_Name);
	static void Plus_One__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value);
	static void Plus_One__Float_(double Value, class UObject* __WorldContext, double* Return_value);
	static void Plus_One__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value);
	static void Plus_One__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value);
	static void Print_Name(class FName In_Name, bool Print_To_Screen, bool Print_To_Log, const struct FLinearColor& Text_Color, double Duration, class UObject* __WorldContext);
	static void Print_String_Array(TArray<class FString>& Input_Array, EUBPP_E_PrintMode Print_Mode, bool Print_To_Screen, bool Print_To_Log, const struct FLinearColor& Text_Color, double Duration, const class FString& Separator, class UObject* __WorldContext);
	static void Random_Byte(uint8 Max, class UObject* __WorldContext, uint8* Return_value);
	static void Random_Byte_From_Stream(uint8 Max, const struct FRandomStream& Stream, class UObject* __WorldContext, uint8* Return_value);
	static void Random_Byte_In_Range(uint8 Min, uint8 Max, class UObject* __WorldContext, uint8* Return_value);
	static void Random_Byte_In_Range_From_Stream(uint8 Min, uint8 Max, const struct FRandomStream& Stream, class UObject* __WorldContext, uint8* Return_value);
	static void Random_Byte_Max(class UObject* __WorldContext, uint8* Return_value);
	static uint8 Random_Byte_Max_From_Stream(const struct FRandomStream& Stream, class UObject* __WorldContext);
	static void Random_Color(bool Static_Opacity, uint8 Opacity__If_Static_, class UObject* __WorldContext, struct FColor* Random_Color_0);
	static double Random_Float_Max(bool And_Min_, class UObject* __WorldContext);
	static double Random_Float_Max_from_Stream(bool And_Min_, const struct FRandomStream& Stream, class UObject* __WorldContext);
	static int32 Random_Integer_Max(bool And_Min_, class UObject* __WorldContext);
	static int32 Random_Integer_Max_From_Stream(bool And_Min_, const struct FRandomStream& Stream, class UObject* __WorldContext);
	static void Random_Linear_Color(bool Static_Opacity, double Opacity__If_Static_, class UObject* __WorldContext, struct FLinearColor* Random_Color_0);
	static void Random_Point_In_Capsule(const struct FVector& Origin_Vector, double Radius, double Half_Height, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_In_Cylinder(const struct FVector& Origin_Vector, double Radius, double Height, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_In_Donut(const struct FVector& Origin_Vector, double Donut_Radius, double Thickness_Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_In_Hollow_Box_Extent(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, double Thickness, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_In_Hollow_Sphere(const struct FVector& Origin_Vector, double Outer_Radius, double Inner_Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_In_Sphere(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_On_Box_Extent_Bounds(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_On_Circle(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_On_Circle_Bound(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_On_Line(const struct FVector& Line_Start, const struct FVector& Line_End, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_On_Sphere_Bound(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Point_on_Spline(class USplineComponent* Spline_Component, class UObject* __WorldContext, struct FVector* Random_Point);
	static void Random_Stream(class UObject* __WorldContext, struct FRandomStream* Random_Stream_0);
	static void Random_Vector_In_Range(const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext, struct FVector* Return_value);
	static void Random_Vector_In_Range_from_Stream(const struct FVector& Min, const struct FVector& Max, const struct FRandomStream& Stream, class UObject* __WorldContext, struct FVector* Return_value);
	static void Remove_All_Bytes_Not_In_Range(TArray<uint8>& Input_Array, uint8 Min, uint8 Max, class UObject* __WorldContext, TArray<uint8>* Return_value);
	static void Remove_All_Floats_Not_in_Range(TArray<double>& Input_Array, double Min, double Max, class UObject* __WorldContext, TArray<double>* Return_Array);
	static void Remove_All_Ints_Not_In_Range(TArray<int32>& Input_Array, int32 Min, int32 Max, class UObject* __WorldContext, TArray<int32>* Return_value);
	static void Remove_All_Ints64_Not_In_Range(TArray<int64>& Input_Array, int64 Min, int64 Max, class UObject* __WorldContext, TArray<int64>* Return_value);
	static void Remove_All_Vectors_Not_In_Range(TArray<struct FVector>& Input_Array, const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext, TArray<struct FVector>* Return_value);
	static void Remove_Not_Unique_Actors(TArray<class AActor*>& Input_Array, class UObject* __WorldContext, TArray<class AActor*>* Return_Array);
	static void Remove_Not_Unique_Bytes(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<uint8>* Return_value);
	static void Remove_Not_Unique_Floats(TArray<double>& Input_Array, class UObject* __WorldContext, TArray<double>* Return_value);
	static void Remove_Not_Unique_Integers64(TArray<int64>& Input_Array, class UObject* __WorldContext, TArray<int64>* Return_value);
	static void Remove_Not_Unique_Ints(TArray<int32>& Input_Array, class UObject* __WorldContext, TArray<int32>* Return_value);
	static void Remove_Not_Unique_Strings(TArray<class FString>& Input_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array);
	static void Remove_Not_Unique_Vectors(TArray<struct FVector>& Input_Vector_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_value);
	static void Reverse_Actor_Array(TArray<class AActor*>& Input, class UObject* __WorldContext, TArray<class AActor*>* Return_Array);
	static void Reverse_Boolean_Array(TArray<bool>& Input, class UObject* __WorldContext, TArray<bool>* Return_Array);
	static void Reverse_Byte_Array(TArray<uint8>& Input, class UObject* __WorldContext, TArray<uint8>* Return_Array);
	static void Reverse_Float_Array(TArray<double>& Input, class UObject* __WorldContext, TArray<double>* Return_Array);
	static void Reverse_Int_Array(TArray<int32>& Input, class UObject* __WorldContext, TArray<int32>* Return_Array);
	static void Reverse_Int64_Array(TArray<int64>& Input, class UObject* __WorldContext, TArray<int64>* Return_Array);
	static void Reverse_String_Array(TArray<class FString>& Input, class UObject* __WorldContext, TArray<class FString>* Return_Array);
	static void Reverse_Vector_Array(TArray<struct FVector>& Input, class UObject* __WorldContext, TArray<struct FVector>* Return_Array);
	static bool Rotation_Dependent_Line_Trace_By_Channel(const struct FVector& Start, const struct FRotator& Rotation, double Length, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void Rotational_Slice_Procedural_Mesh(class UProceduralMeshComponent* In_Proc_Mesh, const struct FVector& Plane_Position, const struct FRotator& Plane_Rotation, bool Create_Other_Half, EProcMeshSliceCapOption Cap_Option, class UMaterialInterface* Cap_Material, class UObject* __WorldContext, class UProceduralMeshComponent** Out_Other_Half_Proc_Mesh);
	static void Seperate_Numerics_And_Alphabetics(const class FString& Input_String, class UObject* __WorldContext, int32* Numerics, class FString* Alphabetics);
	static void Server_Travel(const TSoftObjectPtr<class UWorld> Level, class UObject* __WorldContext);
	static void Set_Alignment(class UWidget* Widget, const struct FVector2D& InAlignment, class UObject* __WorldContext, bool* Return_value);
	static void Set_Anchors(class UWidget* Widget, const struct FAnchors& InAnchors, class UObject* __WorldContext, bool* Return_value);
	static void Set_Auto_Size(class UWidget* Widget, bool InbAutoSize, class UObject* __WorldContext, bool* Return_value);
	static void Set_Column(class UWidget* Widget, int32 InColumn, class UObject* __WorldContext, bool* Return_value);
	static void Set_Column_Span(class UWidget* Widget, int32 InColumnSpan, class UObject* __WorldContext, bool* Return_value);
	static void Set_Fill_Empty_Space(class UWidget* Widget, bool InbFillEmptySpace, class UObject* __WorldContext, bool* Return_value);
	static void Set_Fill_Span_When_Less_Than(class UWidget* Widget, double InFillSpanWhenLessThan, class UObject* __WorldContext, bool* Return_value);
	static void Set_Horizontal_Alignment(class UWidget* Widget, EHorizontalAlignment InHorizontalAlignment, class UObject* __WorldContext, bool* Return_value);
	static void Set_Layer(class UWidget* Widget, int32 InLayer, class UObject* __WorldContext, bool* Return_value);
	static void Set_Layout(class UWidget* Widget, const struct FAnchorData& InLayoutData, class UObject* __WorldContext, bool* Return_value);
	static void Set_Location__Transform_(struct FTransform& Transform_Ref, const struct FVector& New_Location, class UObject* __WorldContext, struct FTransform* Result);
	static void Set_Nudge(class UWidget* Widget, const struct FVector2D& InNudge, class UObject* __WorldContext, bool* Return_value);
	static void Set_Offsets(class UWidget* Widget, const struct FMargin& InOffset, class UObject* __WorldContext, bool* Return_value);
	static void Set_Padding(class UWidget* Widget, const struct FMargin& InPadding, class UObject* __WorldContext, bool* Return_value);
	static void Set_Position(class UWidget* Widget, const struct FVector2D& InPosition, class UObject* __WorldContext, bool* Return_value);
	static void Set_Rotation__Transform_(struct FTransform& Transform_Ref, const struct FRotator& New_Rotation, class UObject* __WorldContext, struct FTransform* Result);
	static void Set_Row(class UWidget* Widget, int32 InRow, class UObject* __WorldContext, bool* Return_value);
	static void Set_Row_Span(class UWidget* Widget, int32 InRowSpan, class UObject* __WorldContext, bool* Return_value);
	static void Set_Scale__Transform_(struct FTransform& Transform_Ref, const struct FVector& New_Scale, class UObject* __WorldContext, struct FTransform* Result);
	static void Set_Size__Slate_Child_Size_(class UWidget* Widget, const struct FSlateChildSize& InSize, class UObject* __WorldContext, bool* Return_value);
	static void Set_Size__Vector2D_(class UWidget* Widget, const struct FVector2D& InSize, class UObject* __WorldContext, bool* Return_value);
	static void Set_Text__Name_(class UTextBlock* Target, class FName InName, class UObject* __WorldContext);
	static void Set_Vertical_Alignment(class UWidget* Widget, EVerticalAlignment InVerticalAlignment, class UObject* __WorldContext, bool* Return_value);
	static void Set_X__Vector_3D_(struct FVector& Vector_Ref, double New_X, class UObject* __WorldContext, struct FVector* Result);
	static void Set_Y__Vector_3D_(struct FVector& Vector_Ref, double New_Y, class UObject* __WorldContext, struct FVector* Result);
	static void Set_Z__Vector_3D_(struct FVector& Vector_Ref, double New_Z, class UObject* __WorldContext, struct FVector* Result);
	static void Set_ZOrder(class UWidget* Widget, int32 InZOrder, class UObject* __WorldContext, bool* Return_value);
	static void SetText__String_(class UTextBlock* Target, const class FString& In_String, class UObject* __WorldContext);
	static void Slerp__Vector_(const struct FVector& Start, const struct FVector& End, const struct FVector& Orient, double Alpha, class UObject* __WorldContext, struct FVector* Return_value);
	static void Smaller_Than_or_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Smaller_Than_or_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Smaller_Than_or_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Smaller_Than_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Smaller_Than_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Smaller_Than_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value);
	static void Snap_Actor_To_Grid(class AActor* Actor, double Grid_Size, bool Teleport, bool Specific_Z_Location, double Z_Location, class UObject* __WorldContext, struct FHitResult* Sweep_Hit_Result, bool* Return_value);
	static void Sort_Vectors_By_Distance__High_To_Low_(const struct FVector& Origin_Location, TArray<struct FVector>& All_Other_Locations, class UObject* __WorldContext, TArray<struct FVector>* Sorted_Array, TArray<double>* Distances);
	static void Sort_Vectors_By_Distance__Low_To_High_(const struct FVector& Origin_Location, TArray<struct FVector>& All_Other_Locations, class UObject* __WorldContext, TArray<struct FVector>* Sorted_Array, TArray<double>* Distances);
	static void String_Array_Add(TArray<class FString>& Input_Array, const class FString& New_Item, class UObject* __WorldContext, TArray<class FString>* Return_Array, int32* New_Length);
	static void Text_to_Int(const class FText& Input_Text, class UObject* __WorldContext, int32* Return_value);
	static void To_Float__Int_64_(int64 Value, class UObject* __WorldContext, double* Return_value);
	static void ToString__Int64_(int64 Input_Value, bool Always_Sign, bool Use_Grouping, int32 Minimum_Integral_Digits, int32 Maximum_Integral_Digits, class UObject* __WorldContext, class FString* Return_String);
	static void Vector_Array_Add(TArray<struct FVector>& Input_Array, const struct FVector& New_Item, class UObject* __WorldContext, TArray<struct FVector>* Return_Array, int32* New_Length);
	static void Weapon_Line_Trace_By_Channel(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceC_hannel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Weapon_Line_Trace_By_Profile(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);
	static void Weapon_Line_Trace_For_Objects(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UBPP_FunctionLibrary_C">();
	}
	static class UUBPP_FunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUBPP_FunctionLibrary_C>();
	}
};
static_assert(alignof(UUBPP_FunctionLibrary_C) == 0x000008, "Wrong alignment on UUBPP_FunctionLibrary_C");
static_assert(sizeof(UUBPP_FunctionLibrary_C) == 0x000028, "Wrong size on UUBPP_FunctionLibrary_C");

}


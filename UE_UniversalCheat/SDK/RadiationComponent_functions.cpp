#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadiationComponent

#include "Basic.hpp"

#include "RadiationComponent_classes.hpp"
#include "RadiationComponent_parameters.hpp"


namespace SDK
{

// Function RadiationComponent.RadiationComponent_C.ApplyRadiationDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::ApplyRadiationDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "ApplyRadiationDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.CheckStats
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::CheckStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "CheckStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.ComponentLoaded
// (Event, Public, BlueprintEvent)

void URadiationComponent_C::ComponentLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "ComponentLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.ComponentPreSave
// (Event, Public, BlueprintEvent)

void URadiationComponent_C::ComponentPreSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "ComponentPreSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.DecreaseRadiation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ReduceAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::DecreaseRadiation(double ReduceAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "DecreaseRadiation");

	Params::RadiationComponent_C_DecreaseRadiation Parms{};

	Parms.ReduceAmount = ReduceAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadiationComponent.RadiationComponent_C.ExecuteUbergraph_RadiationComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::ExecuteUbergraph_RadiationComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "ExecuteUbergraph_RadiationComponent");

	Params::RadiationComponent_C_ExecuteUbergraph_RadiationComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadiationComponent.RadiationComponent_C.FilterStoppedWorking
// (BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::FilterStoppedWorking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "FilterStoppedWorking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.GetRespirator
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Found_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            ItemInfo                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void URadiationComponent_C::GetRespirator(bool* Found_, struct FContainerPickupsInfo* ItemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "GetRespirator");

	Params::RadiationComponent_C_GetRespirator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Found_ != nullptr)
		*Found_ = Parms.Found_;

	if (ItemInfo != nullptr)
		*ItemInfo = std::move(Parms.ItemInfo);
}


// Function RadiationComponent.RadiationComponent_C.GetRespiratorFilter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Found_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            ItemInfo                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void URadiationComponent_C::GetRespiratorFilter(bool* Found_, struct FContainerPickupsInfo* ItemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "GetRespiratorFilter");

	Params::RadiationComponent_C_GetRespiratorFilter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Found_ != nullptr)
		*Found_ = Parms.Found_;

	if (ItemInfo != nullptr)
		*ItemInfo = std::move(Parms.ItemInfo);
}


// Function RadiationComponent.RadiationComponent_C.GetRespiratorStat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  MinValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::GetRespiratorStat(const struct FGameplayTag& Stat, double* MinValue, double* MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "GetRespiratorStat");

	Params::RadiationComponent_C_GetRespiratorStat Parms{};

	Parms.Stat = std::move(Stat);

	UObject::ProcessEvent(Func, &Parms);

	if (MinValue != nullptr)
		*MinValue = Parms.MinValue;

	if (MaxValue != nullptr)
		*MaxValue = Parms.MaxValue;
}


// Function RadiationComponent.RadiationComponent_C.IncreaseRadiation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::IncreaseRadiation(double Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "IncreaseRadiation");

	Params::RadiationComponent_C_IncreaseRadiation Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadiationComponent.RadiationComponent_C.Mask_Filter
// (BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::Mask_Filter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "Mask_Filter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.RadiationTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::RadiationTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "RadiationTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.SetFilterUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::SetFilterUI(bool Show_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "SetFilterUI");

	Params::RadiationComponent_C_SetFilterUI Parms{};

	Parms.Show_ = Show_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadiationComponent.RadiationComponent_C.StopRadiation
// (BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::StopRadiation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "StopRadiation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.UpdateFilter
// (BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::UpdateFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "UpdateFilter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.UpdateGeiger
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void URadiationComponent_C::UpdateGeiger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "UpdateGeiger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadiationComponent.RadiationComponent_C.UpdateRadiation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::UpdateRadiation(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "UpdateRadiation");

	Params::RadiationComponent_C_UpdateRadiation Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadiationComponent.RadiationComponent_C.UseFilter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MinusDur                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewDur                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Successful_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadiationComponent_C::UseFilter(double MinusDur, double* NewDur, bool* Successful_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadiationComponent_C", "UseFilter");

	Params::RadiationComponent_C_UseFilter Parms{};

	Parms.MinusDur = MinusDur;

	UObject::ProcessEvent(Func, &Parms);

	if (NewDur != nullptr)
		*NewDur = Parms.NewDur;

	if (Successful_ != nullptr)
		*Successful_ = Parms.Successful_;
}

}


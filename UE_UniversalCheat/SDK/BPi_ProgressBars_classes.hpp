#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPi_ProgressBars

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "EGradientTypes_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EMarqueeMask_structs.hpp"
#include "Slate_structs.hpp"
#include "EProgressMethod_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPi_ProgressBars.BPi_ProgressBars_C
// 0x0000 (0x0028 - 0x0028)
class IBPi_ProgressBars_C final : public IInterface
{
public:
	void PB_AddEffect(const struct FS_Effects& Effect, int32* Index_0);
	void PB_GetBackgroundColor(struct FLinearColor* Color);
	void PB_GetEffects(TArray<struct FS_Effects>* Effects);
	void PB_GetFillColor(struct FLinearColor* Color);
	void PB_GetInterpTimeCurrent(double* CurrentInterpTime);
	void PB_GetInterpTimeTarget(double* TargetInterpTime);
	void PB_GetIsCustomMarquee(bool* IsMarquee);
	void PB_GetIsMarquee(bool* IsMarquee);
	void PB_GetPercent(double* Percent);
	void PB_GetProgressMethod(EProgressMethod* EProgressMethod);
	void PB_GetSeparationSteps(int32* Steps);
	void PB_GetSize(struct FVector2D* Size);
	void PB_GetTargetFillColor_Negative(struct FLinearColor* Color);
	void PB_GetTargetFillColor_Positive(struct FLinearColor* Color);
	void PB_GetTargetPercent(double* TargetPercent);
	void PB_GetThickness(double* Thickness);
	void PB_GetUseGradientFillColor(bool* UseGradientFillColor);
	void PB_GetUseTargetPercent(bool* UseTargetPercent);
	void PB_RemoveEffect(int32 Index_0);
	void PB_SetAllEffectsEnabled(bool IsEnabled);
	void PB_SetBackgroundBlurStrength(double BlurStrength);
	void PB_SetBackgroundBrushTiling(ESlateBrushTileType Tiling);
	void PB_SetBackgroundColor(const struct FLinearColor& Color);
	void PB_SetBackgroundColorMask(class UTexture2D* Mask);
	void PB_SetBlendMask(class UTexture2D* BlendMask);
	void PB_SetCustomMarqueeImage(class UTexture2D* Image);
	void PB_SetCustomMarqueeMaskType(EMarqueeMask MaskType);
	void PB_SetEffectEnabled(int32 Index_0, bool IsEnabled);
	void PB_SetEffects(const TArray<struct FS_Effects>& Effects);
	void PB_SetFillColor(const struct FLinearColor& Color);
	void PB_SetFillColorBrushTiling(ESlateBrushTileType Tiling);
	void PB_SetFillColorGradientPower(double GradientPower);
	void PB_SetFillColorGradientType(EGradientTypes GradientType);
	void PB_SetFillColorMask(class UObject* Mask);
	void PB_SetFillFromCenterSpacing(double Spacing);
	void PB_SetFillType(EProgressBarFillType FillType);
	void PB_SetInterpTimeCurrent(double CurrentInterpTime);
	void PB_SetInterpTimeTarget(double TargetInterpTime);
	void PB_SetIsCustomMarquee(bool IsMarquee);
	void PB_SetIsMarquee(bool IsMarquee);
	void PB_SetMarqueeImage(class UTexture2D* Image);
	void PB_SetPercent(double Value);
	void PB_SetProgressMethod(EProgressMethod EProgressMethod);
	void PB_SetSeparationAbsoluteFill(bool AbsoluteFillMethod);
	void PB_SetSeparationSteps(int32 Steps);
	void PB_SetSeparationStepsSpacing(double Spacing);
	void PB_SetSize(const struct FVector2D& Size);
	void PB_SetTargetFillColor_Negative(const struct FLinearColor& Color);
	void PB_SetTargetFillColor_Positive(const struct FLinearColor& Color);
	void PB_SetTargetPercent(double TargetPercent);
	void PB_SetThickness(double Thickness);
	void PB_SetUseGradientFillColor(bool UseGradientFillColor);
	void PB_SetUseTargetPercent(bool UseTargetPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPi_ProgressBars_C">();
	}
	static class IBPi_ProgressBars_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPi_ProgressBars_C>();
	}
};
static_assert(alignof(IBPi_ProgressBars_C) == 0x000008, "Wrong alignment on IBPi_ProgressBars_C");
static_assert(sizeof(IBPi_ProgressBars_C) == 0x000028, "Wrong size on IBPi_ProgressBars_C");

}


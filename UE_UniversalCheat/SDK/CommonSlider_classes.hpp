#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonSlider

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CommonSlider.CommonSlider_C
// 0x01B0 (0x0470 - 0x02C0)
class UCommonSlider_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               BottomSpacer;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                btn_left;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                btn_right;                                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_ElementsContainer;                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_left_btn;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_right_btn;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                LeftMargin;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Locked;                                            // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LockImage;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                RightMargin;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderName;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SliderSizeBox;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderValue;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                SpacerFill;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TopSpacer;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   SliderTitle;                                       // 0x0350(0x0018)(Edit, BlueprintVisible)
	class FText                                   Unit;                                              // 0x0368(0x0018)(Edit, BlueprintVisible)
	class FText                                   UnitPrefix;                                        // 0x0380(0x0018)(Edit, BlueprintVisible)
	int32                                         FontSize;                                          // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SliderMinimumValue;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SliderMaximumValue;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepSize;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SliderDefaultValueTip;                             // 0x03B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          Integer_;                                          // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseGrouping_;                                      // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumFractionalDigits;                           // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaximumFractionalDigits;                           // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeSliderColorWhenFocused_;                     // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeTextColorWhenFocused_;                       // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSliderHandleAndTextColor;                   // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSliderHandleAndTextColor;                 // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TopMargin;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BottomMargin;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftSideMargin;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightSideMargin;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SliderSize;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultValue;                                      // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhotoModeWidget_C*                     PhotoModeWidget;                                   // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double SliderValue)> SliderDispatcher;                                  // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Focus_;                                            // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSliderBarColor;                             // 0x044C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSliderBarColor;                           // 0x045C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void ChangeValue(double Value, bool SetFocus_);
	void EnableDisableWidget(bool Enable_);
	void ExecuteUbergraph_CommonSlider(int32 EntryPoint);
	void FocusWithMouseWheel();
	void Initialize(double DefaultValue_0, class UPhotoModeWidget_C* PhotoModeWidget__Self_);
	ESlateVisibility LockVisibility();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void ResetSlider(bool Focus__0);
	void ResetSliderFocus();
	void Set_Focused_or_Unfocused_Color(bool ChangeSliderColorWhenFocused__0, bool ChangeTextColorWhenFocused__0, class USlider* Slider_0, class UImage* imgLeftButton, class UImage* imgRightButton, class UWidget* SliderTitle_0, class UWidget* SliderValue_0, bool SetMargin, struct FSlateBrush* LeftButtonColor, struct FSlateBrush* RightButtonColor);
	struct FSlateBrush SetLeftButtonSettings();
	struct FSlateBrush SetRightButtonSettings();
	void SetSliderFocus();
	class FText setTxtValue();
	ESlateVisibility TextValueVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CommonSlider_C">();
	}
	static class UCommonSlider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSlider_C>();
	}
};
static_assert(alignof(UCommonSlider_C) == 0x000008, "Wrong alignment on UCommonSlider_C");
static_assert(sizeof(UCommonSlider_C) == 0x000470, "Wrong size on UCommonSlider_C");
static_assert(offsetof(UCommonSlider_C, UberGraphFrame) == 0x0002C0, "Member 'UCommonSlider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, BottomSpacer) == 0x0002C8, "Member 'UCommonSlider_C::BottomSpacer' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, btn_left) == 0x0002D0, "Member 'UCommonSlider_C::btn_left' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, btn_right) == 0x0002D8, "Member 'UCommonSlider_C::btn_right' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, HorizontalBox_ElementsContainer) == 0x0002E0, "Member 'UCommonSlider_C::HorizontalBox_ElementsContainer' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, img_left_btn) == 0x0002E8, "Member 'UCommonSlider_C::img_left_btn' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, img_right_btn) == 0x0002F0, "Member 'UCommonSlider_C::img_right_btn' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, LeftMargin) == 0x0002F8, "Member 'UCommonSlider_C::LeftMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, Locked) == 0x000300, "Member 'UCommonSlider_C::Locked' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, LockImage) == 0x000308, "Member 'UCommonSlider_C::LockImage' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, RightMargin) == 0x000310, "Member 'UCommonSlider_C::RightMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SizeBox) == 0x000318, "Member 'UCommonSlider_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, Slider) == 0x000320, "Member 'UCommonSlider_C::Slider' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderName) == 0x000328, "Member 'UCommonSlider_C::SliderName' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderSizeBox) == 0x000330, "Member 'UCommonSlider_C::SliderSizeBox' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderValue) == 0x000338, "Member 'UCommonSlider_C::SliderValue' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SpacerFill) == 0x000340, "Member 'UCommonSlider_C::SpacerFill' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, TopSpacer) == 0x000348, "Member 'UCommonSlider_C::TopSpacer' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderTitle) == 0x000350, "Member 'UCommonSlider_C::SliderTitle' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, Unit) == 0x000368, "Member 'UCommonSlider_C::Unit' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, UnitPrefix) == 0x000380, "Member 'UCommonSlider_C::UnitPrefix' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, FontSize) == 0x000398, "Member 'UCommonSlider_C::FontSize' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderMinimumValue) == 0x0003A0, "Member 'UCommonSlider_C::SliderMinimumValue' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderMaximumValue) == 0x0003A8, "Member 'UCommonSlider_C::SliderMaximumValue' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, StepSize) == 0x0003B0, "Member 'UCommonSlider_C::StepSize' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderDefaultValueTip) == 0x0003B8, "Member 'UCommonSlider_C::SliderDefaultValueTip' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, Integer_) == 0x0003D0, "Member 'UCommonSlider_C::Integer_' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, UseGrouping_) == 0x0003D1, "Member 'UCommonSlider_C::UseGrouping_' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, MinimumFractionalDigits) == 0x0003D4, "Member 'UCommonSlider_C::MinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, MaximumFractionalDigits) == 0x0003D8, "Member 'UCommonSlider_C::MaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, ChangeSliderColorWhenFocused_) == 0x0003DC, "Member 'UCommonSlider_C::ChangeSliderColorWhenFocused_' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, ChangeTextColorWhenFocused_) == 0x0003DD, "Member 'UCommonSlider_C::ChangeTextColorWhenFocused_' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, FocusedSliderHandleAndTextColor) == 0x0003E0, "Member 'UCommonSlider_C::FocusedSliderHandleAndTextColor' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, UnfocusedSliderHandleAndTextColor) == 0x0003F0, "Member 'UCommonSlider_C::UnfocusedSliderHandleAndTextColor' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, TopMargin) == 0x000400, "Member 'UCommonSlider_C::TopMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, BottomMargin) == 0x000408, "Member 'UCommonSlider_C::BottomMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, LeftSideMargin) == 0x000410, "Member 'UCommonSlider_C::LeftSideMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, RightSideMargin) == 0x000418, "Member 'UCommonSlider_C::RightSideMargin' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderSize) == 0x000420, "Member 'UCommonSlider_C::SliderSize' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, DefaultValue) == 0x000428, "Member 'UCommonSlider_C::DefaultValue' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, PhotoModeWidget) == 0x000430, "Member 'UCommonSlider_C::PhotoModeWidget' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, SliderDispatcher) == 0x000438, "Member 'UCommonSlider_C::SliderDispatcher' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, Focus_) == 0x000448, "Member 'UCommonSlider_C::Focus_' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, FocusedSliderBarColor) == 0x00044C, "Member 'UCommonSlider_C::FocusedSliderBarColor' has a wrong offset!");
static_assert(offsetof(UCommonSlider_C, UnfocusedSliderBarColor) == 0x00045C, "Member 'UCommonSlider_C::UnfocusedSliderBarColor' has a wrong offset!");

}


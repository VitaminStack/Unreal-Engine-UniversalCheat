#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AirdropAircraft

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AirdropAircraft.AirdropAircraft_C
// 0x0078 (0x0318 - 0x02A0)
class AAirdropAircraft_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   LightBackWhite;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LightRightGreen;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LightLeftRed;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DirectionOfLineTracer;                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DirectionOfFlight;                                 // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Airdrops;                                          // 0x02E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	double                                        Speed;                                             // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RegionRadius;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FlightDuration;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAirdropsToSpawn;                                // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DisplayDrawDebug_;                                 // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_CheckForRegionCrossing;                      // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CheckForRegionCrossing();
	void ExecuteUbergraph_AirdropAircraft(int32 EntryPoint);
	void MC_Lights();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SpawnAirdrop();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AirdropAircraft_C">();
	}
	static class AAirdropAircraft_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAirdropAircraft_C>();
	}
};
static_assert(alignof(AAirdropAircraft_C) == 0x000008, "Wrong alignment on AAirdropAircraft_C");
static_assert(sizeof(AAirdropAircraft_C) == 0x000318, "Wrong size on AAirdropAircraft_C");
static_assert(offsetof(AAirdropAircraft_C, UberGraphFrame) == 0x0002A0, "Member 'AAirdropAircraft_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, LightBackWhite) == 0x0002A8, "Member 'AAirdropAircraft_C::LightBackWhite' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, LightRightGreen) == 0x0002B0, "Member 'AAirdropAircraft_C::LightRightGreen' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, LightLeftRed) == 0x0002B8, "Member 'AAirdropAircraft_C::LightLeftRed' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, Audio) == 0x0002C0, "Member 'AAirdropAircraft_C::Audio' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, DirectionOfLineTracer) == 0x0002C8, "Member 'AAirdropAircraft_C::DirectionOfLineTracer' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, DirectionOfFlight) == 0x0002D0, "Member 'AAirdropAircraft_C::DirectionOfFlight' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, StaticMesh) == 0x0002D8, "Member 'AAirdropAircraft_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, Airdrops) == 0x0002E0, "Member 'AAirdropAircraft_C::Airdrops' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, Speed) == 0x0002F0, "Member 'AAirdropAircraft_C::Speed' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, RegionRadius) == 0x0002F8, "Member 'AAirdropAircraft_C::RegionRadius' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, FlightDuration) == 0x000300, "Member 'AAirdropAircraft_C::FlightDuration' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, MaxAirdropsToSpawn) == 0x000308, "Member 'AAirdropAircraft_C::MaxAirdropsToSpawn' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, DisplayDrawDebug_) == 0x00030C, "Member 'AAirdropAircraft_C::DisplayDrawDebug_' has a wrong offset!");
static_assert(offsetof(AAirdropAircraft_C, Timer_CheckForRegionCrossing) == 0x000310, "Member 'AAirdropAircraft_C::Timer_CheckForRegionCrossing' has a wrong offset!");

}


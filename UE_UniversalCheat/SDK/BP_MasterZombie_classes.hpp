#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterZombie

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Zombie_classes.hpp"
#include "Enum_AILootTables_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterZombie.BP_MasterZombie_C
// 0x0220 (0x08B0 - 0x0690)
class ABP_MasterZombie_C : public ABP_Zombie_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterZombie_C;                  // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USD_AIComponent_C*                      SD_AIComponent;                                    // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeRightMesh;                                      // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeLeftMesh;                                       // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Zombie_Cue;                                        // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCCCollisionHandlerComponent*           CCCollisionHandler;                                // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackSocketName;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   AttackMontage;                                     // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             AttackSound;                                       // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_Attacking;                                   // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DeathSound;                                        // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageToDo;                                        // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead_;                                           // 0x0718(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	Enum_AILootTables                             LootTable;                                         // 0x0719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71A[0x6];                                      // 0x071A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name_0;                                            // 0x0720(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 CurrentActor;                                      // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractingActorLoc;                               // 0x0740(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_for_Rad_Damage;                             // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Radiation_Damage;                                  // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      EyeMaterial;                                       // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  Meshes;                                            // 0x0770(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              Materials;                                         // 0x0780(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           HitAnimation;                                      // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ShovedAnimation;                                   // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageToDo_Default;                                // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roaming_Speed;                                     // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alert_Speed;                                       // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alert_Speed_Default;                               // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Attack_Speed;                                      // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCauseRadDamage_;                                // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          XpPopUpEnabled_;                                   // 0x07C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutlineEnabled;                                    // 0x07CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CB[0x1];                                      // 0x07CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageMultiplier;                                  // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedMultiplier;                                   // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Medical_Effects;                                   // 0x07D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Chance_for_Bleed;                                  // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_for_Heavy_Bleed;                            // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_for_Broken_Bone;                            // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAttack_;                                        // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0x7];                                      // 0x0801(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HealthDeviation;                                   // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool Headshot)> DeathEvent;                                        // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 ArgumentForQuest;                                  // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CanAddMarker_;                                     // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       Marker;                                            // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MarkerTimer;                                       // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         ClassesToIgnore;                                   // 0x0848(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TimeBetweenAttacksMin;                             // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBetweenAttacksMax;                             // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Attack_Speed_Default;                              // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XPMultiplier_Min;                                  // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XPMultiplier_Max;                                  // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Burning_;                                       // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               BurningEffect;                                     // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BurningTimer;                                      // 0x0888(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MouthFX;                                           // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ZombieMist;                                        // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RadTimer;                                          // 0x08A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Looted;                                            // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Actor_Aim_Focus(class AActor* Instigator_0);
	void Actor_Attack_Target(class AActor** Attack_Target);
	void ActorDead_(bool* Dead_);
	void AddMarker(class UWidgetComponent* Marker_0);
	void AI_Alert(class AActor* Alert_Actor);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Camera_Activate(bool Activate);
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Dead();
	void AI_End_Alert();
	void AIHealthBarInfo(bool* Visible_, class FString* Param_Name_0, bool* Boss_);
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void Archetype_Acidic();
	void Archetype_Sprinter();
	void Archetype_ToughenedCrawler();
	void Archetype_UltraRadiated();
	void AttackPlayer();
	void AttackTrace();
	void BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature(class AActor* DmgCauser, bool Headshot);
	void BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature(double Dmg, class AActor* DmgCauser);
	void CanAddMarkerToAI_(bool* CanAdd_);
	void CanStompAI_(bool* Stomp_);
	void Change_Speed(double Speed);
	void CheckDistanceFromActor();
	void Damage_Object(double Damage, class AActor* Damage_Causer, class AController* Event_Instigator);
	void Damage_Shoved(bool Anim, double Force);
	void Death(class AActor* Actor, bool Headshot);
	void Event_BloodMoon(bool Start_);
	void Event_DamageMultiplier(float NewValue);
	void Event_Despawn();
	void Event_Fire();
	void Event_HealthMultiplier(float NewValue);
	void Event_Marker();
	void Event_OnHit(const struct FHitResult& Hit);
	void Event_Rad();
	void Event_SpecialDeath(bool Headshot);
	void Event_SpeedMultiplier(float NewValue);
	void Event_XP(bool NewValue);
	void ExecuteUbergraph_BP_MasterZombie(int32 EntryPoint);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset);
	void GetMesh(class USkeletalMeshComponent** Mesh_0);
	void GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed);
	void GetQuestArgument(const class FString& Argument);
	void HitByVehicle(double Speed, const struct FVector& Direction);
	void IsAIBurning_(bool* IsBurning_);
	void IsObjectDamageable_(bool* Damageable_);
	void JigCanInteract(bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void LeftArmTrace();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void OnBlendOut_CC0DAA454A9DD390ABC0838BEAEB95EC(class FName NotifyName);
	void OnCompleted_CC0DAA454A9DD390ABC0838BEAEB95EC(class FName NotifyName);
	void OnEndInteract();
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteractEnded();
	void OnInterrupted_CC0DAA454A9DD390ABC0838BEAEB95EC(class FName NotifyName);
	void OnNotifyBegin_CC0DAA454A9DD390ABC0838BEAEB95EC(class FName NotifyName);
	void OnNotifyEnd_CC0DAA454A9DD390ABC0838BEAEB95EC(class FName NotifyName);
	void OnRep_IsDead_();
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void Outline(bool NewValue);
	void OverrideName(const class FString& Param_Name_0);
	void PickupBuildFromGround();
	void PlayZombieAttack();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void RightArmTrace();
	void SetBurning(bool Burning_, double Dmg, class AActor* Actor);
	void SetInteractDistance(class AActor* Target);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetMeshAndMaterial();
	void SetPickupCount(int32 NewCount, bool* Result);
	void StopBurning();
	void Turret_Destroyed_Effect();
	void Turret_End_Reload();
	void Turret_Idle_Start();
	void Turret_Idle_Stop();
	void Turret_Start_Reload();
	void UserConstructionScript();

	void AI_Is_Dead_(bool* Dead_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterZombie_C">();
	}
	static class ABP_MasterZombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterZombie_C>();
	}
};
static_assert(alignof(ABP_MasterZombie_C) == 0x000010, "Wrong alignment on ABP_MasterZombie_C");
static_assert(sizeof(ABP_MasterZombie_C) == 0x0008B0, "Wrong size on ABP_MasterZombie_C");
static_assert(offsetof(ABP_MasterZombie_C, UberGraphFrame_BP_MasterZombie_C) == 0x000690, "Member 'ABP_MasterZombie_C::UberGraphFrame_BP_MasterZombie_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DamageComponent) == 0x000698, "Member 'ABP_MasterZombie_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, SD_AIComponent) == 0x0006A0, "Member 'ABP_MasterZombie_C::SD_AIComponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, EyeRightMesh) == 0x0006A8, "Member 'ABP_MasterZombie_C::EyeRightMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, EyeLeftMesh) == 0x0006B0, "Member 'ABP_MasterZombie_C::EyeLeftMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Zombie_Cue) == 0x0006B8, "Member 'ABP_MasterZombie_C::Zombie_Cue' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, AIOSubject) == 0x0006C0, "Member 'ABP_MasterZombie_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, CCCollisionHandler) == 0x0006C8, "Member 'ABP_MasterZombie_C::CCCollisionHandler' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, NavigationInvoker) == 0x0006D0, "Member 'ABP_MasterZombie_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, BP_JigMultiplayer) == 0x0006D8, "Member 'ABP_MasterZombie_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, AttackSocketName) == 0x0006E0, "Member 'ABP_MasterZombie_C::AttackSocketName' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, AttackMontage) == 0x0006E8, "Member 'ABP_MasterZombie_C::AttackMontage' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, AttackSound) == 0x0006F8, "Member 'ABP_MasterZombie_C::AttackSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Start_Attacking) == 0x000700, "Member 'ABP_MasterZombie_C::Start_Attacking' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DeathSound) == 0x000708, "Member 'ABP_MasterZombie_C::DeathSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DamageToDo) == 0x000710, "Member 'ABP_MasterZombie_C::DamageToDo' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, IsDead_) == 0x000718, "Member 'ABP_MasterZombie_C::IsDead_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, LootTable) == 0x000719, "Member 'ABP_MasterZombie_C::LootTable' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Name_0) == 0x000720, "Member 'ABP_MasterZombie_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, CurrentActor) == 0x000738, "Member 'ABP_MasterZombie_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, InteractingActorLoc) == 0x000740, "Member 'ABP_MasterZombie_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Chance_for_Rad_Damage) == 0x000758, "Member 'ABP_MasterZombie_C::Chance_for_Rad_Damage' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Radiation_Damage) == 0x000760, "Member 'ABP_MasterZombie_C::Radiation_Damage' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, EyeMaterial) == 0x000768, "Member 'ABP_MasterZombie_C::EyeMaterial' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Meshes) == 0x000770, "Member 'ABP_MasterZombie_C::Meshes' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Materials) == 0x000780, "Member 'ABP_MasterZombie_C::Materials' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, HitAnimation) == 0x000790, "Member 'ABP_MasterZombie_C::HitAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, ShovedAnimation) == 0x000798, "Member 'ABP_MasterZombie_C::ShovedAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DamageToDo_Default) == 0x0007A0, "Member 'ABP_MasterZombie_C::DamageToDo_Default' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Roaming_Speed) == 0x0007A8, "Member 'ABP_MasterZombie_C::Roaming_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Alert_Speed) == 0x0007B0, "Member 'ABP_MasterZombie_C::Alert_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Alert_Speed_Default) == 0x0007B8, "Member 'ABP_MasterZombie_C::Alert_Speed_Default' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Attack_Speed) == 0x0007C0, "Member 'ABP_MasterZombie_C::Attack_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, CanCauseRadDamage_) == 0x0007C8, "Member 'ABP_MasterZombie_C::CanCauseRadDamage_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, XpPopUpEnabled_) == 0x0007C9, "Member 'ABP_MasterZombie_C::XpPopUpEnabled_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, OutlineEnabled) == 0x0007CA, "Member 'ABP_MasterZombie_C::OutlineEnabled' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DamageMultiplier) == 0x0007CC, "Member 'ABP_MasterZombie_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, SpeedMultiplier) == 0x0007D0, "Member 'ABP_MasterZombie_C::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Medical_Effects) == 0x0007D8, "Member 'ABP_MasterZombie_C::Medical_Effects' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Chance_for_Bleed) == 0x0007E8, "Member 'ABP_MasterZombie_C::Chance_for_Bleed' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Chance_for_Heavy_Bleed) == 0x0007F0, "Member 'ABP_MasterZombie_C::Chance_for_Heavy_Bleed' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Chance_for_Broken_Bone) == 0x0007F8, "Member 'ABP_MasterZombie_C::Chance_for_Broken_Bone' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, CanAttack_) == 0x000800, "Member 'ABP_MasterZombie_C::CanAttack_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, HealthDeviation) == 0x000808, "Member 'ABP_MasterZombie_C::HealthDeviation' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, DeathEvent) == 0x000810, "Member 'ABP_MasterZombie_C::DeathEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, ArgumentForQuest) == 0x000820, "Member 'ABP_MasterZombie_C::ArgumentForQuest' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, CanAddMarker_) == 0x000830, "Member 'ABP_MasterZombie_C::CanAddMarker_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Marker) == 0x000838, "Member 'ABP_MasterZombie_C::Marker' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, MarkerTimer) == 0x000840, "Member 'ABP_MasterZombie_C::MarkerTimer' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, ClassesToIgnore) == 0x000848, "Member 'ABP_MasterZombie_C::ClassesToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, TimeBetweenAttacksMin) == 0x000858, "Member 'ABP_MasterZombie_C::TimeBetweenAttacksMin' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, TimeBetweenAttacksMax) == 0x00085C, "Member 'ABP_MasterZombie_C::TimeBetweenAttacksMax' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Attack_Speed_Default) == 0x000860, "Member 'ABP_MasterZombie_C::Attack_Speed_Default' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, XPMultiplier_Min) == 0x000868, "Member 'ABP_MasterZombie_C::XPMultiplier_Min' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, XPMultiplier_Max) == 0x000870, "Member 'ABP_MasterZombie_C::XPMultiplier_Max' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Is_Burning_) == 0x000878, "Member 'ABP_MasterZombie_C::Is_Burning_' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, BurningEffect) == 0x000880, "Member 'ABP_MasterZombie_C::BurningEffect' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, BurningTimer) == 0x000888, "Member 'ABP_MasterZombie_C::BurningTimer' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, MouthFX) == 0x000890, "Member 'ABP_MasterZombie_C::MouthFX' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, ZombieMist) == 0x000898, "Member 'ABP_MasterZombie_C::ZombieMist' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, RadTimer) == 0x0008A0, "Member 'ABP_MasterZombie_C::RadTimer' has a wrong offset!");
static_assert(offsetof(ABP_MasterZombie_C, Looted) == 0x0008A8, "Member 'ABP_MasterZombie_C::Looted' has a wrong offset!");

}


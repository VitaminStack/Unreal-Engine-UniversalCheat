#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_Manager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_Audio_structs.hpp"
#include "E_TimeOfDay_structs.hpp"
#include "E_Switch_Method_structs.hpp"
#include "E_Combat_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_Manager.BP_Audio_Manager_C
// 0x0228 (0x04C0 - 0x0298)
class ABP_Audio_Manager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Ambient_2;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Ambient_1;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimeBeforeNewSong__Direction_365E0CD44604E667EF7ED4AEBA9ED0E6; // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimeBeforeNewSong;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ExplorationTimeOfDayBlend_Blend_F8AE2C0B4ECCED7F40FEC48A11649C81; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ExplorationTimeOfDayBlend__Direction_F8AE2C0B4ECCED7F40FEC48A11649C81; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ExplorationTimeOfDayBlend;                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CombatMusicBlend_Blend_839A7D494AD054EEDFF65DAB7182882A; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CombatMusicBlend__Direction_839A7D494AD054EEDFF65DAB7182882A; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CombatMusicBlend;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxConcurrentAmbientSounds;                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRandomSoundsUseTimeOfDay;                         // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseRandom;                                       // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EE[0x2];                                      // 0x02EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RandomSoundMinDelay;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomSoundMaxDelay;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAudioComponent*>                RandomSoundsPlaying;                               // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FName                                   AreaName;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Player_Character;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Audio_Area_C*                       AudioAreaReference;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Audio_Area_C*>               OverlappingAudioAreas;                             // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_Audio_Area_C*                       MostRelevantAudioArea;                             // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FST_Audio                              SelectedCombat;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FST_Audio                              SelectedAmbient;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FST_Audio                              SelectedSoundtrack;                                // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_Audio>                      AmbientSounds;                                     // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_Audio>                      RandomAmbientCue;                                  // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_Audio>                      Combat_Music;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_Audio>                      SuspenseMusic;                                     // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_Audio>                      ExplorationMusic;                                  // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CombatMusic;                                       // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside;                                            // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DesiredAmbientVolume;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IndoorAmbientMultiplier;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MusicPaused;                                       // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AmbientPaused;                                     // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartCompleted;                                    // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangingMusic;                                     // 0x03DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangingAmbient;                                   // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCheckAgain;                                     // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active_Music_component_1;                          // 0x03DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DF[0x1];                                      // 0x03DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Music_Sound_1;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Music_Sound_2;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AmbientCrossFadeDuration;                          // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TimeOfDay                                   TimeOfDay;                                         // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Switch_Method                               Combat_AudioSwitchMethod;                          // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combat_SwitchDelay;                                // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combat_SwitchFadeDelay;                            // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CombatSwitchStinger;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_Switch_Method                               Exploration_AudioSwitchMethod;                     // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Exploration_SwitchDelay;                           // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exploration_SwitchFadeDelay;                       // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              MusicSwitchStinger;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_Combat                                      CombatStatus;                                      // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentTimeOfDayBlend;                             // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredTimeOfDayBlend;                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentCombatBlend;                                // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredCombatBlend;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowAudioVisualizers;                             // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      RandomAmbientAttenuation;                          // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RandomSoundMultiplier;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active_Ambient_component_1;                        // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DelayBeforeStart;                                  // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDelayedMusic;                                   // 0x047A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47B[0x5];                                      // 0x047B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DelayedFadeDuration;                               // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBetweenMusicMin;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBetweenMusicMax;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredLoopsMax;                                   // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Music;                                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayMusicOnGameStart;                              // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AmbientSavedSoundVolume;                           // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  Player;                                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void AddToAudioArray(const class ABP_Audio_Area_C*& NewArea);
	void ChangeAudio();
	void CheckForCombatMusic();
	void CheckRandomSounds(bool* FadeOutSounds);
	void CloseDelayedMusicGate();
	void CombatMusicBlend__FinishedFunc();
	void CombatMusicBlend__UpdateFunc();
	void CombatMusicCheck();
	void Continue_Music();
	void ExecuteUbergraph_BP_Audio_Manager(int32 EntryPoint);
	void ExplorationTimeOfDayBlend__FinishedFunc();
	void ExplorationTimeOfDayBlend__UpdateFunc();
	void FadeOutRandomAmbient();
	class UAudioComponent* GetAmbientComponent();
	class UAudioComponent* GetMusicComponent();
	int32 GetRandomAudioInteger(const TArray<struct FST_Audio>& TargetArray);
	void HideAllAreaVisualizers();
	void Pause_Ambient();
	void Pause_Music();
	void PlayDelayedMusic(bool ContinueTimeline_Delay);
	void PlayDelayedMusicInstant();
	void PlayRandomSound();
	void Random_Combat_or_exploration(struct FST_Audio* SelectedAudio, bool* Valid);
	void RandomAmbient(struct FST_Audio* SelectedAudio, bool* ValidResult);
	void RandomAmbientTrace(struct FVector* Location, bool* Condition);
	void ReceiveBeginPlay();
	void RemoveFromArray(class ABP_Audio_Area_C* AreaToRemove);
	void Set_Combat_or_tension_sound();
	void Set_Time_Of_Day_New_Sound();
	void SetAmbientVolume(double NewVolumeMultiplier);
	void SetAudioVariables(class ABP_Audio_Area_C* AudioAreaReference_0);
	void SetFloatParametersCombat(double Combat);
	void SetFloatParametersTimeOfDay(double TimeOfDay_0);
	void SetInside(bool bInside, double AmbientMultiplier, const struct FReverbSettings& ReverbSettings, class FName ReverbAreaName, double ReverbPriority);
	void ShowAllAreaVisualizers();
	void StartCombatMusic();
	void TimeBeforeNewSong__Continue__EventFunc();
	void TimeBeforeNewSong__FinishedFunc();
	void TimeBeforeNewSong__UpdateFunc();
	void Unpause_Ambient();
	void UpdateCombatStatus(E_Combat CombatStatus_0);
	void UpdateTimeOfDay(double Time, E_TimeOfDay Night_);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_Manager_C">();
	}
	static class ABP_Audio_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Audio_Manager_C>();
	}
};
static_assert(alignof(ABP_Audio_Manager_C) == 0x000008, "Wrong alignment on ABP_Audio_Manager_C");
static_assert(sizeof(ABP_Audio_Manager_C) == 0x0004C0, "Wrong size on ABP_Audio_Manager_C");
static_assert(offsetof(ABP_Audio_Manager_C, UberGraphFrame) == 0x000298, "Member 'ABP_Audio_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Ambient_2) == 0x0002A0, "Member 'ABP_Audio_Manager_C::Ambient_2' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Ambient_1) == 0x0002A8, "Member 'ABP_Audio_Manager_C::Ambient_1' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Billboard) == 0x0002B0, "Member 'ABP_Audio_Manager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, TimeBeforeNewSong__Direction_365E0CD44604E667EF7ED4AEBA9ED0E6) == 0x0002B8, "Member 'ABP_Audio_Manager_C::TimeBeforeNewSong__Direction_365E0CD44604E667EF7ED4AEBA9ED0E6' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, TimeBeforeNewSong) == 0x0002C0, "Member 'ABP_Audio_Manager_C::TimeBeforeNewSong' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ExplorationTimeOfDayBlend_Blend_F8AE2C0B4ECCED7F40FEC48A11649C81) == 0x0002C8, "Member 'ABP_Audio_Manager_C::ExplorationTimeOfDayBlend_Blend_F8AE2C0B4ECCED7F40FEC48A11649C81' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ExplorationTimeOfDayBlend__Direction_F8AE2C0B4ECCED7F40FEC48A11649C81) == 0x0002CC, "Member 'ABP_Audio_Manager_C::ExplorationTimeOfDayBlend__Direction_F8AE2C0B4ECCED7F40FEC48A11649C81' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ExplorationTimeOfDayBlend) == 0x0002D0, "Member 'ABP_Audio_Manager_C::ExplorationTimeOfDayBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatMusicBlend_Blend_839A7D494AD054EEDFF65DAB7182882A) == 0x0002D8, "Member 'ABP_Audio_Manager_C::CombatMusicBlend_Blend_839A7D494AD054EEDFF65DAB7182882A' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatMusicBlend__Direction_839A7D494AD054EEDFF65DAB7182882A) == 0x0002DC, "Member 'ABP_Audio_Manager_C::CombatMusicBlend__Direction_839A7D494AD054EEDFF65DAB7182882A' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatMusicBlend) == 0x0002E0, "Member 'ABP_Audio_Manager_C::CombatMusicBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, MaxConcurrentAmbientSounds) == 0x0002E8, "Member 'ABP_Audio_Manager_C::MaxConcurrentAmbientSounds' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, bRandomSoundsUseTimeOfDay) == 0x0002EC, "Member 'ABP_Audio_Manager_C::bRandomSoundsUseTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, PauseRandom) == 0x0002ED, "Member 'ABP_Audio_Manager_C::PauseRandom' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomSoundMinDelay) == 0x0002F0, "Member 'ABP_Audio_Manager_C::RandomSoundMinDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomSoundMaxDelay) == 0x0002F8, "Member 'ABP_Audio_Manager_C::RandomSoundMaxDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomSoundsPlaying) == 0x000300, "Member 'ABP_Audio_Manager_C::RandomSoundsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AreaName) == 0x000310, "Member 'ABP_Audio_Manager_C::AreaName' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Player_Character) == 0x000318, "Member 'ABP_Audio_Manager_C::Player_Character' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AudioAreaReference) == 0x000320, "Member 'ABP_Audio_Manager_C::AudioAreaReference' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, OverlappingAudioAreas) == 0x000328, "Member 'ABP_Audio_Manager_C::OverlappingAudioAreas' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, MostRelevantAudioArea) == 0x000338, "Member 'ABP_Audio_Manager_C::MostRelevantAudioArea' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, SelectedCombat) == 0x000340, "Member 'ABP_Audio_Manager_C::SelectedCombat' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, SelectedAmbient) == 0x000350, "Member 'ABP_Audio_Manager_C::SelectedAmbient' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, SelectedSoundtrack) == 0x000360, "Member 'ABP_Audio_Manager_C::SelectedSoundtrack' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AmbientSounds) == 0x000370, "Member 'ABP_Audio_Manager_C::AmbientSounds' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomAmbientCue) == 0x000380, "Member 'ABP_Audio_Manager_C::RandomAmbientCue' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Combat_Music) == 0x000390, "Member 'ABP_Audio_Manager_C::Combat_Music' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, SuspenseMusic) == 0x0003A0, "Member 'ABP_Audio_Manager_C::SuspenseMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ExplorationMusic) == 0x0003B0, "Member 'ABP_Audio_Manager_C::ExplorationMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatMusic) == 0x0003C0, "Member 'ABP_Audio_Manager_C::CombatMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Inside) == 0x0003C1, "Member 'ABP_Audio_Manager_C::Inside' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DesiredAmbientVolume) == 0x0003C8, "Member 'ABP_Audio_Manager_C::DesiredAmbientVolume' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, IndoorAmbientMultiplier) == 0x0003D0, "Member 'ABP_Audio_Manager_C::IndoorAmbientMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, MusicPaused) == 0x0003D8, "Member 'ABP_Audio_Manager_C::MusicPaused' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AmbientPaused) == 0x0003D9, "Member 'ABP_Audio_Manager_C::AmbientPaused' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, StartCompleted) == 0x0003DA, "Member 'ABP_Audio_Manager_C::StartCompleted' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ChangingMusic) == 0x0003DB, "Member 'ABP_Audio_Manager_C::ChangingMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, ChangingAmbient) == 0x0003DC, "Member 'ABP_Audio_Manager_C::ChangingAmbient' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CanCheckAgain) == 0x0003DD, "Member 'ABP_Audio_Manager_C::CanCheckAgain' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Active_Music_component_1) == 0x0003DE, "Member 'ABP_Audio_Manager_C::Active_Music_component_1' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Music_Sound_1) == 0x0003E0, "Member 'ABP_Audio_Manager_C::Music_Sound_1' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Music_Sound_2) == 0x0003E8, "Member 'ABP_Audio_Manager_C::Music_Sound_2' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AmbientCrossFadeDuration) == 0x0003F0, "Member 'ABP_Audio_Manager_C::AmbientCrossFadeDuration' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, TimeOfDay) == 0x0003F8, "Member 'ABP_Audio_Manager_C::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Combat_AudioSwitchMethod) == 0x0003F9, "Member 'ABP_Audio_Manager_C::Combat_AudioSwitchMethod' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Combat_SwitchDelay) == 0x000400, "Member 'ABP_Audio_Manager_C::Combat_SwitchDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Combat_SwitchFadeDelay) == 0x000408, "Member 'ABP_Audio_Manager_C::Combat_SwitchFadeDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatSwitchStinger) == 0x000410, "Member 'ABP_Audio_Manager_C::CombatSwitchStinger' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Exploration_AudioSwitchMethod) == 0x000418, "Member 'ABP_Audio_Manager_C::Exploration_AudioSwitchMethod' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Exploration_SwitchDelay) == 0x000420, "Member 'ABP_Audio_Manager_C::Exploration_SwitchDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Exploration_SwitchFadeDelay) == 0x000428, "Member 'ABP_Audio_Manager_C::Exploration_SwitchFadeDelay' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, MusicSwitchStinger) == 0x000430, "Member 'ABP_Audio_Manager_C::MusicSwitchStinger' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CombatStatus) == 0x000438, "Member 'ABP_Audio_Manager_C::CombatStatus' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CurrentTimeOfDayBlend) == 0x000440, "Member 'ABP_Audio_Manager_C::CurrentTimeOfDayBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DesiredTimeOfDayBlend) == 0x000448, "Member 'ABP_Audio_Manager_C::DesiredTimeOfDayBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, CurrentCombatBlend) == 0x000450, "Member 'ABP_Audio_Manager_C::CurrentCombatBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DesiredCombatBlend) == 0x000458, "Member 'ABP_Audio_Manager_C::DesiredCombatBlend' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, bShowAudioVisualizers) == 0x000460, "Member 'ABP_Audio_Manager_C::bShowAudioVisualizers' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomAmbientAttenuation) == 0x000468, "Member 'ABP_Audio_Manager_C::RandomAmbientAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, RandomSoundMultiplier) == 0x000470, "Member 'ABP_Audio_Manager_C::RandomSoundMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Active_Ambient_component_1) == 0x000478, "Member 'ABP_Audio_Manager_C::Active_Ambient_component_1' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DelayBeforeStart) == 0x000479, "Member 'ABP_Audio_Manager_C::DelayBeforeStart' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, UseDelayedMusic) == 0x00047A, "Member 'ABP_Audio_Manager_C::UseDelayedMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DelayedFadeDuration) == 0x000480, "Member 'ABP_Audio_Manager_C::DelayedFadeDuration' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DelayBetweenMusicMin) == 0x000488, "Member 'ABP_Audio_Manager_C::DelayBetweenMusicMin' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DelayBetweenMusicMax) == 0x000490, "Member 'ABP_Audio_Manager_C::DelayBetweenMusicMax' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, DesiredLoopsMax) == 0x000498, "Member 'ABP_Audio_Manager_C::DesiredLoopsMax' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Music) == 0x0004A0, "Member 'ABP_Audio_Manager_C::Music' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, PlayMusicOnGameStart) == 0x0004A8, "Member 'ABP_Audio_Manager_C::PlayMusicOnGameStart' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, AmbientSavedSoundVolume) == 0x0004B0, "Member 'ABP_Audio_Manager_C::AmbientSavedSoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Manager_C, Player) == 0x0004B8, "Member 'ABP_Audio_Manager_C::Player' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIOptimizer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AIOptimizer.EDespawnMethod
// NumValues: 0x0003
enum class EDespawnMethod : uint8
{
	UseQueue                                 = 0,
	Immediately                              = 1,
	EDespawnMethod_MAX                       = 2,
};

// Enum AIOptimizer.EAIOFeaturesFlags
// NumValues: 0x0008
enum class EAIOFeaturesFlags : uint8
{
	AIBrain                                  = 0,
	MovementComponent                        = 1,
	Visibility                               = 2,
	Collision                                = 3,
	Animations                               = 4,
	ActorTick                                = 5,
	Shadows                                  = 6,
	EAIOFeaturesFlags_MAX                    = 7,
};

// Enum AIOptimizer.EAIODebugGroup
// NumValues: 0x000A
enum class EAIODebugGroup : uint8
{
	Undefined                                = 0,
	Spawned                                  = 1,
	Despawned                                = 2,
	PendingSpawn                             = 3,
	PendingDespawn                           = 4,
	SpawnedClose                             = 5,
	SpawnedMedium                            = 6,
	SpawnedFar                               = 7,
	NotUpdated                               = 8,
	EAIODebugGroup_MAX                       = 9,
};

// Enum AIOptimizer.EAIOSelectSpawnPointsMethod
// NumValues: 0x0003
enum class EAIOSelectSpawnPointsMethod : uint8
{
	UseRandomPoints                          = 0,
	UseSpecifiedSpawnPoints                  = 1,
	EAIOSelectSpawnPointsMethod_MAX          = 2,
};

// Enum AIOptimizer.EAIORespawnMethod
// NumValues: 0x0004
enum class EAIORespawnMethod : uint8
{
	Undefined                                = 0,
	AllAtOnce                                = 1,
	EachIndividually                         = 2,
	EAIORespawnMethod_MAX                    = 3,
};

// Enum AIOptimizer.EAIOSpawnPointsProjectionMethod
// NumValues: 0x0004
enum class EAIOSpawnPointsProjectionMethod : uint8
{
	None                                     = 0,
	Geometry                                 = 1,
	Navigation                               = 2,
	EAIOSpawnPointsProjectionMethod_MAX      = 3,
};

// Enum AIOptimizer.EAIOStartSpawningMethod
// NumValues: 0x0005
enum class EAIOStartSpawningMethod : uint8
{
	None                                     = 0,
	SpawnOnGameStart                         = 1,
	SpawnOnRadius                            = 2,
	SpawnOnRegion                            = 3,
	EAIOStartSpawningMethod_MAX              = 4,
};

// ScriptStruct AIOptimizer.AIOSubjectHandle
// 0x0004 (0x0004 - 0x0000)
struct FAIOSubjectHandle final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIOSubjectHandle) == 0x000004, "Wrong alignment on FAIOSubjectHandle");
static_assert(sizeof(FAIOSubjectHandle) == 0x000004, "Wrong size on FAIOSubjectHandle");
static_assert(offsetof(FAIOSubjectHandle, HandleId) == 0x000000, "Member 'FAIOSubjectHandle::HandleId' has a wrong offset!");

// ScriptStruct AIOptimizer.AIODespawnedSubject
// 0x0090 (0x0090 - 0x0000)
struct FAIODespawnedSubject final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRadiusSquared;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIOData_Base*                          Data;                                              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIOSubjectHandle                      Handle;                                            // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bIsForcedToSpawn : 1;                              // 0x007C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanBeRespawnedOnlyByHandle : 1;                   // 0x007C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Spawner;                                           // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIODespawnedSubject) == 0x000010, "Wrong alignment on FAIODespawnedSubject");
static_assert(sizeof(FAIODespawnedSubject) == 0x000090, "Wrong size on FAIODespawnedSubject");
static_assert(offsetof(FAIODespawnedSubject, Transform) == 0x000000, "Member 'FAIODespawnedSubject::Transform' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, Class) == 0x000060, "Member 'FAIODespawnedSubject::Class' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, SpawnRadiusSquared) == 0x000068, "Member 'FAIODespawnedSubject::SpawnRadiusSquared' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, Priority) == 0x00006C, "Member 'FAIODespawnedSubject::Priority' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, Data) == 0x000070, "Member 'FAIODespawnedSubject::Data' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, Handle) == 0x000078, "Member 'FAIODespawnedSubject::Handle' has a wrong offset!");
static_assert(offsetof(FAIODespawnedSubject, Spawner) == 0x000080, "Member 'FAIODespawnedSubject::Spawner' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOSubject
// 0x0018 (0x0018 - 0x0000)
struct FAIOSubject final
{
public:
	class UAIOSubjectComponent*                   Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ComponentOwner;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIOSubject) == 0x000008, "Wrong alignment on FAIOSubject");
static_assert(sizeof(FAIOSubject) == 0x000018, "Wrong size on FAIOSubject");
static_assert(offsetof(FAIOSubject, Component) == 0x000000, "Member 'FAIOSubject::Component' has a wrong offset!");
static_assert(offsetof(FAIOSubject, ComponentOwner) == 0x000008, "Member 'FAIOSubject::ComponentOwner' has a wrong offset!");
static_assert(offsetof(FAIOSubject, Priority) == 0x000010, "Member 'FAIOSubject::Priority' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOInvoker
// 0x0010 (0x0010 - 0x0000)
struct FAIOInvoker final
{
public:
	class UAIOInvokerComponent*                   Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ComponentOwner;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIOInvoker) == 0x000008, "Wrong alignment on FAIOInvoker");
static_assert(sizeof(FAIOInvoker) == 0x000010, "Wrong size on FAIOInvoker");
static_assert(offsetof(FAIOInvoker, Component) == 0x000000, "Member 'FAIOInvoker::Component' has a wrong offset!");
static_assert(offsetof(FAIOInvoker, ComponentOwner) == 0x000008, "Member 'FAIOInvoker::ComponentOwner' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOptimizationLayer
// 0x0008 (0x0008 - 0x0000)
struct FAIOptimizationLayer final
{
public:
	float                                         LayerRadius;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIOptimizationLayer) == 0x000004, "Wrong alignment on FAIOptimizationLayer");
static_assert(sizeof(FAIOptimizationLayer) == 0x000008, "Wrong size on FAIOptimizationLayer");
static_assert(offsetof(FAIOptimizationLayer, LayerRadius) == 0x000000, "Member 'FAIOptimizationLayer::LayerRadius' has a wrong offset!");

// ScriptStruct AIOptimizer.AIODebugSubjectData
// 0x0048 (0x0048 - 0x0000)
struct FAIODebugSubjectData final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SubjectLocation;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InvokerLocation;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSpawned : 1;                                    // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPending : 1;                                    // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotUpdated : 1;                                   // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSeen : 1;                                       // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToInvoker;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DespawnRadius;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIODebugSubjectData) == 0x000008, "Wrong alignment on FAIODebugSubjectData");
static_assert(sizeof(FAIODebugSubjectData) == 0x000048, "Wrong size on FAIODebugSubjectData");
static_assert(offsetof(FAIODebugSubjectData, Layer) == 0x000000, "Member 'FAIODebugSubjectData::Layer' has a wrong offset!");
static_assert(offsetof(FAIODebugSubjectData, SubjectLocation) == 0x000008, "Member 'FAIODebugSubjectData::SubjectLocation' has a wrong offset!");
static_assert(offsetof(FAIODebugSubjectData, InvokerLocation) == 0x000020, "Member 'FAIODebugSubjectData::InvokerLocation' has a wrong offset!");
static_assert(offsetof(FAIODebugSubjectData, DistanceToInvoker) == 0x00003C, "Member 'FAIODebugSubjectData::DistanceToInvoker' has a wrong offset!");
static_assert(offsetof(FAIODebugSubjectData, DespawnRadius) == 0x000040, "Member 'FAIODebugSubjectData::DespawnRadius' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOPendingSpawnGroup
// 0x0008 (0x0008 - 0x0000)
struct FAIOPendingSpawnGroup final
{
public:
	int32                                         SpawnedAmount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalAmountToSpawn;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIOPendingSpawnGroup) == 0x000004, "Wrong alignment on FAIOPendingSpawnGroup");
static_assert(sizeof(FAIOPendingSpawnGroup) == 0x000008, "Wrong size on FAIOPendingSpawnGroup");
static_assert(offsetof(FAIOPendingSpawnGroup, SpawnedAmount) == 0x000000, "Member 'FAIOPendingSpawnGroup::SpawnedAmount' has a wrong offset!");
static_assert(offsetof(FAIOPendingSpawnGroup, TotalAmountToSpawn) == 0x000004, "Member 'FAIOPendingSpawnGroup::TotalAmountToSpawn' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOPendingRespawnGroup
// 0x000C (0x000C - 0x0000)
struct FAIOPendingRespawnGroup final
{
public:
	float                                         SpawnGameTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIOPendingSpawnGroup                  SpawnGroup;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIOPendingRespawnGroup) == 0x000004, "Wrong alignment on FAIOPendingRespawnGroup");
static_assert(sizeof(FAIOPendingRespawnGroup) == 0x00000C, "Wrong size on FAIOPendingRespawnGroup");
static_assert(offsetof(FAIOPendingRespawnGroup, SpawnGameTime) == 0x000000, "Member 'FAIOPendingRespawnGroup::SpawnGameTime' has a wrong offset!");
static_assert(offsetof(FAIOPendingRespawnGroup, SpawnGroup) == 0x000004, "Member 'FAIOPendingRespawnGroup::SpawnGroup' has a wrong offset!");

// ScriptStruct AIOptimizer.AIOSpawnPoint
// 0x0060 (0x0060 - 0x0000)
struct FAIOSpawnPoint final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIOSpawnPoint) == 0x000010, "Wrong alignment on FAIOSpawnPoint");
static_assert(sizeof(FAIOSpawnPoint) == 0x000060, "Wrong size on FAIOSpawnPoint");
static_assert(offsetof(FAIOSpawnPoint, Transform) == 0x000000, "Member 'FAIOSpawnPoint::Transform' has a wrong offset!");

}


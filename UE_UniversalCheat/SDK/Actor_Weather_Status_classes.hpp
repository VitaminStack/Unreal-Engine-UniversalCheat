#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Actor_Weather_Status

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_ActorWeatherBoundsMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Actor_Weather_Status.Actor_Weather_Status_C
// 0x0230 (0x02D0 - 0x00A0)
class UActor_Weather_Status_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature__C_;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature__F_;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_ActorWeatherBoundsMode                   Exposure_Test_Bounds;                              // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temperature_Change_Speed;                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inverted_Occlusion;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Status_Query_Period;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Update_Values_Period;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDS_OcclusionSettings_C*               Occlusion_Settings;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Wet_Value;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wet;                                               // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snowy;                                             // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusty;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Rain_Exposure;                             // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Snow_Exposure;                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Wind_Exposure;                             // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Dust_Exposure;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Temp__F_;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          First_Tick;                                        // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       Dynamic_Material_Instances;                        // 0x0140(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Max_Snowy_Value;                                   // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Dusty_Value;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wet_Increase_Speed;                                // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Wet_Decrease_Speed;                                // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snowy_Increase_Speed;                              // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snowy_Decrease_Speed;                              // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dusty_Increase_Speed;                              // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dusty_Decrease_Speed;                              // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Wind;                                              // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hit_by_Rain;                                       // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hit_by_Snow;                                       // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hit_by_Dust;                                       // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Exposed_to_Rain;                                   // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Not_Exposed_to_Rain;                               // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Exposed_to_Snow;                                   // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Not_Exposed_to_Snow;                               // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Exposed_to_Dust;                                   // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Not_Exposed_to_Dust;                               // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Temperature_Cold;                                  // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Temperature_Neutral;                               // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Temperature_Hot;                                   // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ED_Rain_Exposed;                                   // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ED_Snow_Exposed;                                   // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ED_Dust_Exposed;                                   // 0x0242(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ED_Wind_Exposed;                                   // 0x0243(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Exposed_to_Wind;                                   // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Not_Exposed_to_Wind;                               // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ED_Temperature_State;                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rain_Event_Dispatcher_Threshold;                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Event_Dispatcher_Threshold;                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Event_Dispatcher_Threshold;                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Wind_Event_Dispatcher_Threshold;                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cold_Temperature_Threshold;                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Hot_Temperature_Threshold;                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Weather_State;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_PlayerOcclusion_C*                 Player_Occlusion;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              Drip_Systems;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Controlling_Drip_Systems;                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Local_Temperature_Offset__F_;                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activated(class UActorComponent* Component, bool bReset);
	void Check_for_Drip_Particles();
	void Check_for_UDW();
	void Clear_Timers();
	void Deactivated(class UActorComponent* Component);
	void ExecuteUbergraph_Actor_Weather_Status(int32 EntryPoint);
	void Increment_Surface_State(double Exposure, double Increase_Speed, double Decrease_Speed, double Max_Value, double Current_Value, double Delta, double* Out);
	void Query_Target_Status();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Start_Occlusion();
	void Trigger_Event_Dispatchers();
	void UDW_End_Play(class AActor* Actor, EEndPlayReason EndPlayReason);
	void Update_Current_Status();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Actor_Weather_Status_C">();
	}
	static class UActor_Weather_Status_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActor_Weather_Status_C>();
	}
};
static_assert(alignof(UActor_Weather_Status_C) == 0x000008, "Wrong alignment on UActor_Weather_Status_C");
static_assert(sizeof(UActor_Weather_Status_C) == 0x0002D0, "Wrong size on UActor_Weather_Status_C");
static_assert(offsetof(UActor_Weather_Status_C, UberGraphFrame) == 0x0000A0, "Member 'UActor_Weather_Status_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, UDW) == 0x0000A8, "Member 'UActor_Weather_Status_C::UDW' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature__C_) == 0x0000B0, "Member 'UActor_Weather_Status_C::Temperature__C_' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature__F_) == 0x0000B8, "Member 'UActor_Weather_Status_C::Temperature__F_' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Exposure_Test_Bounds) == 0x0000C0, "Member 'UActor_Weather_Status_C::Exposure_Test_Bounds' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature_Change_Speed) == 0x0000C8, "Member 'UActor_Weather_Status_C::Temperature_Change_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Inverted_Occlusion) == 0x0000D0, "Member 'UActor_Weather_Status_C::Inverted_Occlusion' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Status_Query_Period) == 0x0000D8, "Member 'UActor_Weather_Status_C::Status_Query_Period' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Update_Values_Period) == 0x0000E0, "Member 'UActor_Weather_Status_C::Update_Values_Period' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Occlusion_Settings) == 0x0000E8, "Member 'UActor_Weather_Status_C::Occlusion_Settings' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Max_Wet_Value) == 0x0000F0, "Member 'UActor_Weather_Status_C::Max_Wet_Value' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Wet) == 0x0000F8, "Member 'UActor_Weather_Status_C::Wet' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Snowy) == 0x000100, "Member 'UActor_Weather_Status_C::Snowy' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Dusty) == 0x000108, "Member 'UActor_Weather_Status_C::Dusty' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Current_Rain_Exposure) == 0x000110, "Member 'UActor_Weather_Status_C::Current_Rain_Exposure' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Current_Snow_Exposure) == 0x000118, "Member 'UActor_Weather_Status_C::Current_Snow_Exposure' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Current_Wind_Exposure) == 0x000120, "Member 'UActor_Weather_Status_C::Current_Wind_Exposure' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Current_Dust_Exposure) == 0x000128, "Member 'UActor_Weather_Status_C::Current_Dust_Exposure' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Target_Temp__F_) == 0x000130, "Member 'UActor_Weather_Status_C::Target_Temp__F_' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, First_Tick) == 0x000138, "Member 'UActor_Weather_Status_C::First_Tick' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Dynamic_Material_Instances) == 0x000140, "Member 'UActor_Weather_Status_C::Dynamic_Material_Instances' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Max_Snowy_Value) == 0x000150, "Member 'UActor_Weather_Status_C::Max_Snowy_Value' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Max_Dusty_Value) == 0x000158, "Member 'UActor_Weather_Status_C::Max_Dusty_Value' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Wet_Increase_Speed) == 0x000160, "Member 'UActor_Weather_Status_C::Wet_Increase_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Wet_Decrease_Speed) == 0x000168, "Member 'UActor_Weather_Status_C::Wet_Decrease_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Snowy_Increase_Speed) == 0x000170, "Member 'UActor_Weather_Status_C::Snowy_Increase_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Snowy_Decrease_Speed) == 0x000178, "Member 'UActor_Weather_Status_C::Snowy_Decrease_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Dusty_Increase_Speed) == 0x000180, "Member 'UActor_Weather_Status_C::Dusty_Increase_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Dusty_Decrease_Speed) == 0x000188, "Member 'UActor_Weather_Status_C::Dusty_Decrease_Speed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Wind) == 0x000190, "Member 'UActor_Weather_Status_C::Wind' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Hit_by_Rain) == 0x000198, "Member 'UActor_Weather_Status_C::Hit_by_Rain' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Hit_by_Snow) == 0x0001A0, "Member 'UActor_Weather_Status_C::Hit_by_Snow' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Hit_by_Dust) == 0x0001A8, "Member 'UActor_Weather_Status_C::Hit_by_Dust' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Exposed_to_Rain) == 0x0001B0, "Member 'UActor_Weather_Status_C::Exposed_to_Rain' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Not_Exposed_to_Rain) == 0x0001C0, "Member 'UActor_Weather_Status_C::Not_Exposed_to_Rain' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Exposed_to_Snow) == 0x0001D0, "Member 'UActor_Weather_Status_C::Exposed_to_Snow' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Not_Exposed_to_Snow) == 0x0001E0, "Member 'UActor_Weather_Status_C::Not_Exposed_to_Snow' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Exposed_to_Dust) == 0x0001F0, "Member 'UActor_Weather_Status_C::Exposed_to_Dust' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Not_Exposed_to_Dust) == 0x000200, "Member 'UActor_Weather_Status_C::Not_Exposed_to_Dust' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature_Cold) == 0x000210, "Member 'UActor_Weather_Status_C::Temperature_Cold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature_Neutral) == 0x000220, "Member 'UActor_Weather_Status_C::Temperature_Neutral' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Temperature_Hot) == 0x000230, "Member 'UActor_Weather_Status_C::Temperature_Hot' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, ED_Rain_Exposed) == 0x000240, "Member 'UActor_Weather_Status_C::ED_Rain_Exposed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, ED_Snow_Exposed) == 0x000241, "Member 'UActor_Weather_Status_C::ED_Snow_Exposed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, ED_Dust_Exposed) == 0x000242, "Member 'UActor_Weather_Status_C::ED_Dust_Exposed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, ED_Wind_Exposed) == 0x000243, "Member 'UActor_Weather_Status_C::ED_Wind_Exposed' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Exposed_to_Wind) == 0x000248, "Member 'UActor_Weather_Status_C::Exposed_to_Wind' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Not_Exposed_to_Wind) == 0x000258, "Member 'UActor_Weather_Status_C::Not_Exposed_to_Wind' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, ED_Temperature_State) == 0x000268, "Member 'UActor_Weather_Status_C::ED_Temperature_State' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Rain_Event_Dispatcher_Threshold) == 0x000270, "Member 'UActor_Weather_Status_C::Rain_Event_Dispatcher_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Snow_Event_Dispatcher_Threshold) == 0x000278, "Member 'UActor_Weather_Status_C::Snow_Event_Dispatcher_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Dust_Event_Dispatcher_Threshold) == 0x000280, "Member 'UActor_Weather_Status_C::Dust_Event_Dispatcher_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Wind_Event_Dispatcher_Threshold) == 0x000288, "Member 'UActor_Weather_Status_C::Wind_Event_Dispatcher_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Cold_Temperature_Threshold) == 0x000290, "Member 'UActor_Weather_Status_C::Cold_Temperature_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Hot_Temperature_Threshold) == 0x000298, "Member 'UActor_Weather_Status_C::Hot_Temperature_Threshold' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Weather_State) == 0x0002A0, "Member 'UActor_Weather_Status_C::Weather_State' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Player_Occlusion) == 0x0002A8, "Member 'UActor_Weather_Status_C::Player_Occlusion' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Drip_Systems) == 0x0002B0, "Member 'UActor_Weather_Status_C::Drip_Systems' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Controlling_Drip_Systems) == 0x0002C0, "Member 'UActor_Weather_Status_C::Controlling_Drip_Systems' has a wrong offset!");
static_assert(offsetof(UActor_Weather_Status_C, Local_Temperature_Offset__F_) == 0x0002C8, "Member 'UActor_Weather_Status_C::Local_Temperature_Offset__F_' has a wrong offset!");

}


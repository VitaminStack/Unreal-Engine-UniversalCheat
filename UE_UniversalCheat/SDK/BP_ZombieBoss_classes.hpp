#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZombieBoss

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MainEnemy_classes.hpp"
#include "Enum_AILootTables_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ZombieBoss.BP_ZombieBoss_C
// 0x0130 (0x07C0 - 0x0690)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_ZombieBoss_C : public ABP_MainEnemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ZombieBoss_C;                    // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDamageComponent_C*                     DamageComponent;                                   // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USD_AIComponent_C*                      SD_AIComponent;                                    // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThrowLoc;                                          // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeRightMesh;                                      // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeLeftMesh;                                       // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Zombie_Cue;                                        // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_JigMultiplayer_C*                   BP_JigMultiplayer;                                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DamageNumbersEnabled;                              // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead_;                                           // 0x06E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BloodSplatterEnabled;                              // 0x06E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_AILootTables                             LootTable;                                         // 0x06E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Unqiue_Items_Set;                                  // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AIName;                                            // 0x06F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 CurrentActor;                                      // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageToDo;                                        // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_Attacking;                                   // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AttackMontage;                                     // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             HitSound;                                          // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         ClassesToIgnore;                                   // 0x0740(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                InteractingActorLoc;                               // 0x0750(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          XpPopUpEnabled_;                                   // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthBarUI;                                       // 0x0769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutlineEnabled;                                    // 0x076A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthBarEnabled;                                  // 0x076B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMultiplier;                                  // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedMultiplier;                                   // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAddMarker_;                                     // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_775[0x3];                                      // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       Marker;                                            // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MarkerTimer;                                       // 0x0780(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Burning_;                                       // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               BurningEffect;                                     // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BurningTimer;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              BossDeath;                                         // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Looted;                                            // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Actor_Aim_Focus(class AActor* Instigator_0);
	void Actor_Attack_Target(class AActor** Attack_Target);
	void AddMarker(class UWidgetComponent* Marker_0);
	void AI_Alert(class AActor* Alert_Actor);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Camera_Activate(bool Activate);
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Dead();
	void AI_End_Alert();
	void AIHealthBarInfo(bool* Visible_, class FString* Name_0, bool* Boss_);
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void BndEvt__BP_MasterZombie_DamageComponent_K2Node_ComponentBoundEvent_1_Death__DelegateSignature(class AActor* DmgCauser, bool Headshot);
	void BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void BndEvt__DamageTester_DamageComponent_K2Node_ComponentBoundEvent_0_StandardDamage__DelegateSignature(double Dmg, class AActor* DmgCauser);
	void CanAddMarkerToAI_(bool* CanAdd_);
	void CanStompAI_(bool* Stomp_);
	void Change_Speed(double Speed);
	void CheckDistanceFromActor();
	void Death(class AActor* Player);
	void Despawn();
	void Event_DamageMultiplier(float NewValue);
	void Event_Despawn();
	void Event_Fire();
	void Event_HealthMultiplier(float NewValue);
	void Event_Marker();
	void Event_OnHit(const struct FHitResult& Hit);
	void Event_SpeedMultiplier(float NewValue);
	void Event_XP(bool NewValue);
	void ExecuteUbergraph_BP_ZombieBoss(int32 EntryPoint);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetMarker(class UTexture2D** Texture, struct FLinearColor* Color, double* MarkerOffset);
	void GetMesh(class USkeletalMeshComponent** Mesh_0);
	void GetMovementSpeeds(double* RoamingSpeed, double* AlertSpeed, double* AttackSpeed);
	void HitByVehicle(double Speed, const struct FVector& Direction);
	void IsAIBurning_(bool* IsBurning_);
	void JigCanInteract(bool* Result);
	void JigMP_GetLootWidget(class UWidget** Result, bool* Valid_);
	void JigMP_OnContainersSwap(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, bool* Result);
	void JigMP_OnItemAdded(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* FromComponent, bool* Result);
	void JigMP_OnItemConsumed(const struct FRepItemInfo& ConsumedItem, int32 Amount, int32 Remaining, const struct FRepItemInfo& InsideOf, class FName FromContainer, const class FString& CustomData, bool CallbackToPlayer_, bool* Result);
	void JigMP_OnItemDropped(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, class AActor* ActorRef, bool* Result);
	void JigMP_OnItemMoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, bool* Result);
	void JigMP_OnItemRemoved(const struct FGuid& ItemUID, const struct FGuid& FromContainerUID, const struct FGuid& ToContainerUID, class UActorComponent* ToComponent, bool* Result);
	void JigMP_OnMainContainerItemAdded(const struct FGuid& ToContainerUID, const struct FGuid& ItemUID, class FName ToContainerName, const struct FRepItemInfo& ItemInfo, class FName FromMain, bool* Result, class AActor** ActorRef);
	void JigMP_OnMainContainerItemRemoved(const struct FGuid& FromContainerUID, const struct FGuid& ItemUID, class FName ContainerName, const struct FRepItemInfo& ItemRemovedInfo, bool* Result);
	void JigMP_OnPickupAdded(const struct FRepItemInfo& Info, const struct FGuid& ItemUID, const struct FGuid& ToContainerUID, class FName ToContainer, bool* Result);
	void JigMP_OnPickupEquipped(class AActor* ActorRef, class FName ToContainerName, const struct FGuid& UID, const struct FGuid& ToContainerUID, const struct FRepItemInfo& Info, bool* Result, class AActor** OverrideActor);
	void JigMP_OnRequestDropItem(const struct FRepItemInfo& ItemInfo, class FName ContainerName, class AActor** ActorRef);
	void JigMP_OnTwoContainersSwap(class FName FromContainer, class FName ToContainer, bool* Result);
	void JigMP_OnUpdateChamberUID(const struct FGuid& NewUID, bool* Result);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void LeftArmTrace();
	void MeleeAttack();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void OnEndInteract();
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteractEnded();
	void OnRep_IsDead_();
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void Outline(bool NewValue);
	void OverrideName(const class FString& Name_0);
	void PickupBuildFromGround();
	void PlayAttack();
	void RadiationDamage(class AActor* Object);
	void RangedAttack(const struct FVector& Target);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void RightArmTrace();
	void SetBurning(bool Burning_, double Dmg, class AActor* Actor);
	void SetInteractDistance(class AActor* Target);
	void SetInteractOption(const struct FGameplayTag& Option);
	void SetPickupCount(int32 NewCount, bool* Result);
	void StopBurning();
	void Turret_Destroyed_Effect();
	void Turret_End_Reload();
	void Turret_Idle_Start();
	void Turret_Idle_Stop();
	void Turret_Start_Reload();
	void UserConstructionScript();

	void AI_Is_Dead_(bool* Dead_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ZombieBoss_C">();
	}
	static class ABP_ZombieBoss_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ZombieBoss_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_ZombieBoss_C) == 0x000010, "Wrong alignment on ABP_ZombieBoss_C");
static_assert(sizeof(ABP_ZombieBoss_C) == 0x0007C0, "Wrong size on ABP_ZombieBoss_C");
static_assert(offsetof(ABP_ZombieBoss_C, UberGraphFrame_BP_ZombieBoss_C) == 0x000690, "Member 'ABP_ZombieBoss_C::UberGraphFrame_BP_ZombieBoss_C' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, DamageComponent) == 0x000698, "Member 'ABP_ZombieBoss_C::DamageComponent' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, SD_AIComponent) == 0x0006A0, "Member 'ABP_ZombieBoss_C::SD_AIComponent' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, ThrowLoc) == 0x0006A8, "Member 'ABP_ZombieBoss_C::ThrowLoc' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, EyeRightMesh) == 0x0006B0, "Member 'ABP_ZombieBoss_C::EyeRightMesh' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, EyeLeftMesh) == 0x0006B8, "Member 'ABP_ZombieBoss_C::EyeLeftMesh' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Zombie_Cue) == 0x0006C0, "Member 'ABP_ZombieBoss_C::Zombie_Cue' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, AIOSubject) == 0x0006C8, "Member 'ABP_ZombieBoss_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, BP_JigMultiplayer) == 0x0006D0, "Member 'ABP_ZombieBoss_C::BP_JigMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, NavigationInvoker) == 0x0006D8, "Member 'ABP_ZombieBoss_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, DamageNumbersEnabled) == 0x0006E0, "Member 'ABP_ZombieBoss_C::DamageNumbersEnabled' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, IsDead_) == 0x0006E1, "Member 'ABP_ZombieBoss_C::IsDead_' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, BloodSplatterEnabled) == 0x0006E2, "Member 'ABP_ZombieBoss_C::BloodSplatterEnabled' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, LootTable) == 0x0006E3, "Member 'ABP_ZombieBoss_C::LootTable' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Unqiue_Items_Set) == 0x0006E8, "Member 'ABP_ZombieBoss_C::Unqiue_Items_Set' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, AIName) == 0x0006F8, "Member 'ABP_ZombieBoss_C::AIName' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, CurrentActor) == 0x000710, "Member 'ABP_ZombieBoss_C::CurrentActor' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, DamageToDo) == 0x000718, "Member 'ABP_ZombieBoss_C::DamageToDo' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Start_Attacking) == 0x000720, "Member 'ABP_ZombieBoss_C::Start_Attacking' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, AttackMontage) == 0x000728, "Member 'ABP_ZombieBoss_C::AttackMontage' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, HitSound) == 0x000738, "Member 'ABP_ZombieBoss_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, ClassesToIgnore) == 0x000740, "Member 'ABP_ZombieBoss_C::ClassesToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, InteractingActorLoc) == 0x000750, "Member 'ABP_ZombieBoss_C::InteractingActorLoc' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, XpPopUpEnabled_) == 0x000768, "Member 'ABP_ZombieBoss_C::XpPopUpEnabled_' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, HealthBarUI) == 0x000769, "Member 'ABP_ZombieBoss_C::HealthBarUI' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, OutlineEnabled) == 0x00076A, "Member 'ABP_ZombieBoss_C::OutlineEnabled' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, HealthBarEnabled) == 0x00076B, "Member 'ABP_ZombieBoss_C::HealthBarEnabled' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, DamageMultiplier) == 0x00076C, "Member 'ABP_ZombieBoss_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, SpeedMultiplier) == 0x000770, "Member 'ABP_ZombieBoss_C::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, CanAddMarker_) == 0x000774, "Member 'ABP_ZombieBoss_C::CanAddMarker_' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Marker) == 0x000778, "Member 'ABP_ZombieBoss_C::Marker' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, MarkerTimer) == 0x000780, "Member 'ABP_ZombieBoss_C::MarkerTimer' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Is_Burning_) == 0x000788, "Member 'ABP_ZombieBoss_C::Is_Burning_' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, BurningEffect) == 0x000790, "Member 'ABP_ZombieBoss_C::BurningEffect' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, BurningTimer) == 0x000798, "Member 'ABP_ZombieBoss_C::BurningTimer' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, BossDeath) == 0x0007A0, "Member 'ABP_ZombieBoss_C::BossDeath' has a wrong offset!");
static_assert(offsetof(ABP_ZombieBoss_C, Looted) == 0x0007B0, "Member 'ABP_ZombieBoss_C::Looted' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MeleePickup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_StaticMeshPickup_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MeleePickup.BP_MeleePickup_C
// 0x0018 (0x0328 - 0x0310)
class ABP_MeleePickup_C : public ABP_StaticMeshPickup_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MeleePickup_C;                   // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_WeaponsPickupComponent_C*           BP_WeaponsPickupComponent;                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              PassiveSkillsComponent;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Client_HitUI(double Damage, const struct FLinearColor& Colour);
	void Client_StrengthXP(double float_0);
	void CriticalHit(double Damage, double* NewDamage, struct FLinearColor* FloatingDmdColour);
	void Event_OnHitNormal(const struct FHitResult& Hit);
	void Event_OnHitPower(const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_MeleePickup(int32 EntryPoint);
	void FindStat(const struct FGameplayTag& StatTag, bool* Found, float* MinStat, double* MaxStat);
	void HitBody(class AActor* DamagedActor, const struct FVector& HitLoc, bool Power_);
	void HitFoliageRock(class UObject* Object, const struct FVector& SpawnTransform_Location, class UPrimitiveComponent* PrimitiveComponent, int32 Instance, int32 Hits, bool* Hit_);
	void HitFoliageTree(class UObject* Object, const struct FVector& SpawnTransform_Location, class UPrimitiveComponent* PrimitiveComponent, int32 Instance, int32 Hits, bool* Hit_);
	void HitHead(class AActor* DamagedActor, const struct FVector& HitLoc, bool Power_);
	void HitObjectWorld(class AActor* Object);
	void HitTrashObject(class AActor* Actor, double Dmg, bool* Hit_);
	void MaxMeleeHits(class UBP_WeaponsPickupComponent_C* Comp, int32* MaxActorsToHitInSwing_);
	void MeleeTrace();
	void MeleeTracePower();
	void NightCreatureCheck(double Input, double* Ouput);
	void ReduceDurability(double Multiplier);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MeleePickup_C">();
	}
	static class ABP_MeleePickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MeleePickup_C>();
	}
};
static_assert(alignof(ABP_MeleePickup_C) == 0x000008, "Wrong alignment on ABP_MeleePickup_C");
static_assert(sizeof(ABP_MeleePickup_C) == 0x000328, "Wrong size on ABP_MeleePickup_C");
static_assert(offsetof(ABP_MeleePickup_C, UberGraphFrame_BP_MeleePickup_C) == 0x000310, "Member 'ABP_MeleePickup_C::UberGraphFrame_BP_MeleePickup_C' has a wrong offset!");
static_assert(offsetof(ABP_MeleePickup_C, BP_WeaponsPickupComponent) == 0x000318, "Member 'ABP_MeleePickup_C::BP_WeaponsPickupComponent' has a wrong offset!");
static_assert(offsetof(ABP_MeleePickup_C, PassiveSkillsComponent) == 0x000320, "Member 'ABP_MeleePickup_C::PassiveSkillsComponent' has a wrong offset!");

}


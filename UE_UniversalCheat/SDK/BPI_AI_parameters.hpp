#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_AI.BPI_AI_C.AddMarker
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_AddMarker final
{
public:
	class UWidgetComponent*                       Marker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_AddMarker) == 0x000008, "Wrong alignment on BPI_AI_C_AddMarker");
static_assert(sizeof(BPI_AI_C_AddMarker) == 0x000008, "Wrong size on BPI_AI_C_AddMarker");
static_assert(offsetof(BPI_AI_C_AddMarker, Marker) == 0x000000, "Member 'BPI_AI_C_AddMarker::Marker' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.AIHealthBarInfo
// 0x0020 (0x0020 - 0x0000)
struct BPI_AI_C_AIHealthBarInfo final
{
public:
	bool                                          Visible_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Boss_;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_AIHealthBarInfo) == 0x000008, "Wrong alignment on BPI_AI_C_AIHealthBarInfo");
static_assert(sizeof(BPI_AI_C_AIHealthBarInfo) == 0x000020, "Wrong size on BPI_AI_C_AIHealthBarInfo");
static_assert(offsetof(BPI_AI_C_AIHealthBarInfo, Visible_) == 0x000000, "Member 'BPI_AI_C_AIHealthBarInfo::Visible_' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_AIHealthBarInfo, Name_0) == 0x000008, "Member 'BPI_AI_C_AIHealthBarInfo::Name_0' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_AIHealthBarInfo, Boss_) == 0x000018, "Member 'BPI_AI_C_AIHealthBarInfo::Boss_' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.CanAddMarkerToAI?
// 0x0001 (0x0001 - 0x0000)
struct BPI_AI_C_CanAddMarkerToAI_ final
{
public:
	bool                                          CanAdd_;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_CanAddMarkerToAI_) == 0x000001, "Wrong alignment on BPI_AI_C_CanAddMarkerToAI_");
static_assert(sizeof(BPI_AI_C_CanAddMarkerToAI_) == 0x000001, "Wrong size on BPI_AI_C_CanAddMarkerToAI_");
static_assert(offsetof(BPI_AI_C_CanAddMarkerToAI_, CanAdd_) == 0x000000, "Member 'BPI_AI_C_CanAddMarkerToAI_::CanAdd_' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.CanStompAI?
// 0x0001 (0x0001 - 0x0000)
struct BPI_AI_C_CanStompAI_ final
{
public:
	bool                                          Stomp_;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_CanStompAI_) == 0x000001, "Wrong alignment on BPI_AI_C_CanStompAI_");
static_assert(sizeof(BPI_AI_C_CanStompAI_) == 0x000001, "Wrong size on BPI_AI_C_CanStompAI_");
static_assert(offsetof(BPI_AI_C_CanStompAI_, Stomp_) == 0x000000, "Member 'BPI_AI_C_CanStompAI_::Stomp_' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetMarker
// 0x0020 (0x0020 - 0x0000)
struct BPI_AI_C_GetMarker final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarkerOffset;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetMarker) == 0x000008, "Wrong alignment on BPI_AI_C_GetMarker");
static_assert(sizeof(BPI_AI_C_GetMarker) == 0x000020, "Wrong size on BPI_AI_C_GetMarker");
static_assert(offsetof(BPI_AI_C_GetMarker, Texture) == 0x000000, "Member 'BPI_AI_C_GetMarker::Texture' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_GetMarker, Color) == 0x000008, "Member 'BPI_AI_C_GetMarker::Color' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_GetMarker, MarkerOffset) == 0x000018, "Member 'BPI_AI_C_GetMarker::MarkerOffset' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_GetMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetMesh) == 0x000008, "Wrong alignment on BPI_AI_C_GetMesh");
static_assert(sizeof(BPI_AI_C_GetMesh) == 0x000008, "Wrong size on BPI_AI_C_GetMesh");
static_assert(offsetof(BPI_AI_C_GetMesh, Mesh) == 0x000000, "Member 'BPI_AI_C_GetMesh::Mesh' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetMovementSpeeds
// 0x0018 (0x0018 - 0x0000)
struct BPI_AI_C_GetMovementSpeeds final
{
public:
	double                                        RoamingSpeed;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSpeed;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetMovementSpeeds) == 0x000008, "Wrong alignment on BPI_AI_C_GetMovementSpeeds");
static_assert(sizeof(BPI_AI_C_GetMovementSpeeds) == 0x000018, "Wrong size on BPI_AI_C_GetMovementSpeeds");
static_assert(offsetof(BPI_AI_C_GetMovementSpeeds, RoamingSpeed) == 0x000000, "Member 'BPI_AI_C_GetMovementSpeeds::RoamingSpeed' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_GetMovementSpeeds, AlertSpeed) == 0x000008, "Member 'BPI_AI_C_GetMovementSpeeds::AlertSpeed' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_GetMovementSpeeds, AttackSpeed) == 0x000010, "Member 'BPI_AI_C_GetMovementSpeeds::AttackSpeed' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.HitByVehicle
// 0x0020 (0x0020 - 0x0000)
struct BPI_AI_C_HitByVehicle final
{
public:
	double                                        Speed;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_HitByVehicle) == 0x000008, "Wrong alignment on BPI_AI_C_HitByVehicle");
static_assert(sizeof(BPI_AI_C_HitByVehicle) == 0x000020, "Wrong size on BPI_AI_C_HitByVehicle");
static_assert(offsetof(BPI_AI_C_HitByVehicle, Speed) == 0x000000, "Member 'BPI_AI_C_HitByVehicle::Speed' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_HitByVehicle, Direction) == 0x000008, "Member 'BPI_AI_C_HitByVehicle::Direction' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.IsAIBurning?
// 0x0001 (0x0001 - 0x0000)
struct BPI_AI_C_IsAIBurning_ final
{
public:
	bool                                          IsBurning_;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_IsAIBurning_) == 0x000001, "Wrong alignment on BPI_AI_C_IsAIBurning_");
static_assert(sizeof(BPI_AI_C_IsAIBurning_) == 0x000001, "Wrong size on BPI_AI_C_IsAIBurning_");
static_assert(offsetof(BPI_AI_C_IsAIBurning_, IsBurning_) == 0x000000, "Member 'BPI_AI_C_IsAIBurning_::IsBurning_' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.OverrideName
// 0x0010 (0x0010 - 0x0000)
struct BPI_AI_C_OverrideName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_OverrideName) == 0x000008, "Wrong alignment on BPI_AI_C_OverrideName");
static_assert(sizeof(BPI_AI_C_OverrideName) == 0x000010, "Wrong size on BPI_AI_C_OverrideName");
static_assert(offsetof(BPI_AI_C_OverrideName, Name_0) == 0x000000, "Member 'BPI_AI_C_OverrideName::Name_0' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.SetBurning
// 0x0018 (0x0018 - 0x0000)
struct BPI_AI_C_SetBurning final
{
public:
	bool                                          Burning_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dmg;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_SetBurning) == 0x000008, "Wrong alignment on BPI_AI_C_SetBurning");
static_assert(sizeof(BPI_AI_C_SetBurning) == 0x000018, "Wrong size on BPI_AI_C_SetBurning");
static_assert(offsetof(BPI_AI_C_SetBurning, Burning_) == 0x000000, "Member 'BPI_AI_C_SetBurning::Burning_' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_SetBurning, Dmg) == 0x000008, "Member 'BPI_AI_C_SetBurning::Dmg' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_SetBurning, Actor) == 0x000010, "Member 'BPI_AI_C_SetBurning::Actor' has a wrong offset!");

}


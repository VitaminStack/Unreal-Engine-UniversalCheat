#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Siren

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Siren.BP_Siren_C
// 0x0060 (0x0300 - 0x02A0)
class ABP_Siren_C final : public ABP_MasterObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAIOSubjectComponent*                   AIOSubject;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Playing;                                           // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SirenPlayingTimer;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x02D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        RandomTimeMin;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomTimeMax;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RandomSirenTimer;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void SirenPlayTimer();
	void SirenNoise();
	void SetPickupCount(int32 NewCount, bool* Result);
	void SetInteractOption(const struct FGameplayTag& Option);
	void ReceiveBeginPlay();
	void PickupBuildFromGround();
	void OnStopExecuteInteract(class AActor* InteractingActor);
	void OnServerExecuteInteract(const struct FGameplayTag& Option, class AActor* ByActor, const struct FS_JigPayload& Payload);
	void OnRequestServerInteract(class AActor* Actor, const struct FGameplayTag& Option, const struct FS_JigPayload& Payload, bool* Result);
	void OnExecuteInteractEnded();
	void OnExecuteInteractDialogue(class AActor* InteractingActor);
	void OnExecuteInteract(class AActor* InteractingActor, const struct FGameplayTag& Option);
	void OnEndInteract();
	void OnBeginInteract(class AActor* InteractingActor, const TMap<struct FGameplayTag, class FText>& Options);
	void JigSetCanInteract(bool CanInteract, bool EnablePhysics, bool* Result);
	void JigCanInteract(bool* Result);
	void GetMainSceneComp(class USceneComponent** Comp);
	void GetJigMultiplayerComponent(class UActorComponent** JigComp);
	void GetItemInfo(class UJigsawItem_DataAsset_C** Info, int32* Count, struct FS_RandomStatsConfig* RandomStatsConfig, TMap<class FString, class FString>* CustomData);
	void GetInteractOptions(TMap<struct FGameplayTag, class FText>* Options);
	void ExecuteUbergraph_BP_Siren(int32 EntryPoint);
	void Event_Siren();
	void DeactivateSiren();
	void BndEvt__BP_MPLootContainer_AIOSubject_K2Node_ComponentBoundEvent_0_OnOptimizationUpdate__DelegateSignature(bool bIsBeyondLastLayer, int32 LayerIndex, bool bIsSeen);
	void ActivateSiren();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Siren_C">();
	}
	static class ABP_Siren_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Siren_C>();
	}
};
static_assert(alignof(ABP_Siren_C) == 0x000008, "Wrong alignment on ABP_Siren_C");
static_assert(sizeof(ABP_Siren_C) == 0x000300, "Wrong size on ABP_Siren_C");
static_assert(offsetof(ABP_Siren_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_Siren_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, AIOSubject) == 0x0002A8, "Member 'ABP_Siren_C::AIOSubject' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, Audio) == 0x0002B0, "Member 'ABP_Siren_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, StaticMesh) == 0x0002B8, "Member 'ABP_Siren_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, Playing) == 0x0002C0, "Member 'ABP_Siren_C::Playing' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, SirenPlayingTimer) == 0x0002C8, "Member 'ABP_Siren_C::SirenPlayingTimer' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, Name_0) == 0x0002D0, "Member 'ABP_Siren_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, RandomTimeMin) == 0x0002E8, "Member 'ABP_Siren_C::RandomTimeMin' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, RandomTimeMax) == 0x0002F0, "Member 'ABP_Siren_C::RandomTimeMax' has a wrong offset!");
static_assert(offsetof(ABP_Siren_C, RandomSirenTimer) == 0x0002F8, "Member 'ABP_Siren_C::RandomSirenTimer' has a wrong offset!");

}


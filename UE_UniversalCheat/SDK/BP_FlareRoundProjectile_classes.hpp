#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlareRoundProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ProjectileMaster_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlareRoundProjectile.BP_FlareRoundProjectile_C
// 0x0018 (0x02D8 - 0x02C0)
class ABP_FlareRoundProjectile_C final : public ABP_ProjectileMaster_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTechTreeComponent_C*                   Tech_Tree;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void SkillCheck(double Damage, double* Multiplier);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_FlareRoundProjectile(int32 EntryPoint);
	void BndEvt__BP_ProjectileRocket_StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlareRoundProjectile_C">();
	}
	static class ABP_FlareRoundProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlareRoundProjectile_C>();
	}
};
static_assert(alignof(ABP_FlareRoundProjectile_C) == 0x000008, "Wrong alignment on ABP_FlareRoundProjectile_C");
static_assert(sizeof(ABP_FlareRoundProjectile_C) == 0x0002D8, "Wrong size on ABP_FlareRoundProjectile_C");
static_assert(offsetof(ABP_FlareRoundProjectile_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_FlareRoundProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FlareRoundProjectile_C, PointLight) == 0x0002C8, "Member 'ABP_FlareRoundProjectile_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_FlareRoundProjectile_C, Tech_Tree) == 0x0002D0, "Member 'ABP_FlareRoundProjectile_C::Tech_Tree' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Radial_Storm_Weather_Interface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Get Radial Storm Material Target Data
// 0x0040 (0x0040 - 0x0000)
struct Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data final
{
public:
	bool                                          Draw;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Radius;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soft_Fraction;                                     // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data) == 0x000008, "Wrong alignment on Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data");
static_assert(sizeof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data) == 0x000040, "Wrong size on Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data, Draw) == 0x000000, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data::Draw' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data, Location) == 0x000008, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data::Location' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data, Outer_Radius) == 0x000020, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data::Outer_Radius' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data, Soft_Fraction) == 0x000028, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data::Soft_Fraction' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data, Color) == 0x000030, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data::Color' has a wrong offset!");

// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Get Radial Storm Weather Data
// 0x0040 (0x0040 - 0x0000)
struct Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data final
{
public:
	struct FVector                                World_Location;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_Radius;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inner_Radius;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Weather_State;                                     // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Affect_Material_State;                             // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data) == 0x000008, "Wrong alignment on Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data");
static_assert(sizeof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data) == 0x000040, "Wrong size on Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, World_Location) == 0x000000, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::World_Location' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, Outer_Radius) == 0x000018, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::Outer_Radius' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, Inner_Radius) == 0x000020, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::Inner_Radius' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, Alpha) == 0x000028, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::Alpha' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, Weather_State) == 0x000030, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::Weather_State' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data, Affect_Material_State) == 0x000038, "Member 'Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data::Affect_Material_State' has a wrong offset!");

// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Is Storm in Effective Range?
// 0x0020 (0x0020 - 0x0000)
struct Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_ final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In_Range;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_) == 0x000008, "Wrong alignment on Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_");
static_assert(sizeof(Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_) == 0x000020, "Wrong size on Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_, Location) == 0x000000, "Member 'Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_::Location' has a wrong offset!");
static_assert(offsetof(Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_, In_Range) == 0x000018, "Member 'Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_::In_Range' has a wrong offset!");

}


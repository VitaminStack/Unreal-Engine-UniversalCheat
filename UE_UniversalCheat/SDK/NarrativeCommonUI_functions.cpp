#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NarrativeCommonUI

#include "Basic.hpp"

#include "NarrativeCommonUI_classes.hpp"
#include "NarrativeCommonUI_parameters.hpp"


namespace SDK
{

// Function NarrativeCommonUI.NarrativeActivatableWidget.RegisterBinding
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDataTableRowHandle              InputAction                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(class FName ActionName)> Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionBindingHandle        BindingHandle                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             OverrideDisplayName                                    (Parm, NativeAccessSpecifierPublic)
// bool                                    bShouldDisplayInActionBar                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNarrativeActivatableWidget::RegisterBinding(const struct FDataTableRowHandle& InputAction, const TDelegate<void(class FName ActionName)>& Callback, struct FInputActionBindingHandle* BindingHandle, const class FText& OverrideDisplayName, const bool bShouldDisplayInActionBar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeActivatableWidget", "RegisterBinding");

	Params::NarrativeActivatableWidget_RegisterBinding Parms{};

	Parms.InputAction = std::move(InputAction);
	Parms.Callback = Callback;
	Parms.OverrideDisplayName = std::move(OverrideDisplayName);
	Parms.bShouldDisplayInActionBar = bShouldDisplayInActionBar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BindingHandle != nullptr)
		*BindingHandle = std::move(Parms.BindingHandle);
}


// Function NarrativeCommonUI.NarrativeActivatableWidget.SetBindingDisplayName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FInputActionBindingHandle        BindingHandle                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             NewDisplayName                                         (Parm, NativeAccessSpecifierPublic)

void UNarrativeActivatableWidget::SetBindingDisplayName(const struct FInputActionBindingHandle& BindingHandle, const class FText& NewDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeActivatableWidget", "SetBindingDisplayName");

	Params::NarrativeActivatableWidget_SetBindingDisplayName Parms{};

	Parms.BindingHandle = std::move(BindingHandle);
	Parms.NewDisplayName = std::move(NewDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NarrativeCommonUI.NarrativeActivatableWidget.UnregisterAllBindings
// (Final, Native, Protected, BlueprintCallable)

void UNarrativeActivatableWidget::UnregisterAllBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeActivatableWidget", "UnregisterAllBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NarrativeCommonUI.NarrativeActivatableWidget.UnregisterBinding
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FInputActionBindingHandle        BindingHandle                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UNarrativeActivatableWidget::UnregisterBinding(const struct FInputActionBindingHandle& BindingHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeActivatableWidget", "UnregisterBinding");

	Params::NarrativeActivatableWidget_UnregisterBinding Parms{};

	Parms.BindingHandle = std::move(BindingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NarrativeCommonUI.NarrativeCommonHUD.ShowNotification
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NotificationText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNarrativeCommonHUD::ShowNotification(const class FText& NotificationText, const float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeCommonHUD", "ShowNotification");

	Params::NarrativeCommonHUD_ShowNotification Parms{};

	Parms.NotificationText = std::move(NotificationText);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NarrativeCommonUI.NarrativeCommonUIFunctionLibrary.PushHUDNotification
// (Final, BlueprintCosmetic, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Message                                                (Parm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNarrativeCommonUIFunctionLibrary::PushHUDNotification(const class UObject* WorldContextObject, const class FText& Message, const float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NarrativeCommonUIFunctionLibrary", "PushHUDNotification");

	Params::NarrativeCommonUIFunctionLibrary_PushHUDNotification Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Message = std::move(Message);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NarrativeCommonUI.NarrativeCommonUISubsystem.ShowNotification
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NotificationText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNarrativeCommonUISubsystem::ShowNotification(const class FText& NotificationText, const float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NarrativeCommonUISubsystem", "ShowNotification");

	Params::NarrativeCommonUISubsystem_ShowNotification Parms{};

	Parms.NotificationText = std::move(NotificationText);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}


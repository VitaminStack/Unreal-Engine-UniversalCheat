#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeOfDay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_BlockType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_AIBehaviour_structs.hpp"


namespace SDK::Params
{

// Function BP_TimeOfDay.BP_TimeOfDay_C.Actor Aim Focus
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeOfDay_C_Actor_Aim_Focus final
{
public:
	class AActor*                                 Instigator_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Actor_Aim_Focus) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Actor_Aim_Focus");
static_assert(sizeof(BP_TimeOfDay_C_Actor_Aim_Focus) == 0x000008, "Wrong size on BP_TimeOfDay_C_Actor_Aim_Focus");
static_assert(offsetof(BP_TimeOfDay_C_Actor_Aim_Focus, Instigator_0) == 0x000000, "Member 'BP_TimeOfDay_C_Actor_Aim_Focus::Instigator_0' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.Actor Attack Target
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeOfDay_C_Actor_Attack_Target final
{
public:
	class AActor*                                 Attack_Target;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Actor_Attack_Target) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Actor_Attack_Target");
static_assert(sizeof(BP_TimeOfDay_C_Actor_Attack_Target) == 0x000008, "Wrong size on BP_TimeOfDay_C_Actor_Attack_Target");
static_assert(offsetof(BP_TimeOfDay_C_Actor_Attack_Target, Attack_Target) == 0x000000, "Member 'BP_TimeOfDay_C_Actor_Attack_Target::Attack_Target' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Alert
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeOfDay_C_AI_Alert final
{
public:
	class AActor*                                 Alert_Actor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Alert) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_AI_Alert");
static_assert(sizeof(BP_TimeOfDay_C_AI_Alert) == 0x000008, "Wrong size on BP_TimeOfDay_C_AI_Alert");
static_assert(offsetof(BP_TimeOfDay_C_AI_Alert, Alert_Actor) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Alert::Alert_Actor' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Animation Switch
// 0x0001 (0x0001 - 0x0000)
struct BP_TimeOfDay_C_AI_Animation_Switch final
{
public:
	E_AIBehaviour                                 Behaviour;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Animation_Switch) == 0x000001, "Wrong alignment on BP_TimeOfDay_C_AI_Animation_Switch");
static_assert(sizeof(BP_TimeOfDay_C_AI_Animation_Switch) == 0x000001, "Wrong size on BP_TimeOfDay_C_AI_Animation_Switch");
static_assert(offsetof(BP_TimeOfDay_C_AI_Animation_Switch, Behaviour) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Animation_Switch::Behaviour' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Block
// 0x0010 (0x0010 - 0x0000)
struct BP_TimeOfDay_C_AI_Block final
{
public:
	E_BlockType                                   Block_Type;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Block_Attacker;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Block) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_AI_Block");
static_assert(sizeof(BP_TimeOfDay_C_AI_Block) == 0x000010, "Wrong size on BP_TimeOfDay_C_AI_Block");
static_assert(offsetof(BP_TimeOfDay_C_AI_Block, Block_Type) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Block::Block_Type' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_AI_Block, Block_Attacker) == 0x000008, "Member 'BP_TimeOfDay_C_AI_Block::Block_Attacker' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Camera Activate
// 0x0001 (0x0001 - 0x0000)
struct BP_TimeOfDay_C_AI_Camera_Activate final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Camera_Activate) == 0x000001, "Wrong alignment on BP_TimeOfDay_C_AI_Camera_Activate");
static_assert(sizeof(BP_TimeOfDay_C_AI_Camera_Activate) == 0x000001, "Wrong size on BP_TimeOfDay_C_AI_Camera_Activate");
static_assert(offsetof(BP_TimeOfDay_C_AI_Camera_Activate, Activate) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Camera_Activate::Activate' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Can Interact?
// 0x0001 (0x0001 - 0x0000)
struct BP_TimeOfDay_C_AI_Can_Interact_ final
{
public:
	bool                                          Can_Interact;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Can_Interact_) == 0x000001, "Wrong alignment on BP_TimeOfDay_C_AI_Can_Interact_");
static_assert(sizeof(BP_TimeOfDay_C_AI_Can_Interact_) == 0x000001, "Wrong size on BP_TimeOfDay_C_AI_Can_Interact_");
static_assert(offsetof(BP_TimeOfDay_C_AI_Can_Interact_, Can_Interact) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Can_Interact_::Can_Interact' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.Alert Actor Defenders
// 0x0010 (0x0010 - 0x0000)
struct BP_TimeOfDay_C_Alert_Actor_Defenders final
{
public:
	class AActor*                                 Attacked;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Alert_Actor_Defenders) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Alert_Actor_Defenders");
static_assert(sizeof(BP_TimeOfDay_C_Alert_Actor_Defenders) == 0x000010, "Wrong size on BP_TimeOfDay_C_Alert_Actor_Defenders");
static_assert(offsetof(BP_TimeOfDay_C_Alert_Actor_Defenders, Attacked) == 0x000000, "Member 'BP_TimeOfDay_C_Alert_Actor_Defenders::Attacked' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Alert_Actor_Defenders, Attacker) == 0x000008, "Member 'BP_TimeOfDay_C_Alert_Actor_Defenders::Attacker' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.Day Lighting
// 0x0040 (0x0040 - 0x0000)
struct BP_TimeOfDay_C_Day_Lighting final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast_1;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Day_Lighting) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Day_Lighting");
static_assert(sizeof(BP_TimeOfDay_C_Day_Lighting) == 0x000040, "Wrong size on BP_TimeOfDay_C_Day_Lighting");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, Delta) == 0x000000, "Member 'BP_TimeOfDay_C_Day_Lighting::Delta' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_FInterpTo_ReturnValue) == 0x000018, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_FInterpTo_ReturnValue_1) == 0x000020, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000028, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_FInterpTo_Current_ImplicitCast_1) == 0x000030, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_FInterpTo_Current_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000038, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Day_Lighting, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x00003C, "Member 'BP_TimeOfDay_C_Day_Lighting::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.ExecuteUbergraph_BP_TimeOfDay
// 0x0190 (0x0190 - 0x0000)
struct BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Alert_Actor;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_AIBehaviour                                 K2Node_Event_Behaviour;                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Activate;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BlockType                                   K2Node_Event_Block_Type;                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Block_Attacker;                       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorLocalRotation_SweepHitResult;  // 0x0048(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Attacked;                             // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Attacker;                             // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Instigator;                           // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast;    // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay");
static_assert(sizeof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay) == 0x000190, "Wrong size on BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, EntryPoint) == 0x000000, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Alert_Actor) == 0x000008, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Alert_Actor' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Behaviour) == 0x000010, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Behaviour' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Activate) == 0x000011, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Activate' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Block_Type) == 0x000012, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Block_Type' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Block_Attacker) == 0x000018, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Block_Attacker' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_K2_AddActorLocalRotation_SweepHitResult) == 0x000048, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_K2_AddActorLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000130, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_BreakRotator_Roll) == 0x000148, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_BreakRotator_Pitch) == 0x00014C, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_BreakRotator_Yaw) == 0x000150, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Attacked) == 0x000158, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Attacked' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Attacker) == 0x000160, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Attacker' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000168, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, K2Node_Event_Instigator) == 0x000170, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000178, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000180, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay, CallFunc_InRange_FloatFloat_Value_ImplicitCast) == 0x000188, "Member 'BP_TimeOfDay_C_ExecuteUbergraph_BP_TimeOfDay::CallFunc_InRange_FloatFloat_Value_ImplicitCast' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.Night Lighting
// 0x0048 (0x0048 - 0x0000)
struct BP_TimeOfDay_C_Night_Lighting final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_Current_ImplicitCast_1;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Night_Lighting) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Night_Lighting");
static_assert(sizeof(BP_TimeOfDay_C_Night_Lighting) == 0x000048, "Wrong size on BP_TimeOfDay_C_Night_Lighting");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, Delta) == 0x000000, "Member 'BP_TimeOfDay_C_Night_Lighting::Delta' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_FInterpTo_ReturnValue) == 0x000018, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_FInterpTo_ReturnValue_1) == 0x000020, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000028, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000030, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_FInterpTo_Current_ImplicitCast_1) == 0x000038, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_FInterpTo_Current_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Night_Lighting, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x000040, "Member 'BP_TimeOfDay_C_Night_Lighting::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_TimeOfDay_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_TimeOfDay_C_ReceiveTick");
static_assert(sizeof(BP_TimeOfDay_C_ReceiveTick) == 0x000004, "Wrong size on BP_TimeOfDay_C_ReceiveTick");
static_assert(offsetof(BP_TimeOfDay_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_TimeOfDay_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.Update Time
// 0x0080 (0x0080 - 0x0000)
struct BP_TimeOfDay_C_Update_Time final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_Update_Time) == 0x000008, "Wrong alignment on BP_TimeOfDay_C_Update_Time");
static_assert(sizeof(BP_TimeOfDay_C_Update_Time) == 0x000080, "Wrong size on BP_TimeOfDay_C_Update_Time");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, Delta) == 0x000000, "Member 'BP_TimeOfDay_C_Update_Time::Delta' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_FTrunc_ReturnValue) == 0x000010, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_MakeTimespan_ReturnValue) == 0x000018, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_BreakTimespan_Days) == 0x000020, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_BreakTimespan_Hours) == 0x000024, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_BreakTimespan_Minutes) == 0x000028, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_BreakTimespan_Seconds) == 0x00002C, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_BreakTimespan_Milliseconds) == 0x000030, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000048, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeOfDay_C_Update_Time, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_TimeOfDay_C_Update_Time::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_TimeOfDay.BP_TimeOfDay_C.AI Is Dead?
// 0x0001 (0x0001 - 0x0000)
struct BP_TimeOfDay_C_AI_Is_Dead_ final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeOfDay_C_AI_Is_Dead_) == 0x000001, "Wrong alignment on BP_TimeOfDay_C_AI_Is_Dead_");
static_assert(sizeof(BP_TimeOfDay_C_AI_Is_Dead_) == 0x000001, "Wrong size on BP_TimeOfDay_C_AI_Is_Dead_");
static_assert(offsetof(BP_TimeOfDay_C_AI_Is_Dead_, Dead) == 0x000000, "Member 'BP_TimeOfDay_C_AI_Is_Dead_::Dead' has a wrong offset!");

}


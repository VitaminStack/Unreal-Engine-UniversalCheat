#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExampleCharacter

#include "Basic.hpp"

#include "E_BlockType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "E_AIBehaviour_structs.hpp"
#include "E_HitboxTypeAI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ExampleCharacter.BP_ExampleCharacter_C
// 0x0140 (0x07C0 - 0x0680)
class ABP_ExampleCharacter_C final : public ACharacter
{
public:
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PlayerAIActivator_C*                BP_PlayerAIActivator;                              // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Gun_Muzzal_Socket;                                 // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Gun;                                               // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       PlayerCamera;                                      // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x06B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUD_C*                              HUD;                                               // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_ExampleCharacter_C*                 Respawned_Character;                               // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimed;                                             // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Last_Attack_Target;                                // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Health;                                            // 0x06E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Mode;                                        // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6ED[0x3];                                      // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Debug_Text_Duration;                               // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Health;                                        // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FC[0x4];                                      // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, class UParticleSystem*> Surface_Emitter;                                   // 0x0700(0x0050)(Edit, BlueprintVisible)
	TMap<EPhysicalSurface, class UMaterialInterface*> Surface_Decal;                                     // 0x0750(0x0050)(Edit, BlueprintVisible)
	struct FVector                                Decal_Size;                                        // 0x07A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_Life_Span;                                   // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Actor_Aim_Focus(class AActor* Instigator_0);
	void Actor_Attack_Target(class AActor** Attack_Target);
	void AI_Alert(class AActor* Alert_Actor);
	void AI_Animation_Switch(E_AIBehaviour Behaviour);
	void AI_Block(E_BlockType Block_Type, class AActor* Block_Attacker);
	void AI_Camera_Activate(bool Activate);
	void AI_Can_Interact_(bool* Can_Interact);
	void AI_Dead();
	void AI_End_Alert();
	void Alert_Actor_Defenders(class AActor* Attacked, class AActor* Attacker);
	void Client_Open_Respawn_Screen();
	void Client_Respawn_Player();
	void Damage_Taken(double Damage);
	void Debug_Text(const class FString& InString, const struct FLinearColor& TextColor);
	void ExecuteUbergraph_BP_ExampleCharacter(int32 EntryPoint);
	void InpActEvt_C_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_268(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_180(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_243(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_256(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void Kill_Character();
	void Multicast_Aimed(bool Aimed_0);
	void Multicast_Player_Death();
	void Multicast_Range_Effect(const struct FHitResult& Hit);
	void Multicast_Sound(class USoundBase* Sound, const struct FVector& Sound_Location);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void Server_Aimed(bool Aimed_0);
	void Server_Left_Mouse_Button(const struct FVector& Start, const struct FVector& End);
	void Server_Respawn_Player();
	void Set_Aimed_Focus();
	void Turret_Destroyed_Effect();
	void Turret_End_Reload();
	void Turret_Idle_Start();
	void Turret_Idle_Stop();
	void Turret_Start_Reload();

	void AI_Is_Dead_(bool* Dead_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ExampleCharacter_C">();
	}
	static class ABP_ExampleCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ExampleCharacter_C>();
	}
};
static_assert(alignof(ABP_ExampleCharacter_C) == 0x000010, "Wrong alignment on ABP_ExampleCharacter_C");
static_assert(sizeof(ABP_ExampleCharacter_C) == 0x0007C0, "Wrong size on ABP_ExampleCharacter_C");
static_assert(offsetof(ABP_ExampleCharacter_C, UberGraphFrame) == 0x000680, "Member 'ABP_ExampleCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, BP_PlayerAIActivator) == 0x000688, "Member 'ABP_ExampleCharacter_C::BP_PlayerAIActivator' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Gun_Muzzal_Socket) == 0x000690, "Member 'ABP_ExampleCharacter_C::Gun_Muzzal_Socket' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Gun) == 0x000698, "Member 'ABP_ExampleCharacter_C::Gun' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, PlayerCamera) == 0x0006A0, "Member 'ABP_ExampleCharacter_C::PlayerCamera' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, CameraBoom) == 0x0006A8, "Member 'ABP_ExampleCharacter_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, BaseLookUpRate) == 0x0006B0, "Member 'ABP_ExampleCharacter_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Dead) == 0x0006B8, "Member 'ABP_ExampleCharacter_C::Dead' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, HUD) == 0x0006C0, "Member 'ABP_ExampleCharacter_C::HUD' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Respawned_Character) == 0x0006C8, "Member 'ABP_ExampleCharacter_C::Respawned_Character' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Aimed) == 0x0006D0, "Member 'ABP_ExampleCharacter_C::Aimed' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Last_Attack_Target) == 0x0006D8, "Member 'ABP_ExampleCharacter_C::Last_Attack_Target' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, BaseTurnRate) == 0x0006E0, "Member 'ABP_ExampleCharacter_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Health) == 0x0006E8, "Member 'ABP_ExampleCharacter_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Debug_Mode) == 0x0006EC, "Member 'ABP_ExampleCharacter_C::Debug_Mode' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Debug_Text_Duration) == 0x0006F0, "Member 'ABP_ExampleCharacter_C::Debug_Text_Duration' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Max_Health) == 0x0006F8, "Member 'ABP_ExampleCharacter_C::Max_Health' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Surface_Emitter) == 0x000700, "Member 'ABP_ExampleCharacter_C::Surface_Emitter' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Surface_Decal) == 0x000750, "Member 'ABP_ExampleCharacter_C::Surface_Decal' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Decal_Size) == 0x0007A0, "Member 'ABP_ExampleCharacter_C::Decal_Size' has a wrong offset!");
static_assert(offsetof(ABP_ExampleCharacter_C, Decal_Life_Span) == 0x0007B8, "Member 'ABP_ExampleCharacter_C::Decal_Life_Span' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UBPP_FunctionLibrary

#include "Basic.hpp"

#include "UBPP_FunctionLibrary_classes.hpp"
#include "UBPP_FunctionLibrary_parameters.hpp"


namespace SDK
{

// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor*                           New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Actor_Array_Add(TArray<class AActor*>& Input_Array, class AActor* New_Item, class UObject* __WorldContext, TArray<class AActor*>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Array Add");

	Params::UBPP_FunctionLibrary_C_Actor_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Array to Location Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Output_Locations                                       (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Actor_Array_to_Location_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FVector>* Output_Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Array to Location Array");

	Params::UBPP_FunctionLibrary_C_Actor_Array_to_Location_Array Parms{};

	Parms.Input_Actor = std::move(Input_Actor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Actor = std::move(Parms.Input_Actor);

	if (Output_Locations != nullptr)
		*Output_Locations = std::move(Parms.Output_Locations);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Array To Rotator Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FRotator>                 Output_Rotator                                         (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Actor_Array_To_Rotator_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FRotator>* Output_Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Array To Rotator Array");

	Params::UBPP_FunctionLibrary_C_Actor_Array_To_Rotator_Array Parms{};

	Parms.Input_Actor = std::move(Input_Actor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Actor = std::move(Parms.Input_Actor);

	if (Output_Rotator != nullptr)
		*Output_Rotator = std::move(Parms.Output_Rotator);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Array To Scale Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Output_Scales                                          (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Actor_Array_To_Scale_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FVector>* Output_Scales)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Array To Scale Array");

	Params::UBPP_FunctionLibrary_C_Actor_Array_To_Scale_Array Parms{};

	Parms.Input_Actor = std::move(Input_Actor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Actor = std::move(Parms.Input_Actor);

	if (Output_Scales != nullptr)
		*Output_Scales = std::move(Parms.Output_Scales);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Array To Transform Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FTransform>               Output_Transform                                       (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Actor_Array_To_Transform_Array(TArray<class AActor*>& Input_Actor, class UObject* __WorldContext, TArray<struct FTransform>* Output_Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Array To Transform Array");

	Params::UBPP_FunctionLibrary_C_Actor_Array_To_Transform_Array Parms{};

	Parms.Input_Actor = std::move(Input_Actor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Actor = std::move(Parms.Input_Actor);

	if (Output_Transform != nullptr)
		*Output_Transform = std::move(Parms.Output_Transform);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Actor_Line_Trace_By_Channel(class AActor* Actor, double Length, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Actor_Line_Trace_By_Channel Parms{};

	Parms.Actor = Actor;
	Parms.Length = Length;
	Parms.Noise = std::move(Noise);
	Parms.TraceChannel = TraceChannel;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Actor to Actor Line Trace by Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor_A                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor_B                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Ignore_Actors                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         Trace_Channel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Actor_to_Actor_Line_Trace_by_Channel(class AActor* Actor_A, class AActor* Actor_B, bool Ignore_Actors, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Actor to Actor Line Trace by Channel");

	Params::UBPP_FunctionLibrary_C_Actor_to_Actor_Line_Trace_by_Channel Parms{};

	Parms.Actor_A = Actor_A;
	Parms.Actor_B = Actor_B;
	Parms.Ignore_Actors = Ignore_Actors;
	Parms.Noise = std::move(Noise);
	Parms.Trace_Channel = Trace_Channel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Actor Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Actor_Array_A                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>                   Actor_Array_B                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Actor_Arrays(TArray<class AActor*>& Actor_Array_A, TArray<class AActor*>& Actor_Array_B, class UObject* __WorldContext, TArray<class AActor*>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Actor Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Actor_Arrays Parms{};

	Parms.Actor_Array_A = std::move(Actor_Array_A);
	Parms.Actor_Array_B = std::move(Actor_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Actor_Array_A = std::move(Parms.Actor_Array_A);
	Actor_Array_B = std::move(Parms.Actor_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Boolean Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<bool>                            Actor_Array_A                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>                            Actor_Array_B                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<bool>                            Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Boolean_Arrays(TArray<bool>& Actor_Array_A, TArray<bool>& Actor_Array_B, class UObject* __WorldContext, TArray<bool>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Boolean Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Boolean_Arrays Parms{};

	Parms.Actor_Array_A = std::move(Actor_Array_A);
	Parms.Actor_Array_B = std::move(Actor_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Actor_Array_A = std::move(Parms.Actor_Array_A);
	Actor_Array_B = std::move(Parms.Actor_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Byte Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Int_Array_A                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<uint8>                           Int_Array_B                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Byte_Arrays(TArray<uint8>& Int_Array_A, TArray<uint8>& Int_Array_B, class UObject* __WorldContext, TArray<uint8>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Byte Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Byte_Arrays Parms{};

	Parms.Int_Array_A = std::move(Int_Array_A);
	Parms.Int_Array_B = std::move(Int_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Int_Array_A = std::move(Parms.Int_Array_A);
	Int_Array_B = std::move(Parms.Int_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Float Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Float_Array_A                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<double>                          Float_Array_B                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Float_Arrays(TArray<double>& Float_Array_A, TArray<double>& Float_Array_B, class UObject* __WorldContext, TArray<double>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Float Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Float_Arrays Parms{};

	Parms.Float_Array_A = std::move(Float_Array_A);
	Parms.Float_Array_B = std::move(Float_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Float_Array_A = std::move(Parms.Float_Array_A);
	Float_Array_B = std::move(Parms.Float_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Int Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Int_Array_A                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Int_Array_B                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Int_Arrays(TArray<int32>& Int_Array_A, TArray<int32>& Int_Array_B, class UObject* __WorldContext, TArray<int32>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Int Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Int_Arrays Parms{};

	Parms.Int_Array_A = std::move(Int_Array_A);
	Parms.Int_Array_B = std::move(Int_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Int_Array_A = std::move(Parms.Int_Array_A);
	Int_Array_B = std::move(Parms.Int_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Integer64 Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int64>                           Int_Array_A                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int64>                           Int_Array_B                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Integer64_Arrays(TArray<int64>& Int_Array_A, TArray<int64>& Int_Array_B, class UObject* __WorldContext, TArray<int64>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Integer64 Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Integer64_Arrays Parms{};

	Parms.Int_Array_A = std::move(Int_Array_A);
	Parms.Int_Array_B = std::move(Int_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Int_Array_A = std::move(Parms.Int_Array_A);
	Int_Array_B = std::move(Parms.Int_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append String Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   Actor_Array_A                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FString>                   Actor_Array_B                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_String_Arrays(TArray<class FString>& Actor_Array_A, TArray<class FString>& Actor_Array_B, class UObject* __WorldContext, TArray<class FString>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append String Arrays");

	Params::UBPP_FunctionLibrary_C_Append_String_Arrays Parms{};

	Parms.Actor_Array_A = std::move(Actor_Array_A);
	Parms.Actor_Array_B = std::move(Actor_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Actor_Array_A = std::move(Parms.Actor_Array_A);
	Actor_Array_B = std::move(Parms.Actor_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Text
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             B                                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Append_Text(const class FText& A, const class FText& B, class UObject* __WorldContext, class FText* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Text");

	Params::UBPP_FunctionLibrary_C_Append_Text Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Append Vector Arrays
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Vector_Array_A                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  Vector_Array_B                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Array                                           (Parm, OutParm)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Append_Vector_Arrays(TArray<struct FVector>& Vector_Array_A, TArray<struct FVector>& Vector_Array_B, class UObject* __WorldContext, TArray<struct FVector>* Return_Array, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Append Vector Arrays");

	Params::UBPP_FunctionLibrary_C_Append_Vector_Arrays Parms{};

	Parms.Vector_Array_A = std::move(Vector_Array_A);
	Parms.Vector_Array_B = std::move(Vector_Array_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector_Array_A = std::move(Parms.Vector_Array_A);
	Vector_Array_B = std::move(Parms.Vector_Array_B);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Apply Points Drag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   At_Location                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Strength                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Array1                                                 (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Apply_Points_Drag(TArray<struct FVector>& Array, int32 At_Location, const struct FVector& Strength, int32 Radius, class UObject* __WorldContext, TArray<struct FVector>* Array1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Apply Points Drag");

	Params::UBPP_FunctionLibrary_C_Apply_Points_Drag Parms{};

	Parms.Array = std::move(Array);
	Parms.At_Location = At_Location;
	Parms.Strength = std::move(Strength);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Array1 != nullptr)
		*Array1 = std::move(Parms.Array1);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Apply Points Drag (Linear)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   At_Location                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Strength                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Array1                                                 (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Apply_Points_Drag__Linear_(TArray<struct FVector>& Array, int32 At_Location, const struct FVector& Strength, int32 Radius, class UObject* __WorldContext, TArray<struct FVector>* Array1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Apply Points Drag (Linear)");

	Params::UBPP_FunctionLibrary_C_Apply_Points_Drag__Linear_ Parms{};

	Parms.Array = std::move(Array);
	Parms.At_Location = At_Location;
	Parms.Strength = std::move(Strength);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Array1 != nullptr)
		*Array1 = std::move(Parms.Array1);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than or Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_or_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than or Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_or_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than or Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_or_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than or Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_or_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than or Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_or_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than or Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_or_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bigger Than Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bigger_Than_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bigger Than Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Bigger_Than_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Boolean Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<bool>                            Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<bool>                            Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Boolean_Array_Add(TArray<bool>& Input_Array, bool New_Item, class UObject* __WorldContext, TArray<bool>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Boolean Array Add");

	Params::UBPP_FunctionLibrary_C_Boolean_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Bouncing Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Times                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         Trace_Channel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               All_Out_Hits                                           (Parm, OutParm, ContainsInstancedReference)
// int32                                   Times_Till_Stop                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Bouncing_Line_Trace_By_Channel(const struct FVector& Start, const struct FRotator& Rotation, double Length, int32 Times, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* All_Out_Hits, int32* Times_Till_Stop, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Bouncing Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Bouncing_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.Rotation = std::move(Rotation);
	Parms.Length = Length;
	Parms.Times = Times;
	Parms.Trace_Channel = Trace_Channel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (All_Out_Hits != nullptr)
		*All_Out_Hits = std::move(Parms.All_Out_Hits);

	if (Times_Till_Stop != nullptr)
		*Times_Till_Stop = Parms.Times_Till_Stop;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Break Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Pre_Decimal_Places                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Decimal_Places                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Break_Float(double Value, class UObject* __WorldContext, int32* Pre_Decimal_Places, int32* Decimal_Places)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Break Float");

	Params::UBPP_FunctionLibrary_C_Break_Float Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Pre_Decimal_Places != nullptr)
		*Pre_Decimal_Places = Parms.Pre_Decimal_Places;

	if (Decimal_Places != nullptr)
		*Decimal_Places = Parms.Decimal_Places;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// uint8                                   New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Byte_Array_Add(TArray<uint8>& Input_Array, uint8 New_Item, class UObject* __WorldContext, TArray<uint8>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte Array Add");

	Params::UBPP_FunctionLibrary_C_Byte_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte Array to Float Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Byte_Array_to_Float_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<double>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte Array to Float Array");

	Params::UBPP_FunctionLibrary_C_Byte_Array_to_Float_Array Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte Array to Int Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Byte_Array_to_Int_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<int32>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte Array to Int Array");

	Params::UBPP_FunctionLibrary_C_Byte_Array_to_Int_Array Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte Array to Int64 Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Byte_Array_to_Int64_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<int64>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte Array to Int64 Array");

	Params::UBPP_FunctionLibrary_C_Byte_Array_to_Int64_Array Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte Array to String Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Byte_Array_to_String_Array(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte Array to String Array");

	Params::UBPP_FunctionLibrary_C_Byte_Array_to_String_Array Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte To Integer
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Byte_To_Integer(uint8 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte To Integer");

	Params::UBPP_FunctionLibrary_C_Byte_To_Integer Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte To Integer64
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Byte_To_Integer64(uint8 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte To Integer64");

	Params::UBPP_FunctionLibrary_C_Byte_To_Integer64 Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Byte To Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Input_Byte                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_Vector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Byte_To_Vector(uint8 Input_Byte, class UObject* __WorldContext, struct FVector* Return_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Byte To Vector");

	Params::UBPP_FunctionLibrary_C_Byte_To_Vector Parms{};

	Parms.Input_Byte = Input_Byte;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Vector != nullptr)
		*Return_Vector = std::move(Parms.Return_Vector);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Camera Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         Trace_Channel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Camera_Line_Trace_By_Channel(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Camera Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Camera_Line_Trace_By_Channel Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.Trace_Channel = Trace_Channel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Camera Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Camera_Line_Trace_By_Profile(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Camera Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Camera_Line_Trace_By_Profile Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Camera Line Trace For Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Camera_Line_Trace_For_Objects(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Camera Line Trace For Objects");

	Params::UBPP_FunctionLibrary_C_Camera_Line_Trace_For_Objects Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Combine Vectors (Max)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector_A                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector_B                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Combine_Vectors__Max_(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Combine Vectors (Max)");

	Params::UBPP_FunctionLibrary_C_Combine_Vectors__Max_ Parms{};

	Parms.Vector_A = std::move(Vector_A);
	Parms.Vector_B = std::move(Vector_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Combine Vectors (Min)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector_A                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector_B                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Combine_Vectors__Min_(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Combine Vectors (Min)");

	Params::UBPP_FunctionLibrary_C_Combine_Vectors__Min_ Parms{};

	Parms.Vector_A = std::move(Vector_A);
	Parms.Vector_B = std::move(Vector_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Create Widget Compact
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_AddingType                      Adding_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Show_Mouse_Cursor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_InputMode                       Input_Mode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMouseLockMode                          InMouseLockMode__Only_UI_only_and_Game_only_           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideCursorDuringCapture__Only_Game_And_UI_             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      Reference                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Create_Widget_Compact(class APlayerController* PlayerController, class UClass* Class_0, EUBPP_E_AddingType Adding_Type, int32 ZOrder, bool Show_Mouse_Cursor, EUBPP_E_InputMode Input_Mode, EMouseLockMode InMouseLockMode__Only_UI_only_and_Game_only_, bool HideCursorDuringCapture__Only_Game_And_UI_, class UObject* __WorldContext, class UUserWidget** Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Create Widget Compact");

	Params::UBPP_FunctionLibrary_C_Create_Widget_Compact Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Class_0 = Class_0;
	Parms.Adding_Type = Adding_Type;
	Parms.ZOrder = ZOrder;
	Parms.Show_Mouse_Cursor = Show_Mouse_Cursor;
	Parms.Input_Mode = Input_Mode;
	Parms.InMouseLockMode__Only_UI_only_and_Game_only_ = InMouseLockMode__Only_UI_only_and_Game_only_;
	Parms.HideCursorDuringCapture__Only_Game_And_UI_ = HideCursorDuringCapture__Only_Game_And_UI_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Reference != nullptr)
		*Reference = Parms.Reference;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Double (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Double__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Double (Byte)");

	Params::UBPP_FunctionLibrary_C_Double__Byte_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Double (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Double__Float_(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Double (Float)");

	Params::UBPP_FunctionLibrary_C_Double__Float_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Double (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Double__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Double (Int)");

	Params::UBPP_FunctionLibrary_C_Double__Int_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Double (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Double__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Double (Int64)");

	Params::UBPP_FunctionLibrary_C_Double__Int64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Draw Static Mesh Debug Box
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AStaticMeshActor*                 Static_Mesh_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Draw_Static_Mesh_Debug_Box(class AStaticMeshActor* Static_Mesh_Actor, const struct FLinearColor& LineColor, double Duration, double Thickness, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Draw Static Mesh Debug Box");

	Params::UBPP_FunctionLibrary_C_Draw_Static_Mesh_Debug_Box Parms{};

	Parms.Static_Mesh_Actor = Static_Mesh_Actor;
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equal (Color)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FColor                           A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equal__Color_(const struct FColor& A, const struct FColor& B, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equal (Color)");

	Params::UBPP_FunctionLibrary_C_Equal__Color_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equal (Slate Color)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateColor                      A                                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FSlateColor                      B                                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equal__Slate_Color_(const struct FSlateColor& A, const struct FSlateColor& B, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equal (Slate Color)");

	Params::UBPP_FunctionLibrary_C_Equal__Slate_Color_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equal (Stream)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRandomStream                    A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// struct FRandomStream                    B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equal__Stream_(const struct FRandomStream& A, const struct FRandomStream& B, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equal (Stream)");

	Params::UBPP_FunctionLibrary_C_Equal__Stream_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Max (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Equals_Max__Byte_(uint8 Input_Value, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Max (Byte)");

	Params::UBPP_FunctionLibrary_C_Equals_Max__Byte_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Not Max (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Not_Max__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Not Max (Byte)");

	Params::UBPP_FunctionLibrary_C_Equals_Not_Max__Byte_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Not Zero (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Not_Zero__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Not Zero (Byte)");

	Params::UBPP_FunctionLibrary_C_Equals_Not_Zero__Byte_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Not Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Not_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Not Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Equals_Not_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Not Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Not_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Not Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Equals_Not_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Not Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Not_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Not Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Equals_Not_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Zero (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Zero__Byte_(uint8 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Zero (Byte)");

	Params::UBPP_FunctionLibrary_C_Equals_Zero__Byte_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Equals_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Equals_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Equals Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Equals_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Equals Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Equals_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Find Actor Look at Rotation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUBPP_FunctionLibrary_C::Find_Actor_Look_at_Rotation(class AActor* Start, class AActor* Target, class UObject* __WorldContext, struct FRotator* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Find Actor Look at Rotation");

	Params::UBPP_FunctionLibrary_C_Find_Actor_Look_at_Rotation Parms{};

	Parms.Start = Start;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Find Look At Rotation (Crosshair)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length_Range                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUBPP_FunctionLibrary_C::Find_Look_At_Rotation__Crosshair_(const struct FVector& Start, int32 PlayerIndex, double Length_Range, class UObject* __WorldContext, struct FRotator* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Find Look At Rotation (Crosshair)");

	Params::UBPP_FunctionLibrary_C_Find_Look_At_Rotation__Crosshair_ Parms{};

	Parms.Start = std::move(Start);
	Parms.PlayerIndex = PlayerIndex;
	Parms.Length_Range = Length_Range;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Float Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Float_Array_Add(TArray<double>& Input_Array, double New_Item, class UObject* __WorldContext, TArray<double>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Float Array Add");

	Params::UBPP_FunctionLibrary_C_Float_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Float Array To Int Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Float_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Float_Array_To_Int_Array(TArray<double>& Float_Array, class UObject* __WorldContext, TArray<int32>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Float Array To Int Array");

	Params::UBPP_FunctionLibrary_C_Float_Array_To_Int_Array Parms{};

	Parms.Float_Array = std::move(Float_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Float_Array = std::move(Parms.Float_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Float Array To String Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input_Float_Array                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Float_Array_To_String_Array(TArray<double>& Input_Float_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Float Array To String Array");

	Params::UBPP_FunctionLibrary_C_Float_Array_To_String_Array Parms{};

	Parms.Input_Float_Array = std::move(Input_Float_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Float_Array = std::move(Parms.Input_Float_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Float Array To Vector Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input_Float_Array                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Float_Array_To_Vector_Array(TArray<double>& Input_Float_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Float Array To Vector Array");

	Params::UBPP_FunctionLibrary_C_Float_Array_To_Vector_Array Parms{};

	Parms.Input_Float_Array = std::move(Input_Float_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Float_Array = std::move(Parms.Input_Float_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Points On Line
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End_Position                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count_To_Spawn_Between                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Points                                          (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Points_On_Line(const struct FVector& Start_Position, const struct FVector& End_Position, int32 Count_To_Spawn_Between, class UObject* __WorldContext, TArray<struct FVector>* Return_Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Points On Line");

	Params::UBPP_FunctionLibrary_C_Generate_Points_On_Line Parms{};

	Parms.Start_Position = std::move(Start_Position);
	Parms.End_Position = std::move(End_Position);
	Parms.Count_To_Spawn_Between = Count_To_Spawn_Between;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Points != nullptr)
		*Return_Points = std::move(Parms.Return_Points);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Byte Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Byte_Array(int32 Array_Length, uint8 Range_Max, class UObject* __WorldContext, TArray<uint8>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Byte Array");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Byte_Array Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Max = Range_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Byte Array From Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Byte_Array_From_Stream(int32 Array_Length, uint8 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<uint8>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Byte Array From Stream");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Byte_Array_From_Stream Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Max = Range_Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Float Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Float_Array(int32 Array_Length, class UObject* __WorldContext, TArray<double>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Float Array");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Float_Array Parms{};

	Parms.Array_Length = Array_Length;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Float Array from Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Float_Array_from_Stream(int32 Array_Length, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<double>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Float Array from Stream");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Float_Array_from_Stream Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Float Array In Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Float_Array_In_Range(int32 Array_Length, double Min, double Max, class UObject* __WorldContext, TArray<double>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Float Array In Range");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Float_Array_In_Range Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Float Array In Range From Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Float_Array_In_Range_From_Stream(int32 Array_Length, double Min, double Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<double>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Float Array In Range From Stream");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Float_Array_In_Range_From_Stream Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Int Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Int_Array(int32 Array_Length, int32 Range_Max, class UObject* __WorldContext, TArray<int32>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Int Array");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Int_Array Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Max = Range_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Int Array From Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Int_Array_From_Stream(int32 Array_Length, int32 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<int32>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Int Array From Stream");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Int_Array_From_Stream Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Max = Range_Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Int Array in Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Min                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Int_Array_in_Range(int32 Array_Length, int32 Range_Min, int32 Range_Max, class UObject* __WorldContext, TArray<int32>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Int Array in Range");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Int_Array_in_Range Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Min = Range_Min;
	Parms.Range_Max = Range_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Generate Random Int Array in Range From Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Array_Length                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Min                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Range_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Random_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Generate_Random_Int_Array_in_Range_From_Stream(int32 Array_Length, int32 Range_Min, int32 Range_Max, const struct FRandomStream& Stream, class UObject* __WorldContext, TArray<int32>* Random_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Generate Random Int Array in Range From Stream");

	Params::UBPP_FunctionLibrary_C_Generate_Random_Int_Array_in_Range_From_Stream Parms{};

	Parms.Array_Length = Array_Length;
	Parms.Range_Min = Range_Min;
	Parms.Range_Max = Range_Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Array != nullptr)
		*Random_Array = std::move(Parms.Random_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Actor Backward Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Actor_Backward_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Actor Backward Vector");

	Params::UBPP_FunctionLibrary_C_Get_Actor_Backward_Vector Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Actor Down Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Actor_Down_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Actor Down Vector");

	Params::UBPP_FunctionLibrary_C_Get_Actor_Down_Vector Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Actor Left Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Actor_Left_Vector(class AActor* Target, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Actor Left Vector");

	Params::UBPP_FunctionLibrary_C_Get_Actor_Left_Vector Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Return_Value_Vector2D                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Alignment(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Vector2D, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Alignment");

	Params::UBPP_FunctionLibrary_C_Get_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Vector2D != nullptr)
		*Return_Value_Vector2D = std::move(Parms.Return_Value_Vector2D);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Anchors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FAnchors                         Return_Value_Anchors                                   (Parm, OutParm, NoDestructor)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Anchors(class UWidget* Widget, class UObject* __WorldContext, struct FAnchors* Return_Value_Anchors, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Anchors");

	Params::UBPP_FunctionLibrary_C_Get_Anchors Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Anchors != nullptr)
		*Return_Value_Anchors = std::move(Parms.Return_Value_Anchors);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Auto Size
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value_Auto_Size                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Auto_Size(class UWidget* Widget, class UObject* __WorldContext, bool* Return_Value_Auto_Size, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Auto Size");

	Params::UBPP_FunctionLibrary_C_Get_Auto_Size Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Auto_Size != nullptr)
		*Return_Value_Auto_Size = Parms.Return_Value_Auto_Size;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Box Extent Bound Points
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Extent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Bound_Points                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Get_Box_Extent_Bound_Points(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, TArray<struct FVector>* Bound_Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Box Extent Bound Points");

	Params::UBPP_FunctionLibrary_C_Get_Box_Extent_Bound_Points Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Box_Extent = std::move(Box_Extent);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Bound_Points != nullptr)
		*Bound_Points = std::move(Parms.Bound_Points);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Box Extent Site Points
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Extent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Site_Points                                            (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Get_Box_Extent_Site_Points(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, TArray<struct FVector>* Site_Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Box Extent Site Points");

	Params::UBPP_FunctionLibrary_C_Get_Box_Extent_Site_Points Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Box_Extent = std::move(Box_Extent);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Site_Points != nullptr)
		*Site_Points = std::move(Parms.Site_Points);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Column
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_Column                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Column(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Column, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Column");

	Params::UBPP_FunctionLibrary_C_Get_Column Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Column != nullptr)
		*Return_Value_Column = Parms.Return_Value_Column;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Column Span
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_ZOrder                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Column_Span(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_ZOrder, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Column Span");

	Params::UBPP_FunctionLibrary_C_Get_Column_Span Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_ZOrder != nullptr)
		*Return_Value_ZOrder = Parms.Return_Value_ZOrder;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Distance (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Distance__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Distance (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Distance__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Element Index (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ElementIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Element_Index__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* ElementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Element Index (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Element_Index__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ElementIndex != nullptr)
		*ElementIndex = Parms.ElementIndex;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Face Index (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   FaceIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Face_Index__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* FaceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Face Index (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Face_Index__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FaceIndex != nullptr)
		*FaceIndex = Parms.FaceIndex;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Farthest Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          OriginVector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  AllOtherVectors                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          FarthestVector                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Farthest_Vector(const struct FVector& OriginVector, TArray<struct FVector>& AllOtherVectors, class UObject* __WorldContext, struct FVector* FarthestVector, double* Distance, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Farthest Vector");

	Params::UBPP_FunctionLibrary_C_Get_Farthest_Vector Parms{};

	Parms.OriginVector = std::move(OriginVector);
	Parms.AllOtherVectors = std::move(AllOtherVectors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	AllOtherVectors = std::move(Parms.AllOtherVectors);

	if (FarthestVector != nullptr)
		*FarthestVector = std::move(Parms.FarthestVector);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Fill Empty Space
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value_Fill_Empty_Space                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Fill_Empty_Space(class UWidget* Widget, class UObject* __WorldContext, bool* Return_Value_Fill_Empty_Space, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Fill Empty Space");

	Params::UBPP_FunctionLibrary_C_Get_Fill_Empty_Space Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Fill_Empty_Space != nullptr)
		*Return_Value_Fill_Empty_Space = Parms.Return_Value_Fill_Empty_Space;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Fill Span When Less Than
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_Value_Fill_Span_when_Less_Than                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Fill_Span_When_Less_Than(class UWidget* Widget, class UObject* __WorldContext, double* Return_Value_Fill_Span_when_Less_Than, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Fill Span When Less Than");

	Params::UBPP_FunctionLibrary_C_Get_Fill_Span_When_Less_Than Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Fill_Span_when_Less_Than != nullptr)
		*Return_Value_Fill_Span_when_Less_Than = Parms.Return_Value_Fill_Span_when_Less_Than;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Highest Distance Between Actors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   AllActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorA                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorB                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndexA                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndexB                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Highest_Distance_Between_Actors(TArray<class AActor*>& AllActors, class UObject* __WorldContext, double* Distance, class AActor** ActorA, class AActor** ActorB, int32* ActorIndexA, int32* ActorIndexB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Highest Distance Between Actors");

	Params::UBPP_FunctionLibrary_C_Get_Highest_Distance_Between_Actors Parms{};

	Parms.AllActors = std::move(AllActors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	AllActors = std::move(Parms.AllActors);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (ActorA != nullptr)
		*ActorA = Parms.ActorA;

	if (ActorB != nullptr)
		*ActorB = Parms.ActorB;

	if (ActorIndexA != nullptr)
		*ActorIndexA = Parms.ActorIndexA;

	if (ActorIndexB != nullptr)
		*ActorIndexB = Parms.ActorIndexB;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Hit Actor (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Hit_Actor__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class AActor** HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Hit Actor (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Hit_Actor__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Hit Bone Name (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Hit_Bone_Name__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class FName* HitBoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Hit Bone Name (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Hit_Bone_Name__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitBoneName != nullptr)
		*HitBoneName = Parms.HitBoneName;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Hit Component (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Hit_Component__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class UPrimitiveComponent** HitComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Hit Component (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Hit_Component__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitComponent != nullptr)
		*HitComponent = Parms.HitComponent;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Hit Item (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   HitItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Hit_Item__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, int32* HitItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Hit Item (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Hit_Item__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitItem != nullptr)
		*HitItem = Parms.HitItem;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Horizontal Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EHorizontalAlignment                    Return_Value_Horizontal_Alignment                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Horizontal_Alignment(class UWidget* Widget, class UObject* __WorldContext, EHorizontalAlignment* Return_Value_Horizontal_Alignment, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Horizontal Alignment");

	Params::UBPP_FunctionLibrary_C_Get_Horizontal_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Horizontal_Alignment != nullptr)
		*Return_Value_Horizontal_Alignment = Parms.Return_Value_Horizontal_Alignment;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Impact Normal (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Impact_Normal__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Impact Normal (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Impact_Normal__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ImpactNormal != nullptr)
		*ImpactNormal = std::move(Parms.ImpactNormal);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Impact Point (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Impact_Point__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* ImpactPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Impact Point (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Impact_Point__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ImpactPoint != nullptr)
		*ImpactPoint = std::move(Parms.ImpactPoint);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Initial Overlap (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Initial_Overlap                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Initial_Overlap__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, bool* Initial_Overlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Initial Overlap (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Initial_Overlap__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Initial_Overlap != nullptr)
		*Initial_Overlap = Parms.Initial_Overlap;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Is Blocking Hit (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Blocking_Hit                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Is_Blocking_Hit__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, bool* Blocking_Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Is Blocking Hit (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Is_Blocking_Hit__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Blocking_Hit != nullptr)
		*Blocking_Hit = Parms.Blocking_Hit;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Layer
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_Layer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Layer(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Layer, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Layer");

	Params::UBPP_FunctionLibrary_C_Get_Layer Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Layer != nullptr)
		*Return_Value_Layer = Parms.Return_Value_Layer;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Layout
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FAnchorData                      Return_Value_Layout                                    (Parm, OutParm, NoDestructor)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Layout(class UWidget* Widget, class UObject* __WorldContext, struct FAnchorData* Return_Value_Layout, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Layout");

	Params::UBPP_FunctionLibrary_C_Get_Layout Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Layout != nullptr)
		*Return_Value_Layout = std::move(Parms.Return_Value_Layout);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Location (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Location__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Location (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Location__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Nearest Sphere Point
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sphere_Origin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Sphere_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Nearest_Sphere_Point(const struct FVector& Point, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Nearest Sphere Point");

	Params::UBPP_FunctionLibrary_C_Get_Nearest_Sphere_Point Parms{};

	Parms.Point = std::move(Point);
	Parms.Sphere_Origin = std::move(Sphere_Origin);
	Parms.Sphere_Radius = Sphere_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Nearest Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  All_Other_Vectors                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NearestVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Nearest_Vector(const struct FVector& Origin_Vector, TArray<struct FVector>& All_Other_Vectors, class UObject* __WorldContext, struct FVector* NearestVector, double* Distance, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Nearest Vector");

	Params::UBPP_FunctionLibrary_C_Get_Nearest_Vector Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.All_Other_Vectors = std::move(All_Other_Vectors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	All_Other_Vectors = std::move(Parms.All_Other_Vectors);

	if (NearestVector != nullptr)
		*NearestVector = std::move(Parms.NearestVector);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Nearest Vector On Line
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Input_Vector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Line_Start                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Line_End                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Precision_1_500                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NearestVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Nearest_Vector_On_Line(const struct FVector& Input_Vector, const struct FVector& Line_Start, const struct FVector& Line_End, double Precision_1_500, class UObject* __WorldContext, struct FVector* NearestVector, double* Distance, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Nearest Vector On Line");

	Params::UBPP_FunctionLibrary_C_Get_Nearest_Vector_On_Line Parms{};

	Parms.Input_Vector = std::move(Input_Vector);
	Parms.Line_Start = std::move(Line_Start);
	Parms.Line_End = std::move(Line_End);
	Parms.Precision_1_500 = Precision_1_500;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NearestVector != nullptr)
		*NearestVector = std::move(Parms.NearestVector);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Normal (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Normal__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Normal (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Normal__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Nudge
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Return_Value_Nudge                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Nudge(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Nudge, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Nudge");

	Params::UBPP_FunctionLibrary_C_Get_Nudge Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Nudge != nullptr)
		*Return_Value_Nudge = std::move(Parms.Return_Value_Nudge);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Offsets
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FMargin                          Return_Value_Offsets                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Offsets(class UWidget* Widget, class UObject* __WorldContext, struct FMargin* Return_Value_Offsets, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Offsets");

	Params::UBPP_FunctionLibrary_C_Get_Offsets Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Offsets != nullptr)
		*Return_Value_Offsets = std::move(Parms.Return_Value_Offsets);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Padding
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FMargin                          Return_Value_Padding                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Padding(class UWidget* Widget, class UObject* __WorldContext, struct FMargin* Return_Value_Padding, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Padding");

	Params::UBPP_FunctionLibrary_C_Get_Padding Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Padding != nullptr)
		*Return_Value_Padding = std::move(Parms.Return_Value_Padding);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Phys Mat (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                PhysMat                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Phys_Mat__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, class UPhysicalMaterial** PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Phys Mat (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Phys_Mat__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PhysMat != nullptr)
		*PhysMat = Parms.PhysMat;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Position
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Return_Value_Position                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Position(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Position, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Position");

	Params::UBPP_FunctionLibrary_C_Get_Position Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Position != nullptr)
		*Return_Value_Position = std::move(Parms.Return_Value_Position);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Alphabetic Code
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_StyleSelection                  Alphabetic_Mode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Symbols             Symbols                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Alphabetic_Code(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, const struct FUBPP_Struct_Symbols& Symbols, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Alphabetic Code");

	Params::UBPP_FunctionLibrary_C_Get_Random_Alphabetic_Code Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Alphabetic_Mode = Alphabetic_Mode;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.Symbols = std::move(Symbols);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Alphabetic Code from Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_StyleSelection                  Alphabetic_Mode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Symbols             Symbols                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Alphabetic_Code_from_Stream(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, const struct FUBPP_Struct_Symbols& Symbols, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Alphabetic Code from Stream");

	Params::UBPP_FunctionLibrary_C_Get_Random_Alphabetic_Code_from_Stream Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Alphabetic_Mode = Alphabetic_Mode;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.Symbols = std::move(Symbols);
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Code
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_StyleSelection                  Alphabetic_Mode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    With_0__Zero_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Symbols             Alphabet___Symbols                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Code(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FUBPP_Struct_Symbols& Alphabet___Symbols, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Code");

	Params::UBPP_FunctionLibrary_C_Get_Random_Code Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Alphabetic_Mode = Alphabetic_Mode;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.With_0__Zero_ = With_0__Zero_;
	Parms.Alphabet___Symbols = std::move(Alphabet___Symbols);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Code from Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUBPP_E_StyleSelection                  Alphabetic_Mode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    With_0__Zero_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Symbols             Symbols                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Code_from_Stream(int32 Code_Length, EUBPP_E_StyleSelection Alphabetic_Mode, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FUBPP_Struct_Symbols& Symbols, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Code from Stream");

	Params::UBPP_FunctionLibrary_C_Get_Random_Code_from_Stream Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Alphabetic_Mode = Alphabetic_Mode;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.With_0__Zero_ = With_0__Zero_;
	Parms.Symbols = std::move(Symbols);
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Numeric Code
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    With_0__Zero_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Numeric_Code(int32 Code_Length, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Numeric Code");

	Params::UBPP_FunctionLibrary_C_Get_Random_Numeric_Code Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.With_0__Zero_ = With_0__Zero_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Random Numeric Code from Stream
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Code_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Seperator__Optional_                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Seperator_Group_Size                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    With_0__Zero_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Code                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Random_Numeric_Code_from_Stream(int32 Code_Length, const class FString& Seperator__Optional_, int32 Seperator_Group_Size, bool With_0__Zero_, const struct FRandomStream& Stream, class UObject* __WorldContext, class FString* Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Random Numeric Code from Stream");

	Params::UBPP_FunctionLibrary_C_Get_Random_Numeric_Code_from_Stream Parms{};

	Parms.Code_Length = Code_Length;
	Parms.Seperator__Optional_ = std::move(Seperator__Optional_);
	Parms.Seperator_Group_Size = Seperator_Group_Size;
	Parms.With_0__Zero_ = With_0__Zero_;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Code != nullptr)
		*Code = std::move(Parms.Code);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Row
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_Row                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Row(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Row, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Row");

	Params::UBPP_FunctionLibrary_C_Get_Row Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Row != nullptr)
		*Return_Value_Row = Parms.Return_Value_Row;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Row Span
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_Row_Span                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Row_Span(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_Row_Span, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Row Span");

	Params::UBPP_FunctionLibrary_C_Get_Row_Span Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Row_Span != nullptr)
		*Return_Value_Row_Span = Parms.Return_Value_Row_Span;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Size (Slate Child Size)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateChildSize                  Return_Value_Size                                      (Parm, OutParm, NoDestructor)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Size__Slate_Child_Size_(class UWidget* Widget, class UObject* __WorldContext, struct FSlateChildSize* Return_Value_Size, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Size (Slate Child Size)");

	Params::UBPP_FunctionLibrary_C_Get_Size__Slate_Child_Size_ Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Size != nullptr)
		*Return_Value_Size = std::move(Parms.Return_Value_Size);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Size (Vector2D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Return_Value_Size                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Size__Vector2D_(class UWidget* Widget, class UObject* __WorldContext, struct FVector2D* Return_Value_Size, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Size (Vector2D)");

	Params::UBPP_FunctionLibrary_C_Get_Size__Vector2D_ Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Size != nullptr)
		*Return_Value_Size = std::move(Parms.Return_Value_Size);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Smallest Distance Between Actors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   AllActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorA                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorB                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndexA                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndexB                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Smallest_Distance_Between_Actors(TArray<class AActor*>& AllActors, class UObject* __WorldContext, double* Distance, class AActor** ActorA, class AActor** ActorB, int32* ActorIndexA, int32* ActorIndexB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Smallest Distance Between Actors");

	Params::UBPP_FunctionLibrary_C_Get_Smallest_Distance_Between_Actors Parms{};

	Parms.AllActors = std::move(AllActors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	AllActors = std::move(Parms.AllActors);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (ActorA != nullptr)
		*ActorA = Parms.ActorA;

	if (ActorB != nullptr)
		*ActorB = Parms.ActorB;

	if (ActorIndexA != nullptr)
		*ActorIndexA = Parms.ActorIndexA;

	if (ActorIndexB != nullptr)
		*ActorIndexB = Parms.ActorIndexB;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Time (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Time__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Time (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Time__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Trace End (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TraceEnd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Trace_End__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* TraceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Trace End (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Trace_End__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TraceEnd != nullptr)
		*TraceEnd = std::move(Parms.TraceEnd);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Trace Start (Hit)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       In_Hit_Result                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TraceStart                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Trace_Start__Hit_(const struct FHitResult& In_Hit_Result, class UObject* __WorldContext, struct FVector* TraceStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Trace Start (Hit)");

	Params::UBPP_FunctionLibrary_C_Get_Trace_Start__Hit_ Parms{};

	Parms.In_Hit_Result = std::move(In_Hit_Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TraceStart != nullptr)
		*TraceStart = std::move(Parms.TraceStart);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Vector Difference
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector_A                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector_B                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Vector_Difference(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Vector Difference");

	Params::UBPP_FunctionLibrary_C_Get_Vector_Difference Parms{};

	Parms.Vector_A = std::move(Vector_A);
	Parms.Vector_B = std::move(Vector_B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get Vertical Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EVerticalAlignment                      Return_Value_Vertical_Alignment                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_Vertical_Alignment(class UWidget* Widget, class UObject* __WorldContext, EVerticalAlignment* Return_Value_Vertical_Alignment, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get Vertical Alignment");

	Params::UBPP_FunctionLibrary_C_Get_Vertical_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_Vertical_Alignment != nullptr)
		*Return_Value_Vertical_Alignment = Parms.Return_Value_Vertical_Alignment;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Get ZOrder
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_Value_ZOrder                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Get_ZOrder(class UWidget* Widget, class UObject* __WorldContext, int32* Return_Value_ZOrder, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Get ZOrder");

	Params::UBPP_FunctionLibrary_C_Get_ZOrder Parms{};

	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value_ZOrder != nullptr)
		*Return_Value_ZOrder = Parms.Return_Value_ZOrder;

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.GetPercentage (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Percentage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::GetPercentage__Float_(double Value, double Percentage, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "GetPercentage (Float)");

	Params::UBPP_FunctionLibrary_C_GetPercentage__Float_ Parms{};

	Parms.Value = Value;
	Parms.Percentage = Percentage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.GetPercentage (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Percentage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::GetPercentage__Int_(int32 Value, double Percentage, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "GetPercentage (Int)");

	Params::UBPP_FunctionLibrary_C_GetPercentage__Int_ Parms{};

	Parms.Value = Value;
	Parms.Percentage = Percentage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.GetPercentage (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Percentage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::GetPercentage__Int64_(int64 Value, double Percentage, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "GetPercentage (Int64)");

	Params::UBPP_FunctionLibrary_C_GetPercentage__Int64_ Parms{};

	Parms.Value = Value;
	Parms.Percentage = Percentage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Half (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Half__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Half (Byte)");

	Params::UBPP_FunctionLibrary_C_Half__Byte_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Half (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Half__Float_(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Half (Float)");

	Params::UBPP_FunctionLibrary_C_Half__Float_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Half (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Half__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Half (Int)");

	Params::UBPP_FunctionLibrary_C_Half__Int_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Half (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Half__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Half (Int64)");

	Params::UBPP_FunctionLibrary_C_Half__Int64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.InRange (Byte)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inclusive_Min                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inclusive_Max                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::InRange__Byte_(uint8 Value, uint8 Min, uint8 Max, bool Inclusive_Min, bool Inclusive_Max, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "InRange (Byte)");

	Params::UBPP_FunctionLibrary_C_InRange__Byte_ Parms{};

	Parms.Value = Value;
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.Inclusive_Min = Inclusive_Min;
	Parms.Inclusive_Max = Inclusive_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.InRange (Vector)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inclusive_Min                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inclusive_Max                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::InRange__Vector_(const struct FVector& Value, const struct FVector& Min, const struct FVector& Max, bool Inclusive_Min, bool Inclusive_Max, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "InRange (Vector)");

	Params::UBPP_FunctionLibrary_C_InRange__Vector_ Parms{};

	Parms.Value = std::move(Value);
	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.Inclusive_Min = Inclusive_Min;
	Parms.Inclusive_Max = Inclusive_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Int_Array_Add(TArray<int32>& Input_Array, int32 New_Item, class UObject* __WorldContext, TArray<int32>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int Array Add");

	Params::UBPP_FunctionLibrary_C_Int_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int Array to Float Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Integer_Array                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Int_Array_to_Float_Array(TArray<int32>& Integer_Array, class UObject* __WorldContext, TArray<double>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int Array to Float Array");

	Params::UBPP_FunctionLibrary_C_Int_Array_to_Float_Array Parms{};

	Parms.Integer_Array = std::move(Integer_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Integer_Array = std::move(Parms.Integer_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int Array to String
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Int_Array                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Separator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Return_Array                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Int_Array_to_String(TArray<int32>& Input_Int_Array, const class FString& Separator, class UObject* __WorldContext, class FString* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int Array to String");

	Params::UBPP_FunctionLibrary_C_Int_Array_to_String Parms{};

	Parms.Input_Int_Array = std::move(Input_Int_Array);
	Parms.Separator = std::move(Separator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Int_Array = std::move(Parms.Input_Int_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int Array To String Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Int_Array                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Int_Array_To_String_Array(TArray<int32>& Input_Int_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int Array To String Array");

	Params::UBPP_FunctionLibrary_C_Int_Array_To_String_Array Parms{};

	Parms.Input_Int_Array = std::move(Input_Int_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Int_Array = std::move(Parms.Input_Int_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int Array To Vector Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Float_Array                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Int_Array_To_Vector_Array(TArray<int32>& Input_Float_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int Array To Vector Array");

	Params::UBPP_FunctionLibrary_C_Int_Array_To_Vector_Array Parms{};

	Parms.Input_Float_Array = std::move(Input_Float_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Float_Array = std::move(Parms.Input_Float_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int to Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Int                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_Vector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Int_to_Vector(int32 Input_Int, class UObject* __WorldContext, struct FVector* Return_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int to Vector");

	Params::UBPP_FunctionLibrary_C_Int_to_Vector Parms{};

	Parms.Input_Int = Input_Int;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Vector != nullptr)
		*Return_Vector = std::move(Parms.Return_Vector);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Int64 Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int64>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int64                                   New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Int64_Array_Add(TArray<int64>& Input_Array, int64 New_Item, class UObject* __WorldContext, TArray<int64>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Int64 Array Add");

	Params::UBPP_FunctionLibrary_C_Int64_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = New_Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Integer64 To String
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Return_String                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Integer64_To_String(int64 Input_Value, class UObject* __WorldContext, class FString* Return_String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Integer64 To String");

	Params::UBPP_FunctionLibrary_C_Integer64_To_String Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_String != nullptr)
		*Return_String = std::move(Parms.Return_String);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Integer64 To Text
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Return_Text                                            (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Integer64_To_Text(int64 Input_Value, class UObject* __WorldContext, class FText* Return_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Integer64 To Text");

	Params::UBPP_FunctionLibrary_C_Integer64_To_Text Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Text != nullptr)
		*Return_Text = std::move(Parms.Return_Text);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Invert Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Invert_Float(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Invert Float");

	Params::UBPP_FunctionLibrary_C_Invert_Float Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Invert Integer
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Invert_Integer(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Invert Integer");

	Params::UBPP_FunctionLibrary_C_Invert_Integer Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Invert Integer64
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Invert_Integer64(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Invert Integer64");

	Params::UBPP_FunctionLibrary_C_Invert_Integer64 Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Invert Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Invert_Vector(const struct FVector& Value, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Invert Vector");

	Params::UBPP_FunctionLibrary_C_Invert_Vector Parms{};

	Parms.Value = std::move(Value);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Android Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Android_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Android Platform");

	Params::UBPP_FunctionLibrary_C_Is_Android_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Engine Version 4 26
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Engine_Version_4_26(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Engine Version 4 26");

	Params::UBPP_FunctionLibrary_C_Is_Engine_Version_4_26 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Engine Version 4 27
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Engine_Version_4_27(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Engine Version 4 27");

	Params::UBPP_FunctionLibrary_C_Is_Engine_Version_4_27 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Facing Wall
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Distance_To_Wall                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Get_More_Informations__Height_                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Height_To_Check                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Wall_Height_Point                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Facing_Wall(class AActor* Actor, double Max_Distance_To_Wall, bool Get_More_Informations__Height_, double Max_Height_To_Check, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, bool* Return_value, struct FVector* Wall_Height_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Facing Wall");

	Params::UBPP_FunctionLibrary_C_Is_Facing_Wall Parms{};

	Parms.Actor = Actor;
	Parms.Max_Distance_To_Wall = Max_Distance_To_Wall;
	Parms.Get_More_Informations__Height_ = Get_More_Informations__Height_;
	Parms.Max_Height_To_Check = Max_Height_To_Check;
	Parms.TraceChannel = TraceChannel;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;

	if (Wall_Height_Point != nullptr)
		*Wall_Height_Point = std::move(Parms.Wall_Height_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is IOS Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_IOS_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is IOS Platform");

	Params::UBPP_FunctionLibrary_C_Is_IOS_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Linux Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Linux_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Linux Platform");

	Params::UBPP_FunctionLibrary_C_Is_Linux_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Mac Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Mac_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Mac Platform");

	Params::UBPP_FunctionLibrary_C_Is_Mac_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Point In Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sphere_Origin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Sphere_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Point_In_Sphere(const struct FVector& Point, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Point In Sphere");

	Params::UBPP_FunctionLibrary_C_Is_Point_In_Sphere Parms{};

	Parms.Point = std::move(Point);
	Parms.Sphere_Origin = std::move(Sphere_Origin);
	Parms.Sphere_Radius = Sphere_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is PS4 Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_PS4_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is PS4 Platform");

	Params::UBPP_FunctionLibrary_C_Is_PS4_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Sphere Completely In Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Point__Sphere_                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Point_Radius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sphere_Origin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Sphere_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Sphere_Completely_In_Sphere(const struct FVector& Point__Sphere_, double Point_Radius, const struct FVector& Sphere_Origin, double Sphere_Radius, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Sphere Completely In Sphere");

	Params::UBPP_FunctionLibrary_C_Is_Sphere_Completely_In_Sphere Parms{};

	Parms.Point__Sphere_ = std::move(Point__Sphere_);
	Parms.Point_Radius = Point_Radius;
	Parms.Sphere_Origin = std::move(Sphere_Origin);
	Parms.Sphere_Radius = Sphere_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Sphere Touching Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Sphere_1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius_1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sphere_2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius_2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Sphere_Touching_Sphere(const struct FVector& Sphere_1, double Radius_1, const struct FVector& Sphere_2, double Radius_2, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Sphere Touching Sphere");

	Params::UBPP_FunctionLibrary_C_Is_Sphere_Touching_Sphere Parms{};

	Parms.Sphere_1 = std::move(Sphere_1);
	Parms.Radius_1 = Radius_1;
	Parms.Sphere_2 = std::move(Sphere_2);
	Parms.Radius_2 = Radius_2;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is Windows Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_Windows_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is Windows Platform");

	Params::UBPP_FunctionLibrary_C_Is_Windows_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Is XboxOne Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Is_XboxOne_Platform(class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Is XboxOne Platform");

	Params::UBPP_FunctionLibrary_C_Is_XboxOne_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.IsVectorInBoxExtent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Input_Vector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Origin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Extent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::IsVectorInBoxExtent(const struct FVector& Input_Vector, const struct FVector& Box_Origin, const struct FVector& Box_Extent, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "IsVectorInBoxExtent");

	Params::UBPP_FunctionLibrary_C_IsVectorInBoxExtent Parms{};

	Parms.Input_Vector = std::move(Input_Vector);
	Parms.Box_Origin = std::move(Box_Origin);
	Parms.Box_Extent = std::move(Box_Extent);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Len (Text)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Input_Text                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Len__Text_(const class FText& Input_Text, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Len (Text)");

	Params::UBPP_FunctionLibrary_C_Len__Text_ Parms{};

	Parms.Input_Text = std::move(Input_Text);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Make Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Pre_Decimal_Places                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Decimal_Places                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Make_Float(int32 Pre_Decimal_Places, int32 Decimal_Places, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Make Float");

	Params::UBPP_FunctionLibrary_C_Make_Float Parms{};

	Parms.Pre_Decimal_Places = Pre_Decimal_Places;
	Parms.Decimal_Places = Decimal_Places;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Max Byte
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Max_Byte(class UObject* __WorldContext, uint8* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Max Byte");

	Params::UBPP_FunctionLibrary_C_Max_Byte Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Max Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Max_Float(class UObject* __WorldContext, double* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Max Float");

	Params::UBPP_FunctionLibrary_C_Max_Float Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Max Int
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Int_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Max_Int(class UObject* __WorldContext, int32* Max_Int_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Max Int");

	Params::UBPP_FunctionLibrary_C_Max_Int Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int_0 != nullptr)
		*Max_Int_0 = Parms.Max_Int_0;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Max Int64
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Max_Int64(class UObject* __WorldContext, int64* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Max Int64");

	Params::UBPP_FunctionLibrary_C_Max_Int64 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Meele Capsule Trace By Channel (First Person)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player_Actor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Index                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Forward_Offset                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Half_Height                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Meele_Capsule_Trace_By_Channel__First_Person_(class AActor* Player_Actor, int32 Player_Index, double Hitbox_Forward_Offset, double Hitbox_Radius, double Hitbox_Half_Height, bool TraceComplex, ETraceTypeQuery TraceChannel, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Meele Capsule Trace By Channel (First Person)");

	Params::UBPP_FunctionLibrary_C_Meele_Capsule_Trace_By_Channel__First_Person_ Parms{};

	Parms.Player_Actor = Player_Actor;
	Parms.Player_Index = Player_Index;
	Parms.Hitbox_Forward_Offset = Hitbox_Forward_Offset;
	Parms.Hitbox_Radius = Hitbox_Radius;
	Parms.Hitbox_Half_Height = Hitbox_Half_Height;
	Parms.TraceComplex = TraceComplex;
	Parms.TraceChannel = TraceChannel;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C. Top Down)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Skeletal_Mesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             Head_Socket_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    _Skeletal_Mesh_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Head_Location                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Forward_Offset                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Radius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Hitbox_Half_Height                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bTraceComplex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::_Top_Down_(class USkeletalMeshComponent* Skeletal_Mesh, class FName Head_Socket_Name, bool _Skeletal_Mesh_, const struct FVector& Head_Location, double Hitbox_Forward_Offset, double Hitbox_Radius, double Hitbox_Half_Height, bool bTraceComplex, ETraceTypeQuery TraceChannel, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", " Top Down)");

	Params::UBPP_FunctionLibrary_C__Top_Down_ Parms{};

	Parms.Skeletal_Mesh = Skeletal_Mesh;
	Parms.Head_Socket_Name = Head_Socket_Name;
	Parms._Skeletal_Mesh_ = _Skeletal_Mesh_;
	Parms.Head_Location = std::move(Head_Location);
	Parms.Hitbox_Forward_Offset = Hitbox_Forward_Offset;
	Parms.Hitbox_Radius = Hitbox_Radius;
	Parms.Hitbox_Half_Height = Hitbox_Half_Height;
	Parms.bTraceComplex = bTraceComplex;
	Parms.TraceChannel = TraceChannel;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Min Byte
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Min_Byte(class UObject* __WorldContext, uint8* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Min Byte");

	Params::UBPP_FunctionLibrary_C_Min_Byte Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Min Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Max_Float                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Min_Float(class UObject* __WorldContext, double* Max_Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Min Float");

	Params::UBPP_FunctionLibrary_C_Min_Float Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Float != nullptr)
		*Max_Float = Parms.Max_Float;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Min Int
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Min_Int(class UObject* __WorldContext, int32* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Min Int");

	Params::UBPP_FunctionLibrary_C_Min_Int Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Min Int64
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Max_Int                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Min_Int64(class UObject* __WorldContext, int64* Max_Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Min Int64");

	Params::UBPP_FunctionLibrary_C_Min_Int64 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Max_Int != nullptr)
		*Max_Int = Parms.Max_Int;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus Absolute (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_Absolute__Float_(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus Absolute (Float)");

	Params::UBPP_FunctionLibrary_C_Minus_Absolute__Float_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus Absolute (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_Absolute__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus Absolute (Int)");

	Params::UBPP_FunctionLibrary_C_Minus_Absolute__Int_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus Absolute (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_Absolute__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus Absolute (Int64)");

	Params::UBPP_FunctionLibrary_C_Minus_Absolute__Int64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus One (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_One__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus One (Byte)");

	Params::UBPP_FunctionLibrary_C_Minus_One__Byte_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus One (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_One__Float_(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus One (Float)");

	Params::UBPP_FunctionLibrary_C_Minus_One__Float_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus One (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_One__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus One (Int)");

	Params::UBPP_FunctionLibrary_C_Minus_One__Int_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Minus One (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Minus_One__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Minus One (Int64)");

	Params::UBPP_FunctionLibrary_C_Minus_One__Int64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Mouse Position on Platform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UUBPP_FunctionLibrary_C::Mouse_Position_on_Platform(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Mouse Position on Platform");

	Params::UBPP_FunctionLibrary_C_Mouse_Position_on_Platform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Mouse Position on Viewport
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UUBPP_FunctionLibrary_C::Mouse_Position_on_Viewport(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Mouse Position on Viewport");

	Params::UBPP_FunctionLibrary_C_Mouse_Position_on_Viewport Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Camera Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         Trace_Channel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Camera_Line_Trace_By_Channel(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery Trace_Channel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Camera Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Multi_Camera_Line_Trace_By_Channel Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.Trace_Channel = Trace_Channel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Camera Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Camera_Line_Trace_By_Profile(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Camera Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Multi_Camera_Line_Trace_By_Profile Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Camera Line Trace for Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Camera_Line_Trace_for_Objects(double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Camera Line Trace for Objects");

	Params::UBPP_FunctionLibrary_C_Multi_Camera_Line_Trace_for_Objects Parms{};

	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Noise Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Multi_Noise_Line_Trace_By_Channel(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Noise Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Multi_Noise_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.TraceChannel = TraceChannel;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Noise Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Multi_Noise_Line_Trace_By_Profile(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Noise Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Multi_Noise_Line_Trace_By_Profile Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Noise Line Trace For Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Multi_Noise_Line_Trace_For_Objects(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Noise Line Trace For Objects");

	Params::UBPP_FunctionLibrary_C_Multi_Noise_Line_Trace_For_Objects Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Weapon Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceC_hannel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Weapon_Line_Trace_By_Channel(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceC_hannel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Weapon Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Multi_Weapon_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.TraceC_hannel = TraceC_hannel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Weapon Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Weapon_Line_Trace_By_Profile(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Weapon Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Multi_Weapon_Line_Trace_By_Profile Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Multi Weapon Line Trace For Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Multi_Weapon_Line_Trace_For_Objects(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Multi Weapon Line Trace For Objects");

	Params::UBPP_FunctionLibrary_C_Multi_Weapon_Line_Trace_For_Objects Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Name to Int
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Input_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Name_to_Int(class FName Input_Name, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Name to Int");

	Params::UBPP_FunctionLibrary_C_Name_to_Int Parms{};

	Parms.Input_Name = Input_Name;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Noise Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Noise_Line_Trace_By_Channel(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Noise Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Noise_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.TraceChannel = TraceChannel;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Noise Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Noise_Line_Trace_By_Profile(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Noise Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Noise_Line_Trace_By_Profile Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Noise Line Trace For Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Noise_Line_Trace_For_Objects(const struct FVector& Start, const struct FVector& End, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Noise Line Trace For Objects");

	Params::UBPP_FunctionLibrary_C_Noise_Line_Trace_For_Objects Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Object Array To Display Name Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UObject*>                  Input_Object                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Output_Display_Name                                    (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Object_Array_To_Display_Name_Array(TArray<class UObject*>& Input_Object, class UObject* __WorldContext, TArray<class FString>* Output_Display_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Object Array To Display Name Array");

	Params::UBPP_FunctionLibrary_C_Object_Array_To_Display_Name_Array Parms{};

	Parms.Input_Object = std::move(Input_Object);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Object = std::move(Parms.Input_Object);

	if (Output_Display_Name != nullptr)
		*Output_Display_Name = std::move(Parms.Output_Display_Name);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Plus One (Byte)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Plus_One__Byte_(uint8 Value, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Plus One (Byte)");

	Params::UBPP_FunctionLibrary_C_Plus_One__Byte_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Plus One (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Plus_One__Float_(double Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Plus One (Float)");

	Params::UBPP_FunctionLibrary_C_Plus_One__Float_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Plus One (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Plus_One__Int_(int32 Value, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Plus One (Int)");

	Params::UBPP_FunctionLibrary_C_Plus_One__Int_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Plus One (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Plus_One__Int64_(int64 Value, class UObject* __WorldContext, int64* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Plus One (Int64)");

	Params::UBPP_FunctionLibrary_C_Plus_One__Int64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Print Name
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             In_Name                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Print_To_Screen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Print_To_Log                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Text_Color                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Print_Name(class FName In_Name, bool Print_To_Screen, bool Print_To_Log, const struct FLinearColor& Text_Color, double Duration, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Print Name");

	Params::UBPP_FunctionLibrary_C_Print_Name Parms{};

	Parms.In_Name = In_Name;
	Parms.Print_To_Screen = Print_To_Screen;
	Parms.Print_To_Log = Print_To_Log;
	Parms.Text_Color = std::move(Text_Color);
	Parms.Duration = Duration;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Print String Array
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EUBPP_E_PrintMode                       Print_Mode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Print_To_Screen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Print_To_Log                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Text_Color                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Separator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Print_String_Array(TArray<class FString>& Input_Array, EUBPP_E_PrintMode Print_Mode, bool Print_To_Screen, bool Print_To_Log, const struct FLinearColor& Text_Color, double Duration, const class FString& Separator, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Print String Array");

	Params::UBPP_FunctionLibrary_C_Print_String_Array Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Print_Mode = Print_Mode;
	Parms.Print_To_Screen = Print_To_Screen;
	Parms.Print_To_Log = Print_To_Log;
	Parms.Text_Color = std::move(Text_Color);
	Parms.Duration = Duration;
	Parms.Separator = std::move(Separator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Byte(uint8 Max, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte");

	Params::UBPP_FunctionLibrary_C_Random_Byte Parms{};

	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte From Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Byte_From_Stream(uint8 Max, const struct FRandomStream& Stream, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte From Stream");

	Params::UBPP_FunctionLibrary_C_Random_Byte_From_Stream Parms{};

	Parms.Max = Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte In Range
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Byte_In_Range(uint8 Min, uint8 Max, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte In Range");

	Params::UBPP_FunctionLibrary_C_Random_Byte_In_Range Parms{};

	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte In Range From Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Byte_In_Range_From_Stream(uint8 Min, uint8 Max, const struct FRandomStream& Stream, class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte In Range From Stream");

	Params::UBPP_FunctionLibrary_C_Random_Byte_In_Range_From_Stream Parms{};

	Parms.Min = Min;
	Parms.Max = Max;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte Max
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Byte_Max(class UObject* __WorldContext, uint8* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte Max");

	Params::UBPP_FunctionLibrary_C_Random_Byte_Max Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Byte Max From Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UUBPP_FunctionLibrary_C::Random_Byte_Max_From_Stream(const struct FRandomStream& Stream, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Byte Max From Stream");

	Params::UBPP_FunctionLibrary_C_Random_Byte_Max_From_Stream Parms{};

	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Color
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Static_Opacity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Opacity__If_Static_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FColor                           Random_Color_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Color(bool Static_Opacity, uint8 Opacity__If_Static_, class UObject* __WorldContext, struct FColor* Random_Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Color");

	Params::UBPP_FunctionLibrary_C_Random_Color Parms{};

	Parms.Static_Opacity = Static_Opacity;
	Parms.Opacity__If_Static_ = Opacity__If_Static_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Color_0 != nullptr)
		*Random_Color_0 = std::move(Parms.Random_Color_0);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Float Max
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    And_Min_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UUBPP_FunctionLibrary_C::Random_Float_Max(bool And_Min_, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Float Max");

	Params::UBPP_FunctionLibrary_C_Random_Float_Max Parms{};

	Parms.And_Min_ = And_Min_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Float Max from Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    And_Min_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UUBPP_FunctionLibrary_C::Random_Float_Max_from_Stream(bool And_Min_, const struct FRandomStream& Stream, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Float Max from Stream");

	Params::UBPP_FunctionLibrary_C_Random_Float_Max_from_Stream Parms{};

	Parms.And_Min_ = And_Min_;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Integer Max
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    And_Min_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUBPP_FunctionLibrary_C::Random_Integer_Max(bool And_Min_, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Integer Max");

	Params::UBPP_FunctionLibrary_C_Random_Integer_Max Parms{};

	Parms.And_Min_ = And_Min_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Integer Max From Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    And_Min_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUBPP_FunctionLibrary_C::Random_Integer_Max_From_Stream(bool And_Min_, const struct FRandomStream& Stream, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Integer Max From Stream");

	Params::UBPP_FunctionLibrary_C_Random_Integer_Max_From_Stream Parms{};

	Parms.And_Min_ = And_Min_;
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Linear Color
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Static_Opacity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Opacity__If_Static_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Random_Color_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Linear_Color(bool Static_Opacity, double Opacity__If_Static_, class UObject* __WorldContext, struct FLinearColor* Random_Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Linear Color");

	Params::UBPP_FunctionLibrary_C_Random_Linear_Color Parms{};

	Parms.Static_Opacity = Static_Opacity;
	Parms.Opacity__If_Static_ = Opacity__If_Static_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Color_0 != nullptr)
		*Random_Color_0 = std::move(Parms.Random_Color_0);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Capsule
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Half_Height                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Capsule(const struct FVector& Origin_Vector, double Radius, double Half_Height, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Capsule");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Capsule Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.Half_Height = Half_Height;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Cylinder
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Cylinder(const struct FVector& Origin_Vector, double Radius, double Height, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Cylinder");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Cylinder Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.Height = Height;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Donut
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Donut_Radius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Thickness_Radius                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Donut(const struct FVector& Origin_Vector, double Donut_Radius, double Thickness_Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Donut");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Donut Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Donut_Radius = Donut_Radius;
	Parms.Thickness_Radius = Thickness_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Hollow Box Extent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Extent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Hollow_Box_Extent(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, double Thickness, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Hollow Box Extent");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Hollow_Box_Extent Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Box_Extent = std::move(Box_Extent);
	Parms.Thickness = Thickness;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Hollow Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Outer_Radius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Inner_Radius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Hollow_Sphere(const struct FVector& Origin_Vector, double Outer_Radius, double Inner_Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Hollow Sphere");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Hollow_Sphere Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Outer_Radius = Outer_Radius;
	Parms.Inner_Radius = Inner_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point In Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_In_Sphere(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point In Sphere");

	Params::UBPP_FunctionLibrary_C_Random_Point_In_Sphere Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point On Box Extent Bounds
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Box_Extent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_On_Box_Extent_Bounds(const struct FVector& Origin_Vector, const struct FVector& Box_Extent, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point On Box Extent Bounds");

	Params::UBPP_FunctionLibrary_C_Random_Point_On_Box_Extent_Bounds Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Box_Extent = std::move(Box_Extent);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point On Circle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_On_Circle(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point On Circle");

	Params::UBPP_FunctionLibrary_C_Random_Point_On_Circle Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point On Circle Bound
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_On_Circle_Bound(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point On Circle Bound");

	Params::UBPP_FunctionLibrary_C_Random_Point_On_Circle_Bound Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point On Line
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Line_Start                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Line_End                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_On_Line(const struct FVector& Line_Start, const struct FVector& Line_End, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point On Line");

	Params::UBPP_FunctionLibrary_C_Random_Point_On_Line Parms{};

	Parms.Line_Start = std::move(Line_Start);
	Parms.Line_End = std::move(Line_End);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point On Sphere Bound
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Vector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_On_Sphere_Bound(const struct FVector& Origin_Vector, double Radius, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point On Sphere Bound");

	Params::UBPP_FunctionLibrary_C_Random_Point_On_Sphere_Bound Parms{};

	Parms.Origin_Vector = std::move(Origin_Vector);
	Parms.Radius = Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Point on Spline
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Random_Point                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Point_on_Spline(class USplineComponent* Spline_Component, class UObject* __WorldContext, struct FVector* Random_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Point on Spline");

	Params::UBPP_FunctionLibrary_C_Random_Point_on_Spline Parms{};

	Parms.Spline_Component = Spline_Component;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Point != nullptr)
		*Random_Point = std::move(Parms.Random_Point);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Random_Stream_0                                        (Parm, OutParm, ZeroConstructor, NoDestructor)

void UUBPP_FunctionLibrary_C::Random_Stream(class UObject* __WorldContext, struct FRandomStream* Random_Stream_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Stream");

	Params::UBPP_FunctionLibrary_C_Random_Stream Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Random_Stream_0 != nullptr)
		*Random_Stream_0 = std::move(Parms.Random_Stream_0);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Vector In Range
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Vector_In_Range(const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Vector In Range");

	Params::UBPP_FunctionLibrary_C_Random_Vector_In_Range Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Random Vector In Range from Stream
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Stream                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Random_Vector_In_Range_from_Stream(const struct FVector& Min, const struct FVector& Max, const struct FRandomStream& Stream, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Random Vector In Range from Stream");

	Params::UBPP_FunctionLibrary_C_Random_Vector_In_Range_from_Stream Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.Stream = std::move(Stream);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove All Bytes Not In Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// uint8                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_All_Bytes_Not_In_Range(TArray<uint8>& Input_Array, uint8 Min, uint8 Max, class UObject* __WorldContext, TArray<uint8>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove All Bytes Not In Range");

	Params::UBPP_FunctionLibrary_C_Remove_All_Bytes_Not_In_Range Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove All Floats Not in Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_All_Floats_Not_in_Range(TArray<double>& Input_Array, double Min, double Max, class UObject* __WorldContext, TArray<double>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove All Floats Not in Range");

	Params::UBPP_FunctionLibrary_C_Remove_All_Floats_Not_in_Range Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove All Ints Not In Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_All_Ints_Not_In_Range(TArray<int32>& Input_Array, int32 Min, int32 Max, class UObject* __WorldContext, TArray<int32>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove All Ints Not In Range");

	Params::UBPP_FunctionLibrary_C_Remove_All_Ints_Not_In_Range Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove All Ints64 Not In Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int64>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int64                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_All_Ints64_Not_In_Range(TArray<int64>& Input_Array, int64 Min, int64 Max, class UObject* __WorldContext, TArray<int64>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove All Ints64 Not In Range");

	Params::UBPP_FunctionLibrary_C_Remove_All_Ints64_Not_In_Range Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove All Vectors Not In Range
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_All_Vectors_Not_In_Range(TArray<struct FVector>& Input_Array, const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext, TArray<struct FVector>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove All Vectors Not In Range");

	Params::UBPP_FunctionLibrary_C_Remove_All_Vectors_Not_In_Range Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Actors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Actors(TArray<class AActor*>& Input_Array, class UObject* __WorldContext, TArray<class AActor*>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Actors");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Actors Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Bytes
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Bytes(TArray<uint8>& Input_Array, class UObject* __WorldContext, TArray<uint8>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Bytes");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Bytes Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Floats
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Floats(TArray<double>& Input_Array, class UObject* __WorldContext, TArray<double>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Floats");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Floats Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Integers64
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int64>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Integers64(TArray<int64>& Input_Array, class UObject* __WorldContext, TArray<int64>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Integers64");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Integers64 Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Ints
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Ints(TArray<int32>& Input_Array, class UObject* __WorldContext, TArray<int32>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Ints");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Ints Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Strings
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Strings(TArray<class FString>& Input_Array, class UObject* __WorldContext, TArray<class FString>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Strings");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Strings Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Remove Not Unique Vectors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Input_Vector_Array                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_value                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Remove_Not_Unique_Vectors(TArray<struct FVector>& Input_Vector_Array, class UObject* __WorldContext, TArray<struct FVector>* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Remove Not Unique Vectors");

	Params::UBPP_FunctionLibrary_C_Remove_Not_Unique_Vectors Parms{};

	Parms.Input_Vector_Array = std::move(Input_Vector_Array);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Vector_Array = std::move(Parms.Input_Vector_Array);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Actor Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Actor_Array(TArray<class AActor*>& Input, class UObject* __WorldContext, TArray<class AActor*>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Actor Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Actor_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Boolean Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<bool>                            Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<bool>                            Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Boolean_Array(TArray<bool>& Input, class UObject* __WorldContext, TArray<bool>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Boolean Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Boolean_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Byte Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Byte_Array(TArray<uint8>& Input, class UObject* __WorldContext, TArray<uint8>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Byte Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Byte_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Float Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<double>                          Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Float_Array(TArray<double>& Input, class UObject* __WorldContext, TArray<double>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Float Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Float_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Int Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Int_Array(TArray<int32>& Input, class UObject* __WorldContext, TArray<int32>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Int Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Int_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Int64 Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int64>                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Int64_Array(TArray<int64>& Input, class UObject* __WorldContext, TArray<int64>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Int64 Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Int64_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse String Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_String_Array(TArray<class FString>& Input, class UObject* __WorldContext, TArray<class FString>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse String Array");

	Params::UBPP_FunctionLibrary_C_Reverse_String_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Reverse Vector Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Array                                           (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Reverse_Vector_Array(TArray<struct FVector>& Input, class UObject* __WorldContext, TArray<struct FVector>* Return_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Reverse Vector Array");

	Params::UBPP_FunctionLibrary_C_Reverse_Vector_Array Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input = std::move(Parms.Input);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Rotation Dependent Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TraceComplex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UUBPP_FunctionLibrary_C::Rotation_Dependent_Line_Trace_By_Channel(const struct FVector& Start, const struct FRotator& Rotation, double Length, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceChannel, bool TraceComplex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Rotation Dependent Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Rotation_Dependent_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.Rotation = std::move(Rotation);
	Parms.Length = Length;
	Parms.Noise = std::move(Noise);
	Parms.TraceChannel = TraceChannel;
	Parms.TraceComplex = TraceComplex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Rotational Slice Procedural Mesh
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UProceduralMeshComponent*         In_Proc_Mesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Plane_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Plane_Rotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Create_Other_Half                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EProcMeshSliceCapOption                 Cap_Option                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Cap_Material                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UProceduralMeshComponent*         Out_Other_Half_Proc_Mesh                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Rotational_Slice_Procedural_Mesh(class UProceduralMeshComponent* In_Proc_Mesh, const struct FVector& Plane_Position, const struct FRotator& Plane_Rotation, bool Create_Other_Half, EProcMeshSliceCapOption Cap_Option, class UMaterialInterface* Cap_Material, class UObject* __WorldContext, class UProceduralMeshComponent** Out_Other_Half_Proc_Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Rotational Slice Procedural Mesh");

	Params::UBPP_FunctionLibrary_C_Rotational_Slice_Procedural_Mesh Parms{};

	Parms.In_Proc_Mesh = In_Proc_Mesh;
	Parms.Plane_Position = std::move(Plane_Position);
	Parms.Plane_Rotation = std::move(Plane_Rotation);
	Parms.Create_Other_Half = Create_Other_Half;
	Parms.Cap_Option = Cap_Option;
	Parms.Cap_Material = Cap_Material;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Other_Half_Proc_Mesh != nullptr)
		*Out_Other_Half_Proc_Mesh = Parms.Out_Other_Half_Proc_Mesh;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Seperate Numerics And Alphabetics
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Input_String                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Numerics                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Alphabetics                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Seperate_Numerics_And_Alphabetics(const class FString& Input_String, class UObject* __WorldContext, int32* Numerics, class FString* Alphabetics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Seperate Numerics And Alphabetics");

	Params::UBPP_FunctionLibrary_C_Seperate_Numerics_And_Alphabetics Parms{};

	Parms.Input_String = std::move(Input_String);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Numerics != nullptr)
		*Numerics = Parms.Numerics;

	if (Alphabetics != nullptr)
		*Alphabetics = std::move(Parms.Alphabetics);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Server Travel
// (Exec, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UWorld>            Level                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Server_Travel(const TSoftObjectPtr<class UWorld> Level, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Server Travel");

	Params::UBPP_FunctionLibrary_C_Server_Travel Parms{};

	Parms.Level = Level;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InAlignment                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Alignment(class UWidget* Widget, const struct FVector2D& InAlignment, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Alignment");

	Params::UBPP_FunctionLibrary_C_Set_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.InAlignment = std::move(InAlignment);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Anchors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAnchors                         InAnchors                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Anchors(class UWidget* Widget, const struct FAnchors& InAnchors, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Anchors");

	Params::UBPP_FunctionLibrary_C_Set_Anchors Parms{};

	Parms.Widget = Widget;
	Parms.InAnchors = std::move(InAnchors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Auto Size
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InbAutoSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Auto_Size(class UWidget* Widget, bool InbAutoSize, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Auto Size");

	Params::UBPP_FunctionLibrary_C_Set_Auto_Size Parms{};

	Parms.Widget = Widget;
	Parms.InbAutoSize = InbAutoSize;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Column
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InColumn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Column(class UWidget* Widget, int32 InColumn, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Column");

	Params::UBPP_FunctionLibrary_C_Set_Column Parms{};

	Parms.Widget = Widget;
	Parms.InColumn = InColumn;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Column Span
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InColumnSpan                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Column_Span(class UWidget* Widget, int32 InColumnSpan, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Column Span");

	Params::UBPP_FunctionLibrary_C_Set_Column_Span Parms{};

	Parms.Widget = Widget;
	Parms.InColumnSpan = InColumnSpan;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Fill Empty Space
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InbFillEmptySpace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Fill_Empty_Space(class UWidget* Widget, bool InbFillEmptySpace, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Fill Empty Space");

	Params::UBPP_FunctionLibrary_C_Set_Fill_Empty_Space Parms{};

	Parms.Widget = Widget;
	Parms.InbFillEmptySpace = InbFillEmptySpace;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Fill Span When Less Than
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  InFillSpanWhenLessThan                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Fill_Span_When_Less_Than(class UWidget* Widget, double InFillSpanWhenLessThan, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Fill Span When Less Than");

	Params::UBPP_FunctionLibrary_C_Set_Fill_Span_When_Less_Than Parms{};

	Parms.Widget = Widget;
	Parms.InFillSpanWhenLessThan = InFillSpanWhenLessThan;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Horizontal Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EHorizontalAlignment                    InHorizontalAlignment                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Horizontal_Alignment(class UWidget* Widget, EHorizontalAlignment InHorizontalAlignment, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Horizontal Alignment");

	Params::UBPP_FunctionLibrary_C_Set_Horizontal_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.InHorizontalAlignment = InHorizontalAlignment;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Layer
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InLayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Layer(class UWidget* Widget, int32 InLayer, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Layer");

	Params::UBPP_FunctionLibrary_C_Set_Layer Parms{};

	Parms.Widget = Widget;
	Parms.InLayer = InLayer;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Layout
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAnchorData                      InLayoutData                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Layout(class UWidget* Widget, const struct FAnchorData& InLayoutData, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Layout");

	Params::UBPP_FunctionLibrary_C_Set_Layout Parms{};

	Parms.Widget = Widget;
	Parms.InLayoutData = std::move(InLayoutData);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Location (Transform)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform_Ref                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          New_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Location__Transform_(struct FTransform& Transform_Ref, const struct FVector& New_Location, class UObject* __WorldContext, struct FTransform* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Location (Transform)");

	Params::UBPP_FunctionLibrary_C_Set_Location__Transform_ Parms{};

	Parms.Transform_Ref = std::move(Transform_Ref);
	Parms.New_Location = std::move(New_Location);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Transform_Ref = std::move(Parms.Transform_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Nudge
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InNudge                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Nudge(class UWidget* Widget, const struct FVector2D& InNudge, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Nudge");

	Params::UBPP_FunctionLibrary_C_Set_Nudge Parms{};

	Parms.Widget = Widget;
	Parms.InNudge = std::move(InNudge);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Offsets
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FMargin                          InOffset                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Offsets(class UWidget* Widget, const struct FMargin& InOffset, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Offsets");

	Params::UBPP_FunctionLibrary_C_Set_Offsets Parms{};

	Parms.Widget = Widget;
	Parms.InOffset = std::move(InOffset);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Padding
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FMargin                          InPadding                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Padding(class UWidget* Widget, const struct FMargin& InPadding, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Padding");

	Params::UBPP_FunctionLibrary_C_Set_Padding Parms{};

	Parms.Widget = Widget;
	Parms.InPadding = std::move(InPadding);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Position
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InPosition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Position(class UWidget* Widget, const struct FVector2D& InPosition, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Position");

	Params::UBPP_FunctionLibrary_C_Set_Position Parms{};

	Parms.Widget = Widget;
	Parms.InPosition = std::move(InPosition);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Rotation (Transform)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform_Ref                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         New_Rotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Rotation__Transform_(struct FTransform& Transform_Ref, const struct FRotator& New_Rotation, class UObject* __WorldContext, struct FTransform* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Rotation (Transform)");

	Params::UBPP_FunctionLibrary_C_Set_Rotation__Transform_ Parms{};

	Parms.Transform_Ref = std::move(Transform_Ref);
	Parms.New_Rotation = std::move(New_Rotation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Transform_Ref = std::move(Parms.Transform_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Row
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InRow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Row(class UWidget* Widget, int32 InRow, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Row");

	Params::UBPP_FunctionLibrary_C_Set_Row Parms{};

	Parms.Widget = Widget;
	Parms.InRow = InRow;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Row Span
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InRowSpan                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Row_Span(class UWidget* Widget, int32 InRowSpan, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Row Span");

	Params::UBPP_FunctionLibrary_C_Set_Row_Span Parms{};

	Parms.Widget = Widget;
	Parms.InRowSpan = InRowSpan;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Scale (Transform)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform_Ref                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          New_Scale                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Scale__Transform_(struct FTransform& Transform_Ref, const struct FVector& New_Scale, class UObject* __WorldContext, struct FTransform* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Scale (Transform)");

	Params::UBPP_FunctionLibrary_C_Set_Scale__Transform_ Parms{};

	Parms.Transform_Ref = std::move(Transform_Ref);
	Parms.New_Scale = std::move(New_Scale);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Transform_Ref = std::move(Parms.Transform_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Size (Slate Child Size)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FSlateChildSize                  InSize                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Size__Slate_Child_Size_(class UWidget* Widget, const struct FSlateChildSize& InSize, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Size (Slate Child Size)");

	Params::UBPP_FunctionLibrary_C_Set_Size__Slate_Child_Size_ Parms{};

	Parms.Widget = Widget;
	Parms.InSize = std::move(InSize);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Size (Vector2D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InSize                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Size__Vector2D_(class UWidget* Widget, const struct FVector2D& InSize, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Size (Vector2D)");

	Params::UBPP_FunctionLibrary_C_Set_Size__Vector2D_ Parms{};

	Parms.Widget = Widget;
	Parms.InSize = std::move(InSize);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Text (Name)
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Text__Name_(class UTextBlock* Target, class FName InName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Text (Name)");

	Params::UBPP_FunctionLibrary_C_Set_Text__Name_ Parms{};

	Parms.Target = Target;
	Parms.InName = InName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Vertical Alignment
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EVerticalAlignment                      InVerticalAlignment                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Vertical_Alignment(class UWidget* Widget, EVerticalAlignment InVerticalAlignment, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Vertical Alignment");

	Params::UBPP_FunctionLibrary_C_Set_Vertical_Alignment Parms{};

	Parms.Widget = Widget;
	Parms.InVerticalAlignment = InVerticalAlignment;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set X (Vector 3D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  New_X                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_X__Vector_3D_(struct FVector& Vector_Ref, double New_X, class UObject* __WorldContext, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set X (Vector 3D)");

	Params::UBPP_FunctionLibrary_C_Set_X__Vector_3D_ Parms{};

	Parms.Vector_Ref = std::move(Vector_Ref);
	Parms.New_X = New_X;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector_Ref = std::move(Parms.Vector_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Y (Vector 3D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  New_Y                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Y__Vector_3D_(struct FVector& Vector_Ref, double New_Y, class UObject* __WorldContext, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Y (Vector 3D)");

	Params::UBPP_FunctionLibrary_C_Set_Y__Vector_3D_ Parms{};

	Parms.Vector_Ref = std::move(Vector_Ref);
	Parms.New_Y = New_Y;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector_Ref = std::move(Parms.Vector_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set Z (Vector 3D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  New_Z                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_Z__Vector_3D_(struct FVector& Vector_Ref, double New_Z, class UObject* __WorldContext, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set Z (Vector 3D)");

	Params::UBPP_FunctionLibrary_C_Set_Z__Vector_3D_ Parms{};

	Parms.Vector_Ref = std::move(Vector_Ref);
	Parms.New_Z = New_Z;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector_Ref = std::move(Parms.Vector_Ref);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Set ZOrder
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   InZOrder                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Set_ZOrder(class UWidget* Widget, int32 InZOrder, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Set ZOrder");

	Params::UBPP_FunctionLibrary_C_Set_ZOrder Parms{};

	Parms.Widget = Widget;
	Parms.InZOrder = InZOrder;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.SetText (String)
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FString                           In_String                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::SetText__String_(class UTextBlock* Target, const class FString& In_String, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "SetText (String)");

	Params::UBPP_FunctionLibrary_C_SetText__String_ Parms{};

	Parms.Target = Target;
	Parms.In_String = std::move(In_String);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Slerp (Vector)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Orient                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Slerp__Vector_(const struct FVector& Start, const struct FVector& End, const struct FVector& Orient, double Alpha, class UObject* __WorldContext, struct FVector* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Slerp (Vector)");

	Params::UBPP_FunctionLibrary_C_Slerp__Vector_ Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Orient = std::move(Orient);
	Parms.Alpha = Alpha;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = std::move(Parms.Return_value);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than or Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_or_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than or Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_or_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than or Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_or_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than or Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_or_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than or Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_or_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than or Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_or_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than Zero (Float)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_Zero__Float_(double Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than Zero (Float)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_Zero__Float_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than Zero (Int)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_Zero__Int_(int32 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than Zero (Int)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_Zero__Int_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Smaller Than Zero (Int64)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Smaller_Than_Zero__Int64_(int64 Input_Value, class UObject* __WorldContext, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Smaller Than Zero (Int64)");

	Params::UBPP_FunctionLibrary_C_Smaller_Than_Zero__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Snap Actor To Grid
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Grid_Size                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Teleport                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Specific_Z_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Z_Location                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Sweep_Hit_Result                                       (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Snap_Actor_To_Grid(class AActor* Actor, double Grid_Size, bool Teleport, bool Specific_Z_Location, double Z_Location, class UObject* __WorldContext, struct FHitResult* Sweep_Hit_Result, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Snap Actor To Grid");

	Params::UBPP_FunctionLibrary_C_Snap_Actor_To_Grid Parms{};

	Parms.Actor = Actor;
	Parms.Grid_Size = Grid_Size;
	Parms.Teleport = Teleport;
	Parms.Specific_Z_Location = Specific_Z_Location;
	Parms.Z_Location = Z_Location;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Sweep_Hit_Result != nullptr)
		*Sweep_Hit_Result = std::move(Parms.Sweep_Hit_Result);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Sort Vectors By Distance (High To Low)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Location                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  All_Other_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Sorted_Array                                           (Parm, OutParm)
// TArray<double>                          Distances                                              (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Sort_Vectors_By_Distance__High_To_Low_(const struct FVector& Origin_Location, TArray<struct FVector>& All_Other_Locations, class UObject* __WorldContext, TArray<struct FVector>* Sorted_Array, TArray<double>* Distances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Sort Vectors By Distance (High To Low)");

	Params::UBPP_FunctionLibrary_C_Sort_Vectors_By_Distance__High_To_Low_ Parms{};

	Parms.Origin_Location = std::move(Origin_Location);
	Parms.All_Other_Locations = std::move(All_Other_Locations);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	All_Other_Locations = std::move(Parms.All_Other_Locations);

	if (Sorted_Array != nullptr)
		*Sorted_Array = std::move(Parms.Sorted_Array);

	if (Distances != nullptr)
		*Distances = std::move(Parms.Distances);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Sort Vectors By Distance (Low To High)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Origin_Location                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  All_Other_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Sorted_Array                                           (Parm, OutParm)
// TArray<double>                          Distances                                              (Parm, OutParm)

void UUBPP_FunctionLibrary_C::Sort_Vectors_By_Distance__Low_To_High_(const struct FVector& Origin_Location, TArray<struct FVector>& All_Other_Locations, class UObject* __WorldContext, TArray<struct FVector>* Sorted_Array, TArray<double>* Distances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Sort Vectors By Distance (Low To High)");

	Params::UBPP_FunctionLibrary_C_Sort_Vectors_By_Distance__Low_To_High_ Parms{};

	Parms.Origin_Location = std::move(Origin_Location);
	Parms.All_Other_Locations = std::move(All_Other_Locations);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	All_Other_Locations = std::move(Parms.All_Other_Locations);

	if (Sorted_Array != nullptr)
		*Sorted_Array = std::move(Parms.Sorted_Array);

	if (Distances != nullptr)
		*Distances = std::move(Parms.Distances);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.String Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::String_Array_Add(TArray<class FString>& Input_Array, const class FString& New_Item, class UObject* __WorldContext, TArray<class FString>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "String Array Add");

	Params::UBPP_FunctionLibrary_C_String_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = std::move(New_Item);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Text to Int
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Input_Text                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Text_to_Int(const class FText& Input_Text, class UObject* __WorldContext, int32* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Text to Int");

	Params::UBPP_FunctionLibrary_C_Text_to_Int Parms{};

	Parms.Input_Text = std::move(Input_Text);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.To Float (Int 64)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::To_Float__Int_64_(int64 Value, class UObject* __WorldContext, double* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "To Float (Int 64)");

	Params::UBPP_FunctionLibrary_C_To_Float__Int_64_ Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.ToString (Int64)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   Input_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Always_Sign                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Grouping                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Minimum_Integral_Digits                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Maximum_Integral_Digits                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Return_String                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::ToString__Int64_(int64 Input_Value, bool Always_Sign, bool Use_Grouping, int32 Minimum_Integral_Digits, int32 Maximum_Integral_Digits, class UObject* __WorldContext, class FString* Return_String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "ToString (Int64)");

	Params::UBPP_FunctionLibrary_C_ToString__Int64_ Parms{};

	Parms.Input_Value = Input_Value;
	Parms.Always_Sign = Always_Sign;
	Parms.Use_Grouping = Use_Grouping;
	Parms.Minimum_Integral_Digits = Minimum_Integral_Digits;
	Parms.Maximum_Integral_Digits = Maximum_Integral_Digits;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_String != nullptr)
		*Return_String = std::move(Parms.Return_String);
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Vector Array Add
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Input_Array                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          New_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Return_Array                                           (Parm, OutParm)
// int32                                   New_Length                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Vector_Array_Add(TArray<struct FVector>& Input_Array, const struct FVector& New_Item, class UObject* __WorldContext, TArray<struct FVector>* Return_Array, int32* New_Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Vector Array Add");

	Params::UBPP_FunctionLibrary_C_Vector_Array_Add Parms{};

	Parms.Input_Array = std::move(Input_Array);
	Parms.New_Item = std::move(New_Item);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Input_Array = std::move(Parms.Input_Array);

	if (Return_Array != nullptr)
		*Return_Array = std::move(Parms.Return_Array);

	if (New_Length != nullptr)
		*New_Length = Parms.New_Length;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Weapon Line Trace By Channel
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceC_hannel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Weapon_Line_Trace_By_Channel(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, ETraceTypeQuery TraceC_hannel, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Weapon Line Trace By Channel");

	Params::UBPP_FunctionLibrary_C_Weapon_Line_Trace_By_Channel Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.TraceC_hannel = TraceC_hannel;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Weapon Line Trace By Profile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ProfileName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Weapon_Line_Trace_By_Profile(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, class FName ProfileName, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Weapon Line Trace By Profile");

	Params::UBPP_FunctionLibrary_C_Weapon_Line_Trace_By_Profile Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ProfileName = ProfileName;
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}


// Function UBPP_FunctionLibrary.UBPP_FunctionLibrary_C.Weapon Line Trace For Objects
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Camera_Manager_Index                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Noise               Noise                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trace_Complex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUBPP_Struct_Trace               Trace_Options                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Out_Hit                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Return_value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBPP_FunctionLibrary_C::Weapon_Line_Trace_For_Objects(const struct FVector& Start, double Length, int32 Player_Camera_Manager_Index, const struct FUBPP_Struct_Noise& Noise, const TArray<EObjectTypeQuery>& ObjectTypes, bool Trace_Complex, const struct FUBPP_Struct_Trace& Trace_Options, class UObject* __WorldContext, struct FHitResult* Out_Hit, bool* Return_value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBPP_FunctionLibrary_C", "Weapon Line Trace For Objects");

	Params::UBPP_FunctionLibrary_C_Weapon_Line_Trace_For_Objects Parms{};

	Parms.Start = std::move(Start);
	Parms.Length = Length;
	Parms.Player_Camera_Manager_Index = Player_Camera_Manager_Index;
	Parms.Noise = std::move(Noise);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.Trace_Complex = Trace_Complex;
	Parms.Trace_Options = std::move(Trace_Options);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Hit != nullptr)
		*Out_Hit = std::move(Parms.Out_Hit);

	if (Return_value != nullptr)
		*Return_value = Parms.Return_value;
}

}


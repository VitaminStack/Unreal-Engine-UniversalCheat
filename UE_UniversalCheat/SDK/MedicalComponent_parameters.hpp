#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MedicalComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MedicalComponent.MedicalComponent_C.Bleed
// 0x0020 (0x0020 - 0x0000)
struct MedicalComponent_C_Bleed final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Svr_Damage_BaseDamage_ImplicitCast;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_Bleed) == 0x000008, "Wrong alignment on MedicalComponent_C_Bleed");
static_assert(sizeof(MedicalComponent_C_Bleed) == 0x000020, "Wrong size on MedicalComponent_C_Bleed");
static_assert(offsetof(MedicalComponent_C_Bleed, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'MedicalComponent_C_Bleed::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Bleed, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_Bleed::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Bleed, K2Node_DynamicCast_AsBP_Player_Character) == 0x000010, "Member 'MedicalComponent_C_Bleed::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Bleed, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'MedicalComponent_C_Bleed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Bleed, CallFunc_Svr_Damage_BaseDamage_ImplicitCast) == 0x00001C, "Member 'MedicalComponent_C_Bleed::CallFunc_Svr_Damage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.Client_CreateMedUI
// 0x000C (0x000C - 0x0000)
struct MedicalComponent_C_Client_CreateMedUI final
{
public:
	class FName                                   MedicalEffect;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Adding_;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_Client_CreateMedUI) == 0x000004, "Wrong alignment on MedicalComponent_C_Client_CreateMedUI");
static_assert(sizeof(MedicalComponent_C_Client_CreateMedUI) == 0x00000C, "Wrong size on MedicalComponent_C_Client_CreateMedUI");
static_assert(offsetof(MedicalComponent_C_Client_CreateMedUI, MedicalEffect) == 0x000000, "Member 'MedicalComponent_C_Client_CreateMedUI::MedicalEffect' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Client_CreateMedUI, Adding_) == 0x000008, "Member 'MedicalComponent_C_Client_CreateMedUI::Adding_' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.Client_RemoveEffect
// 0x0010 (0x0010 - 0x0000)
struct MedicalComponent_C_Client_RemoveEffect final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MedicalComponent_C_Client_RemoveEffect) == 0x000008, "Wrong alignment on MedicalComponent_C_Client_RemoveEffect");
static_assert(sizeof(MedicalComponent_C_Client_RemoveEffect) == 0x000010, "Wrong size on MedicalComponent_C_Client_RemoveEffect");
static_assert(offsetof(MedicalComponent_C_Client_RemoveEffect, Array) == 0x000000, "Member 'MedicalComponent_C_Client_RemoveEffect::Array' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.CreateNotificationUI
// 0x0038 (0x0038 - 0x0000)
struct MedicalComponent_C_CreateNotificationUI final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             Image;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UI_Delay;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_CreateNotificationUI) == 0x000008, "Wrong alignment on MedicalComponent_C_CreateNotificationUI");
static_assert(sizeof(MedicalComponent_C_CreateNotificationUI) == 0x000038, "Wrong size on MedicalComponent_C_CreateNotificationUI");
static_assert(offsetof(MedicalComponent_C_CreateNotificationUI, Text) == 0x000000, "Member 'MedicalComponent_C_CreateNotificationUI::Text' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_CreateNotificationUI, Image) == 0x000018, "Member 'MedicalComponent_C_CreateNotificationUI::Image' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_CreateNotificationUI, Color) == 0x000020, "Member 'MedicalComponent_C_CreateNotificationUI::Color' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_CreateNotificationUI, UI_Delay) == 0x000030, "Member 'MedicalComponent_C_CreateNotificationUI::UI_Delay' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.ExecuteUbergraph_MedicalComponent
// 0x01A8 (0x01A8 - 0x0000)
struct MedicalComponent_C_ExecuteUbergraph_MedicalComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_CustomEvent_Array;                          // 0x0008(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_NewStamina;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewSpeed;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewHealth;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewHunger;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewThirst;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewRadiation;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Event_Montage_1;                            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Play_Rate;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Event_Montage;                              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Text;                                 // 0x00A8(0x0018)()
	class UTexture2D*                             K2Node_Event_Image;                                // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_Color;                                // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_UI_Delay;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_NewOxygen;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Burning;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Damage;                               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Set_;                                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enter_;                               // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_VehicleMaster_C*              K2Node_Event_VehicleRef;                           // 0x0100(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0120(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue_1;       // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_MedicalEffect;                  // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Adding_;                        // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue_2;       // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character_1;        // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DamagedActor;                   // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BaseDamage;                     // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2;  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent) == 0x000008, "Wrong alignment on MedicalComponent_C_ExecuteUbergraph_MedicalComponent");
static_assert(sizeof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent) == 0x0001A8, "Wrong size on MedicalComponent_C_ExecuteUbergraph_MedicalComponent");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, EntryPoint) == 0x000000, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CustomEvent_Array) == 0x000008, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CustomEvent_Array' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_Array_Get_Item) == 0x000040, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000048, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_SwitchName_CmpSuccess) == 0x000058, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewStamina) == 0x000060, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewStamina' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewSpeed) == 0x000068, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewSpeed' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewHealth) == 0x000070, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewHealth' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewHunger) == 0x000078, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewHunger' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewThirst) == 0x000080, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewThirst' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewRadiation) == 0x000088, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewRadiation' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Montage_1) == 0x000090, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Montage_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Play_Rate) == 0x000098, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Play_Rate' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Montage) == 0x0000A0, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Montage' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Text) == 0x0000A8, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Text' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Image) == 0x0000C0, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Image' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Color) == 0x0000C8, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Color' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_UI_Delay) == 0x0000D8, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_UI_Delay' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_NewOxygen) == 0x0000E0, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_NewOxygen' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Burning) == 0x0000E8, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Burning' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Damage) == 0x0000F0, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Set_) == 0x0000F8, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Set_' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_Enter_) == 0x0000F9, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_Enter_' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_Event_VehicleRef) == 0x000100, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_Event_VehicleRef' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_RandomFloatInRange_ReturnValue) == 0x000108, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000110, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000118, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000120, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000128, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000130, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000138, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_TimerExistsHandle_ReturnValue_1) == 0x000139, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_TimerExistsHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CustomEvent_MedicalEffect) == 0x00013C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CustomEvent_MedicalEffect' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CustomEvent_Adding_) == 0x000144, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CustomEvent_Adding_' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_TimerExistsHandle_ReturnValue_2) == 0x000145, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_TimerExistsHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_GetOwner_ReturnValue) == 0x000148, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_DynamicCast_AsBP_Player_Character) == 0x000150, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000160, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_DynamicCast_AsBP_Player_Character_1) == 0x000168, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_DynamicCast_AsBP_Player_Character_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CustomEvent_DamagedActor) == 0x000178, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CustomEvent_DamagedActor' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, K2Node_CustomEvent_BaseDamage) == 0x000180, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::K2Node_CustomEvent_BaseDamage' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_ApplyDamage_ReturnValue) == 0x000184, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, Temp_int_Loop_Counter_Variable) == 0x00018C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000190, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000194, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000198, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x00019C, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_ExecuteUbergraph_MedicalComponent, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2) == 0x0001A0, "Member 'MedicalComponent_C_ExecuteUbergraph_MedicalComponent::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.GetInGameUI
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_GetInGameUI final
{
public:
	class UBP_Ingame_C*                           UI;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_GetInGameUI) == 0x000008, "Wrong alignment on MedicalComponent_C_GetInGameUI");
static_assert(sizeof(MedicalComponent_C_GetInGameUI) == 0x000008, "Wrong size on MedicalComponent_C_GetInGameUI");
static_assert(offsetof(MedicalComponent_C_GetInGameUI, UI) == 0x000000, "Member 'MedicalComponent_C_GetInGameUI::UI' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.GetPlayerRef
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_GetPlayerRef final
{
public:
	class ABP_PlayerCharacter_C*                  Player_0;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_GetPlayerRef) == 0x000008, "Wrong alignment on MedicalComponent_C_GetPlayerRef");
static_assert(sizeof(MedicalComponent_C_GetPlayerRef) == 0x000008, "Wrong size on MedicalComponent_C_GetPlayerRef");
static_assert(offsetof(MedicalComponent_C_GetPlayerRef, Player_0) == 0x000000, "Member 'MedicalComponent_C_GetPlayerRef::Player_0' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.HeavyBleed
// 0x0020 (0x0020 - 0x0000)
struct MedicalComponent_C_HeavyBleed final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Svr_Damage_BaseDamage_ImplicitCast;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_HeavyBleed) == 0x000008, "Wrong alignment on MedicalComponent_C_HeavyBleed");
static_assert(sizeof(MedicalComponent_C_HeavyBleed) == 0x000020, "Wrong size on MedicalComponent_C_HeavyBleed");
static_assert(offsetof(MedicalComponent_C_HeavyBleed, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'MedicalComponent_C_HeavyBleed::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_HeavyBleed, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_HeavyBleed::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_HeavyBleed, K2Node_DynamicCast_AsBP_Player_Character) == 0x000010, "Member 'MedicalComponent_C_HeavyBleed::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_HeavyBleed, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'MedicalComponent_C_HeavyBleed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_HeavyBleed, CallFunc_Svr_Damage_BaseDamage_ImplicitCast) == 0x00001C, "Member 'MedicalComponent_C_HeavyBleed::CallFunc_Svr_Damage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.IncreaseHealth
// 0x0120 (0x0120 - 0x0000)
struct MedicalComponent_C_IncreaseHealth final
{
public:
	double                                        Amount;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_2;        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_2;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPassiveSkillsComponent_C*              CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_PassiveSkills_C>  K2Node_DynamicCast_AsInt_Passive_Skills;           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_PassiveSkills_C>  K2Node_DynamicCast_AsInt_Passive_Skills_1;         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StoreStats_ReturnValue;                   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAchievement_ReturnValue;               // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player;                   // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Player_C>         K2Node_DynamicCast_AsBPI_Player_1;                 // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_IncreaseHealth) == 0x000008, "Wrong alignment on MedicalComponent_C_IncreaseHealth");
static_assert(sizeof(MedicalComponent_C_IncreaseHealth) == 0x000120, "Wrong size on MedicalComponent_C_IncreaseHealth");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, Amount) == 0x000000, "Member 'MedicalComponent_C_IncreaseHealth::Amount' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000010, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000030, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Conv_DoubleToString_ReturnValue_2) == 0x000040, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Conv_DoubleToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetController_ReturnValue) == 0x000050, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetComponentByClass_ReturnValue) == 0x000068, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetController_ReturnValue_1) == 0x000070, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetController_ReturnValue_2) == 0x000078, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000080, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000088, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_AsInt_Passive_Skills) == 0x000090, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_AsInt_Passive_Skills' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_AsInt_Passive_Skills_1) == 0x0000A8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_AsInt_Passive_Skills_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_StoreStats_ReturnValue) == 0x0000B9, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_StoreStats_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_SetAchievement_ReturnValue) == 0x0000BA, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_SetAchievement_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_AsBPI_Player) == 0x0000C8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_AsBPI_Player' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_bSuccess_2) == 0x0000D8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000E0, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_AsBPI_Player_1) == 0x0000E8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_AsBPI_Player_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, K2Node_DynamicCast_bSuccess_3) == 0x0000F8, "Member 'MedicalComponent_C_IncreaseHealth::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000100, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000108, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000110, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_IncreaseHealth, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000118, "Member 'MedicalComponent_C_IncreaseHealth::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.IsBurning?
// 0x0001 (0x0001 - 0x0000)
struct MedicalComponent_C_IsBurning_ final
{
public:
	bool                                          Burning_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_IsBurning_) == 0x000001, "Wrong alignment on MedicalComponent_C_IsBurning_");
static_assert(sizeof(MedicalComponent_C_IsBurning_) == 0x000001, "Wrong size on MedicalComponent_C_IsBurning_");
static_assert(offsetof(MedicalComponent_C_IsBurning_, Burning_) == 0x000000, "Member 'MedicalComponent_C_IsBurning_::Burning_' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.IsGPSEquipped?
// 0x0001 (0x0001 - 0x0000)
struct MedicalComponent_C_IsGPSEquipped_ final
{
public:
	bool                                          GPS_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_IsGPSEquipped_) == 0x000001, "Wrong alignment on MedicalComponent_C_IsGPSEquipped_");
static_assert(sizeof(MedicalComponent_C_IsGPSEquipped_) == 0x000001, "Wrong size on MedicalComponent_C_IsGPSEquipped_");
static_assert(offsetof(MedicalComponent_C_IsGPSEquipped_, GPS_) == 0x000000, "Member 'MedicalComponent_C_IsGPSEquipped_::GPS_' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.IsPlayerInVehicle?
// 0x0001 (0x0001 - 0x0000)
struct MedicalComponent_C_IsPlayerInVehicle_ final
{
public:
	bool                                          InVehicle;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_IsPlayerInVehicle_) == 0x000001, "Wrong alignment on MedicalComponent_C_IsPlayerInVehicle_");
static_assert(sizeof(MedicalComponent_C_IsPlayerInVehicle_) == 0x000001, "Wrong size on MedicalComponent_C_IsPlayerInVehicle_");
static_assert(offsetof(MedicalComponent_C_IsPlayerInVehicle_, InVehicle) == 0x000000, "Member 'MedicalComponent_C_IsPlayerInVehicle_::InVehicle' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.OnRep_Bleed?
// 0x0018 (0x0018 - 0x0000)
struct MedicalComponent_C_OnRep_Bleed_ final
{
public:
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_OnRep_Bleed_) == 0x000008, "Wrong alignment on MedicalComponent_C_OnRep_Bleed_");
static_assert(sizeof(MedicalComponent_C_OnRep_Bleed_) == 0x000018, "Wrong size on MedicalComponent_C_OnRep_Bleed_");
static_assert(offsetof(MedicalComponent_C_OnRep_Bleed_, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'MedicalComponent_C_OnRep_Bleed_::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_Bleed_, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_OnRep_Bleed_::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_Bleed_, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000010, "Member 'MedicalComponent_C_OnRep_Bleed_::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_Bleed_, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x000014, "Member 'MedicalComponent_C_OnRep_Bleed_::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.OnRep_BrokenBone?
// 0x0020 (0x0020 - 0x0000)
struct MedicalComponent_C_OnRep_BrokenBone_ final
{
public:
	class ABP_PlayerCharacter_C*                  PlayerRef;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_OnRep_BrokenBone_) == 0x000008, "Wrong alignment on MedicalComponent_C_OnRep_BrokenBone_");
static_assert(sizeof(MedicalComponent_C_OnRep_BrokenBone_) == 0x000020, "Wrong size on MedicalComponent_C_OnRep_BrokenBone_");
static_assert(offsetof(MedicalComponent_C_OnRep_BrokenBone_, PlayerRef) == 0x000000, "Member 'MedicalComponent_C_OnRep_BrokenBone_::PlayerRef' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_BrokenBone_, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_OnRep_BrokenBone_::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_BrokenBone_, K2Node_DynamicCast_AsBP_Player_Character) == 0x000010, "Member 'MedicalComponent_C_OnRep_BrokenBone_::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_BrokenBone_, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'MedicalComponent_C_OnRep_BrokenBone_::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.OnRep_HeavyBleed?
// 0x0018 (0x0018 - 0x0000)
struct MedicalComponent_C_OnRep_HeavyBleed_ final
{
public:
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_OnRep_HeavyBleed_) == 0x000008, "Wrong alignment on MedicalComponent_C_OnRep_HeavyBleed_");
static_assert(sizeof(MedicalComponent_C_OnRep_HeavyBleed_) == 0x000018, "Wrong size on MedicalComponent_C_OnRep_HeavyBleed_");
static_assert(offsetof(MedicalComponent_C_OnRep_HeavyBleed_, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'MedicalComponent_C_OnRep_HeavyBleed_::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_HeavyBleed_, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_OnRep_HeavyBleed_::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_HeavyBleed_, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000010, "Member 'MedicalComponent_C_OnRep_HeavyBleed_::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_OnRep_HeavyBleed_, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x000014, "Member 'MedicalComponent_C_OnRep_HeavyBleed_::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct MedicalComponent_C_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Play_Rate;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_PlayMontage) == 0x000008, "Wrong alignment on MedicalComponent_C_PlayMontage");
static_assert(sizeof(MedicalComponent_C_PlayMontage) == 0x000010, "Wrong size on MedicalComponent_C_PlayMontage");
static_assert(offsetof(MedicalComponent_C_PlayMontage, Montage) == 0x000000, "Member 'MedicalComponent_C_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_PlayMontage, Play_Rate) == 0x000008, "Member 'MedicalComponent_C_PlayMontage::Play_Rate' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendHealthToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendHealthToClient final
{
public:
	double                                        NewHealth;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendHealthToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendHealthToClient");
static_assert(sizeof(MedicalComponent_C_SendHealthToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendHealthToClient");
static_assert(offsetof(MedicalComponent_C_SendHealthToClient, NewHealth) == 0x000000, "Member 'MedicalComponent_C_SendHealthToClient::NewHealth' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendHungerToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendHungerToClient final
{
public:
	double                                        NewHunger;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendHungerToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendHungerToClient");
static_assert(sizeof(MedicalComponent_C_SendHungerToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendHungerToClient");
static_assert(offsetof(MedicalComponent_C_SendHungerToClient, NewHunger) == 0x000000, "Member 'MedicalComponent_C_SendHungerToClient::NewHunger' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendOxygenToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendOxygenToClient final
{
public:
	double                                        NewOxygen;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendOxygenToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendOxygenToClient");
static_assert(sizeof(MedicalComponent_C_SendOxygenToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendOxygenToClient");
static_assert(offsetof(MedicalComponent_C_SendOxygenToClient, NewOxygen) == 0x000000, "Member 'MedicalComponent_C_SendOxygenToClient::NewOxygen' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendRadiationToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendRadiationToClient final
{
public:
	double                                        NewRadiation;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendRadiationToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendRadiationToClient");
static_assert(sizeof(MedicalComponent_C_SendRadiationToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendRadiationToClient");
static_assert(offsetof(MedicalComponent_C_SendRadiationToClient, NewRadiation) == 0x000000, "Member 'MedicalComponent_C_SendRadiationToClient::NewRadiation' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendStaminaToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendStaminaToClient final
{
public:
	double                                        NewStamina;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendStaminaToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendStaminaToClient");
static_assert(sizeof(MedicalComponent_C_SendStaminaToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendStaminaToClient");
static_assert(offsetof(MedicalComponent_C_SendStaminaToClient, NewStamina) == 0x000000, "Member 'MedicalComponent_C_SendStaminaToClient::NewStamina' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SendThirstToClient
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_SendThirstToClient final
{
public:
	double                                        NewThirst;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SendThirstToClient) == 0x000008, "Wrong alignment on MedicalComponent_C_SendThirstToClient");
static_assert(sizeof(MedicalComponent_C_SendThirstToClient) == 0x000008, "Wrong size on MedicalComponent_C_SendThirstToClient");
static_assert(offsetof(MedicalComponent_C_SendThirstToClient, NewThirst) == 0x000000, "Member 'MedicalComponent_C_SendThirstToClient::NewThirst' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SetBurning
// 0x0010 (0x0010 - 0x0000)
struct MedicalComponent_C_SetBurning final
{
public:
	bool                                          Burning;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damage;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SetBurning) == 0x000008, "Wrong alignment on MedicalComponent_C_SetBurning");
static_assert(sizeof(MedicalComponent_C_SetBurning) == 0x000010, "Wrong size on MedicalComponent_C_SetBurning");
static_assert(offsetof(MedicalComponent_C_SetBurning, Burning) == 0x000000, "Member 'MedicalComponent_C_SetBurning::Burning' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_SetBurning, Damage) == 0x000008, "Member 'MedicalComponent_C_SetBurning::Damage' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SetPostProcessHealth
// 0x0030 (0x0030 - 0x0000)
struct MedicalComponent_C_SetPostProcessHealth final
{
public:
	bool                                          Damage;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBoolCVar_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               CallFunc_MakeVector4_ReturnValue;                  // 0x0010(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SetPostProcessHealth) == 0x000010, "Wrong alignment on MedicalComponent_C_SetPostProcessHealth");
static_assert(sizeof(MedicalComponent_C_SetPostProcessHealth) == 0x000030, "Wrong size on MedicalComponent_C_SetPostProcessHealth");
static_assert(offsetof(MedicalComponent_C_SetPostProcessHealth, Damage) == 0x000000, "Member 'MedicalComponent_C_SetPostProcessHealth::Damage' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_SetPostProcessHealth, CallFunc_GetBoolCVar_ReturnValue) == 0x000001, "Member 'MedicalComponent_C_SetPostProcessHealth::CallFunc_GetBoolCVar_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_SetPostProcessHealth, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'MedicalComponent_C_SetPostProcessHealth::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_SetPostProcessHealth, CallFunc_NormalizeToRange_ReturnValue) == 0x000008, "Member 'MedicalComponent_C_SetPostProcessHealth::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_SetPostProcessHealth, CallFunc_MakeVector4_ReturnValue) == 0x000010, "Member 'MedicalComponent_C_SetPostProcessHealth::CallFunc_MakeVector4_ReturnValue' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.SetTraceToWorld
// 0x0001 (0x0001 - 0x0000)
struct MedicalComponent_C_SetTraceToWorld final
{
public:
	bool                                          Set_;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_SetTraceToWorld) == 0x000001, "Wrong alignment on MedicalComponent_C_SetTraceToWorld");
static_assert(sizeof(MedicalComponent_C_SetTraceToWorld) == 0x000001, "Wrong size on MedicalComponent_C_SetTraceToWorld");
static_assert(offsetof(MedicalComponent_C_SetTraceToWorld, Set_) == 0x000000, "Member 'MedicalComponent_C_SetTraceToWorld::Set_' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.StopMontage
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_StopMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_StopMontage) == 0x000008, "Wrong alignment on MedicalComponent_C_StopMontage");
static_assert(sizeof(MedicalComponent_C_StopMontage) == 0x000008, "Wrong size on MedicalComponent_C_StopMontage");
static_assert(offsetof(MedicalComponent_C_StopMontage, Montage) == 0x000000, "Member 'MedicalComponent_C_StopMontage::Montage' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.Svr_Damage
// 0x0010 (0x0010 - 0x0000)
struct MedicalComponent_C_Svr_Damage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_Svr_Damage) == 0x000008, "Wrong alignment on MedicalComponent_C_Svr_Damage");
static_assert(sizeof(MedicalComponent_C_Svr_Damage) == 0x000010, "Wrong size on MedicalComponent_C_Svr_Damage");
static_assert(offsetof(MedicalComponent_C_Svr_Damage, DamagedActor) == 0x000000, "Member 'MedicalComponent_C_Svr_Damage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_Svr_Damage, BaseDamage) == 0x000008, "Member 'MedicalComponent_C_Svr_Damage::BaseDamage' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.UpdatePlayerSpeed
// 0x0008 (0x0008 - 0x0000)
struct MedicalComponent_C_UpdatePlayerSpeed final
{
public:
	double                                        NewSpeed;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_UpdatePlayerSpeed) == 0x000008, "Wrong alignment on MedicalComponent_C_UpdatePlayerSpeed");
static_assert(sizeof(MedicalComponent_C_UpdatePlayerSpeed) == 0x000008, "Wrong size on MedicalComponent_C_UpdatePlayerSpeed");
static_assert(offsetof(MedicalComponent_C_UpdatePlayerSpeed, NewSpeed) == 0x000000, "Member 'MedicalComponent_C_UpdatePlayerSpeed::NewSpeed' has a wrong offset!");

// Function MedicalComponent.MedicalComponent_C.VehicleInteraction
// 0x0010 (0x0010 - 0x0000)
struct MedicalComponent_C_VehicleInteraction final
{
public:
	bool                                          Enter_;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_VehicleMaster_C*              VehicleRef;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MedicalComponent_C_VehicleInteraction) == 0x000008, "Wrong alignment on MedicalComponent_C_VehicleInteraction");
static_assert(sizeof(MedicalComponent_C_VehicleInteraction) == 0x000010, "Wrong size on MedicalComponent_C_VehicleInteraction");
static_assert(offsetof(MedicalComponent_C_VehicleInteraction, Enter_) == 0x000000, "Member 'MedicalComponent_C_VehicleInteraction::Enter_' has a wrong offset!");
static_assert(offsetof(MedicalComponent_C_VehicleInteraction, VehicleRef) == 0x000008, "Member 'MedicalComponent_C_VehicleInteraction::VehicleRef' has a wrong offset!");

}


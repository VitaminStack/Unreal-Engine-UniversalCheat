#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Radial_Storm_Weather_Interface

#include "Basic.hpp"

#include "Radial_Storm_Weather_Interface_classes.hpp"
#include "Radial_Storm_Weather_Interface_parameters.hpp"


namespace SDK
{

// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Get Radial Storm Material Target Data
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Draw                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Outer_Radius                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Soft_Fraction                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IRadial_Storm_Weather_Interface_C::Get_Radial_Storm_Material_Target_Data(bool* Draw, struct FVector* Location, double* Outer_Radius, double* Soft_Fraction, struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Radial_Storm_Weather_Interface_C", "Get Radial Storm Material Target Data");

	Params::Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Material_Target_Data Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Draw != nullptr)
		*Draw = Parms.Draw;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Outer_Radius != nullptr)
		*Outer_Radius = Parms.Outer_Radius;

	if (Soft_Fraction != nullptr)
		*Soft_Fraction = Parms.Soft_Fraction;

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Get Radial Storm Weather Data
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          World_Location                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Outer_Radius                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Inner_Radius                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUDS_Weather_Settings_C*          Weather_State                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Affect_Material_State                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IRadial_Storm_Weather_Interface_C::Get_Radial_Storm_Weather_Data(struct FVector* World_Location, double* Outer_Radius, double* Inner_Radius, double* Alpha, class UUDS_Weather_Settings_C** Weather_State, bool* Affect_Material_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Radial_Storm_Weather_Interface_C", "Get Radial Storm Weather Data");

	Params::Radial_Storm_Weather_Interface_C_Get_Radial_Storm_Weather_Data Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (World_Location != nullptr)
		*World_Location = std::move(Parms.World_Location);

	if (Outer_Radius != nullptr)
		*Outer_Radius = Parms.Outer_Radius;

	if (Inner_Radius != nullptr)
		*Inner_Radius = Parms.Inner_Radius;

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;

	if (Weather_State != nullptr)
		*Weather_State = Parms.Weather_State;

	if (Affect_Material_State != nullptr)
		*Affect_Material_State = Parms.Affect_Material_State;
}


// Function Radial_Storm_Weather_Interface.Radial_Storm_Weather_Interface_C.Is Storm in Effective Range?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In_Range                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IRadial_Storm_Weather_Interface_C::Is_Storm_in_Effective_Range_(const struct FVector& Location, bool* In_Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Radial_Storm_Weather_Interface_C", "Is Storm in Effective Range?");

	Params::Radial_Storm_Weather_Interface_C_Is_Storm_in_Effective_Range_ Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (In_Range != nullptr)
		*In_Range = Parms.In_Range;
}

}


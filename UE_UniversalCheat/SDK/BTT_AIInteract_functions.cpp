#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AIInteract

#include "Basic.hpp"

#include "BTT_AIInteract_classes.hpp"
#include "BTT_AIInteract_parameters.hpp"


namespace SDK
{

// Function BTT_AIInteract.BTT_AIInteract_C.Check If Still Can Interact
// (BlueprintCallable, BlueprintEvent)

void UBTT_AIInteract_C::Check_If_Still_Can_Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "Check If Still Can Interact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AIInteract.BTT_AIInteract_C.Clear AI Interact
// (BlueprintCallable, BlueprintEvent)

void UBTT_AIInteract_C::Clear_AI_Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "Clear AI Interact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AIInteract.BTT_AIInteract_C.Convert To Behaviour
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_StartingAIBehaviours                  S_Behaviour                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_AIBehaviour                           Behaviour                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AIInteract_C::Convert_To_Behaviour(E_StartingAIBehaviours S_Behaviour, E_AIBehaviour* Behaviour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "Convert To Behaviour");

	Params::BTT_AIInteract_C_Convert_To_Behaviour Parms{};

	Parms.S_Behaviour = S_Behaviour;

	UObject::ProcessEvent(Func, &Parms);

	if (Behaviour != nullptr)
		*Behaviour = Parms.Behaviour;
}


// Function BTT_AIInteract.BTT_AIInteract_C.End AI Interaction
// (BlueprintCallable, BlueprintEvent)

void UBTT_AIInteract_C::End_AI_Interaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "End AI Interaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AIInteract.BTT_AIInteract_C.ExecuteUbergraph_BTT_AIInteract
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AIInteract_C::ExecuteUbergraph_BTT_AIInteract(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "ExecuteUbergraph_BTT_AIInteract");

	Params::BTT_AIInteract_C_ExecuteUbergraph_BTT_AIInteract Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AIInteract.BTT_AIInteract_C.Next Animation
// (BlueprintCallable, BlueprintEvent)

void UBTT_AIInteract_C::Next_Animation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "Next Animation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AIInteract.BTT_AIInteract_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_AIInteract_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "ReceiveAbortAI");

	Params::BTT_AIInteract_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AIInteract.BTT_AIInteract_C.ReceiveExecute
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_AIInteract_C::ReceiveExecute(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "ReceiveExecute");

	Params::BTT_AIInteract_C_ReceiveExecute Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AIInteract.BTT_AIInteract_C.Reset AI
// (BlueprintCallable, BlueprintEvent)

void UBTT_AIInteract_C::Reset_AI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AIInteract_C", "Reset AI");

	UObject::ProcessEvent(Func, nullptr);
}

}


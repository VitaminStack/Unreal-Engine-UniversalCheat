#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RandomCivilian

#include "Basic.hpp"

#include "NameGeneratorDataStruct_structs.hpp"
#include "S_JigPayload_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_RandomStatsConfig_structs.hpp"
#include "AIOptimizer_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_RandomCivilian.BP_RandomCivilian_C.BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature final
{
public:
	bool                                          bIsBeyondLastLayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeen;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(sizeof(BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature) == 0x00000C, "Wrong size on BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature");
static_assert(offsetof(BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsBeyondLastLayer) == 0x000000, "Member 'BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, LayerIndex) == 0x000004, "Member 'BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature, bIsSeen) == 0x000008, "Member 'BP_RandomCivilian_C_BndEvt__BP_Zombie_Master_AIOSubject_K2Node_ComponentBoundEvent_2_OnOptimizationUpdate__DelegateSignature::bIsSeen' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.ExecuteUbergraph_BP_RandomCivilian
// 0x00E0 (0x00E0 - 0x0000)
struct BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIOptimizerSubsystem*                  CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option;                               // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_1;                             // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_ByActor;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          K2Node_Event_Payload;                              // 0x0030(0x0030)(HasGetValueTypeHash)
	struct FAIOSubjectHandle                      CallFunc_K2_DespawnSubject_SubjectHandle;          // 0x0060(0x0004)(NoDestructor)
	bool                                          CallFunc_K2_DespawnSubject_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsBeyondLastLayer;     // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_LayerIndex;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsSeen;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Option_2;                             // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        K2Node_Event_Options;                              // 0x0090(0x0050)(ConstParm)
};
static_assert(alignof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian");
static_assert(sizeof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian) == 0x0000E0, "Wrong size on BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, EntryPoint) == 0x000000, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_Option) == 0x000010, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_Option' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_InteractingActor_1) == 0x000018, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_Option_1) == 0x000020, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_Option_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_ByActor) == 0x000028, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_ByActor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_Payload) == 0x000030, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, CallFunc_K2_DespawnSubject_SubjectHandle) == 0x000060, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::CallFunc_K2_DespawnSubject_SubjectHandle' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, CallFunc_K2_DespawnSubject_ReturnValue) == 0x000064, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::CallFunc_K2_DespawnSubject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_ComponentBoundEvent_bIsBeyondLastLayer) == 0x000065, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_ComponentBoundEvent_bIsBeyondLastLayer' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_ComponentBoundEvent_LayerIndex) == 0x000068, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_ComponentBoundEvent_LayerIndex' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_ComponentBoundEvent_bIsSeen) == 0x00006C, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_ComponentBoundEvent_bIsSeen' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_SwitchInteger_CmpSuccess) == 0x00006D, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_InteractingActor_2) == 0x000070, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_InteractingActor_3) == 0x000078, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_Option_2) == 0x000080, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_Option_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_InteractingActor) == 0x000088, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian, K2Node_Event_Options) == 0x000090, "Member 'BP_RandomCivilian_C_ExecuteUbergraph_BP_RandomCivilian::K2Node_Event_Options' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.GetInteractOptions
// 0x0050 (0x0050 - 0x0000)
struct BP_RandomCivilian_C_GetInteractOptions final
{
public:
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0000(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_RandomCivilian_C_GetInteractOptions) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_GetInteractOptions");
static_assert(sizeof(BP_RandomCivilian_C_GetInteractOptions) == 0x000050, "Wrong size on BP_RandomCivilian_C_GetInteractOptions");
static_assert(offsetof(BP_RandomCivilian_C_GetInteractOptions, Options) == 0x000000, "Member 'BP_RandomCivilian_C_GetInteractOptions::Options' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.GetItemInfo
// 0x0078 (0x0078 - 0x0000)
struct BP_RandomCivilian_C_GetItemInfo final
{
public:
	class UJigsawItem_DataAsset_C*                Info;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_RandomStatsConfig                   RandomStatsConfig;                                 // 0x0010(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TMap<class FString, class FString>            CustomData;                                        // 0x0028(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_RandomCivilian_C_GetItemInfo) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_GetItemInfo");
static_assert(sizeof(BP_RandomCivilian_C_GetItemInfo) == 0x000078, "Wrong size on BP_RandomCivilian_C_GetItemInfo");
static_assert(offsetof(BP_RandomCivilian_C_GetItemInfo, Info) == 0x000000, "Member 'BP_RandomCivilian_C_GetItemInfo::Info' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_GetItemInfo, Count) == 0x000008, "Member 'BP_RandomCivilian_C_GetItemInfo::Count' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_GetItemInfo, RandomStatsConfig) == 0x000010, "Member 'BP_RandomCivilian_C_GetItemInfo::RandomStatsConfig' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_GetItemInfo, CustomData) == 0x000028, "Member 'BP_RandomCivilian_C_GetItemInfo::CustomData' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.GetJigMultiplayerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_GetJigMultiplayerComponent final
{
public:
	class UActorComponent*                        JigComp;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_GetJigMultiplayerComponent) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_GetJigMultiplayerComponent");
static_assert(sizeof(BP_RandomCivilian_C_GetJigMultiplayerComponent) == 0x000008, "Wrong size on BP_RandomCivilian_C_GetJigMultiplayerComponent");
static_assert(offsetof(BP_RandomCivilian_C_GetJigMultiplayerComponent, JigComp) == 0x000000, "Member 'BP_RandomCivilian_C_GetJigMultiplayerComponent::JigComp' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.GetMainSceneComp
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_GetMainSceneComp final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_GetMainSceneComp) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_GetMainSceneComp");
static_assert(sizeof(BP_RandomCivilian_C_GetMainSceneComp) == 0x000008, "Wrong size on BP_RandomCivilian_C_GetMainSceneComp");
static_assert(offsetof(BP_RandomCivilian_C_GetMainSceneComp, Comp) == 0x000000, "Member 'BP_RandomCivilian_C_GetMainSceneComp::Comp' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.JigCanInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_RandomCivilian_C_JigCanInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_JigCanInteract) == 0x000001, "Wrong alignment on BP_RandomCivilian_C_JigCanInteract");
static_assert(sizeof(BP_RandomCivilian_C_JigCanInteract) == 0x000001, "Wrong size on BP_RandomCivilian_C_JigCanInteract");
static_assert(offsetof(BP_RandomCivilian_C_JigCanInteract, Result) == 0x000000, "Member 'BP_RandomCivilian_C_JigCanInteract::Result' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.JigSetCanInteract
// 0x0003 (0x0003 - 0x0000)
struct BP_RandomCivilian_C_JigSetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePhysics;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_JigSetCanInteract) == 0x000001, "Wrong alignment on BP_RandomCivilian_C_JigSetCanInteract");
static_assert(sizeof(BP_RandomCivilian_C_JigSetCanInteract) == 0x000003, "Wrong size on BP_RandomCivilian_C_JigSetCanInteract");
static_assert(offsetof(BP_RandomCivilian_C_JigSetCanInteract, CanInteract) == 0x000000, "Member 'BP_RandomCivilian_C_JigSetCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_JigSetCanInteract, EnablePhysics) == 0x000001, "Member 'BP_RandomCivilian_C_JigSetCanInteract::EnablePhysics' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_JigSetCanInteract, Result) == 0x000002, "Member 'BP_RandomCivilian_C_JigSetCanInteract::Result' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnBeginInteract
// 0x0058 (0x0058 - 0x0000)
struct BP_RandomCivilian_C_OnBeginInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class FText>        Options;                                           // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_RandomCivilian_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnBeginInteract");
static_assert(sizeof(BP_RandomCivilian_C_OnBeginInteract) == 0x000058, "Wrong size on BP_RandomCivilian_C_OnBeginInteract");
static_assert(offsetof(BP_RandomCivilian_C_OnBeginInteract, InteractingActor) == 0x000000, "Member 'BP_RandomCivilian_C_OnBeginInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnBeginInteract, Options) == 0x000008, "Member 'BP_RandomCivilian_C_OnBeginInteract::Options' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnExecuteInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_RandomCivilian_C_OnExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_OnExecuteInteract) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnExecuteInteract");
static_assert(sizeof(BP_RandomCivilian_C_OnExecuteInteract) == 0x000010, "Wrong size on BP_RandomCivilian_C_OnExecuteInteract");
static_assert(offsetof(BP_RandomCivilian_C_OnExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_RandomCivilian_C_OnExecuteInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnExecuteInteract, Option) == 0x000008, "Member 'BP_RandomCivilian_C_OnExecuteInteract::Option' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnExecuteInteractDialogue
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_OnExecuteInteractDialogue final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_OnExecuteInteractDialogue) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnExecuteInteractDialogue");
static_assert(sizeof(BP_RandomCivilian_C_OnExecuteInteractDialogue) == 0x000008, "Wrong size on BP_RandomCivilian_C_OnExecuteInteractDialogue");
static_assert(offsetof(BP_RandomCivilian_C_OnExecuteInteractDialogue, InteractingActor) == 0x000000, "Member 'BP_RandomCivilian_C_OnExecuteInteractDialogue::InteractingActor' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnRequestServerInteract
// 0x0048 (0x0048 - 0x0000)
struct BP_RandomCivilian_C_OnRequestServerInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Option;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_OnRequestServerInteract) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnRequestServerInteract");
static_assert(sizeof(BP_RandomCivilian_C_OnRequestServerInteract) == 0x000048, "Wrong size on BP_RandomCivilian_C_OnRequestServerInteract");
static_assert(offsetof(BP_RandomCivilian_C_OnRequestServerInteract, Actor) == 0x000000, "Member 'BP_RandomCivilian_C_OnRequestServerInteract::Actor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnRequestServerInteract, Option) == 0x000008, "Member 'BP_RandomCivilian_C_OnRequestServerInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnRequestServerInteract, Payload) == 0x000010, "Member 'BP_RandomCivilian_C_OnRequestServerInteract::Payload' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnRequestServerInteract, Result) == 0x000040, "Member 'BP_RandomCivilian_C_OnRequestServerInteract::Result' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnServerExecuteInteract
// 0x0040 (0x0040 - 0x0000)
struct BP_RandomCivilian_C_OnServerExecuteInteract final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ByActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_JigPayload                          Payload;                                           // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_OnServerExecuteInteract) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnServerExecuteInteract");
static_assert(sizeof(BP_RandomCivilian_C_OnServerExecuteInteract) == 0x000040, "Wrong size on BP_RandomCivilian_C_OnServerExecuteInteract");
static_assert(offsetof(BP_RandomCivilian_C_OnServerExecuteInteract, Option) == 0x000000, "Member 'BP_RandomCivilian_C_OnServerExecuteInteract::Option' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnServerExecuteInteract, ByActor) == 0x000008, "Member 'BP_RandomCivilian_C_OnServerExecuteInteract::ByActor' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_OnServerExecuteInteract, Payload) == 0x000010, "Member 'BP_RandomCivilian_C_OnServerExecuteInteract::Payload' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.OnStopExecuteInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_OnStopExecuteInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_OnStopExecuteInteract) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_OnStopExecuteInteract");
static_assert(sizeof(BP_RandomCivilian_C_OnStopExecuteInteract) == 0x000008, "Wrong size on BP_RandomCivilian_C_OnStopExecuteInteract");
static_assert(offsetof(BP_RandomCivilian_C_OnStopExecuteInteract, InteractingActor) == 0x000000, "Member 'BP_RandomCivilian_C_OnStopExecuteInteract::InteractingActor' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.SetInteractOption
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_SetInteractOption final
{
public:
	struct FGameplayTag                           Option;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_SetInteractOption) == 0x000004, "Wrong alignment on BP_RandomCivilian_C_SetInteractOption");
static_assert(sizeof(BP_RandomCivilian_C_SetInteractOption) == 0x000008, "Wrong size on BP_RandomCivilian_C_SetInteractOption");
static_assert(offsetof(BP_RandomCivilian_C_SetInteractOption, Option) == 0x000000, "Member 'BP_RandomCivilian_C_SetInteractOption::Option' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.SetMeshAndMaterial
// 0x0230 (0x0230 - 0x0000)
struct BP_RandomCivilian_C_SetMeshAndMaterial final
{
public:
	int32                                         BackpackMap;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_11;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_12;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     CallFunc_Map_Values_Values;                        // 0x0070(0x0010)(ReferenceParm)
	TArray<class UStaticMesh*>                    CallFunc_Map_Keys_Keys;                            // 0x0080(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Random_OutItem;                     // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Array_Random_OutItem_1;                   // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_1;                  // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          CallFunc_Array_Random_OutItem_2;                   // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex_2;                  // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_SetMeshAndMaterial) == 0x000010, "Wrong alignment on BP_RandomCivilian_C_SetMeshAndMaterial");
static_assert(sizeof(BP_RandomCivilian_C_SetMeshAndMaterial) == 0x000230, "Wrong size on BP_RandomCivilian_C_SetMeshAndMaterial");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, BackpackMap) == 0x000000, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::BackpackMap' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_int_Variable) == 0x000004, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable) == 0x000008, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_1) == 0x000010, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_2) == 0x000018, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_3) == 0x000020, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_4) == 0x000028, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_5) == 0x000030, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_6) == 0x000038, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_7) == 0x000040, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_8) == 0x000048, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_9) == 0x000050, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_10) == 0x000058, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_11) == 0x000060, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, Temp_object_Variable_12) == 0x000068, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Map_Values_Values) == 0x000070, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Map_Keys_Keys) == 0x000080, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000F8, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue) == 0x0001E0, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Length_ReturnValue) == 0x0001E4, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0001E8, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001EC, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x0001F0, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, K2Node_Select_Default) == 0x0001F8, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem) == 0x000200, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex) == 0x000208, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00020C, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem_1) == 0x000210, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex_1) == 0x000218, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_SetStaticMesh_ReturnValue_2) == 0x00021C, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutItem_2) == 0x000220, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutItem_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetMeshAndMaterial, CallFunc_Array_Random_OutIndex_2) == 0x000228, "Member 'BP_RandomCivilian_C_SetMeshAndMaterial::CallFunc_Array_Random_OutIndex_2' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.SetName
// 0x00C8 (0x00C8 - 0x0000)
struct BP_RandomCivilian_C_SetName final
{
public:
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UBP_InteractWidgetCivilian_C*           K2Node_DynamicCast_AsBP_Interact_Widget_Civilian;  // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNameGeneratorDataStruct               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNameGeneratorDataStruct               CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0070(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue_2;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNameGeneratorDataStruct               CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x00A8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_SetName) == 0x000008, "Wrong alignment on BP_RandomCivilian_C_SetName");
static_assert(sizeof(BP_RandomCivilian_C_SetName) == 0x0000C8, "Wrong size on BP_RandomCivilian_C_SetName");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_RandomInteger_ReturnValue) == 0x000000, "Member 'BP_RandomCivilian_C_SetName::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000008, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, K2Node_DynamicCast_AsBP_Interact_Widget_Civilian) == 0x000020, "Member 'BP_RandomCivilian_C_SetName::K2Node_DynamicCast_AsBP_Interact_Widget_Civilian' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_RandomCivilian_C_SetName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_StringToName_ReturnValue) == 0x00002C, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_RandomInteger_ReturnValue_1) == 0x000034, "Member 'BP_RandomCivilian_C_SetName::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000050, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000058, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000068, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000070, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000088, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_RandomInteger_ReturnValue_2) == 0x00008C, "Member 'BP_RandomCivilian_C_SetName::CallFunc_RandomInteger_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000090, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_Conv_StringToName_ReturnValue_2) == 0x0000A0, "Member 'BP_RandomCivilian_C_SetName::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x0000A8, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetName, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0000C0, "Member 'BP_RandomCivilian_C_SetName::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");

// Function BP_RandomCivilian.BP_RandomCivilian_C.SetPickupCount
// 0x0008 (0x0008 - 0x0000)
struct BP_RandomCivilian_C_SetPickupCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RandomCivilian_C_SetPickupCount) == 0x000004, "Wrong alignment on BP_RandomCivilian_C_SetPickupCount");
static_assert(sizeof(BP_RandomCivilian_C_SetPickupCount) == 0x000008, "Wrong size on BP_RandomCivilian_C_SetPickupCount");
static_assert(offsetof(BP_RandomCivilian_C_SetPickupCount, NewCount) == 0x000000, "Member 'BP_RandomCivilian_C_SetPickupCount::NewCount' has a wrong offset!");
static_assert(offsetof(BP_RandomCivilian_C_SetPickupCount, Result) == 0x000004, "Member 'BP_RandomCivilian_C_SetPickupCount::Result' has a wrong offset!");

}


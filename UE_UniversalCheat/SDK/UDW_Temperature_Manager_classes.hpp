#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UDW_Temperature_Manager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass UDW_Temperature_Manager.UDW_Temperature_Manager_C
// 0x0058 (0x00F8 - 0x00A0)
class UUDW_Temperature_Manager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Weather_State;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temperature_Range;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Update_Period;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          For_WOV;                                           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVolume*                                Volume;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Temperature_Update_Time;                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Temperature;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Temperature;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Calculate_Temperature(class UUDS_Weather_Settings_C* Settings, double* Temperature);
	void ExecuteUbergraph_UDW_Temperature_Manager(int32 EntryPoint);
	void Get_Current_Min_and_Max_Temperature(const struct FVector2D& Spring_Min_and_Max, const struct FVector2D& Summer_Min_and_Max, const struct FVector2D& Autumn_Min_and_Max, const struct FVector2D& Winter_Min_and_Max, struct FVector2D* Range);
	void Get_Temperature(double* Out);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Runtime_Start_Temperature_Manager();
	void Set_Up_Temperature_Manager(class AUltra_Dynamic_Weather_C* UDW_0, class UUDS_Weather_Settings_C* Weather_State_0);
	void Update_Target_Temperature();
	void Update_Temperature_Range();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UDW_Temperature_Manager_C">();
	}
	static class UUDW_Temperature_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUDW_Temperature_Manager_C>();
	}
};
static_assert(alignof(UUDW_Temperature_Manager_C) == 0x000008, "Wrong alignment on UUDW_Temperature_Manager_C");
static_assert(sizeof(UUDW_Temperature_Manager_C) == 0x0000F8, "Wrong size on UUDW_Temperature_Manager_C");
static_assert(offsetof(UUDW_Temperature_Manager_C, UberGraphFrame) == 0x0000A0, "Member 'UUDW_Temperature_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, UDW) == 0x0000A8, "Member 'UUDW_Temperature_Manager_C::UDW' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Weather_State) == 0x0000B0, "Member 'UUDW_Temperature_Manager_C::Weather_State' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Temperature_Range) == 0x0000B8, "Member 'UUDW_Temperature_Manager_C::Temperature_Range' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Update_Period) == 0x0000C8, "Member 'UUDW_Temperature_Manager_C::Update_Period' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, For_WOV) == 0x0000D0, "Member 'UUDW_Temperature_Manager_C::For_WOV' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Volume) == 0x0000D8, "Member 'UUDW_Temperature_Manager_C::Volume' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Last_Temperature_Update_Time) == 0x0000E0, "Member 'UUDW_Temperature_Manager_C::Last_Temperature_Update_Time' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Last_Temperature) == 0x0000E8, "Member 'UUDW_Temperature_Manager_C::Last_Temperature' has a wrong offset!");
static_assert(offsetof(UUDW_Temperature_Manager_C, Target_Temperature) == 0x0000F0, "Member 'UUDW_Temperature_Manager_C::Target_Temperature' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_StrafeLocation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_StrafeLocation.BTT_StrafeLocation_C
// 0x0020 (0x00C8 - 0x00A8)
class UBTT_StrafeLocation_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_SmartAIComponent_C*                 Smart_AI;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          Owner_Controller;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_StrafeLocation(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_StrafeLocation_C">();
	}
	static class UBTT_StrafeLocation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_StrafeLocation_C>();
	}
};
static_assert(alignof(UBTT_StrafeLocation_C) == 0x000008, "Wrong alignment on UBTT_StrafeLocation_C");
static_assert(sizeof(UBTT_StrafeLocation_C) == 0x0000C8, "Wrong size on UBTT_StrafeLocation_C");
static_assert(offsetof(UBTT_StrafeLocation_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_StrafeLocation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_StrafeLocation_C, Smart_AI) == 0x0000B0, "Member 'UBTT_StrafeLocation_C::Smart_AI' has a wrong offset!");
static_assert(offsetof(UBTT_StrafeLocation_C, Controlled_Pawn) == 0x0000B8, "Member 'UBTT_StrafeLocation_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UBTT_StrafeLocation_C, Owner_Controller) == 0x0000C0, "Member 'UBTT_StrafeLocation_C::Owner_Controller' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressBarLinear

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EGradientTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "EProgressMethod_structs.hpp"
#include "EMarqueeMethod_structs.hpp"
#include "EMarqueeMask_structs.hpp"
#include "S_Effects_structs.hpp"
#include "WB_Base_classes.hpp"
#include "EEffectLayer_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ProgressBarLinear.ProgressBarLinear_C
// 0x0408 (0x06D0 - 0x02C8)
class UProgressBarLinear_C final : public UWB_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ProgressBarLinear_C;                // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                B_Content;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BackgroundBrush;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BG_Brush_Left;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BG_Brush_Right;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        BlurLeft;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        BlurRight;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Container_Linear_C*                 Container;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        DefaultBlur;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_BG_FillFromCenter;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Effects_Background;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Effects_Foreground;                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PB_FillFromCenter;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Container_Linear_C*                 Left;                                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effect_BG_Left;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effect_BG_Right;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effect_FG_Left;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effect_FG_Right;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effects_Background;                             // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Effects_Foreground;                             // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_ProgressBar;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RB_BlendMask;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Container_Linear_C*                 Right;                                             // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Background;                                     // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_BG_Brush_Left;                                  // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_BG_Brush_Right;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Container;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Content;                                        // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WS_Effects_Background_FillType;                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WS_Effects_Foreground_FillType;                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WS_FillType_BG;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WS_FillType_PB;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Size_Local;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressMethod                               ProgressMethod;                                    // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressMethod                               ProgressMethod_Local;                              // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        QueueDelay;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        QueueDelay_Local;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressBarFillType                          FillType;                                          // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProgressBarFillType                          FillType_Local;                                    // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FillFromCenterSpacing;                             // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentPercent;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentPercent_Local;                              // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpTimeCurrent;                                 // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpTimeCurrent_Local;                           // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FillColorCurrent;                                  // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FillColorCurrent_Local;                            // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FillColorMask;                                     // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FillColorMask_Local;                               // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           FillColorBrushTiling;                              // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           FillColorBrushTiling_Local;                        // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FillColorUseGradient;                              // 0x0462(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTargetPercent;                                  // 0x0463(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTargetPercent_Local;                            // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetPercent;                                     // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetPercent_Local;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpTimeTarget;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpTimeTarget_local;                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetFillColor_Positive;                          // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetFillColor_Positive_Local;                    // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetFillColor_Negative;                          // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundTint;                                    // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpValue;                                       // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewPercent;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OldPercent;                                        // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpValueTarget;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewTargetPercent;                                  // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OldTargetPercent;                                  // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSetTargetPercent;                               // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSetPercent;                                     // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDesignTime;                                     // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FillColorUseGradient_Local;                        // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradientTypes                                FillColorGradientType;                             // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradientTypes                                FillColorGradientType_Local;                       // 0x050D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50E[0x2];                                      // 0x050E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FillColorGradientPower;                            // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundTint_Local;                              // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             BackgroundMask;                                    // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             BackgroundMask_Local;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           BackgroundBrushTiling;                             // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           BackgroundBrushTiling_Local;                       // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BackgroundThickness;                               // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FillFromCenterSpacing_Local;                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             BlendMask;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCustomMarquee;                                 // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCustomMarquee_Local;                           // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarqueeMethod                                CustomMarqueeMethod;                               // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarqueeMethod                                CustomMarqueeMethod_Local;                         // 0x055B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CustomMarqueeSpeed;                                // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CustomMarqueeSpeed_Local;                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CustomMarqueeTint;                                 // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CustomMarqueeTint_Local;                           // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarqueeMask                                  CustomMarqueeMaskType;                             // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarqueeMask                                  CustomMarqueeMaskType_Local;                       // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CustomMarqueeMask;                                 // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CustomMarqueeMask_Local;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           CustomMarqueeMaskTiling;                           // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDefaultMarquee;                                // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDefaultMarquee_Local;                          // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AB[0x5];                                      // 0x05AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DefaultMarquee_Image;                              // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             DefaultMarquee_Image_Local;                        // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DefaultMarquee_ImageSize;                          // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DefaultMarquee_ImageSize_Local;                    // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultMarquee_Tint;                               // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultMarquee_Tint_Local;                         // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushDrawType                           DefaultMarquee_DrawAs;                             // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushDrawType                           DefaultMarquee_DrawAs_Local;                       // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           DefaultMarquee_Tiling;                             // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603[0x1];                                      // 0x0603(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Separation_Steps;                                  // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Separation_Steps_Local;                            // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Separation_Steps_Spacing;                          // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSeparated;                                      // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Separation_Steps_Spacing_Local;                    // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Separation_AbsoluteFillMethod;                     // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LocalSize;                                         // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_Effects>                     Effects;                                           // 0x0640(0x0010)(Edit, BlueprintVisible)
	double                                        BackgroundThickness_Local;                         // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BackgroundBlurStrength;                            // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Effect_C*                           CurrentEffectWidget;                               // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Percent)> OnPercentChanged;                                  // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             BlendMask_Local;                                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FillColorGradientPower_Local;                      // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetFillColor_Negative_Local;                    // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BackgroundBlurStrength_Local;                      // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           CustomMarqueeMaskTiling_Local;                     // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateBrushTileType                           DefaultMarquee_Tiling_Local;                       // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Separation_AbsoluteFillMethod_Local;               // 0x06A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A3[0x5];                                      // 0x06A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Effects>                     Effects_Local;                                     // 0x06A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Entries;                                           // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsProgressRunning;                                // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseWithGamePause;                                // 0x06C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseWithGamePause_Local;                          // 0x06CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShaderProgressBar;                              // 0x06CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShaderProgressBar_Local;                        // 0x06CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddEffect(const struct FS_Effects& Effect);
	void AddEntry(double NewPercent_0);
	void ClearEffectLayers(EEffectLayer EffectLayer);
	void Construct();
	void Count_Percent(double Time, double* Value);
	void Count_TargetPercent(double Time, double* Value);
	void CreateEffects();
	void ExecuteEntry(double CurrentEntry);
	void ExecuteUbergraph_ProgressBarLinear(int32 EntryPoint);
	void FindEffectOverlay(EEffectLayer EffectLayer, class UOverlay** Overlay);
	void FindEffectOverlaysCentered(EEffectLayer EffectLayer, TArray<class UOverlay*>* Overlays);
	struct FVector2D FindThicknessSize(double Thickness);
	struct FVector2D FindThicknessSizeCentered(double Thickness);
	double GetCenterSpacingSize();
	void GetChildren(TArray<class UWB_Container_Linear_C*>* Array);
	void GetEffectOverlays(TArray<class UOverlay*>* Array);
	void GetEntryIndex(int32 Index_0, double* Value);
	double GetFillFromCenterSpacing();
	double GetInterpolationTime();
	void HandlePausedQueue();
	bool HasAnyValueChanged();
	bool HasEffectChanged();
	void InitNextEntry();
	bool IsEffectProgressChangeColor(const struct FS_Effects& Effect);
	bool IsFillTypeFillFromCenter();
	bool IsFillTypeTopOrBottom();
	bool IsProgressMethodInterpolated();
	bool IsProgressMethodStatic();
	bool IsValidEntryIndex(int32 IndexToTest);
	bool NotEqualColor(const struct FLinearColor& A, const struct FLinearColor& B);
	void PB_AddEffect(const struct FS_Effects& Effect, int32* Index_0);
	void PB_GetEffects(TArray<struct FS_Effects>* Effects_0);
	void PB_GetFillColor(struct FLinearColor* Color);
	void PB_GetInterpTimeCurrent(double* CurrentInterpTime);
	void PB_GetInterpTimeTarget(double* TargetInterpTime);
	void PB_GetIsCustomMarquee(bool* IsMarquee);
	void PB_GetIsMarquee(bool* IsMarquee);
	void PB_GetPercent(double* Percent);
	void PB_GetProgressMethod(EProgressMethod* EProgressMethod);
	void PB_GetSeparationSteps(int32* Steps);
	void PB_GetSize(struct FVector2D* Size_0);
	void PB_GetTargetFillColor_Negative(struct FLinearColor* Color);
	void PB_GetTargetFillColor_Positive(struct FLinearColor* Color);
	void PB_GetTargetPercent(double* TargetPercent_0);
	void PB_GetUseGradientFillColor(bool* UseGradientFillColor);
	void PB_GetUseTargetPercent(bool* UseTargetPercent_0);
	void PB_RemoveEffect(int32 Index_0);
	void PB_SetAllEffectsEnabled(bool IsEnabled);
	void PB_SetBackgroundBlurStrength(double BlurStrength);
	void PB_SetBackgroundBrushTiling(ESlateBrushTileType Tiling);
	void PB_SetBackgroundColor(const struct FLinearColor& Color);
	void PB_SetBackgroundColorMask(class UTexture2D* Mask);
	void PB_SetBlendMask(class UTexture2D* BlendMask_0);
	void PB_SetCustomMarqueeImage(class UTexture2D* Image);
	void PB_SetCustomMarqueeMaskType(EMarqueeMask MaskType);
	void PB_SetEffectEnabled(int32 Index_0, bool IsEnabled);
	void PB_SetEffects(const TArray<struct FS_Effects>& Effects_0);
	void PB_SetFillColor(const struct FLinearColor& Color);
	void PB_SetFillColorBrushTiling(ESlateBrushTileType Tiling);
	void PB_SetFillColorGradientPower(double GradientPower);
	void PB_SetFillColorGradientType(EGradientTypes GradientType);
	void PB_SetFillColorMask(class UObject* Mask);
	void PB_SetFillFromCenterSpacing(double Spacing);
	void PB_SetFillType(EProgressBarFillType FillType_0);
	void PB_SetInterpTimeCurrent(double CurrentInterpTime);
	void PB_SetInterpTimeTarget(double TargetInterpTime);
	void PB_SetIsCustomMarquee(bool IsMarquee);
	void PB_SetIsMarquee(bool IsMarquee);
	void PB_SetMarqueeImage(class UTexture2D* Image);
	void PB_SetPercent(double Value);
	void PB_SetProgressMethod(EProgressMethod EProgressMethod);
	void PB_SetSeparationAbsoluteFill(bool AbsoluteFillMethod);
	void PB_SetSeparationSteps(int32 Steps);
	void PB_SetSeparationStepsSpacing(double Spacing);
	void PB_SetSize(const struct FVector2D& Size_0);
	void PB_SetTargetFillColor_Negative(const struct FLinearColor& Color);
	void PB_SetTargetFillColor_Positive(const struct FLinearColor& Color);
	void PB_SetTargetPercent(double TargetPercent_0);
	void PB_SetThickness(double Thickness);
	void PB_SetUseGradientFillColor(bool UseGradientFillColor);
	void PB_SetUseTargetPercent(bool UseTargetPercent_0);
	void PreConstruct(bool IsDesignTime);
	void Reconstruct();
	void RemoveEntryIndex(int32 IndexToRemove);
	void Reset();
	void SendPercentToEffects(class UOverlay* EffectsOverlay, double Percent);
	void Separation_AddBackground(const struct FLinearColor& Color);
	void Separation_AddSegments(int32 NumSegments, double Spacing, const struct FVector2D& Size_0, const struct FLinearColor& FillColor, EProgressBarFillType FillType_0);
	void Separation_SetUseAbsoluteFillValue(bool bAbsoluteFill);
	void SetBackgroundBlur(bool UseBackgroundBlur, double BackgroundBlurStrength_0);
	void SetBackgroundColor(class UTexture2D* BackgroundColorMask, ESlateBrushTileType In_Brush_Tiling, const struct FLinearColor& Color);
	void SetBackgroundColorMask(class UTexture2D* Brush, ESlateBrushTileType In_Brush_Tiling);
	void SetBarFillType(EProgressBarFillType FillType_0, bool bUseShader);
	void SetBlendMask(class UTexture* Value);
	void SetBlurEnabledCentered(bool bInIsEnabled);
	void SetBlurEnabledDefault(bool bInIsEnabled);
	void SetBlurStrengthCentered(double InStrength);
	void SetBlurStrengthDefault(double InStrength);
	void SetCenterSpacing(double PaddingValue);
	void SetCenterSpacing_BG(double PaddingValue);
	void SetCenterSpacing_Effects(double PaddingValue);
	void SetCurrentCustomMarqueePercent();
	void SetDefaultMarquee_DrawAs(ESlateBrushDrawType Draw_As);
	void SetDefaultMarquee_Image(class UTexture2D* Image);
	void SetDefaultMarquee_ImageSize(const struct FVector2D& Image_Size);
	void SetDefaultMarquee_IsMarquee(bool IsMarquee);
	void SetDefaultMarquee_Tiling(ESlateBrushTileType Tiling);
	void SetDefaultMarquee_Tint(const struct FLinearColor& Tint);
	void SetFillColor(const struct FLinearColor& Color, double GradientPower, ESlateBrushTileType Tiling);
	void SetFillColorMask(class UObject* Value);
	void SetGradientMask(EGradientTypes GradientType);
	void SetLocalVariables();
	void SetOverallBlendMask(class UTexture2D* BlendMask_0);
	void SetPercentInterpolated(double NewPercent_0);
	void SetProgressMethod(EProgressMethod ProgressMethod_0);
	void SetSize(const struct FVector2D& Size_0);
	void SetSize_BGBrushLeftRight(const struct FVector2D& Size_0);
	void SetTargetFillColorNegative(const struct FLinearColor& Color);
	void SetTargetFillColorPositive(const struct FLinearColor& Color);
	void SetTargetPercent(bool UseTargetPercent_0, double TargetPercent_0);
	void SetUseGradient(bool UseGradient);
	void StartTriggerProgressChangeColor(const struct FLinearColor& Color);
	void StopTriggerProgressChangeColor();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Transfer_CurrentPercent(double Percent);
	void Transfer_TargetPercent(double TargetPercent_0);
	void Transfer_UseTargetPercent(bool UseTargetPercent_0);
	void UpdateCustomMarquee(bool bIsMarquee, EMarqueeMethod MarqueeMethod);
	void UpdateCustomMarqueeColor(const struct FLinearColor& InColorAndOpacity);
	void UpdateCustomMarqueeMask(EMarqueeMask MaskType, class UTexture2D* Mask, ESlateBrushTileType MaskTiling);
	void UpdateCustomMarqueeSpeed(double Speed);
	void UpdateInterpolation();
	void UpdatePercent(double Percent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProgressBarLinear_C">();
	}
	static class UProgressBarLinear_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressBarLinear_C>();
	}
};
static_assert(alignof(UProgressBarLinear_C) == 0x000008, "Wrong alignment on UProgressBarLinear_C");
static_assert(sizeof(UProgressBarLinear_C) == 0x0006D0, "Wrong size on UProgressBarLinear_C");
static_assert(offsetof(UProgressBarLinear_C, UberGraphFrame_ProgressBarLinear_C) == 0x0002C8, "Member 'UProgressBarLinear_C::UberGraphFrame_ProgressBarLinear_C' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, B_Content) == 0x0002D0, "Member 'UProgressBarLinear_C::B_Content' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundBrush) == 0x0002D8, "Member 'UProgressBarLinear_C::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BG_Brush_Left) == 0x0002E0, "Member 'UProgressBarLinear_C::BG_Brush_Left' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BG_Brush_Right) == 0x0002E8, "Member 'UProgressBarLinear_C::BG_Brush_Right' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BlurLeft) == 0x0002F0, "Member 'UProgressBarLinear_C::BlurLeft' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BlurRight) == 0x0002F8, "Member 'UProgressBarLinear_C::BlurRight' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Container) == 0x000300, "Member 'UProgressBarLinear_C::Container' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultBlur) == 0x000308, "Member 'UProgressBarLinear_C::DefaultBlur' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, HB_BG_FillFromCenter) == 0x000310, "Member 'UProgressBarLinear_C::HB_BG_FillFromCenter' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, HB_Effects_Background) == 0x000318, "Member 'UProgressBarLinear_C::HB_Effects_Background' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, HB_Effects_Foreground) == 0x000320, "Member 'UProgressBarLinear_C::HB_Effects_Foreground' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, HB_PB_FillFromCenter) == 0x000328, "Member 'UProgressBarLinear_C::HB_PB_FillFromCenter' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Left) == 0x000330, "Member 'UProgressBarLinear_C::Left' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effect_BG_Left) == 0x000338, "Member 'UProgressBarLinear_C::OV_Effect_BG_Left' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effect_BG_Right) == 0x000340, "Member 'UProgressBarLinear_C::OV_Effect_BG_Right' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effect_FG_Left) == 0x000348, "Member 'UProgressBarLinear_C::OV_Effect_FG_Left' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effect_FG_Right) == 0x000350, "Member 'UProgressBarLinear_C::OV_Effect_FG_Right' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effects_Background) == 0x000358, "Member 'UProgressBarLinear_C::OV_Effects_Background' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_Effects_Foreground) == 0x000360, "Member 'UProgressBarLinear_C::OV_Effects_Foreground' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OV_ProgressBar) == 0x000368, "Member 'UProgressBarLinear_C::OV_ProgressBar' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, RB_BlendMask) == 0x000370, "Member 'UProgressBarLinear_C::RB_BlendMask' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Right) == 0x000378, "Member 'UProgressBarLinear_C::Right' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, SB_Background) == 0x000380, "Member 'UProgressBarLinear_C::SB_Background' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, SB_BG_Brush_Left) == 0x000388, "Member 'UProgressBarLinear_C::SB_BG_Brush_Left' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, SB_BG_Brush_Right) == 0x000390, "Member 'UProgressBarLinear_C::SB_BG_Brush_Right' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, SB_Container) == 0x000398, "Member 'UProgressBarLinear_C::SB_Container' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, SB_Content) == 0x0003A0, "Member 'UProgressBarLinear_C::SB_Content' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, WS_Effects_Background_FillType) == 0x0003A8, "Member 'UProgressBarLinear_C::WS_Effects_Background_FillType' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, WS_Effects_Foreground_FillType) == 0x0003B0, "Member 'UProgressBarLinear_C::WS_Effects_Foreground_FillType' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, WS_FillType_BG) == 0x0003B8, "Member 'UProgressBarLinear_C::WS_FillType_BG' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, WS_FillType_PB) == 0x0003C0, "Member 'UProgressBarLinear_C::WS_FillType_PB' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Size) == 0x0003C8, "Member 'UProgressBarLinear_C::Size' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Size_Local) == 0x0003D8, "Member 'UProgressBarLinear_C::Size_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, ProgressMethod) == 0x0003E8, "Member 'UProgressBarLinear_C::ProgressMethod' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, ProgressMethod_Local) == 0x0003E9, "Member 'UProgressBarLinear_C::ProgressMethod_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, QueueDelay) == 0x0003F0, "Member 'UProgressBarLinear_C::QueueDelay' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, QueueDelay_Local) == 0x0003F8, "Member 'UProgressBarLinear_C::QueueDelay_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillType) == 0x000400, "Member 'UProgressBarLinear_C::FillType' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillType_Local) == 0x000401, "Member 'UProgressBarLinear_C::FillType_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillFromCenterSpacing) == 0x000408, "Member 'UProgressBarLinear_C::FillFromCenterSpacing' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CurrentPercent) == 0x000410, "Member 'UProgressBarLinear_C::CurrentPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CurrentPercent_Local) == 0x000418, "Member 'UProgressBarLinear_C::CurrentPercent_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpTimeCurrent) == 0x000420, "Member 'UProgressBarLinear_C::InterpTimeCurrent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpTimeCurrent_Local) == 0x000428, "Member 'UProgressBarLinear_C::InterpTimeCurrent_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorCurrent) == 0x000430, "Member 'UProgressBarLinear_C::FillColorCurrent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorCurrent_Local) == 0x000440, "Member 'UProgressBarLinear_C::FillColorCurrent_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorMask) == 0x000450, "Member 'UProgressBarLinear_C::FillColorMask' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorMask_Local) == 0x000458, "Member 'UProgressBarLinear_C::FillColorMask_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorBrushTiling) == 0x000460, "Member 'UProgressBarLinear_C::FillColorBrushTiling' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorBrushTiling_Local) == 0x000461, "Member 'UProgressBarLinear_C::FillColorBrushTiling_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorUseGradient) == 0x000462, "Member 'UProgressBarLinear_C::FillColorUseGradient' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, UseTargetPercent) == 0x000463, "Member 'UProgressBarLinear_C::UseTargetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, UseTargetPercent_Local) == 0x000464, "Member 'UProgressBarLinear_C::UseTargetPercent_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetPercent) == 0x000468, "Member 'UProgressBarLinear_C::TargetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetPercent_Local) == 0x000470, "Member 'UProgressBarLinear_C::TargetPercent_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpTimeTarget) == 0x000478, "Member 'UProgressBarLinear_C::InterpTimeTarget' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpTimeTarget_local) == 0x000480, "Member 'UProgressBarLinear_C::InterpTimeTarget_local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetFillColor_Positive) == 0x000488, "Member 'UProgressBarLinear_C::TargetFillColor_Positive' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetFillColor_Positive_Local) == 0x000498, "Member 'UProgressBarLinear_C::TargetFillColor_Positive_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetFillColor_Negative) == 0x0004A8, "Member 'UProgressBarLinear_C::TargetFillColor_Negative' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundTint) == 0x0004B8, "Member 'UProgressBarLinear_C::BackgroundTint' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Timer) == 0x0004C8, "Member 'UProgressBarLinear_C::Timer' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DeltaTime) == 0x0004D0, "Member 'UProgressBarLinear_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpValue) == 0x0004D8, "Member 'UProgressBarLinear_C::InterpValue' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, NewPercent) == 0x0004E0, "Member 'UProgressBarLinear_C::NewPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OldPercent) == 0x0004E8, "Member 'UProgressBarLinear_C::OldPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, InterpValueTarget) == 0x0004F0, "Member 'UProgressBarLinear_C::InterpValueTarget' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, NewTargetPercent) == 0x0004F8, "Member 'UProgressBarLinear_C::NewTargetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OldTargetPercent) == 0x000500, "Member 'UProgressBarLinear_C::OldTargetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CanSetTargetPercent) == 0x000508, "Member 'UProgressBarLinear_C::CanSetTargetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CanSetPercent) == 0x000509, "Member 'UProgressBarLinear_C::CanSetPercent' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bIsDesignTime) == 0x00050A, "Member 'UProgressBarLinear_C::bIsDesignTime' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorUseGradient_Local) == 0x00050B, "Member 'UProgressBarLinear_C::FillColorUseGradient_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorGradientType) == 0x00050C, "Member 'UProgressBarLinear_C::FillColorGradientType' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorGradientType_Local) == 0x00050D, "Member 'UProgressBarLinear_C::FillColorGradientType_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorGradientPower) == 0x000510, "Member 'UProgressBarLinear_C::FillColorGradientPower' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundTint_Local) == 0x000518, "Member 'UProgressBarLinear_C::BackgroundTint_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundMask) == 0x000528, "Member 'UProgressBarLinear_C::BackgroundMask' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundMask_Local) == 0x000530, "Member 'UProgressBarLinear_C::BackgroundMask_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundBrushTiling) == 0x000538, "Member 'UProgressBarLinear_C::BackgroundBrushTiling' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundBrushTiling_Local) == 0x000539, "Member 'UProgressBarLinear_C::BackgroundBrushTiling_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundThickness) == 0x000540, "Member 'UProgressBarLinear_C::BackgroundThickness' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillFromCenterSpacing_Local) == 0x000548, "Member 'UProgressBarLinear_C::FillFromCenterSpacing_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BlendMask) == 0x000550, "Member 'UProgressBarLinear_C::BlendMask' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bUseCustomMarquee) == 0x000558, "Member 'UProgressBarLinear_C::bUseCustomMarquee' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bUseCustomMarquee_Local) == 0x000559, "Member 'UProgressBarLinear_C::bUseCustomMarquee_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMethod) == 0x00055A, "Member 'UProgressBarLinear_C::CustomMarqueeMethod' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMethod_Local) == 0x00055B, "Member 'UProgressBarLinear_C::CustomMarqueeMethod_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeSpeed) == 0x000560, "Member 'UProgressBarLinear_C::CustomMarqueeSpeed' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeSpeed_Local) == 0x000568, "Member 'UProgressBarLinear_C::CustomMarqueeSpeed_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeTint) == 0x000570, "Member 'UProgressBarLinear_C::CustomMarqueeTint' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeTint_Local) == 0x000580, "Member 'UProgressBarLinear_C::CustomMarqueeTint_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMaskType) == 0x000590, "Member 'UProgressBarLinear_C::CustomMarqueeMaskType' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMaskType_Local) == 0x000591, "Member 'UProgressBarLinear_C::CustomMarqueeMaskType_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMask) == 0x000598, "Member 'UProgressBarLinear_C::CustomMarqueeMask' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMask_Local) == 0x0005A0, "Member 'UProgressBarLinear_C::CustomMarqueeMask_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMaskTiling) == 0x0005A8, "Member 'UProgressBarLinear_C::CustomMarqueeMaskTiling' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bUseDefaultMarquee) == 0x0005A9, "Member 'UProgressBarLinear_C::bUseDefaultMarquee' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bUseDefaultMarquee_Local) == 0x0005AA, "Member 'UProgressBarLinear_C::bUseDefaultMarquee_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Image) == 0x0005B0, "Member 'UProgressBarLinear_C::DefaultMarquee_Image' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Image_Local) == 0x0005B8, "Member 'UProgressBarLinear_C::DefaultMarquee_Image_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_ImageSize) == 0x0005C0, "Member 'UProgressBarLinear_C::DefaultMarquee_ImageSize' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_ImageSize_Local) == 0x0005D0, "Member 'UProgressBarLinear_C::DefaultMarquee_ImageSize_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Tint) == 0x0005E0, "Member 'UProgressBarLinear_C::DefaultMarquee_Tint' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Tint_Local) == 0x0005F0, "Member 'UProgressBarLinear_C::DefaultMarquee_Tint_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_DrawAs) == 0x000600, "Member 'UProgressBarLinear_C::DefaultMarquee_DrawAs' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_DrawAs_Local) == 0x000601, "Member 'UProgressBarLinear_C::DefaultMarquee_DrawAs_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Tiling) == 0x000602, "Member 'UProgressBarLinear_C::DefaultMarquee_Tiling' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_Steps) == 0x000604, "Member 'UProgressBarLinear_C::Separation_Steps' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_Steps_Local) == 0x000608, "Member 'UProgressBarLinear_C::Separation_Steps_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_Steps_Spacing) == 0x000610, "Member 'UProgressBarLinear_C::Separation_Steps_Spacing' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bIsSeparated) == 0x000618, "Member 'UProgressBarLinear_C::bIsSeparated' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_Steps_Spacing_Local) == 0x000620, "Member 'UProgressBarLinear_C::Separation_Steps_Spacing_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_AbsoluteFillMethod) == 0x000628, "Member 'UProgressBarLinear_C::Separation_AbsoluteFillMethod' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, LocalSize) == 0x000630, "Member 'UProgressBarLinear_C::LocalSize' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Effects) == 0x000640, "Member 'UProgressBarLinear_C::Effects' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundThickness_Local) == 0x000650, "Member 'UProgressBarLinear_C::BackgroundThickness_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundBlurStrength) == 0x000658, "Member 'UProgressBarLinear_C::BackgroundBlurStrength' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CurrentEffectWidget) == 0x000660, "Member 'UProgressBarLinear_C::CurrentEffectWidget' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, OnPercentChanged) == 0x000668, "Member 'UProgressBarLinear_C::OnPercentChanged' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BlendMask_Local) == 0x000678, "Member 'UProgressBarLinear_C::BlendMask_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, FillColorGradientPower_Local) == 0x000680, "Member 'UProgressBarLinear_C::FillColorGradientPower_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, TargetFillColor_Negative_Local) == 0x000688, "Member 'UProgressBarLinear_C::TargetFillColor_Negative_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, BackgroundBlurStrength_Local) == 0x000698, "Member 'UProgressBarLinear_C::BackgroundBlurStrength_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, CustomMarqueeMaskTiling_Local) == 0x0006A0, "Member 'UProgressBarLinear_C::CustomMarqueeMaskTiling_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, DefaultMarquee_Tiling_Local) == 0x0006A1, "Member 'UProgressBarLinear_C::DefaultMarquee_Tiling_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Separation_AbsoluteFillMethod_Local) == 0x0006A2, "Member 'UProgressBarLinear_C::Separation_AbsoluteFillMethod_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Effects_Local) == 0x0006A8, "Member 'UProgressBarLinear_C::Effects_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, Entries) == 0x0006B8, "Member 'UProgressBarLinear_C::Entries' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, bIsProgressRunning) == 0x0006C8, "Member 'UProgressBarLinear_C::bIsProgressRunning' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, PauseWithGamePause) == 0x0006C9, "Member 'UProgressBarLinear_C::PauseWithGamePause' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, PauseWithGamePause_Local) == 0x0006CA, "Member 'UProgressBarLinear_C::PauseWithGamePause_Local' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, UseShaderProgressBar) == 0x0006CB, "Member 'UProgressBarLinear_C::UseShaderProgressBar' has a wrong offset!");
static_assert(offsetof(UProgressBarLinear_C, UseShaderProgressBar_Local) == 0x0006CC, "Member 'UProgressBarLinear_C::UseShaderProgressBar_Local' has a wrong offset!");

}


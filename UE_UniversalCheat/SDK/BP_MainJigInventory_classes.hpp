#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MainJigInventory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MainJigInventory.BP_MainJigInventory_C
// 0x00C0 (0x0380 - 0x02C0)
class UBP_MainJigInventory_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UJSIContainer_C*>                Priv_Containers;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UJSIContainer_C*>                Priv_ExcludedContainers;                           // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UUserWidget*                            Priv_CurrentLootWidget;                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_EquipToContent_C*                   Priv_LootContentTarget;                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Priv_PreviewChar;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_EquipToContent_C*>           Priv_ContentAdded;                                 // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UPanelWidget*                           Priv_EquipmentContentPanel;                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharPreview_C*                      Priv_CharPreview;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UJSIContainer_C*, class UJSIContainer_C*> Priv_SwapContainers;                               // 0x0320(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 Priv_PreviewCharClass;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Priv_OnCloseClearLootWidget_;                      // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void Destruct();
	void Drop_ItemOverItem_Event_0(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void DropInfo_OnItemEquippedChange_Event(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_);
	void ExecuteUbergraph_BP_MainJigInventory(int32 EntryPoint);
	void ForceInitSpecialcontainer();
	void GetAllAttachments(TArray<class FName>* Attachments);
	void GetContainerByAttachmentType(const struct FGameplayTag& Type, class UJSIContainer_C** JigContainer, int32* ContainerIndex);
	void GetContentPanelBySlot(const struct FGameplayTag& Tag, class UPanelWidget** Result);
	void GetDropWidget(class UDropItemBackGwidget_C** DropWRef);
	void GetInventoryData(TArray<class UJSIContainer_C*>* Containers, TArray<class UJSIContainer_C*>* ExcludedContainers, class UBP_EquipToContent_C** LootContentTarget, bool* OnCloseClearLootWidget_, class UPanelWidget** EquipmentContentPanel, TMap<class UJSIContainer_C*, class UJSIContainer_C*>* SwapContainers, class UBP_CharPreview_C** CharacterPreviewWidget, class UClass** PreviewCharClass);
	void GetJSIContainerByPlayerSlots(const struct FGameplayTag& Slot_0, class UJSIContainer_C** Container, class UJSI_Slot_C** EquippedItem, bool* IsPending_);
	void GetListOfNonAddContainers(TArray<class UJSIContainer_C*>* Containers);
	void GetLootContent(class UUserWidget** Widget);
	void GetValidReloadContainers(TArray<class UJSIContainer_C*>* Containers);
	void HandleEquipmentContent(class UJSIContainer_C* Target);
	void HandlePrimarySecondarySwap(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void JigSetLootContent(class UUserWidget* Widget, const class FText& Name_0);
	void JSICheckStatus();
	void JSIOnWeightUpdated(double NewWeight);
	void OnCreatedFromUtility();
	void Removed(bool Added_);
	void SetActionbarFollower(class UJSI_Slot_C* JigRef, bool* Return);
	void SetActorOwner(class AActor* ActorRef);
	void SetInspectorRef(class UBP_InspectorWindowWidget_C* Inspector);
	void SetItemReference(class UJSI_Slot_C* ItemRef);
	void SpawnCharacterPreview();
	void UpdatePreviewCharacter(class UJSIContainer_C* ContainerRef, class UJSIContainer_C* ToContainer, bool Equipped_);

	void GetListOfContainers(TArray<class UJSIContainer_C*>* Containers) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MainJigInventory_C">();
	}
	static class UBP_MainJigInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MainJigInventory_C>();
	}
};
static_assert(alignof(UBP_MainJigInventory_C) == 0x000008, "Wrong alignment on UBP_MainJigInventory_C");
static_assert(sizeof(UBP_MainJigInventory_C) == 0x000380, "Wrong size on UBP_MainJigInventory_C");
static_assert(offsetof(UBP_MainJigInventory_C, UberGraphFrame) == 0x0002C0, "Member 'UBP_MainJigInventory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_Containers) == 0x0002C8, "Member 'UBP_MainJigInventory_C::Priv_Containers' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_ExcludedContainers) == 0x0002D8, "Member 'UBP_MainJigInventory_C::Priv_ExcludedContainers' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_CurrentLootWidget) == 0x0002E8, "Member 'UBP_MainJigInventory_C::Priv_CurrentLootWidget' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_LootContentTarget) == 0x0002F0, "Member 'UBP_MainJigInventory_C::Priv_LootContentTarget' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_PreviewChar) == 0x0002F8, "Member 'UBP_MainJigInventory_C::Priv_PreviewChar' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_ContentAdded) == 0x000300, "Member 'UBP_MainJigInventory_C::Priv_ContentAdded' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_EquipmentContentPanel) == 0x000310, "Member 'UBP_MainJigInventory_C::Priv_EquipmentContentPanel' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_CharPreview) == 0x000318, "Member 'UBP_MainJigInventory_C::Priv_CharPreview' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_SwapContainers) == 0x000320, "Member 'UBP_MainJigInventory_C::Priv_SwapContainers' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_PreviewCharClass) == 0x000370, "Member 'UBP_MainJigInventory_C::Priv_PreviewCharClass' has a wrong offset!");
static_assert(offsetof(UBP_MainJigInventory_C, Priv_OnCloseClearLootWidget_) == 0x000378, "Member 'UBP_MainJigInventory_C::Priv_OnCloseClearLootWidget_' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Save_Difficulties

#include "Basic.hpp"

#include "EasyMultiSave_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Save_Difficulties.Save_Difficulties_C
// 0x0140 (0x0190 - 0x0050)
class USave_Difficulties_C final : public UEMSCustomSaveGame
{
public:
	bool                                          Permadeath;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LootRefill;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        XpMultiplier;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Airdrop;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeneralLoot;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melee;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ranged;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Food_Drink;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Medical;                                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Equipment;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clothing;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attachments;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ammo;                                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crafting;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HungerMultiplier;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstMultiplier;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FuelMultiplier;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DamageMultiplier;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DayLength;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightLength;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomEventMultiplier;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AiRespawnTimer;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaMultiplier;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaRecoveryMultiplier;                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieDamage;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieSpeed;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieHealth;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieAmount;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieBossAmount;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BanditHealth;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BanditCampMultiplier;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScavengerHealth;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScavengerCampMultiplier;                           // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MilitaryHealth;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MilitaryCampMultiplier;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PassiveSkillsReset;                                // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimalAmount;                                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InfestationsMultiplier;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InfestationsHealth;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightBrightness;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Keycards;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LegendaryWeapons;                                  // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LegendaryGear;                                     // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefillTime;                                        // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BackpackInBackpack;                                // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LevelScalingEnabled;                               // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ScalingHealth;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScalingDamage;                                     // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowDifficultyChange;                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void LoadDifficulties();
	void SaveDifficulties();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Save_Difficulties_C">();
	}
	static class USave_Difficulties_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USave_Difficulties_C>();
	}
};
static_assert(alignof(USave_Difficulties_C) == 0x000008, "Wrong alignment on USave_Difficulties_C");
static_assert(sizeof(USave_Difficulties_C) == 0x000190, "Wrong size on USave_Difficulties_C");
static_assert(offsetof(USave_Difficulties_C, Permadeath) == 0x000050, "Member 'USave_Difficulties_C::Permadeath' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, LootRefill) == 0x000051, "Member 'USave_Difficulties_C::LootRefill' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, XpMultiplier) == 0x000058, "Member 'USave_Difficulties_C::XpMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Airdrop) == 0x000060, "Member 'USave_Difficulties_C::Airdrop' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, GeneralLoot) == 0x000064, "Member 'USave_Difficulties_C::GeneralLoot' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Melee) == 0x000068, "Member 'USave_Difficulties_C::Melee' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Ranged) == 0x00006C, "Member 'USave_Difficulties_C::Ranged' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Food_Drink) == 0x000070, "Member 'USave_Difficulties_C::Food_Drink' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Medical) == 0x000074, "Member 'USave_Difficulties_C::Medical' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Equipment) == 0x000078, "Member 'USave_Difficulties_C::Equipment' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Clothing) == 0x00007C, "Member 'USave_Difficulties_C::Clothing' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Attachments) == 0x000080, "Member 'USave_Difficulties_C::Attachments' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Ammo) == 0x000084, "Member 'USave_Difficulties_C::Ammo' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Crafting) == 0x000088, "Member 'USave_Difficulties_C::Crafting' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, HungerMultiplier) == 0x000090, "Member 'USave_Difficulties_C::HungerMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ThirstMultiplier) == 0x000098, "Member 'USave_Difficulties_C::ThirstMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, FuelMultiplier) == 0x0000A0, "Member 'USave_Difficulties_C::FuelMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, DamageMultiplier) == 0x0000A8, "Member 'USave_Difficulties_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, DayLength) == 0x0000B0, "Member 'USave_Difficulties_C::DayLength' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, NightLength) == 0x0000B8, "Member 'USave_Difficulties_C::NightLength' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, RandomEventMultiplier) == 0x0000C0, "Member 'USave_Difficulties_C::RandomEventMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, AiRespawnTimer) == 0x0000C8, "Member 'USave_Difficulties_C::AiRespawnTimer' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, StaminaMultiplier) == 0x0000D0, "Member 'USave_Difficulties_C::StaminaMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, StaminaRecoveryMultiplier) == 0x0000D8, "Member 'USave_Difficulties_C::StaminaRecoveryMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ZombieDamage) == 0x0000E0, "Member 'USave_Difficulties_C::ZombieDamage' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ZombieSpeed) == 0x0000E8, "Member 'USave_Difficulties_C::ZombieSpeed' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ZombieHealth) == 0x0000F0, "Member 'USave_Difficulties_C::ZombieHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ZombieAmount) == 0x0000F8, "Member 'USave_Difficulties_C::ZombieAmount' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ZombieBossAmount) == 0x000100, "Member 'USave_Difficulties_C::ZombieBossAmount' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, BanditHealth) == 0x000108, "Member 'USave_Difficulties_C::BanditHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, BanditCampMultiplier) == 0x000110, "Member 'USave_Difficulties_C::BanditCampMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ScavengerHealth) == 0x000118, "Member 'USave_Difficulties_C::ScavengerHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ScavengerCampMultiplier) == 0x000120, "Member 'USave_Difficulties_C::ScavengerCampMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, MilitaryHealth) == 0x000128, "Member 'USave_Difficulties_C::MilitaryHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, MilitaryCampMultiplier) == 0x000130, "Member 'USave_Difficulties_C::MilitaryCampMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, PassiveSkillsReset) == 0x000138, "Member 'USave_Difficulties_C::PassiveSkillsReset' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, AnimalAmount) == 0x000140, "Member 'USave_Difficulties_C::AnimalAmount' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, InfestationsMultiplier) == 0x000148, "Member 'USave_Difficulties_C::InfestationsMultiplier' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, InfestationsHealth) == 0x000150, "Member 'USave_Difficulties_C::InfestationsHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, NightBrightness) == 0x000158, "Member 'USave_Difficulties_C::NightBrightness' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, Keycards) == 0x000160, "Member 'USave_Difficulties_C::Keycards' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, LegendaryWeapons) == 0x000164, "Member 'USave_Difficulties_C::LegendaryWeapons' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, LegendaryGear) == 0x000168, "Member 'USave_Difficulties_C::LegendaryGear' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, RefillTime) == 0x00016C, "Member 'USave_Difficulties_C::RefillTime' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, BackpackInBackpack) == 0x000170, "Member 'USave_Difficulties_C::BackpackInBackpack' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, LevelScalingEnabled) == 0x000171, "Member 'USave_Difficulties_C::LevelScalingEnabled' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ScalingHealth) == 0x000178, "Member 'USave_Difficulties_C::ScalingHealth' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, ScalingDamage) == 0x000180, "Member 'USave_Difficulties_C::ScalingDamage' has a wrong offset!");
static_assert(offsetof(USave_Difficulties_C, AllowDifficultyChange) == 0x000188, "Member 'USave_Difficulties_C::AllowDifficultyChange' has a wrong offset!");

}

